
PortableGeneratorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000723c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007508  08007508  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007510  08007510  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  2000006c  08007584  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08007584  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d97e  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a5  00000000  00000000  0003da63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a00  00000000  00000000  00040e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001468  00000000  00000000  00042808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cab0  00000000  00000000  00043c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e76f  00000000  00000000  00070720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00124275  00000000  00000000  0008ee8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000760c  00000000  00000000  001b3104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001ba710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000006c 	.word	0x2000006c
 8000210:	00000000 	.word	0x00000000
 8000214:	08007418 	.word	0x08007418

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000070 	.word	0x20000070
 8000230:	08007418 	.word	0x08007418

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800055e:	4a38      	ldr	r2, [pc, #224]	; (8000640 <HD44780_Init+0xec>)
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000564:	4b37      	ldr	r3, [pc, #220]	; (8000644 <HD44780_Init+0xf0>)
 8000566:	2208      	movs	r2, #8
 8000568:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <HD44780_Init+0xf4>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000570:	4b33      	ldr	r3, [pc, #204]	; (8000640 <HD44780_Init+0xec>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d907      	bls.n	8000588 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000578:	4b33      	ldr	r3, [pc, #204]	; (8000648 <HD44780_Init+0xf4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <HD44780_Init+0xf4>)
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e006      	b.n	8000596 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000588:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <HD44780_Init+0xf4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <HD44780_Init+0xf4>)
 8000594:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000596:	f000 f985 	bl	80008a4 <DelayInit>
  HAL_Delay(50);
 800059a:	2032      	movs	r0, #50	; 0x32
 800059c:	f001 f890 	bl	80016c0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <HD44780_Init+0xf0>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f943 	bl	8000830 <ExpanderWrite>
  HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f001 f887 	bl	80016c0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005b2:	2030      	movs	r0, #48	; 0x30
 80005b4:	f000 f92b 	bl	800080e <Write4Bits>
  DelayUS(4500);
 80005b8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005bc:	f000 f99c 	bl	80008f8 <DelayUS>

  Write4Bits(0x03 << 4);
 80005c0:	2030      	movs	r0, #48	; 0x30
 80005c2:	f000 f924 	bl	800080e <Write4Bits>
  DelayUS(4500);
 80005c6:	f241 1094 	movw	r0, #4500	; 0x1194
 80005ca:	f000 f995 	bl	80008f8 <DelayUS>

  Write4Bits(0x03 << 4);
 80005ce:	2030      	movs	r0, #48	; 0x30
 80005d0:	f000 f91d 	bl	800080e <Write4Bits>
  DelayUS(4500);
 80005d4:	f241 1094 	movw	r0, #4500	; 0x1194
 80005d8:	f000 f98e 	bl	80008f8 <DelayUS>

  Write4Bits(0x02 << 4);
 80005dc:	2020      	movs	r0, #32
 80005de:	f000 f916 	bl	800080e <Write4Bits>
  DelayUS(100);
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f000 f988 	bl	80008f8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HD44780_Init+0xf4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f8ce 	bl	8000794 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HD44780_Init+0xf8>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005fe:	f000 f875 	bl	80006ec <HD44780_Display>
  HD44780_Clear();
 8000602:	f000 f82b 	bl	800065c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HD44780_Init+0xfc>)
 8000608:	2202      	movs	r2, #2
 800060a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HD44780_Init+0xfc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f8bc 	bl	8000794 <SendCommand>
  DelayUS(4500);
 800061c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000620:	f000 f96a 	bl	80008f8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000624:	490b      	ldr	r1, [pc, #44]	; (8000654 <HD44780_Init+0x100>)
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f876 	bl	8000718 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800062c:	490a      	ldr	r1, [pc, #40]	; (8000658 <HD44780_Init+0x104>)
 800062e:	2001      	movs	r0, #1
 8000630:	f000 f872 	bl	8000718 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000634:	f000 f81d 	bl	8000672 <HD44780_Home>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000008b 	.word	0x2000008b
 8000644:	2000008c 	.word	0x2000008c
 8000648:	20000088 	.word	0x20000088
 800064c:	20000089 	.word	0x20000089
 8000650:	2000008a 	.word	0x2000008a
 8000654:	20000000 	.word	0x20000000
 8000658:	20000008 	.word	0x20000008

0800065c <HD44780_Clear>:

void HD44780_Clear()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 f897 	bl	8000794 <SendCommand>
  DelayUS(2000);
 8000666:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066a:	f000 f945 	bl	80008f8 <DelayUS>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}

08000672 <HD44780_Home>:

void HD44780_Home()
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000676:	2002      	movs	r0, #2
 8000678:	f000 f88c 	bl	8000794 <SendCommand>
  DelayUS(2000);
 800067c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000680:	f000 f93a 	bl	80008f8 <DelayUS>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HD44780_SetCursor+0x5c>)
 800069a:	f107 0408 	add.w	r4, r7, #8
 800069e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HD44780_SetCursor+0x60>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	79ba      	ldrb	r2, [r7, #6]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d303      	bcc.n	80006b6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HD44780_SetCursor+0x60>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	3318      	adds	r3, #24
 80006bc:	443b      	add	r3, r7
 80006be:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4413      	add	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f85d 	bl	8000794 <SendCommand>
}
 80006da:	bf00      	nop
 80006dc:	371c      	adds	r7, #28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	bf00      	nop
 80006e4:	08007430 	.word	0x08007430
 80006e8:	2000008b 	.word	0x2000008b

080006ec <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HD44780_Display+0x28>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HD44780_Display+0x28>)
 80006fc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HD44780_Display+0x28>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f843 	bl	8000794 <SendCommand>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000089 	.word	0x20000089

08000718 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	b25b      	sxtb	r3, r3
 8000732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000736:	b25b      	sxtb	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f82a 	bl	8000794 <SendCommand>
  for (int i=0; i<8; i++)
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	e009      	b.n	800075a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f82e 	bl	80007b0 <SendChar>
  for (int i=0; i<8; i++)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3301      	adds	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2b07      	cmp	r3, #7
 800075e:	ddf2      	ble.n	8000746 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000772:	e006      	b.n	8000782 <HD44780_PrintStr+0x18>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f817 	bl	80007b0 <SendChar>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f4      	bne.n	8000774 <HD44780_PrintStr+0xa>
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f812 	bl	80007cc <Send>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f804 	bl	80007cc <Send>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	460a      	mov	r2, r1
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f023 030f 	bic.w	r3, r3, #15
 80007e2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007ea:	7bfa      	ldrb	r2, [r7, #15]
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f80b 	bl	800080e <Write4Bits>
  Write4Bits((lownib)|mode);
 80007f8:	7bba      	ldrb	r2, [r7, #14]
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f804 	bl	800080e <Write4Bits>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f808 	bl	8000830 <ExpanderWrite>
  PulseEnable(value);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f820 	bl	8000868 <PulseEnable>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af02      	add	r7, sp, #8
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <ExpanderWrite+0x30>)
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4313      	orrs	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000846:	f107 020f 	add.w	r2, r7, #15
 800084a:	230a      	movs	r3, #10
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2301      	movs	r3, #1
 8000850:	214e      	movs	r1, #78	; 0x4e
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <ExpanderWrite+0x34>)
 8000854:	f002 fd0e 	bl	8003274 <HAL_I2C_Master_Transmit>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000008c 	.word	0x2000008c
 8000864:	200000f8 	.word	0x200000f8

08000868 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffd8 	bl	8000830 <ExpanderWrite>
  DelayUS(20);
 8000880:	2014      	movs	r0, #20
 8000882:	f000 f839 	bl	80008f8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f023 0304 	bic.w	r3, r3, #4
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffce 	bl	8000830 <ExpanderWrite>
  DelayUS(20);
 8000894:	2014      	movs	r0, #20
 8000896:	f000 f82f 	bl	80008f8 <DelayUS>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <DelayInit>:

static void DelayInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <DelayInit+0x4c>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <DelayInit+0x4c>)
 80008ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008b2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <DelayInit+0x4c>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <DelayInit+0x4c>)
 80008ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008be:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <DelayInit+0x50>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <DelayInit+0x50>)
 80008c6:	f023 0301 	bic.w	r3, r3, #1
 80008ca:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <DelayInit+0x50>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <DelayInit+0x50>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <DelayInit+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008de:	bf00      	nop
  __ASM volatile ("NOP");
 80008e0:	bf00      	nop
  __ASM volatile ("NOP");
 80008e2:	bf00      	nop
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000edf0 	.word	0xe000edf0
 80008f4:	e0001000 	.word	0xe0001000

080008f8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <DelayUS+0x44>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <DelayUS+0x48>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	0c9a      	lsrs	r2, r3, #18
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	fb02 f303 	mul.w	r3, r2, r3
 8000912:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <DelayUS+0x4c>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <DelayUS+0x4c>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f6      	bhi.n	800091a <DelayUS+0x22>
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	371c      	adds	r7, #28
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000010 	.word	0x20000010
 8000940:	431bde83 	.word	0x431bde83
 8000944:	e0001000 	.word	0xe0001000

08000948 <ButtonChangeState>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Button press test
	void ButtonChangeState(void) //Button LED ON/OFF + display test
	{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
		btn_currentstate = 1-btn_currentstate;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <ButtonChangeState+0x54>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	f1c3 0301 	rsb	r3, r3, #1
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <ButtonChangeState+0x54>)
 8000958:	701a      	strb	r2, [r3, #0]

		if (btn_currentstate == 0)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <ButtonChangeState+0x54>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10d      	bne.n	800097e <ButtonChangeState+0x36>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <ButtonChangeState+0x58>)
 800096a:	f002 fbc1 	bl	80030f0 <HAL_GPIO_WritePin>
			HD44780_SetCursor(0,0);
 800096e:	2100      	movs	r1, #0
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fe89 	bl	8000688 <HD44780_SetCursor>
			HD44780_PrintStr("LED ON");
 8000976:	480b      	ldr	r0, [pc, #44]	; (80009a4 <ButtonChangeState+0x5c>)
 8000978:	f7ff fef7 	bl	800076a <HD44780_PrintStr>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
			HD44780_SetCursor(0,0);
			HD44780_PrintStr("LED OFF");
		}
	}
 800097c:	e00b      	b.n	8000996 <ButtonChangeState+0x4e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2110      	movs	r1, #16
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <ButtonChangeState+0x60>)
 8000984:	f002 fbb4 	bl	80030f0 <HAL_GPIO_WritePin>
			HD44780_SetCursor(0,0);
 8000988:	2100      	movs	r1, #0
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe7c 	bl	8000688 <HD44780_SetCursor>
			HD44780_PrintStr("LED OFF");
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <ButtonChangeState+0x64>)
 8000992:	f7ff feea 	bl	800076a <HD44780_PrintStr>
	}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000290 	.word	0x20000290
 80009a0:	42020000 	.word	0x42020000
 80009a4:	08007440 	.word	0x08007440
 80009a8:	42020400 	.word	0x42020400
 80009ac:	08007448 	.word	0x08007448

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// LCD Display initialization
	HD44780_Init(2);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff fdcc 	bl	8000554 <HD44780_Init>

	// Rotary encoder initialization
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80009bc:	213c      	movs	r1, #60	; 0x3c
 80009be:	4830      	ldr	r0, [pc, #192]	; (8000a80 <main+0xd0>)
 80009c0:	f004 fea7 	bl	8005712 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c4:	f000 fe05 	bl	80015d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f864 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f000 fa4a 	bl	8000e64 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009d0:	f000 f9a2 	bl	8000d18 <MX_TIM1_Init>
  MX_I2C1_Init();
 80009d4:	f000 f922 	bl	8000c1c <MX_I2C1_Init>
  MX_UART4_Init();
 80009d8:	f000 f9f8 	bl	8000dcc <MX_UART4_Init>
  MX_SPI1_Init();
 80009dc:	f000 f95e 	bl	8000c9c <MX_SPI1_Init>
  MX_ADC1_Init();
 80009e0:	f000 f8a4 	bl	8000b2c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Button test
	  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11) == GPIO_PIN_RESET) //Button impedance switch
 80009e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e8:	4826      	ldr	r0, [pc, #152]	; (8000a84 <main+0xd4>)
 80009ea:	f002 fb69 	bl	80030c0 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <main+0x48>
	  {
		  ButtonChangeState();
 80009f4:	f7ff ffa8 	bl	8000948 <ButtonChangeState>
	  }

	  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10) == GPIO_PIN_RESET) //Button waveform switch
 80009f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fc:	4821      	ldr	r0, [pc, #132]	; (8000a84 <main+0xd4>)
 80009fe:	f002 fb5f 	bl	80030c0 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d101      	bne.n	8000a0c <main+0x5c>
	 	  {
	 		  ButtonChangeState();
 8000a08:	f7ff ff9e 	bl	8000948 <ButtonChangeState>
	 	  }
	  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2) == GPIO_PIN_RESET) //Button right
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	481d      	ldr	r0, [pc, #116]	; (8000a84 <main+0xd4>)
 8000a10:	f002 fb56 	bl	80030c0 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <main+0x6e>
	 	  {
	 		  ButtonChangeState();
 8000a1a:	f7ff ff95 	bl	8000948 <ButtonChangeState>
	 	  }

	  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET) //Button left
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4818      	ldr	r0, [pc, #96]	; (8000a84 <main+0xd4>)
 8000a22:	f002 fb4d 	bl	80030c0 <HAL_GPIO_ReadPin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d101      	bne.n	8000a30 <main+0x80>
	 	  {
	 		  ButtonChangeState();
 8000a2c:	f7ff ff8c 	bl	8000948 <ButtonChangeState>
	 	  }

	  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET) //Encoder button
 8000a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <main+0xd4>)
 8000a36:	f002 fb43 	bl	80030c0 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <main+0x94>
	 	  {
	 		  ButtonChangeState();
 8000a40:	f7ff ff82 	bl	8000948 <ButtonChangeState>
	 	  }

	  //Rotary encoder test
	  encoderValue=TIM1->CNT;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <main+0xd8>)
 8000a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a48:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <main+0xdc>)
 8000a4a:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <main+0xd4>)
 8000a50:	f002 fb66 	bl	8003120 <HAL_GPIO_TogglePin>
	  HAL_Delay(encoderValue);
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <main+0xdc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fe31 	bl	80016c0 <HAL_Delay>
	  HD44780_SetCursor(0,1);
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fe11 	bl	8000688 <HD44780_SetCursor>
	  char encoderValueStr[10];
	  sprintf(encoderValueStr, "%lu", encoderValue);
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <main+0xdc>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4908      	ldr	r1, [pc, #32]	; (8000a90 <main+0xe0>)
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 f820 	bl	8006ab4 <siprintf>
	  HD44780_PrintStr(encoderValueStr);
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fe77 	bl	800076a <HD44780_PrintStr>
  {
 8000a7c:	e7b2      	b.n	80009e4 <main+0x34>
 8000a7e:	bf00      	nop
 8000a80:	200001b0 	.word	0x200001b0
 8000a84:	42020400 	.word	0x42020400
 8000a88:	40012c00 	.word	0x40012c00
 8000a8c:	20000294 	.word	0x20000294
 8000a90:	08007450 	.word	0x08007450

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b098      	sub	sp, #96	; 0x60
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	2248      	movs	r2, #72	; 0x48
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 f826 	bl	8006af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000ab6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000aba:	f002 ff85 	bl	80039c8 <HAL_PWREx_ControlVoltageScaling>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac4:	f000 fa30 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2340      	movs	r3, #64	; 0x40
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ade:	2360      	movs	r3, #96	; 0x60
 8000ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fffc 	bl	8003ae8 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000af6:	f000 fa17 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2101      	movs	r1, #1
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fcbe 	bl	8004494 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b1e:	f000 fa03 	bl	8000f28 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3760      	adds	r7, #96	; 0x60
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b50:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <MX_ADC1_Init+0xe8>)
 8000b52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000bb2:	f000 ff8b 	bl	8001acc <HAL_ADC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000bbc:	f000 f9b4 	bl	8000f28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4811      	ldr	r0, [pc, #68]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000bcc:	f001 ff44 	bl	8002a58 <HAL_ADCEx_MultiModeConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000bd6:	f000 f9a7 	bl	8000f28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_ADC1_Init+0xec>)
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bde:	2306      	movs	r3, #6
 8000be0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be6:	237f      	movs	r3, #127	; 0x7f
 8000be8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bea:	2304      	movs	r3, #4
 8000bec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_ADC1_Init+0xe4>)
 8000bf8:	f001 faec 	bl	80021d4 <HAL_ADC_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000c02:	f000 f991 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000090 	.word	0x20000090
 8000c14:	42028000 	.word	0x42028000
 8000c18:	1d500080 	.word	0x1d500080

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_I2C1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <MX_I2C1_Init+0x7c>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c58:	f002 fa7c 	bl	8003154 <HAL_I2C_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c62:	f000 f961 	bl	8000f28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c6a:	f002 fe07 	bl	800387c <HAL_I2CEx_ConfigAnalogFilter>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f000 f958 	bl	8000f28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c7c:	f002 fe49 	bl	8003912 <HAL_I2CEx_ConfigDigitalFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 f94f 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000f8 	.word	0x200000f8
 8000c94:	40005400 	.word	0x40005400
 8000c98:	00303d5b 	.word	0x00303d5b

08000c9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_SPI1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cb6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000cba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cfc:	f004 fbc0 	bl	8005480 <HAL_SPI_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f90f 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000014c 	.word	0x2000014c
 8000d14:	40013000 	.word	0x40013000

08000d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2224      	movs	r2, #36	; 0x24
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f005 fee4 	bl	8006af4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d36:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000d38:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <MX_TIM1_Init+0xb0>)
 8000d3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d62:	2303      	movs	r3, #3
 8000d64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000d8e:	f004 fc1a 	bl	80055c6 <HAL_TIM_Encoder_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000d98:	f000 f8c6 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_TIM1_Init+0xac>)
 8000dae:	f004 ff6f 	bl	8005c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000db8:	f000 f8b6 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3730      	adds	r7, #48	; 0x30
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200001b0 	.word	0x200001b0
 8000dc8:	40012c00 	.word	0x40012c00

08000dcc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_UART4_Init+0x90>)
 8000dd2:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <MX_UART4_Init+0x94>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_UART4_Init+0x90>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_UART4_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_UART4_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_UART4_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_UART4_Init+0x90>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_UART4_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_UART4_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_UART4_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_UART4_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_UART4_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e14:	4811      	ldr	r0, [pc, #68]	; (8000e5c <MX_UART4_Init+0x90>)
 8000e16:	f004 ffe1 	bl	8005ddc <HAL_UART_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000e20:	f000 f882 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_UART4_Init+0x90>)
 8000e28:	f005 fd7a 	bl	8006920 <HAL_UARTEx_SetTxFifoThreshold>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e32:	f000 f879 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4808      	ldr	r0, [pc, #32]	; (8000e5c <MX_UART4_Init+0x90>)
 8000e3a:	f005 fdaf 	bl	800699c <HAL_UARTEx_SetRxFifoThreshold>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f000 f870 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_UART4_Init+0x90>)
 8000e4a:	f005 fd30 	bl	80068ae <HAL_UARTEx_DisableFifoMode>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e54:	f000 f868 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200001fc 	.word	0x200001fc
 8000e60:	40004c00 	.word	0x40004c00

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_GPIO_Init+0xb8>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <MX_GPIO_Init+0xb8>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_GPIO_Init+0xb8>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_GPIO_Init+0xb8>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <MX_GPIO_Init+0xb8>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_GPIO_Init+0xb8>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb0:	481b      	ldr	r0, [pc, #108]	; (8000f20 <MX_GPIO_Init+0xbc>)
 8000eb2:	f002 f91d 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2110      	movs	r1, #16
 8000eba:	481a      	ldr	r0, [pc, #104]	; (8000f24 <MX_GPIO_Init+0xc0>)
 8000ebc:	f002 f918 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_1_Pin button_2_Pin button_3_Pin button_4_Pin
                           Encoder_SW_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin|button_3_Pin|button_4_Pin
 8000ec0:	f648 4306 	movw	r3, #35846	; 0x8c06
 8000ec4:	60fb      	str	r3, [r7, #12]
                          |Encoder_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <MX_GPIO_Init+0xc0>)
 8000ed6:	f001 ff73 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 8000eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480b      	ldr	r0, [pc, #44]	; (8000f20 <MX_GPIO_Init+0xbc>)
 8000ef4:	f001 ff64 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_GPIO_Init+0xc0>)
 8000f10:	f001 ff56 	bl	8002dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	42020000 	.word	0x42020000
 8000f24:	42020400 	.word	0x42020400

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_MspInit+0x44>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_MspInit+0x44>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_MspInit+0x44>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_MspInit+0x44>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f6a:	f002 fd89 	bl	8003a80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ae      	sub	sp, #184	; 0xb8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2294      	movs	r2, #148	; 0x94
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f005 fda9 	bl	8006af4 <memset>
  if(hadc->Instance==ADC1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a2b      	ldr	r2, [pc, #172]	; (8001054 <HAL_ADC_MspInit+0xd8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d14e      	bne.n	800104a <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fd39 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000fe8:	f7ff ff9e 	bl	8000f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_ADC_MspInit+0xdc>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	4a19      	ldr	r2, [pc, #100]	; (8001058 <HAL_ADC_MspInit+0xdc>)
 8000ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_ADC_MspInit+0xdc>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_ADC_MspInit+0xdc>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_ADC_MspInit+0xdc>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_ADC_MspInit+0xdc>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800101c:	2304      	movs	r3, #4
 800101e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001032:	4619      	mov	r1, r3
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <HAL_ADC_MspInit+0xe0>)
 8001036:	f001 fec3 	bl	8002dc0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2025      	movs	r0, #37	; 0x25
 8001040:	f001 fe89 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001044:	2025      	movs	r0, #37	; 0x25
 8001046:	f001 fea0 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	37b8      	adds	r7, #184	; 0xb8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	42028000 	.word	0x42028000
 8001058:	40021000 	.word	0x40021000
 800105c:	42020000 	.word	0x42020000

08001060 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0ae      	sub	sp, #184	; 0xb8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2294      	movs	r2, #148	; 0x94
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f005 fd37 	bl	8006af4 <memset>
  if(hi2c->Instance==I2C1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_I2C_MspInit+0xb0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d13b      	bne.n	8001108 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001090:	2340      	movs	r3, #64	; 0x40
 8001092:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fcd9 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010a8:	f7ff ff3e 	bl	8000f28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_I2C_MspInit+0xb4>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	4a18      	ldr	r2, [pc, #96]	; (8001114 <HAL_I2C_MspInit+0xb4>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_I2C_MspInit+0xb4>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010de:	2304      	movs	r3, #4
 80010e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e8:	4619      	mov	r1, r3
 80010ea:	480b      	ldr	r0, [pc, #44]	; (8001118 <HAL_I2C_MspInit+0xb8>)
 80010ec:	f001 fe68 	bl	8002dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0xb4>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_I2C_MspInit+0xb4>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fa:	6593      	str	r3, [r2, #88]	; 0x58
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_I2C_MspInit+0xb4>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	37b8      	adds	r7, #184	; 0xb8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	42020400 	.word	0x42020400

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_SPI_MspInit+0x7c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d127      	bne.n	800118e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001148:	6613      	str	r3, [r2, #96]	; 0x60
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_SPI_MspInit+0x80>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_SPI_MspInit+0x80>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800116e:	23b0      	movs	r3, #176	; 0xb0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_SPI_MspInit+0x84>)
 800118a:	f001 fe19 	bl	8002dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40013000 	.word	0x40013000
 800119c:	40021000 	.word	0x40021000
 80011a0:	42020000 	.word	0x42020000

080011a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_TIM_Encoder_MspInit+0x9c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d138      	bne.n	8001238 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <HAL_TIM_Encoder_MspInit+0xa0>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <HAL_TIM_Encoder_MspInit+0xa0>)
 80011cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011d0:	6613      	str	r3, [r2, #96]	; 0x60
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_TIM_Encoder_MspInit+0xa0>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_TIM_Encoder_MspInit+0xa0>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <HAL_TIM_Encoder_MspInit+0xa0>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_TIM_Encoder_MspInit+0xa0>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001208:	2301      	movs	r3, #1
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001214:	f001 fdd4 	bl	8002dc0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	202a      	movs	r0, #42	; 0x2a
 800121e:	f001 fd9a 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001222:	202a      	movs	r0, #42	; 0x2a
 8001224:	f001 fdb1 	bl	8002d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	202c      	movs	r0, #44	; 0x2c
 800122e:	f001 fd92 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001232:	202c      	movs	r0, #44	; 0x2c
 8001234:	f001 fda9 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40021000 	.word	0x40021000
 8001248:	42020000 	.word	0x42020000

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0ae      	sub	sp, #184	; 0xb8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2294      	movs	r2, #148	; 0x94
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f005 fc41 	bl	8006af4 <memset>
  if(huart->Instance==UART4)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a21      	ldr	r2, [pc, #132]	; (80012fc <HAL_UART_MspInit+0xb0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d13a      	bne.n	80012f2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800127c:	2308      	movs	r3, #8
 800127e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001280:	2300      	movs	r3, #0
 8001282:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fbe3 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001294:	f7ff fe48 	bl	8000f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_UART_MspInit+0xb4>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	4a18      	ldr	r2, [pc, #96]	; (8001300 <HAL_UART_MspInit+0xb4>)
 800129e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012a2:	6593      	str	r3, [r2, #88]	; 0x58
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_UART_MspInit+0xb4>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_UART_MspInit+0xb4>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_UART_MspInit+0xb4>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_UART_MspInit+0xb4>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012c8:	2303      	movs	r3, #3
 80012ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012e0:	2308      	movs	r3, #8
 80012e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_UART_MspInit+0xb8>)
 80012ee:	f001 fd67 	bl	8002dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	37b8      	adds	r7, #184	; 0xb8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004c00 	.word	0x40004c00
 8001300:	40021000 	.word	0x40021000
 8001304:	42020000 	.word	0x42020000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 f994 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <ADC1_2_IRQHandler+0x10>)
 8001362:	f000 fcff 	bl	8001d64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000090 	.word	0x20000090

08001370 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM1_UP_IRQHandler+0x10>)
 8001376:	f004 fa7a 	bl	800586e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001b0 	.word	0x200001b0

08001384 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <TIM1_CC_IRQHandler+0x10>)
 800138a:	f004 fa70 	bl	800586e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200001b0 	.word	0x200001b0

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f005 fb9c 	bl	8006b04 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20030000 	.word	0x20030000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	20000298 	.word	0x20000298
 8001400:	200003e8 	.word	0x200003e8

08001404 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800142e:	4b4f      	ldr	r3, [pc, #316]	; (800156c <SystemCoreClockUpdate+0x144>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d107      	bne.n	800144a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800143a:	4b4c      	ldr	r3, [pc, #304]	; (800156c <SystemCoreClockUpdate+0x144>)
 800143c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e005      	b.n	8001456 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800144a:	4b48      	ldr	r3, [pc, #288]	; (800156c <SystemCoreClockUpdate+0x144>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001456:	4a46      	ldr	r2, [pc, #280]	; (8001570 <SystemCoreClockUpdate+0x148>)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001460:	4b42      	ldr	r3, [pc, #264]	; (800156c <SystemCoreClockUpdate+0x144>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d866      	bhi.n	800153a <SystemCoreClockUpdate+0x112>
 800146c:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <SystemCoreClockUpdate+0x4c>)
 800146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001472:	bf00      	nop
 8001474:	080014a9 	.word	0x080014a9
 8001478:	0800153b 	.word	0x0800153b
 800147c:	0800153b 	.word	0x0800153b
 8001480:	0800153b 	.word	0x0800153b
 8001484:	080014b1 	.word	0x080014b1
 8001488:	0800153b 	.word	0x0800153b
 800148c:	0800153b 	.word	0x0800153b
 8001490:	0800153b 	.word	0x0800153b
 8001494:	080014b9 	.word	0x080014b9
 8001498:	0800153b 	.word	0x0800153b
 800149c:	0800153b 	.word	0x0800153b
 80014a0:	0800153b 	.word	0x0800153b
 80014a4:	080014c1 	.word	0x080014c1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80014a8:	4a32      	ldr	r2, [pc, #200]	; (8001574 <SystemCoreClockUpdate+0x14c>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	6013      	str	r3, [r2, #0]
      break;
 80014ae:	e048      	b.n	8001542 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <SystemCoreClockUpdate+0x14c>)
 80014b2:	4a31      	ldr	r2, [pc, #196]	; (8001578 <SystemCoreClockUpdate+0x150>)
 80014b4:	601a      	str	r2, [r3, #0]
      break;
 80014b6:	e044      	b.n	8001542 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80014b8:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <SystemCoreClockUpdate+0x14c>)
 80014ba:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <SystemCoreClockUpdate+0x150>)
 80014bc:	601a      	str	r2, [r3, #0]
      break;
 80014be:	e040      	b.n	8001542 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <SystemCoreClockUpdate+0x144>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemCoreClockUpdate+0x144>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	3301      	adds	r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d003      	beq.n	80014e6 <SystemCoreClockUpdate+0xbe>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d006      	beq.n	80014f2 <SystemCoreClockUpdate+0xca>
 80014e4:	e00b      	b.n	80014fe <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <SystemCoreClockUpdate+0x150>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	613b      	str	r3, [r7, #16]
          break;
 80014f0:	e00b      	b.n	800150a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80014f2:	4a21      	ldr	r2, [pc, #132]	; (8001578 <SystemCoreClockUpdate+0x150>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	613b      	str	r3, [r7, #16]
          break;
 80014fc:	e005      	b.n	800150a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	613b      	str	r3, [r7, #16]
          break;
 8001508:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <SystemCoreClockUpdate+0x144>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <SystemCoreClockUpdate+0x144>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0e5b      	lsrs	r3, r3, #25
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	3301      	adds	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <SystemCoreClockUpdate+0x14c>)
 8001536:	6013      	str	r3, [r2, #0]
      break;
 8001538:	e003      	b.n	8001542 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <SystemCoreClockUpdate+0x14c>)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	6013      	str	r3, [r2, #0]
      break;
 8001540:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <SystemCoreClockUpdate+0x144>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <SystemCoreClockUpdate+0x154>)
 800154e:	5cd3      	ldrb	r3, [r2, r3]
 8001550:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SystemCoreClockUpdate+0x14c>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <SystemCoreClockUpdate+0x14c>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	0800746c 	.word	0x0800746c
 8001574:	20000010 	.word	0x20000010
 8001578:	00f42400 	.word	0x00f42400
 800157c:	08007454 	.word	0x08007454

08001580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001584:	f7ff ff3e 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001588:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800158a:	e003      	b.n	8001594 <LoopCopyDataInit>

0800158c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800158e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001590:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001592:	3104      	adds	r1, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001594:	480a      	ldr	r0, [pc, #40]	; (80015c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001598:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800159a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800159c:	d3f6      	bcc.n	800158c <CopyDataInit>
	ldr	r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015a0:	e002      	b.n	80015a8 <LoopFillZerobss>

080015a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015a4:	f842 3b04 	str.w	r3, [r2], #4

080015a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <LoopForever+0x16>)
	cmp	r2, r3
 80015aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015ac:	d3f9      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015ae:	f005 faaf 	bl	8006b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015b2:	f7ff f9fd 	bl	80009b0 <main>

080015b6 <LoopForever>:

LoopForever:
    b LoopForever
 80015b6:	e7fe      	b.n	80015b6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80015b8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80015bc:	08007518 	.word	0x08007518
	ldr	r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015c4:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80015c8:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80015cc:	200003e8 	.word	0x200003e8

080015d0 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <AES_IRQHandler>

080015d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80015dc:	2004      	movs	r0, #4
 80015de:	f001 fbaf 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80015e2:	f7ff ff21 	bl	8001428 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e6:	2007      	movs	r0, #7
 80015e8:	f000 f80e 	bl	8001608 <HAL_InitTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	e001      	b.n	80015fc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f8:	f7ff fc9c 	bl	8000f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_InitTick+0x6c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d023      	beq.n	8001664 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_InitTick+0x70>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_InitTick+0x6c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f001 fbb7 	bl	8002da6 <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10f      	bne.n	800165e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b07      	cmp	r3, #7
 8001642:	d809      	bhi.n	8001658 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f001 fb83 	bl	8002d56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_InitTick+0x74>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e007      	b.n	8001668 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e004      	b.n	8001668 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	e001      	b.n	8001668 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000018 	.word	0x20000018
 8001678:	20000010 	.word	0x20000010
 800167c:	20000014 	.word	0x20000014

08001680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x20>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_IncTick+0x24>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000018 	.word	0x20000018
 80016a4:	2000029c 	.word	0x2000029c

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	2000029c 	.word	0x2000029c

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff ffee 	bl	80016a8 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d005      	beq.n	80016e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_Delay+0x44>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e6:	bf00      	nop
 80016e8:	f7ff ffde 	bl	80016a8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8f7      	bhi.n	80016e8 <HAL_Delay+0x28>
  {
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000018 	.word	0x20000018

08001708 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3360      	adds	r3, #96	; 0x60
 8001782:	461a      	mov	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <LL_ADC_SetOffset+0x44>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	4313      	orrs	r3, r2
 80017a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	03fff000 	.word	0x03fff000

080017b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3360      	adds	r3, #96	; 0x60
 80017c6:	461a      	mov	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3360      	adds	r3, #96	; 0x60
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	615a      	str	r2, [r3, #20]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001866:	b480      	push	{r7}
 8001868:	b087      	sub	sp, #28
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3330      	adds	r3, #48	; 0x30
 8001876:	461a      	mov	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	4413      	add	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	211f      	movs	r1, #31
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	0e9b      	lsrs	r3, r3, #26
 800189e:	f003 011f 	and.w	r1, r3, #31
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3314      	adds	r3, #20
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	0e5b      	lsrs	r3, r3, #25
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	0d1b      	lsrs	r3, r3, #20
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2107      	movs	r1, #7
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	401a      	ands	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	0d1b      	lsrs	r3, r3, #20
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0318 	and.w	r3, r3, #24
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001960:	40d9      	lsrs	r1, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	400b      	ands	r3, r1
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	431a      	orrs	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	0007ffff 	.word	0x0007ffff

08001984 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 031f 	and.w	r3, r3, #31
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6093      	str	r3, [r2, #8]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f4:	d101      	bne.n	80019fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a44:	d101      	bne.n	8001a4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <LL_ADC_IsEnabled+0x18>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <LL_ADC_IsEnabled+0x1a>
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d101      	bne.n	8001a96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d101      	bne.n	8001abc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e12e      	b.n	8001d44 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fa41 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff67 	bl	80019e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff4d 	bl	80019bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff82 	bl	8001a30 <LL_ADC_IsInternalRegulatorEnabled>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d115      	bne.n	8001b5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff66 	bl	8001a08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b3c:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <HAL_ADC_Init+0x280>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	4a83      	ldr	r2, [pc, #524]	; (8001d50 <HAL_ADC_Init+0x284>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b50:	e002      	b.n	8001b58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f9      	bne.n	8001b52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff64 	bl	8001a30 <LL_ADC_IsInternalRegulatorEnabled>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10d      	bne.n	8001b8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f043 0210 	orr.w	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff75 	bl	8001a7e <LL_ADC_REG_IsConversionOngoing>
 8001b94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80c7 	bne.w	8001d32 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80c3 	bne.w	8001d32 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bb4:	f043 0202 	orr.w	r2, r3, #2
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff49 	bl	8001a58 <LL_ADC_IsEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d110      	bne.n	8001bee <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bcc:	4861      	ldr	r0, [pc, #388]	; (8001d54 <HAL_ADC_Init+0x288>)
 8001bce:	f7ff ff43 	bl	8001a58 <LL_ADC_IsEnabled>
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4860      	ldr	r0, [pc, #384]	; (8001d58 <HAL_ADC_Init+0x28c>)
 8001bd6:	f7ff ff3f 	bl	8001a58 <LL_ADC_IsEnabled>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4619      	mov	r1, r3
 8001be8:	485c      	ldr	r0, [pc, #368]	; (8001d5c <HAL_ADC_Init+0x290>)
 8001bea:	f7ff fd8d 	bl	8001708 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7e5b      	ldrb	r3, [r3, #25]
 8001bf2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001bfe:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c04:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c0c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	3b01      	subs	r3, #1
 8001c22:	045b      	lsls	r3, r3, #17
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <HAL_ADC_Init+0x294>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	69b9      	ldr	r1, [r7, #24]
 8001c56:	430b      	orrs	r3, r1
 8001c58:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff20 	bl	8001aa4 <LL_ADC_INJ_IsConversionOngoing>
 8001c64:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d140      	bne.n	8001cee <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d13d      	bne.n	8001cee <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7e1b      	ldrb	r3, [r3, #24]
 8001c7a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c7c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c84:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c94:	f023 0306 	bic.w	r3, r3, #6
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	69b9      	ldr	r1, [r7, #24]
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d118      	bne.n	8001cde <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cb6:	f023 0304 	bic.w	r3, r3, #4
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	e007      	b.n	8001cee <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10c      	bne.n	8001d10 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f023 010f 	bic.w	r1, r3, #15
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d0e:	e007      	b.n	8001d20 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020f 	bic.w	r2, r2, #15
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	f023 0303 	bic.w	r3, r3, #3
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d30:	e007      	b.n	8001d42 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	20000010 	.word	0x20000010
 8001d50:	053e2d63 	.word	0x053e2d63
 8001d54:	42028000 	.word	0x42028000
 8001d58:	42028100 	.word	0x42028100
 8001d5c:	42028300 	.word	0x42028300
 8001d60:	fff0c007 	.word	0xfff0c007

08001d64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d80:	4882      	ldr	r0, [pc, #520]	; (8001f8c <HAL_ADC_IRQHandler+0x228>)
 8001d82:	f7ff fdff 	bl	8001984 <LL_ADC_GetMultimode>
 8001d86:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d017      	beq.n	8001dc2 <HAL_ADC_IRQHandler+0x5e>
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d012      	beq.n	8001dc2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fe45 	bl	8002a44 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADC_IRQHandler+0x72>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10a      	bne.n	8001dec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8083 	beq.w	8001ee8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d07d      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fd19 	bl	8001840 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d062      	beq.n	8001eda <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5d      	ldr	r2, [pc, #372]	; (8001f90 <HAL_ADC_IRQHandler+0x22c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d002      	beq.n	8001e24 <HAL_ADC_IRQHandler+0xc0>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e000      	b.n	8001e26 <HAL_ADC_IRQHandler+0xc2>
 8001e24:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <HAL_ADC_IRQHandler+0x230>)
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d008      	beq.n	8001e40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d104      	bne.n	8001e4a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	e00c      	b.n	8001e64 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <HAL_ADC_IRQHandler+0x22c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d002      	beq.n	8001e5a <HAL_ADC_IRQHandler+0xf6>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	e000      	b.n	8001e5c <HAL_ADC_IRQHandler+0xf8>
 8001e5a:	4b4e      	ldr	r3, [pc, #312]	; (8001f94 <HAL_ADC_IRQHandler+0x230>)
 8001e5c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d135      	bne.n	8001eda <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d12e      	bne.n	8001eda <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fdfc 	bl	8001a7e <LL_ADC_REG_IsConversionOngoing>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11a      	bne.n	8001ec2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 020c 	bic.w	r2, r2, #12
 8001e9a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d112      	bne.n	8001eda <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58
 8001ec0:	e00b      	b.n	8001eda <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f95c 	bl	8002198 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	220c      	movs	r2, #12
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <HAL_ADC_IRQHandler+0x198>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10b      	bne.n	8001f14 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 809f 	beq.w	8002046 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8099 	beq.w	8002046 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fcc4 	bl	80018be <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f36:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fc7f 	bl	8001840 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f42:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <HAL_ADC_IRQHandler+0x22c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d002      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x1f0>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_IRQHandler+0x1f2>
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_ADC_IRQHandler+0x230>)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d008      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d002      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b07      	cmp	r3, #7
 8001f6e:	d104      	bne.n	8001f7a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	e013      	b.n	8001fa2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_ADC_IRQHandler+0x22c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x234>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_ADC_IRQHandler+0x236>
 8001f8a:	bf00      	nop
 8001f8c:	42028300 	.word	0x42028300
 8001f90:	42028100 	.word	0x42028100
 8001f94:	42028000 	.word	0x42028000
 8001f98:	4b7d      	ldr	r3, [pc, #500]	; (8002190 <HAL_ADC_IRQHandler+0x42c>)
 8001f9a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d047      	beq.n	8002038 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_ADC_IRQHandler+0x25e>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d03f      	beq.n	8002038 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d13a      	bne.n	8002038 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b40      	cmp	r3, #64	; 0x40
 8001fce:	d133      	bne.n	8002038 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d12e      	bne.n	8002038 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fd60 	bl	8001aa4 <LL_ADC_INJ_IsConversionOngoing>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11a      	bne.n	8002020 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ff8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d112      	bne.n	8002038 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	659a      	str	r2, [r3, #88]	; 0x58
 800201e:	e00b      	b.n	8002038 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	f043 0210 	orr.w	r2, r3, #16
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fcdb 	bl	80029f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2260      	movs	r2, #96	; 0x60
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d011      	beq.n	8002074 <HAL_ADC_IRQHandler+0x310>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00c      	beq.n	8002074 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8a0 	bl	80021ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d012      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x340>
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fcc1 	bl	8002a1c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x370>
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00d      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fcb3 	bl	8002a30 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d036      	beq.n	800214c <HAL_ADC_IRQHandler+0x3e8>
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d031      	beq.n	800214c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80020f0:	2301      	movs	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
 80020f4:	e014      	b.n	8002120 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020fc:	4825      	ldr	r0, [pc, #148]	; (8002194 <HAL_ADC_IRQHandler+0x430>)
 80020fe:	f7ff fc4f 	bl	80019a0 <LL_ADC_GetMultiDMATransfer>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002108:	2301      	movs	r3, #1
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e008      	b.n	8002120 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800211c:	2301      	movs	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10e      	bne.n	8002144 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f83e 	bl	80021c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2210      	movs	r2, #16
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d018      	beq.n	8002188 <HAL_ADC_IRQHandler+0x424>
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	f043 0208 	orr.w	r2, r3, #8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002180:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fc40 	bl	8002a08 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	42028000 	.word	0x42028000
 8002194:	42028300 	.word	0x42028300

08002198 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b0b7      	sub	sp, #220	; 0xdc
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x22>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e3c1      	b.n	800297a <HAL_ADC_ConfigChannel+0x7a6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fc3b 	bl	8001a7e <LL_ADC_REG_IsConversionOngoing>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 83a6 	bne.w	800295c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	f7ff fb22 	bl	8001866 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fc29 	bl	8001a7e <LL_ADC_REG_IsConversionOngoing>
 800222c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fc35 	bl	8001aa4 <LL_ADC_INJ_IsConversionOngoing>
 800223a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800223e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 81c1 	bne.w	80025ca <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 81bc 	bne.w	80025ca <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800225a:	d10f      	bne.n	800227c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2200      	movs	r2, #0
 8002266:	4619      	mov	r1, r3
 8002268:	f7ff fb3c 	bl	80018e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fad0 	bl	800181a <LL_ADC_SetSamplingTimeCommonConfig>
 800227a:	e00e      	b.n	800229a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	461a      	mov	r2, r3
 800228a:	f7ff fb2b 	bl	80018e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fac0 	bl	800181a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d00a      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6919      	ldr	r1, [r3, #16]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022cc:	f7ff fa50 	bl	8001770 <LL_ADC_SetOffset>
 80022d0:	e17b      	b.n	80025ca <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa6d 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x12a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fa62 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	e01e      	b.n	800233c <HAL_ADC_ConfigChannel+0x168>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fa57 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800231c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e004      	b.n	800233a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x180>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	e018      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1b2>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800236c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002370:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800237c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002386:	429a      	cmp	r2, r3
 8002388:	d106      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fa26 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa0a 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1f0>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff f9ff 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	e01e      	b.n	8002402 <HAL_ADC_ConfigChannel+0x22e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f9f4 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e004      	b.n	8002400 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80023f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x246>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e018      	b.n	800244c <HAL_ADC_ConfigChannel+0x278>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800242e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e004      	b.n	800244c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f9c3 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2102      	movs	r1, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f9a7 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x2b6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2102      	movs	r1, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f99c 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	e01e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x2f4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f991 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e004      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80024bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x30c>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	e016      	b.n	800250e <HAL_ADC_ConfigChannel+0x33a>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e004      	b.n	800250e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800250e:	429a      	cmp	r2, r3
 8002510:	d106      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f962 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2103      	movs	r1, #3
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f946 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <HAL_ADC_ConfigChannel+0x378>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2103      	movs	r1, #3
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff f93b 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	e017      	b.n	800257c <HAL_ADC_ConfigChannel+0x3a8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2103      	movs	r1, #3
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f930 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002566:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e003      	b.n	800257a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x3c0>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	e011      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x3e4>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d106      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	2103      	movs	r1, #3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f90d 	bl	80017e4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fa42 	bl	8001a58 <LL_ADC_IsEnabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 81c9 	bne.w	800296e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	461a      	mov	r2, r3
 80025ea:	f7ff f9a7 	bl	800193c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4a8f      	ldr	r2, [pc, #572]	; (8002830 <HAL_ADC_ConfigChannel+0x65c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f040 8131 	bne.w	800285c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10b      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x44e>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2b09      	cmp	r3, #9
 8002618:	bf94      	ite	ls
 800261a:	2301      	movls	r3, #1
 800261c:	2300      	movhi	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e019      	b.n	8002656 <HAL_ADC_ConfigChannel+0x482>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002632:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e003      	b.n	8002646 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800263e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2b09      	cmp	r3, #9
 800264e:	bf94      	ite	ls
 8002650:	2301      	movls	r3, #1
 8002652:	2300      	movhi	r3, #0
 8002654:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002656:	2b00      	cmp	r3, #0
 8002658:	d079      	beq.n	800274e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x4a2>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	3301      	adds	r3, #1
 800266e:	069b      	lsls	r3, r3, #26
 8002670:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002674:	e015      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x4ce>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002686:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x4ee>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	e017      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x51e>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80026da:	2320      	movs	r3, #32
 80026dc:	e003      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80026de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	ea42 0103 	orr.w	r1, r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10a      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x544>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	3301      	adds	r3, #1
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	051b      	lsls	r3, r3, #20
 8002716:	e018      	b.n	800274a <HAL_ADC_ConfigChannel+0x576>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f003 021f 	and.w	r2, r3, #31
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274a:	430b      	orrs	r3, r1
 800274c:	e081      	b.n	8002852 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	2b00      	cmp	r3, #0
 8002758:	d107      	bne.n	800276a <HAL_ADC_ConfigChannel+0x596>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0e9b      	lsrs	r3, r3, #26
 8002760:	3301      	adds	r3, #1
 8002762:	069b      	lsls	r3, r3, #26
 8002764:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002768:	e015      	b.n	8002796 <HAL_ADC_ConfigChannel+0x5c2>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002782:	2320      	movs	r3, #32
 8002784:	e003      	b.n	800278e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3301      	adds	r3, #1
 8002790:	069b      	lsls	r3, r3, #26
 8002792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x5e2>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	3301      	adds	r3, #1
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	e017      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x612>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	61fb      	str	r3, [r7, #28]
  return result;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e003      	b.n	80027da <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	ea42 0103 	orr.w	r1, r2, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x63e>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0e9b      	lsrs	r3, r3, #26
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1e      	subs	r3, #30
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002810:	e01e      	b.n	8002850 <HAL_ADC_ConfigChannel+0x67c>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	613b      	str	r3, [r7, #16]
  return result;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e006      	b.n	800283c <HAL_ADC_ConfigChannel+0x668>
 800282e:	bf00      	nop
 8002830:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3301      	adds	r3, #1
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	3b1e      	subs	r3, #30
 800284a:	051b      	lsls	r3, r3, #20
 800284c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002850:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002856:	4619      	mov	r1, r3
 8002858:	f7ff f844 	bl	80018e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_ADC_ConfigChannel+0x7b0>)
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8082 	beq.w	800296e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800286a:	4847      	ldr	r0, [pc, #284]	; (8002988 <HAL_ADC_ConfigChannel+0x7b4>)
 800286c:	f7fe ff72 	bl	8001754 <LL_ADC_GetCommonPathInternalCh>
 8002870:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002874:	4845      	ldr	r0, [pc, #276]	; (800298c <HAL_ADC_ConfigChannel+0x7b8>)
 8002876:	f7ff f8ef 	bl	8001a58 <LL_ADC_IsEnabled>
 800287a:	4604      	mov	r4, r0
 800287c:	4844      	ldr	r0, [pc, #272]	; (8002990 <HAL_ADC_ConfigChannel+0x7bc>)
 800287e:	f7ff f8eb 	bl	8001a58 <LL_ADC_IsEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	4323      	orrs	r3, r4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d15e      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a41      	ldr	r2, [pc, #260]	; (8002994 <HAL_ADC_ConfigChannel+0x7c0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d127      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d121      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a39      	ldr	r2, [pc, #228]	; (800298c <HAL_ADC_ConfigChannel+0x7b8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d161      	bne.n	800296e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028b2:	4619      	mov	r1, r3
 80028b4:	4834      	ldr	r0, [pc, #208]	; (8002988 <HAL_ADC_ConfigChannel+0x7b4>)
 80028b6:	f7fe ff3a 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <HAL_ADC_ConfigChannel+0x7c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	4a36      	ldr	r2, [pc, #216]	; (800299c <HAL_ADC_ConfigChannel+0x7c8>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80028d2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028e2:	e044      	b.n	800296e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <HAL_ADC_ConfigChannel+0x7cc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d113      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a23      	ldr	r2, [pc, #140]	; (800298c <HAL_ADC_ConfigChannel+0x7b8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d134      	bne.n	800296e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290c:	4619      	mov	r1, r3
 800290e:	481e      	ldr	r0, [pc, #120]	; (8002988 <HAL_ADC_ConfigChannel+0x7b4>)
 8002910:	f7fe ff0d 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002914:	e02b      	b.n	800296e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <HAL_ADC_ConfigChannel+0x7d0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d126      	bne.n	800296e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d120      	bne.n	800296e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a16      	ldr	r2, [pc, #88]	; (800298c <HAL_ADC_ConfigChannel+0x7b8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d11b      	bne.n	800296e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800293a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800293e:	4619      	mov	r1, r3
 8002940:	4811      	ldr	r0, [pc, #68]	; (8002988 <HAL_ADC_ConfigChannel+0x7b4>)
 8002942:	f7fe fef4 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
 8002946:	e012      	b.n	800296e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800295a:	e008      	b.n	800296e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002976:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800297a:	4618      	mov	r0, r3
 800297c:	37dc      	adds	r7, #220	; 0xdc
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	80080000 	.word	0x80080000
 8002988:	42028300 	.word	0x42028300
 800298c:	42028000 	.word	0x42028000
 8002990:	42028100 	.word	0x42028100
 8002994:	c7520000 	.word	0xc7520000
 8002998:	20000010 	.word	0x20000010
 800299c:	053e2d63 	.word	0x053e2d63
 80029a0:	cb840000 	.word	0xcb840000
 80029a4:	80000001 	.word	0x80000001

080029a8 <LL_ADC_IsEnabled>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <LL_ADC_IsEnabled+0x18>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <LL_ADC_IsEnabled+0x1a>
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_REG_IsConversionOngoing>:
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b0a1      	sub	sp, #132	; 0x84
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e089      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a82:	2300      	movs	r3, #0
 8002a84:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d102      	bne.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a90:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e001      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e068      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff87 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff81 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d14a      	bne.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d147      	bne.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002ada:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d027      	beq.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002af6:	035b      	lsls	r3, r3, #13
 8002af8:	430b      	orrs	r3, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b00:	4824      	ldr	r0, [pc, #144]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002b02:	f7ff ff51 	bl	80029a8 <LL_ADC_IsEnabled>
 8002b06:	4604      	mov	r4, r0
 8002b08:	4823      	ldr	r0, [pc, #140]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b0a:	f7ff ff4d 	bl	80029a8 <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4323      	orrs	r3, r4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d132      	bne.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b1e:	f023 030f 	bic.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	6811      	ldr	r1, [r2, #0]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b30:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b32:	e023      	b.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b3e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b40:	4814      	ldr	r0, [pc, #80]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002b42:	f7ff ff31 	bl	80029a8 <LL_ADC_IsEnabled>
 8002b46:	4604      	mov	r4, r0
 8002b48:	4813      	ldr	r0, [pc, #76]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b4a:	f7ff ff2d 	bl	80029a8 <LL_ADC_IsEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4323      	orrs	r3, r4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d112      	bne.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b5e:	f023 030f 	bic.w	r3, r3, #15
 8002b62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b66:	e009      	b.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b7a:	e000      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3784      	adds	r7, #132	; 0x84
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd90      	pop	{r4, r7, pc}
 8002b92:	bf00      	nop
 8002b94:	42028000 	.word	0x42028000
 8002b98:	42028100 	.word	0x42028100
 8002b9c:	42028300 	.word	0x42028300

08002ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd2:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60d3      	str	r3, [r2, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <__NVIC_GetPriorityGrouping+0x18>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0307 	and.w	r3, r3, #7
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db0b      	blt.n	8002c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	4907      	ldr	r1, [pc, #28]	; (8002c3c <__NVIC_EnableIRQ+0x38>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db0a      	blt.n	8002c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	490c      	ldr	r1, [pc, #48]	; (8002c8c <__NVIC_SetPriority+0x4c>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	0152      	lsls	r2, r2, #5
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	440b      	add	r3, r1
 8002c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c68:	e00a      	b.n	8002c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4908      	ldr	r1, [pc, #32]	; (8002c90 <__NVIC_SetPriority+0x50>)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	3b04      	subs	r3, #4
 8002c78:	0152      	lsls	r2, r2, #5
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	761a      	strb	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	; 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f1c3 0307 	rsb	r3, r3, #7
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	bf28      	it	cs
 8002cb2:	2303      	movcs	r3, #3
 8002cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3303      	adds	r3, #3
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d902      	bls.n	8002cc4 <NVIC_EncodePriority+0x30>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3b04      	subs	r3, #4
 8002cc2:	e000      	b.n	8002cc6 <NVIC_EncodePriority+0x32>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43d9      	mvns	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	4313      	orrs	r3, r2
         );
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	; 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d0c:	d301      	bcc.n	8002d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <SysTick_Config+0x40>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1a:	2107      	movs	r1, #7
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f7ff ff8e 	bl	8002c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <SysTick_Config+0x40>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2a:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <SysTick_Config+0x40>)
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	e000e010 	.word	0xe000e010

08002d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff29 	bl	8002ba0 <__NVIC_SetPriorityGrouping>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d64:	f7ff ff40 	bl	8002be8 <__NVIC_GetPriorityGrouping>
 8002d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff ff90 	bl	8002c94 <NVIC_EncodePriority>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff5f 	bl	8002c40 <__NVIC_SetPriority>
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff33 	bl	8002c04 <__NVIC_EnableIRQ>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffa4 	bl	8002cfc <SysTick_Config>
 8002db4:	4603      	mov	r3, r0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dce:	e158      	b.n	8003082 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 814a 	beq.w	800307c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d005      	beq.n	8002e00 <HAL_GPIO_Init+0x40>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d130      	bne.n	8002e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e36:	2201      	movs	r2, #1
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 0201 	and.w	r2, r3, #1
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d017      	beq.n	8002e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d123      	bne.n	8002ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	6939      	ldr	r1, [r7, #16]
 8002eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0203 	and.w	r2, r3, #3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80a4 	beq.w	800307c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002f34:	4a5a      	ldr	r2, [pc, #360]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_GPIO_Init+0x2e4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d025      	beq.n	8002fac <HAL_GPIO_Init+0x1ec>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a51      	ldr	r2, [pc, #324]	; (80030a8 <HAL_GPIO_Init+0x2e8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d01f      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a50      	ldr	r2, [pc, #320]	; (80030ac <HAL_GPIO_Init+0x2ec>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d019      	beq.n	8002fa4 <HAL_GPIO_Init+0x1e4>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_GPIO_Init+0x2f0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_GPIO_Init+0x1e0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a4e      	ldr	r2, [pc, #312]	; (80030b4 <HAL_GPIO_Init+0x2f4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00d      	beq.n	8002f9c <HAL_GPIO_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a4d      	ldr	r2, [pc, #308]	; (80030b8 <HAL_GPIO_Init+0x2f8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <HAL_GPIO_Init+0x1d8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <HAL_GPIO_Init+0x2fc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d101      	bne.n	8002f94 <HAL_GPIO_Init+0x1d4>
 8002f90:	2306      	movs	r3, #6
 8002f92:	e00c      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002f94:	2307      	movs	r3, #7
 8002f96:	e00a      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002f98:	2305      	movs	r3, #5
 8002f9a:	e008      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e006      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e004      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e002      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002fac:	2300      	movs	r3, #0
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	f002 0203 	and.w	r2, r2, #3
 8002fb4:	00d2      	lsls	r2, r2, #3
 8002fb6:	4093      	lsls	r3, r2
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002fbe:	4938      	ldr	r1, [pc, #224]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	3318      	adds	r3, #24
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fcc:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ff0:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800301a:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8003050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003074:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_GPIO_Init+0x2e0>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3301      	adds	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	f47f ae9f 	bne.w	8002dd0 <HAL_GPIO_Init+0x10>
  }
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	4002f400 	.word	0x4002f400
 80030a4:	42020000 	.word	0x42020000
 80030a8:	42020400 	.word	0x42020400
 80030ac:	42020800 	.word	0x42020800
 80030b0:	42020c00 	.word	0x42020c00
 80030b4:	42021000 	.word	0x42021000
 80030b8:	42021400 	.word	0x42021400
 80030bc:	42021800 	.word	0x42021800

080030c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	887b      	ldrh	r3, [r7, #2]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e001      	b.n	80030e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003100:	787b      	ldrb	r3, [r7, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800310c:	e002      	b.n	8003114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4013      	ands	r3, r2
 8003138:	041a      	lsls	r2, r3, #16
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43d9      	mvns	r1, r3
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	400b      	ands	r3, r1
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e081      	b.n	800326a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd ff70 	bl	8001060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	e006      	b.n	80031dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d104      	bne.n	80031ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69d9      	ldr	r1, [r3, #28]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
 8003284:	4613      	mov	r3, r2
 8003286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b20      	cmp	r3, #32
 8003292:	f040 80da 	bne.w	800344a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x30>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0d3      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ac:	f7fe f9fc 	bl	80016a8 <HAL_GetTick>
 80032b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2319      	movs	r3, #25
 80032b8:	2201      	movs	r2, #1
 80032ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f8f0 	bl	80034a4 <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0be      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	; 0x21
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2210      	movs	r2, #16
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	893a      	ldrh	r2, [r7, #8]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2bff      	cmp	r3, #255	; 0xff
 80032fe:	d90e      	bls.n	800331e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_I2C_Master_Transmit+0x1e0>)
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fa7e 	bl	8003818 <I2C_TransferConfig>
 800331c:	e06c      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	b2da      	uxtb	r2, r3
 800332e:	8979      	ldrh	r1, [r7, #10]
 8003330:	4b48      	ldr	r3, [pc, #288]	; (8003454 <HAL_I2C_Master_Transmit+0x1e0>)
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fa6d 	bl	8003818 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800333e:	e05b      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	6a39      	ldr	r1, [r7, #32]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f8fc 	bl	8003542 <I2C_WaitOnTXISFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e07b      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	781a      	ldrb	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d034      	beq.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d130      	bne.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2200      	movs	r2, #0
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f87f 	bl	80034a4 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e04d      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2bff      	cmp	r3, #255	; 0xff
 80033b8:	d90e      	bls.n	80033d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	22ff      	movs	r2, #255	; 0xff
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	8979      	ldrh	r1, [r7, #10]
 80033c8:	2300      	movs	r3, #0
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fa21 	bl	8003818 <I2C_TransferConfig>
 80033d6:	e00f      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	8979      	ldrh	r1, [r7, #10]
 80033ea:	2300      	movs	r3, #0
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fa10 	bl	8003818 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d19e      	bne.n	8003340 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	6a39      	ldr	r1, [r7, #32]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8e2 	bl	80035d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e01a      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2220      	movs	r2, #32
 800341c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_I2C_Master_Transmit+0x1e4>)
 800342a:	400b      	ands	r3, r1
 800342c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	80002000 	.word	0x80002000
 8003458:	fe00e800 	.word	0xfe00e800

0800345c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d103      	bne.n	800347a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d007      	beq.n	8003498 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	619a      	str	r2, [r3, #24]
  }
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b4:	e031      	b.n	800351a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d02d      	beq.n	800351a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fe f8f3 	bl	80016a8 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d122      	bne.n	800351a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4013      	ands	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d113      	bne.n	800351a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d0be      	beq.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800354e:	e033      	b.n	80035b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f87f 	bl	8003658 <I2C_IsErrorOccurred>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e031      	b.n	80035c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d025      	beq.n	80035b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356c:	f7fe f89c 	bl	80016a8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	d302      	bcc.n	8003582 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11a      	bne.n	80035b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b02      	cmp	r3, #2
 800358e:	d013      	beq.n	80035b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e007      	b.n	80035c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d1c4      	bne.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035dc:	e02f      	b.n	800363e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f838 	bl	8003658 <I2C_IsErrorOccurred>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e02d      	b.n	800364e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe f859 	bl	80016a8 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11a      	bne.n	800363e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d013      	beq.n	800363e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f043 0220 	orr.w	r2, r3, #32
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e007      	b.n	800364e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b20      	cmp	r3, #32
 800364a:	d1c8      	bne.n	80035de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d068      	beq.n	8003756 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2210      	movs	r2, #16
 800368a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800368c:	e049      	b.n	8003722 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d045      	beq.n	8003722 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003696:	f7fe f807 	bl	80016a8 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <I2C_IsErrorOccurred+0x54>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d13a      	bne.n	8003722 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ce:	d121      	bne.n	8003714 <I2C_IsErrorOccurred+0xbc>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d6:	d01d      	beq.n	8003714 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d01a      	beq.n	8003714 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036ee:	f7fd ffdb 	bl	80016a8 <HAL_GetTick>
 80036f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f4:	e00e      	b.n	8003714 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036f6:	f7fd ffd7 	bl	80016a8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b19      	cmp	r3, #25
 8003702:	d907      	bls.n	8003714 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	f043 0320 	orr.w	r3, r3, #32
 800370a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003712:	e006      	b.n	8003722 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b20      	cmp	r3, #32
 8003720:	d1e9      	bne.n	80036f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b20      	cmp	r3, #32
 800372e:	d003      	beq.n	8003738 <I2C_IsErrorOccurred+0xe0>
 8003730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0aa      	beq.n	800368e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2220      	movs	r2, #32
 8003746:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800379a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01c      	beq.n	8003806 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff fe45 	bl	800345c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <I2C_IsErrorOccurred+0x1bc>)
 80037de:	400b      	ands	r3, r1
 80037e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800380a:	4618      	mov	r0, r3
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	fe00e800 	.word	0xfe00e800

08003818 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	817b      	strh	r3, [r7, #10]
 8003826:	4613      	mov	r3, r2
 8003828:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003830:	7a7b      	ldrb	r3, [r7, #9]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003838:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	4313      	orrs	r3, r2
 8003842:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003846:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	0d5b      	lsrs	r3, r3, #21
 8003852:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <I2C_TransferConfig+0x60>)
 8003858:	430b      	orrs	r3, r1
 800385a:	43db      	mvns	r3, r3
 800385c:	ea02 0103 	and.w	r1, r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	03ff63ff 	.word	0x03ff63ff

0800387c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b20      	cmp	r3, #32
 8003890:	d138      	bne.n	8003904 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800389c:	2302      	movs	r3, #2
 800389e:	e032      	b.n	8003906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b20      	cmp	r3, #32
 8003926:	d139      	bne.n	800399c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003932:	2302      	movs	r3, #2
 8003934:	e033      	b.n	800399e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2224      	movs	r2, #36	; 0x24
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003964:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40007000 	.word	0x40007000

080039c8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80039d0:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039d8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80039da:	f000 f861 	bl	8003aa0 <HAL_PWREx_SMPS_GetEffectiveMode>
 80039de:	4603      	mov	r3, r0
 80039e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e4:	d101      	bne.n	80039ea <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e03e      	b.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80039ea:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f6:	d101      	bne.n	80039fc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e035      	b.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d101      	bne.n	8003a08 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e02f      	b.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003a10:	4917      	ldr	r1, [pc, #92]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003a18:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	09db      	lsrs	r3, r3, #7
 8003a26:	2232      	movs	r2, #50	; 0x32
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	08db      	lsrs	r3, r3, #3
 8003a34:	3301      	adds	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a38:	e002      	b.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d102      	bne.n	8003a54 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f2      	bne.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d101      	bne.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e000      	b.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40007000 	.word	0x40007000
 8003a74:	20000010 	.word	0x20000010
 8003a78:	0a7c5ac5 	.word	0x0a7c5ac5
 8003a7c:	cccccccd 	.word	0xcccccccd

08003a80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8e:	6093      	str	r3, [r2, #8]
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40007000 	.word	0x40007000

08003aa0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e00a      	b.n	8003ad4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	e001      	b.n	8003ad4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003ad4:	687b      	ldr	r3, [r7, #4]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40007000 	.word	0x40007000

08003ae8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f000 bcc2 	b.w	8004480 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afc:	4b99      	ldr	r3, [pc, #612]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b06:	4b97      	ldr	r3, [pc, #604]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80e9 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <HAL_RCC_OscConfig+0x4a>
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	f040 8083 	bne.w	8003c32 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d17f      	bne.n	8003c32 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b32:	4b8c      	ldr	r3, [pc, #560]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <HAL_RCC_OscConfig+0x64>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f000 bc9a 	b.w	8004480 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b50:	4b84      	ldr	r3, [pc, #528]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_RCC_OscConfig+0x7e>
 8003b5c:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b64:	e005      	b.n	8003b72 <HAL_RCC_OscConfig+0x8a>
 8003b66:	4b7f      	ldr	r3, [pc, #508]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d224      	bcs.n	8003bc0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fe9a 	bl	80048b4 <RCC_SetFlashLatencyFromMSIRange>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f000 bc7a 	b.w	8004480 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b8c:	4b75      	ldr	r3, [pc, #468]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a74      	ldr	r2, [pc, #464]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b92:	f043 0308 	orr.w	r3, r3, #8
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b72      	ldr	r3, [pc, #456]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	496f      	ldr	r1, [pc, #444]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003baa:	4b6e      	ldr	r3, [pc, #440]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	496a      	ldr	r1, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
 8003bbe:	e026      	b.n	8003c0e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bc0:	4b68      	ldr	r3, [pc, #416]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a67      	ldr	r2, [pc, #412]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003bc6:	f043 0308 	orr.w	r3, r3, #8
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	4962      	ldr	r1, [pc, #392]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bde:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	495d      	ldr	r1, [pc, #372]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fe59 	bl	80048b4 <RCC_SetFlashLatencyFromMSIRange>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f000 bc39 	b.w	8004480 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c0e:	f000 fe15 	bl	800483c <HAL_RCC_GetHCLKFreq>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003c16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c18:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <HAL_RCC_OscConfig+0x284>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fd fcf3 	bl	8001608 <HAL_InitTick>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d060      	beq.n	8003cee <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	f000 bc27 	b.w	8004480 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d039      	beq.n	8003cae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a49      	ldr	r2, [pc, #292]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c46:	f7fd fd2f 	bl	80016a8 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c4c:	e00f      	b.n	8003c6e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fd2b 	bl	80016a8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d908      	bls.n	8003c6e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c5c:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	f000 bc09 	b.w	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0e9      	beq.n	8003c4e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c7a:	4b3a      	ldr	r3, [pc, #232]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a39      	ldr	r2, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	f043 0308 	orr.w	r3, r3, #8
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	4934      	ldr	r1, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c98:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	492f      	ldr	r1, [pc, #188]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
 8003cac:	e020      	b.n	8003cf0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cae:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cba:	f7fd fcf5 	bl	80016a8 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cc0:	e00e      	b.n	8003ce0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fcf1 	bl	80016a8 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d907      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd0:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e3cf      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ea      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x1da>
 8003cec:	e000      	b.n	8003cf0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d07e      	beq.n	8003dfa <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_OscConfig+0x226>
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	d10e      	bne.n	8003d26 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d10b      	bne.n	8003d26 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d06e      	beq.n	8003df8 <HAL_RCC_OscConfig+0x310>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d16a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e3ac      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x256>
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	e024      	b.n	8003d88 <HAL_RCC_OscConfig+0x2a0>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d46:	d113      	bne.n	8003d70 <HAL_RCC_OscConfig+0x288>
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a02      	ldr	r2, [pc, #8]	; (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	e012      	b.n	8003d88 <HAL_RCC_OscConfig+0x2a0>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	20000010 	.word	0x20000010
 8003d6c:	20000014 	.word	0x20000014
 8003d70:	4b8b      	ldr	r3, [pc, #556]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a8a      	ldr	r2, [pc, #552]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b88      	ldr	r3, [pc, #544]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a87      	ldr	r2, [pc, #540]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d019      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fd fc8a 	bl	80016a8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d96:	e00e      	b.n	8003db6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fd fc86 	bl	80016a8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d907      	bls.n	8003db6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da6:	4b7e      	ldr	r3, [pc, #504]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e364      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db6:	4b7a      	ldr	r3, [pc, #488]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0ea      	beq.n	8003d98 <HAL_RCC_OscConfig+0x2b0>
 8003dc2:	e01a      	b.n	8003dfa <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fc70 	bl	80016a8 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dca:	e00e      	b.n	8003dea <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fd fc6c 	bl	80016a8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d907      	bls.n	8003dea <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dda:	4b71      	ldr	r3, [pc, #452]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e34a      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dea:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ea      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2e4>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d06c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_OscConfig+0x330>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d119      	bne.n	8003e46 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d116      	bne.n	8003e46 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e18:	4b61      	ldr	r3, [pc, #388]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_OscConfig+0x348>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e327      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e30:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	4958      	ldr	r1, [pc, #352]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e44:	e04c      	b.n	8003ee0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d029      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a53      	ldr	r2, [pc, #332]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fc25 	bl	80016a8 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e60:	e00e      	b.n	8003e80 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e62:	f7fd fc21 	bl	80016a8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d907      	bls.n	8003e80 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e70:	4b4b      	ldr	r3, [pc, #300]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2ff      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e80:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ea      	beq.n	8003e62 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b44      	ldr	r3, [pc, #272]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	4941      	ldr	r1, [pc, #260]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
 8003ea0:	e01e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a3e      	ldr	r2, [pc, #248]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fd fbfb 	bl	80016a8 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb4:	e00e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fd fbf7 	bl	80016a8 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d907      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ec4:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e2d5      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ea      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d062      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d038      	beq.n	8003f66 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d108      	bne.n	8003f0e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003efc:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f0c:	e007      	b.n	8003f1e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f14:	4a22      	ldr	r2, [pc, #136]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f16:	f043 0310 	orr.w	r3, r3, #16
 8003f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f24:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fbbb 	bl	80016a8 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f34:	e00f      	b.n	8003f56 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fd fbb7 	bl	80016a8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	d908      	bls.n	8003f56 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e294      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0e8      	beq.n	8003f36 <HAL_RCC_OscConfig+0x44e>
 8003f64:	e025      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6c:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fd fb97 	bl	80016a8 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f7c:	e012      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7e:	f7fd fb93 	bl	80016a8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d90b      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_RCC_OscConfig+0x4b8>)
 8003f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e270      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa4:	4ba8      	ldr	r3, [pc, #672]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8003fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e5      	bne.n	8003f7e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 812d 	beq.w	800421a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fc4:	4ba0      	ldr	r3, [pc, #640]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b9d      	ldr	r3, [pc, #628]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	4a9c      	ldr	r2, [pc, #624]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6593      	str	r3, [r2, #88]	; 0x58
 8003fdc:	4b9a      	ldr	r3, [pc, #616]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fec:	4b97      	ldr	r3, [pc, #604]	; (800424c <HAL_RCC_OscConfig+0x764>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11e      	bne.n	8004036 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff8:	4b94      	ldr	r3, [pc, #592]	; (800424c <HAL_RCC_OscConfig+0x764>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a93      	ldr	r2, [pc, #588]	; (800424c <HAL_RCC_OscConfig+0x764>)
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004004:	f7fd fb50 	bl	80016a8 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400a:	e00e      	b.n	800402a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400c:	f7fd fb4c 	bl	80016a8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d907      	bls.n	800402a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401a:	4b8c      	ldr	r3, [pc, #560]	; (800424c <HAL_RCC_OscConfig+0x764>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e22a      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402a:	4b88      	ldr	r3, [pc, #544]	; (800424c <HAL_RCC_OscConfig+0x764>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ea      	beq.n	800400c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01f      	beq.n	8004082 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d010      	beq.n	8004070 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800404e:	4b7e      	ldr	r3, [pc, #504]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	4a7c      	ldr	r2, [pc, #496]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800405e:	4b7a      	ldr	r3, [pc, #488]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	4a78      	ldr	r2, [pc, #480]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406e:	e018      	b.n	80040a2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004070:	4b75      	ldr	r3, [pc, #468]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	4a74      	ldr	r2, [pc, #464]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004080:	e00f      	b.n	80040a2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004082:	4b71      	ldr	r3, [pc, #452]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	4a6f      	ldr	r2, [pc, #444]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004092:	4b6d      	ldr	r3, [pc, #436]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	4a6b      	ldr	r2, [pc, #428]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 800409a:	f023 0304 	bic.w	r3, r3, #4
 800409e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d068      	beq.n	800417c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fd fafd 	bl	80016a8 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b0:	e011      	b.n	80040d6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fd faf9 	bl	80016a8 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d908      	bls.n	80040d6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	4b60      	ldr	r3, [pc, #384]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1d4      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d6:	4b5c      	ldr	r3, [pc, #368]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0e6      	beq.n	80040b2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d022      	beq.n	8004136 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040f0:	4b55      	ldr	r3, [pc, #340]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	4a54      	ldr	r2, [pc, #336]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80040f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004100:	e011      	b.n	8004126 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fad1 	bl	80016a8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d908      	bls.n	8004126 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004114:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e1ac      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004126:	4b48      	ldr	r3, [pc, #288]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0e6      	beq.n	8004102 <HAL_RCC_OscConfig+0x61a>
 8004134:	e068      	b.n	8004208 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004136:	4b44      	ldr	r3, [pc, #272]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	4a42      	ldr	r2, [pc, #264]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 800413e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004146:	e011      	b.n	800416c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fd faae 	bl	80016a8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d908      	bls.n	800416c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800415a:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e189      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800416c:	4b36      	ldr	r3, [pc, #216]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e6      	bne.n	8004148 <HAL_RCC_OscConfig+0x660>
 800417a:	e045      	b.n	8004208 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd fa94 	bl	80016a8 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004182:	e011      	b.n	80041a8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fd fa90 	bl	80016a8 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d908      	bls.n	80041a8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004196:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e16b      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d021      	beq.n	8004208 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041c4:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80041cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041d4:	e011      	b.n	80041fa <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fd fa67 	bl	80016a8 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d908      	bls.n	80041fa <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041e8:	4b17      	ldr	r3, [pc, #92]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e142      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e6      	bne.n	80041d6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004208:	7ffb      	ldrb	r3, [r7, #31]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d04f      	beq.n	80042c6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	d028      	beq.n	8004280 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004234:	4a04      	ldr	r2, [pc, #16]	; (8004248 <HAL_RCC_OscConfig+0x760>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423e:	f7fd fa33 	bl	80016a8 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004244:	e014      	b.n	8004270 <HAL_RCC_OscConfig+0x788>
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004250:	f7fd fa2a 	bl	80016a8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d908      	bls.n	8004270 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800425e:	4b8a      	ldr	r3, [pc, #552]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 8004260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e107      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004270:	4b85      	ldr	r3, [pc, #532]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 8004272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0e8      	beq.n	8004250 <HAL_RCC_OscConfig+0x768>
 800427e:	e022      	b.n	80042c6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004280:	4b81      	ldr	r3, [pc, #516]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 8004282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004286:	4a80      	ldr	r2, [pc, #512]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fd fa0a 	bl	80016a8 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004296:	e00f      	b.n	80042b8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004298:	f7fd fa06 	bl	80016a8 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d908      	bls.n	80042b8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a6:	4b78      	ldr	r3, [pc, #480]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80042a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0e3      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b8:	4b73      	ldr	r3, [pc, #460]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80042ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e8      	bne.n	8004298 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80d7 	beq.w	800447e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d0:	4b6d      	ldr	r3, [pc, #436]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	f000 8091 	beq.w	8004400 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d166      	bne.n	80043b4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	4b68      	ldr	r3, [pc, #416]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a67      	ldr	r2, [pc, #412]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80042ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fd f9d9 	bl	80016a8 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f8:	e00e      	b.n	8004318 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fd f9d5 	bl	80016a8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d907      	bls.n	8004318 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	4b5f      	ldr	r3, [pc, #380]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0b3      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004318:	4b5b      	ldr	r3, [pc, #364]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ea      	bne.n	80042fa <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004324:	4b58      	ldr	r3, [pc, #352]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	4b58      	ldr	r3, [pc, #352]	; (800448c <HAL_RCC_OscConfig+0x9a4>)
 800432a:	4013      	ands	r3, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004334:	3a01      	subs	r2, #1
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	4311      	orrs	r1, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800433e:	0212      	lsls	r2, r2, #8
 8004340:	4311      	orrs	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004346:	0852      	lsrs	r2, r2, #1
 8004348:	3a01      	subs	r2, #1
 800434a:	0552      	lsls	r2, r2, #21
 800434c:	4311      	orrs	r1, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004352:	0852      	lsrs	r2, r2, #1
 8004354:	3a01      	subs	r2, #1
 8004356:	0652      	lsls	r2, r2, #25
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800435e:	06d2      	lsls	r2, r2, #27
 8004360:	430a      	orrs	r2, r1
 8004362:	4949      	ldr	r1, [pc, #292]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004368:	4b47      	ldr	r3, [pc, #284]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a46      	ldr	r2, [pc, #280]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 800436e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004372:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004374:	4b44      	ldr	r3, [pc, #272]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a43      	ldr	r2, [pc, #268]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 800437a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd f992 	bl	80016a8 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004386:	e00e      	b.n	80043a6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004388:	f7fd f98e 	bl	80016a8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d907      	bls.n	80043a6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004396:	4b3c      	ldr	r3, [pc, #240]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e06c      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a6:	4b38      	ldr	r3, [pc, #224]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ea      	beq.n	8004388 <HAL_RCC_OscConfig+0x8a0>
 80043b2:	e064      	b.n	800447e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b4:	4b34      	ldr	r3, [pc, #208]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a33      	ldr	r2, [pc, #204]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80043ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd f972 	bl	80016a8 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c6:	e00e      	b.n	80043e6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd f96e 	bl	80016a8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d907      	bls.n	80043e6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d6:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e04c      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e6:	4b28      	ldr	r3, [pc, #160]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ea      	bne.n	80043c8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043f2:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	4924      	ldr	r1, [pc, #144]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_OscConfig+0x9a8>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	60cb      	str	r3, [r1, #12]
 80043fe:	e03e      	b.n	800447e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e039      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <HAL_RCC_OscConfig+0x9a0>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0203 	and.w	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	429a      	cmp	r2, r3
 800441e:	d12c      	bne.n	800447a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	3b01      	subs	r3, #1
 800442c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d123      	bne.n	800447a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d11b      	bne.n	800447a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d113      	bne.n	800447a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	3b01      	subs	r3, #1
 8004460:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d109      	bne.n	800447a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	3b01      	subs	r3, #1
 8004474:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	019f800c 	.word	0x019f800c
 8004490:	feeefffc 	.word	0xfeeefffc

08004494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e11c      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ac:	4b90      	ldr	r3, [pc, #576]	; (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d910      	bls.n	80044dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b8d      	ldr	r3, [pc, #564]	; (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 020f 	bic.w	r2, r3, #15
 80044c2:	498b      	ldr	r1, [pc, #556]	; (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b89      	ldr	r3, [pc, #548]	; (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e104      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d908      	bls.n	800450a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f8:	4b7e      	ldr	r3, [pc, #504]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	497b      	ldr	r1, [pc, #492]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8085 	beq.w	8004622 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d11f      	bne.n	8004560 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004520:	4b74      	ldr	r3, [pc, #464]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0da      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004530:	f000 fa24 	bl	800497c <RCC_GetSysClockFreqFromPLLSource>
 8004534:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4a6f      	ldr	r2, [pc, #444]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d947      	bls.n	80045ce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800453e:	4b6d      	ldr	r3, [pc, #436]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d141      	bne.n	80045ce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800454a:	4b6a      	ldr	r3, [pc, #424]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004552:	4a68      	ldr	r2, [pc, #416]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004558:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e036      	b.n	80045ce <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d107      	bne.n	8004578 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004568:	4b62      	ldr	r3, [pc, #392]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d115      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0b6      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004580:	4b5c      	ldr	r3, [pc, #368]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0aa      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004590:	4b58      	ldr	r3, [pc, #352]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0a2      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045a0:	f000 f8b0 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4a53      	ldr	r2, [pc, #332]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d90f      	bls.n	80045ce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045ae:	4b51      	ldr	r3, [pc, #324]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ba:	4b4e      	ldr	r3, [pc, #312]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c2:	4a4c      	ldr	r2, [pc, #304]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4b49      	ldr	r3, [pc, #292]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4946      	ldr	r1, [pc, #280]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fd f862 	bl	80016a8 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	e013      	b.n	8004610 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e8:	f7fd f85e 	bl	80016a8 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d90a      	bls.n	8004610 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	4b3e      	ldr	r3, [pc, #248]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 020c 	and.w	r2, r3, #12
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e06a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004610:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 020c 	and.w	r2, r3, #12
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	429a      	cmp	r2, r3
 8004620:	d1e2      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b80      	cmp	r3, #128	; 0x80
 8004626:	d105      	bne.n	8004634 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004628:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a31      	ldr	r2, [pc, #196]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 800462e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004632:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800464c:	429a      	cmp	r2, r3
 800464e:	d208      	bcs.n	8004662 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4925      	ldr	r1, [pc, #148]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004662:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d210      	bcs.n	8004692 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 020f 	bic.w	r2, r3, #15
 8004678:	491d      	ldr	r1, [pc, #116]	; (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d001      	beq.n	8004692 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e029      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4912      	ldr	r1, [pc, #72]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d009      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	490a      	ldr	r1, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046d0:	f000 f8b4 	bl	800483c <HAL_RCC_GetHCLKFreq>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x268>)
 80046d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_RCC_ClockConfig+0x26c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc ff92 	bl	8001608 <HAL_InitTick>
 80046e4:	4603      	mov	r3, r0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40022000 	.word	0x40022000
 80046f4:	40021000 	.word	0x40021000
 80046f8:	04c4b400 	.word	0x04c4b400
 80046fc:	20000010 	.word	0x20000010
 8004700:	20000014 	.word	0x20000014

08004704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800471c:	4b44      	ldr	r3, [pc, #272]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x34>
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d121      	bne.n	8004776 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d11e      	bne.n	8004776 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004738:	4b3d      	ldr	r3, [pc, #244]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d107      	bne.n	8004754 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004744:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e005      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004760:	4a34      	ldr	r2, [pc, #208]	; (8004834 <HAL_RCC_GetSysClockFreq+0x130>)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004768:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10d      	bne.n	800478c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004774:	e00a      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b04      	cmp	r3, #4
 800477a:	d102      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800477c:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <HAL_RCC_GetSysClockFreq+0x134>)
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e004      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d101      	bne.n	800478c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_GetSysClockFreq+0x134>)
 800478a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d146      	bne.n	8004820 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004792:	4b27      	ldr	r3, [pc, #156]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800479c:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	3301      	adds	r3, #1
 80047a8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d003      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0xb4>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d00d      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0xce>
 80047b6:	e019      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047b8:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <HAL_RCC_GetSysClockFreq+0x134>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 80047c2:	68d2      	ldr	r2, [r2, #12]
 80047c4:	0a12      	lsrs	r2, r2, #8
 80047c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	617b      	str	r3, [r7, #20]
        break;
 80047d0:	e019      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_RCC_GetSysClockFreq+0x134>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	4a15      	ldr	r2, [pc, #84]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 80047dc:	68d2      	ldr	r2, [r2, #12]
 80047de:	0a12      	lsrs	r2, r2, #8
 80047e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
        break;
 80047ea:	e00c      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 80047f6:	68d2      	ldr	r2, [r2, #12]
 80047f8:	0a12      	lsrs	r2, r2, #8
 80047fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	617b      	str	r3, [r7, #20]
        break;
 8004804:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	0e5b      	lsrs	r3, r3, #25
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	3301      	adds	r3, #1
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004820:	69bb      	ldr	r3, [r7, #24]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	0800746c 	.word	0x0800746c
 8004838:	00f42400 	.word	0x00f42400

0800483c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004840:	f7ff ff60 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_GetHCLKFreq+0x20>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	4903      	ldr	r1, [pc, #12]	; (8004860 <HAL_RCC_GetHCLKFreq+0x24>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	08007454 	.word	0x08007454

08004864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004868:	f7ff ffe8 	bl	800483c <HAL_RCC_GetHCLKFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	08007464 	.word	0x08007464

0800488c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004890:	f7ff ffd4 	bl	800483c <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0adb      	lsrs	r3, r3, #11
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4903      	ldr	r1, [pc, #12]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	08007464 	.word	0x08007464

080048b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048c0:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048cc:	f7ff f86e 	bl	80039ac <HAL_PWREx_GetVoltageRange>
 80048d0:	6138      	str	r0, [r7, #16]
 80048d2:	e014      	b.n	80048fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	4a26      	ldr	r2, [pc, #152]	; (8004974 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	6593      	str	r3, [r2, #88]	; 0x58
 80048e0:	4b24      	ldr	r3, [pc, #144]	; (8004974 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048ec:	f7ff f85e 	bl	80039ac <HAL_PWREx_GetVoltageRange>
 80048f0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048f2:	4b20      	ldr	r3, [pc, #128]	; (8004974 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80048f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490a:	d10b      	bne.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d919      	bls.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2ba0      	cmp	r3, #160	; 0xa0
 8004916:	d902      	bls.n	800491e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004918:	2302      	movs	r3, #2
 800491a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800491c:	e013      	b.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800491e:	2301      	movs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004922:	e010      	b.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b80      	cmp	r3, #128	; 0x80
 8004928:	d902      	bls.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800492a:	2303      	movs	r3, #3
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e00a      	b.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b80      	cmp	r3, #128	; 0x80
 8004934:	d102      	bne.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004936:	2302      	movs	r3, #2
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e004      	b.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b70      	cmp	r3, #112	; 0x70
 8004940:	d101      	bne.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004942:	2301      	movs	r3, #1
 8004944:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 020f 	bic.w	r2, r3, #15
 800494e:	490a      	ldr	r1, [pc, #40]	; (8004978 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
 8004978:	40022000 	.word	0x40022000

0800497c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004982:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800498c:	4b2e      	ldr	r3, [pc, #184]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	3301      	adds	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d015      	beq.n	80049cc <RCC_GetSysClockFreqFromPLLSource+0x50>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d839      	bhi.n	8004a1a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d01c      	beq.n	80049e6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d133      	bne.n	8004a1a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049b2:	4a26      	ldr	r2, [pc, #152]	; (8004a4c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	4a23      	ldr	r2, [pc, #140]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049bc:	68d2      	ldr	r2, [r2, #12]
 80049be:	0a12      	lsrs	r2, r2, #8
 80049c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	613b      	str	r3, [r7, #16]
      break;
 80049ca:	e029      	b.n	8004a20 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049d6:	68d2      	ldr	r2, [r2, #12]
 80049d8:	0a12      	lsrs	r2, r2, #8
 80049da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	613b      	str	r3, [r7, #16]
      break;
 80049e4:	e01c      	b.n	8004a20 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d107      	bne.n	8004a02 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049f2:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e005      	b.n	8004a0e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a02:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004a0e:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a16:	613b      	str	r3, [r7, #16]
        break;
 8004a18:	e002      	b.n	8004a20 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
      break;
 8004a1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	0e5b      	lsrs	r3, r3, #25
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004a3a:	683b      	ldr	r3, [r7, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	0800746c 	.word	0x0800746c

08004a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a60:	2300      	movs	r3, #0
 8004a62:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d040      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d02a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d825      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a7c:	2b60      	cmp	r3, #96	; 0x60
 8004a7e:	d026      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d821      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d006      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d81d      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d010      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a94:	e018      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a96:	4b8f      	ldr	r3, [pc, #572]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a8e      	ldr	r2, [pc, #568]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004aa2:	e015      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fb56 	bl	800515c <RCCEx_PLLSAI1_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ab4:	e00c      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3320      	adds	r3, #32
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fc33 	bl	8005328 <RCCEx_PLLSAI2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	77fb      	strb	r3, [r7, #31]
        break;
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad0:	7ffb      	ldrb	r3, [r7, #31]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ad6:	4b7f      	ldr	r3, [pc, #508]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004adc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae4:	497b      	ldr	r1, [pc, #492]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004aec:	e001      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	7ffb      	ldrb	r3, [r7, #31]
 8004af0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d047      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d030      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d82a      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b12:	d02a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b18:	d824      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b24:	d81e      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b30:	e018      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b32:	4b68      	ldr	r3, [pc, #416]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	4a67      	ldr	r2, [pc, #412]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004b3e:	e015      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fb08 	bl	800515c <RCCEx_PLLSAI1_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004b50:	e00c      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3320      	adds	r3, #32
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fbe5 	bl	8005328 <RCCEx_PLLSAI2_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004b62:	e003      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	77fb      	strb	r3, [r7, #31]
        break;
 8004b68:	e000      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b6c:	7ffb      	ldrb	r3, [r7, #31]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b72:	4b58      	ldr	r3, [pc, #352]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4954      	ldr	r1, [pc, #336]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b88:	e001      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80ab 	beq.w	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba0:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10d      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bac:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	4a48      	ldr	r2, [pc, #288]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bc8:	4b43      	ldr	r3, [pc, #268]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a42      	ldr	r2, [pc, #264]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd4:	f7fc fd68 	bl	80016a8 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bda:	e00f      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bdc:	f7fc fd64 	bl	80016a8 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d908      	bls.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bea:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004bfa:	e006      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0e9      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004c08:	e000      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004c0a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d164      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c12:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01f      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d019      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c30:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c4c:	4b21      	ldr	r3, [pc, #132]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01f      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7fc fd1b 	bl	80016a8 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c74:	e012      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fc fd17 	bl	80016a8 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d909      	bls.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c88:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004c9a:	e007      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0e5      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004caa:	e000      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004cac:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004cae:	7ffb      	ldrb	r3, [r7, #31]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10c      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc4:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cce:	7ffb      	ldrb	r3, [r7, #31]
 8004cd0:	77bb      	strb	r3, [r7, #30]
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7ffb      	ldrb	r3, [r7, #31]
 8004cde:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d105      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce6:	4b9c      	ldr	r3, [pc, #624]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	4a9b      	ldr	r2, [pc, #620]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cfe:	4b96      	ldr	r3, [pc, #600]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f023 0203 	bic.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	4992      	ldr	r1, [pc, #584]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d20:	4b8d      	ldr	r3, [pc, #564]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f023 020c 	bic.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	498a      	ldr	r1, [pc, #552]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d42:	4b85      	ldr	r3, [pc, #532]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d50:	4981      	ldr	r1, [pc, #516]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d64:	4b7c      	ldr	r3, [pc, #496]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	4979      	ldr	r1, [pc, #484]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d86:	4b74      	ldr	r3, [pc, #464]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	4970      	ldr	r1, [pc, #448]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da8:	4b6b      	ldr	r3, [pc, #428]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db6:	4968      	ldr	r1, [pc, #416]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dca:	4b63      	ldr	r3, [pc, #396]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd8:	495f      	ldr	r1, [pc, #380]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dec:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfa:	4957      	ldr	r1, [pc, #348]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004e0e:	4b52      	ldr	r3, [pc, #328]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1c:	494e      	ldr	r1, [pc, #312]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d031      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e38:	d00e      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e3e:	d814      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d015      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e48:	d10f      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	4a42      	ldr	r2, [pc, #264]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e54:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004e56:	e00c      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f97c 	bl	800515c <RCCEx_PLLSAI1_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004e68:	e003      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	77fb      	strb	r3, [r7, #31]
        break;
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e72:	7ffb      	ldrb	r3, [r7, #31]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10b      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e78:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e86:	4934      	ldr	r1, [pc, #208]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e8e:	e001      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	7ffb      	ldrb	r3, [r7, #31]
 8004e92:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	492a      	ldr	r1, [pc, #168]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ec2:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	4921      	ldr	r1, [pc, #132]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ee4:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	4919      	ldr	r1, [pc, #100]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f0c:	f023 0203 	bic.w	r2, r3, #3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	4910      	ldr	r1, [pc, #64]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d02b      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	4908      	ldr	r1, [pc, #32]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f46:	d109      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a02      	ldr	r2, [pc, #8]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f52:	60d3      	str	r3, [r2, #12]
 8004f54:	e014      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f8f5 	bl	800515c <RCCEx_PLLSAI1_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004f76:	7ffb      	ldrb	r3, [r7, #31]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004f7c:	7ffb      	ldrb	r3, [r7, #31]
 8004f7e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d04a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f94:	d108      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004f96:	4b70      	ldr	r3, [pc, #448]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f9c:	4a6e      	ldr	r2, [pc, #440]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fa2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004fa6:	e012      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004fa8:	4b6b      	ldr	r3, [pc, #428]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb6:	4968      	ldr	r1, [pc, #416]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fbe:	4b66      	ldr	r3, [pc, #408]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc4:	4a64      	ldr	r2, [pc, #400]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f8bc 	bl	800515c <RCCEx_PLLSAI1_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d019      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004fee:	7ffb      	ldrb	r3, [r7, #31]
 8004ff0:	77bb      	strb	r3, [r7, #30]
 8004ff2:	e016      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffc:	d106      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ffe:	4b56      	ldr	r3, [pc, #344]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	4a55      	ldr	r2, [pc, #340]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005008:	60d3      	str	r3, [r2, #12]
 800500a:	e00a      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005014:	d105      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005016:	4b50      	ldr	r3, [pc, #320]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	4a4f      	ldr	r2, [pc, #316]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d028      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800502e:	4b4a      	ldr	r3, [pc, #296]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800503c:	4946      	ldr	r1, [pc, #280]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800504c:	d106      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800504e:	4b42      	ldr	r3, [pc, #264]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	4a41      	ldr	r2, [pc, #260]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005058:	60d3      	str	r3, [r2, #12]
 800505a:	e011      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005064:	d10c      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3304      	adds	r3, #4
 800506a:	2101      	movs	r1, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f875 	bl	800515c <RCCEx_PLLSAI1_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005076:	7ffb      	ldrb	r3, [r7, #31]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800507c:	7ffb      	ldrb	r3, [r7, #31]
 800507e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01e      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800508c:	4b32      	ldr	r3, [pc, #200]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005092:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509c:	492e      	ldr	r1, [pc, #184]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ae:	d10c      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	2102      	movs	r1, #2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 f850 	bl	800515c <RCCEx_PLLSAI1_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80050c0:	7ffb      	ldrb	r3, [r7, #31]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80050c6:	7ffb      	ldrb	r3, [r7, #31]
 80050c8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80050d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050dc:	f023 0204 	bic.w	r2, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e6:	491c      	ldr	r1, [pc, #112]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80050fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005100:	f023 0218 	bic.w	r2, r3, #24
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	4913      	ldr	r1, [pc, #76]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d017      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800511e:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005120:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512e:	490a      	ldr	r1, [pc, #40]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005140:	d105      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800514c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800514e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000

0800515c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d018      	beq.n	80051a4 <RCCEx_PLLSAI1_Config+0x48>
 8005172:	2b03      	cmp	r3, #3
 8005174:	d81f      	bhi.n	80051b6 <RCCEx_PLLSAI1_Config+0x5a>
 8005176:	2b01      	cmp	r3, #1
 8005178:	d002      	beq.n	8005180 <RCCEx_PLLSAI1_Config+0x24>
 800517a:	2b02      	cmp	r3, #2
 800517c:	d009      	beq.n	8005192 <RCCEx_PLLSAI1_Config+0x36>
 800517e:	e01a      	b.n	80051b6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005180:	4b65      	ldr	r3, [pc, #404]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d117      	bne.n	80051bc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005190:	e014      	b.n	80051bc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005192:	4b61      	ldr	r3, [pc, #388]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519a:	2b00      	cmp	r3, #0
 800519c:	d110      	bne.n	80051c0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a2:	e00d      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80051a4:	4b5c      	ldr	r3, [pc, #368]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b4:	e006      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
      break;
 80051ba:	e004      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80051bc:	bf00      	nop
 80051be:	e002      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80051c0:	bf00      	nop
 80051c2:	e000      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80051c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 809f 	bne.w	800530c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051ce:	4b52      	ldr	r3, [pc, #328]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a51      	ldr	r2, [pc, #324]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80051d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051da:	f7fc fa65 	bl	80016a8 <HAL_GetTick>
 80051de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051e0:	e00f      	b.n	8005202 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051e2:	f7fc fa61 	bl	80016a8 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d908      	bls.n	8005202 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051f0:	4b49      	ldr	r3, [pc, #292]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005200:	e006      	b.n	8005210 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005202:	4b45      	ldr	r3, [pc, #276]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e9      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0x86>
 800520e:	e000      	b.n	8005212 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005210:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d179      	bne.n	800530c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d116      	bne.n	800524c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800521e:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	4b3e      	ldr	r3, [pc, #248]	; (800531c <RCCEx_PLLSAI1_Config+0x1c0>)
 8005224:	4013      	ands	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6892      	ldr	r2, [r2, #8]
 800522a:	0211      	lsls	r1, r2, #8
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68d2      	ldr	r2, [r2, #12]
 8005230:	06d2      	lsls	r2, r2, #27
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6852      	ldr	r2, [r2, #4]
 8005238:	3a01      	subs	r2, #1
 800523a:	0112      	lsls	r2, r2, #4
 800523c:	4311      	orrs	r1, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	4934      	ldr	r1, [pc, #208]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	610b      	str	r3, [r1, #16]
 800524a:	e033      	b.n	80052b4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d118      	bne.n	8005284 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005252:	4b31      	ldr	r3, [pc, #196]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	4b32      	ldr	r3, [pc, #200]	; (8005320 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6892      	ldr	r2, [r2, #8]
 800525e:	0211      	lsls	r1, r2, #8
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6912      	ldr	r2, [r2, #16]
 8005264:	0852      	lsrs	r2, r2, #1
 8005266:	3a01      	subs	r2, #1
 8005268:	0552      	lsls	r2, r2, #21
 800526a:	4311      	orrs	r1, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6852      	ldr	r2, [r2, #4]
 8005270:	3a01      	subs	r2, #1
 8005272:	0112      	lsls	r2, r2, #4
 8005274:	4311      	orrs	r1, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	4926      	ldr	r1, [pc, #152]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	610b      	str	r3, [r1, #16]
 8005282:	e017      	b.n	80052b4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	4b26      	ldr	r3, [pc, #152]	; (8005324 <RCCEx_PLLSAI1_Config+0x1c8>)
 800528a:	4013      	ands	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6892      	ldr	r2, [r2, #8]
 8005290:	0211      	lsls	r1, r2, #8
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6952      	ldr	r2, [r2, #20]
 8005296:	0852      	lsrs	r2, r2, #1
 8005298:	3a01      	subs	r2, #1
 800529a:	0652      	lsls	r2, r2, #25
 800529c:	4311      	orrs	r1, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6852      	ldr	r2, [r2, #4]
 80052a2:	3a01      	subs	r2, #1
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	4311      	orrs	r1, r2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	491a      	ldr	r1, [pc, #104]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052b4:	4b18      	ldr	r3, [pc, #96]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a17      	ldr	r2, [pc, #92]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80052ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fc f9f2 	bl	80016a8 <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052c6:	e00f      	b.n	80052e8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052c8:	f7fc f9ee 	bl	80016a8 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d908      	bls.n	80052e8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052d6:	4b10      	ldr	r3, [pc, #64]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80052e6:	e006      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0e9      	beq.n	80052c8 <RCCEx_PLLSAI1_Config+0x16c>
 80052f4:	e000      	b.n	80052f8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80052f6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	4904      	ldr	r1, [pc, #16]	; (8005318 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000
 800531c:	07ff800c 	.word	0x07ff800c
 8005320:	ff9f800c 	.word	0xff9f800c
 8005324:	f9ff800c 	.word	0xf9ff800c

08005328 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b03      	cmp	r3, #3
 800533c:	d018      	beq.n	8005370 <RCCEx_PLLSAI2_Config+0x48>
 800533e:	2b03      	cmp	r3, #3
 8005340:	d81f      	bhi.n	8005382 <RCCEx_PLLSAI2_Config+0x5a>
 8005342:	2b01      	cmp	r3, #1
 8005344:	d002      	beq.n	800534c <RCCEx_PLLSAI2_Config+0x24>
 8005346:	2b02      	cmp	r3, #2
 8005348:	d009      	beq.n	800535e <RCCEx_PLLSAI2_Config+0x36>
 800534a:	e01a      	b.n	8005382 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800534c:	4b4a      	ldr	r3, [pc, #296]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d117      	bne.n	8005388 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800535c:	e014      	b.n	8005388 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800535e:	4b46      	ldr	r3, [pc, #280]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005366:	2b00      	cmp	r3, #0
 8005368:	d110      	bne.n	800538c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800536e:	e00d      	b.n	800538c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005370:	4b41      	ldr	r3, [pc, #260]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005380:	e006      	b.n	8005390 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
      break;
 8005386:	e004      	b.n	8005392 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005390:	bf00      	nop
  }

  if (status == HAL_OK)
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d169      	bne.n	800546c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005398:	4b37      	ldr	r3, [pc, #220]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a36      	ldr	r2, [pc, #216]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 800539e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a4:	f7fc f980 	bl	80016a8 <HAL_GetTick>
 80053a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053aa:	e00f      	b.n	80053cc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053ac:	f7fc f97c 	bl	80016a8 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d908      	bls.n	80053cc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053ba:	4b2f      	ldr	r3, [pc, #188]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053ca:	e006      	b.n	80053da <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053cc:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e9      	bne.n	80053ac <RCCEx_PLLSAI2_Config+0x84>
 80053d8:	e000      	b.n	80053dc <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80053da:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d144      	bne.n	800546c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d115      	bne.n	8005414 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053e8:	4b23      	ldr	r3, [pc, #140]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	4b23      	ldr	r3, [pc, #140]	; (800547c <RCCEx_PLLSAI2_Config+0x154>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6892      	ldr	r2, [r2, #8]
 80053f4:	0211      	lsls	r1, r2, #8
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68d2      	ldr	r2, [r2, #12]
 80053fa:	06d2      	lsls	r2, r2, #27
 80053fc:	4311      	orrs	r1, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6852      	ldr	r2, [r2, #4]
 8005402:	3a01      	subs	r2, #1
 8005404:	0112      	lsls	r2, r2, #4
 8005406:	4311      	orrs	r1, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	491a      	ldr	r1, [pc, #104]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 8005410:	4313      	orrs	r3, r2
 8005412:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005414:	4b18      	ldr	r3, [pc, #96]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a17      	ldr	r2, [pc, #92]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 800541a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fc f942 	bl	80016a8 <HAL_GetTick>
 8005424:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005426:	e00f      	b.n	8005448 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005428:	f7fc f93e 	bl	80016a8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d908      	bls.n	8005448 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005446:	e006      	b.n	8005456 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0e9      	beq.n	8005428 <RCCEx_PLLSAI2_Config+0x100>
 8005454:	e000      	b.n	8005458 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005456:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800545e:	4b06      	ldr	r3, [pc, #24]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	4904      	ldr	r1, [pc, #16]	; (8005478 <RCCEx_PLLSAI2_Config+0x150>)
 8005468:	4313      	orrs	r3, r2
 800546a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40021000 	.word	0x40021000
 800547c:	07ff800c 	.word	0x07ff800c

08005480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e095      	b.n	80055be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d108      	bne.n	80054ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a2:	d009      	beq.n	80054b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	61da      	str	r2, [r3, #28]
 80054aa:	e005      	b.n	80054b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fb fe22 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f8:	d902      	bls.n	8005500 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	e002      	b.n	8005506 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005504:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800550e:	d007      	beq.n	8005520 <HAL_SPI_Init+0xa0>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005518:	d002      	beq.n	8005520 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	ea42 0103 	orr.w	r1, r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	0c1b      	lsrs	r3, r3, #16
 800557c:	f003 0204 	and.w	r2, r3, #4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800559c:	ea42 0103 	orr.w	r1, r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e097      	b.n	800570a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb fdd8 	bl	80011a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f000 fa78 	bl	8005b10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005648:	f023 0303 	bic.w	r3, r3, #3
 800564c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	4313      	orrs	r3, r2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005666:	f023 030c 	bic.w	r3, r3, #12
 800566a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	4313      	orrs	r3, r2
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	011a      	lsls	r2, r3, #4
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	4313      	orrs	r3, r2
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80056a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80056ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4313      	orrs	r3, r2
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005722:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800572a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005732:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800573a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d110      	bne.n	8005764 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d102      	bne.n	800574e <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005748:	7b7b      	ldrb	r3, [r7, #13]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d001      	beq.n	8005752 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e089      	b.n	8005866 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005762:	e031      	b.n	80057c8 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b04      	cmp	r3, #4
 8005768:	d110      	bne.n	800578c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800576a:	7bbb      	ldrb	r3, [r7, #14]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d102      	bne.n	8005776 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005770:	7b3b      	ldrb	r3, [r7, #12]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d001      	beq.n	800577a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e075      	b.n	8005866 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2202      	movs	r2, #2
 8005786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800578a:	e01d      	b.n	80057c8 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d108      	bne.n	80057a4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005792:	7bbb      	ldrb	r3, [r7, #14]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d105      	bne.n	80057a4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005798:	7b7b      	ldrb	r3, [r7, #13]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d102      	bne.n	80057a4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800579e:	7b3b      	ldrb	r3, [r7, #12]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d001      	beq.n	80057a8 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e05e      	b.n	8005866 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_Encoder_Start_IT+0xc4>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d010      	beq.n	80057f6 <HAL_TIM_Encoder_Start_IT+0xe4>
 80057d4:	e01f      	b.n	8005816 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2201      	movs	r2, #1
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fa30 	bl	8005c44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0202 	orr.w	r2, r2, #2
 80057f2:	60da      	str	r2, [r3, #12]
      break;
 80057f4:	e02e      	b.n	8005854 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	2104      	movs	r1, #4
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fa20 	bl	8005c44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0204 	orr.w	r2, r2, #4
 8005812:	60da      	str	r2, [r3, #12]
      break;
 8005814:	e01e      	b.n	8005854 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2201      	movs	r2, #1
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fa10 	bl	8005c44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2201      	movs	r2, #1
 800582a:	2104      	movs	r1, #4
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fa09 	bl	8005c44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0202 	orr.w	r2, r2, #2
 8005840:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0204 	orr.w	r2, r2, #4
 8005850:	60da      	str	r2, [r3, #12]
      break;
 8005852:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d122      	bne.n	80058ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d11b      	bne.n	80058ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f06f 0202 	mvn.w	r2, #2
 800589a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f90f 	bl	8005ad4 <HAL_TIM_IC_CaptureCallback>
 80058b6:	e005      	b.n	80058c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f901 	bl	8005ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f912 	bl	8005ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d122      	bne.n	800591e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d11b      	bne.n	800591e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f06f 0204 	mvn.w	r2, #4
 80058ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f8e5 	bl	8005ad4 <HAL_TIM_IC_CaptureCallback>
 800590a:	e005      	b.n	8005918 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f8d7 	bl	8005ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f8e8 	bl	8005ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b08      	cmp	r3, #8
 800592a:	d122      	bne.n	8005972 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b08      	cmp	r3, #8
 8005938:	d11b      	bne.n	8005972 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f06f 0208 	mvn.w	r2, #8
 8005942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2204      	movs	r2, #4
 8005948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8bb 	bl	8005ad4 <HAL_TIM_IC_CaptureCallback>
 800595e:	e005      	b.n	800596c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f8ad 	bl	8005ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f8be 	bl	8005ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b10      	cmp	r3, #16
 800597e:	d122      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b10      	cmp	r3, #16
 800598c:	d11b      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0210 	mvn.w	r2, #16
 8005996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2208      	movs	r2, #8
 800599c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f891 	bl	8005ad4 <HAL_TIM_IC_CaptureCallback>
 80059b2:	e005      	b.n	80059c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f883 	bl	8005ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f894 	bl	8005ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d10e      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d107      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f06f 0201 	mvn.w	r2, #1
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f85d 	bl	8005aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d10e      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b80      	cmp	r3, #128	; 0x80
 8005a0c:	d107      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f9cb 	bl	8005db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2c:	d10e      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	d107      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f9be 	bl	8005dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a56:	2b40      	cmp	r3, #64	; 0x40
 8005a58:	d10e      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d107      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f842 	bl	8005afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d10e      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d107      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0220 	mvn.w	r2, #32
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f97e 	bl	8005da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a40      	ldr	r2, [pc, #256]	; (8005c24 <TIM_Base_SetConfig+0x114>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d00f      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3d      	ldr	r2, [pc, #244]	; (8005c28 <TIM_Base_SetConfig+0x118>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3c      	ldr	r2, [pc, #240]	; (8005c2c <TIM_Base_SetConfig+0x11c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a3b      	ldr	r2, [pc, #236]	; (8005c30 <TIM_Base_SetConfig+0x120>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a3a      	ldr	r2, [pc, #232]	; (8005c34 <TIM_Base_SetConfig+0x124>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d108      	bne.n	8005b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2f      	ldr	r2, [pc, #188]	; (8005c24 <TIM_Base_SetConfig+0x114>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01f      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b70:	d01b      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2c      	ldr	r2, [pc, #176]	; (8005c28 <TIM_Base_SetConfig+0x118>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d017      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2b      	ldr	r2, [pc, #172]	; (8005c2c <TIM_Base_SetConfig+0x11c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <TIM_Base_SetConfig+0x120>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00f      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a29      	ldr	r2, [pc, #164]	; (8005c34 <TIM_Base_SetConfig+0x124>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00b      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a28      	ldr	r2, [pc, #160]	; (8005c38 <TIM_Base_SetConfig+0x128>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a27      	ldr	r2, [pc, #156]	; (8005c3c <TIM_Base_SetConfig+0x12c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <TIM_Base_SetConfig+0x130>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a10      	ldr	r2, [pc, #64]	; (8005c24 <TIM_Base_SetConfig+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00f      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <TIM_Base_SetConfig+0x124>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a11      	ldr	r2, [pc, #68]	; (8005c38 <TIM_Base_SetConfig+0x128>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <TIM_Base_SetConfig+0x12c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a0f      	ldr	r2, [pc, #60]	; (8005c40 <TIM_Base_SetConfig+0x130>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d103      	bne.n	8005c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	615a      	str	r2, [r3, #20]
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000c00 	.word	0x40000c00
 8005c34:	40013400 	.word	0x40013400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800

08005c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	2201      	movs	r2, #1
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	401a      	ands	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1a      	ldr	r2, [r3, #32]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e068      	b.n	8005d7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a2d      	ldr	r2, [pc, #180]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d108      	bne.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ce2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01d      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1a:	d018      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a13      	ldr	r2, [pc, #76]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10c      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40013400 	.word	0x40013400
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40014000 	.word	0x40014000

08005da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e042      	b.n	8005e74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fb fa23 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2224      	movs	r2, #36	; 0x24
 8005e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f82c 	bl	8005e7c <UART_SetConfig>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e022      	b.n	8005e74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fb20 	bl	800647c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fba7 	bl	80065c0 <UART_CheckIdleState>
 8005e72:	4603      	mov	r3, r0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e80:	b08c      	sub	sp, #48	; 0x30
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4baa      	ldr	r3, [pc, #680]	; (8006154 <UART_SetConfig+0x2d8>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a9f      	ldr	r2, [pc, #636]	; (8006158 <UART_SetConfig+0x2dc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ef2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	f023 010f 	bic.w	r1, r3, #15
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a90      	ldr	r2, [pc, #576]	; (800615c <UART_SetConfig+0x2e0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d125      	bne.n	8005f6c <UART_SetConfig+0xf0>
 8005f20:	4b8f      	ldr	r3, [pc, #572]	; (8006160 <UART_SetConfig+0x2e4>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d81a      	bhi.n	8005f64 <UART_SetConfig+0xe8>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0xb8>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f55 	.word	0x08005f55
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	e116      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f52:	e112      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5a:	e10e      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f62:	e10a      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6a:	e106      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7c      	ldr	r2, [pc, #496]	; (8006164 <UART_SetConfig+0x2e8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d138      	bne.n	8005fe8 <UART_SetConfig+0x16c>
 8005f76:	4b7a      	ldr	r3, [pc, #488]	; (8006160 <UART_SetConfig+0x2e4>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f003 030c 	and.w	r3, r3, #12
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	d82d      	bhi.n	8005fe0 <UART_SetConfig+0x164>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0x110>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	08005fe1 	.word	0x08005fe1
 8005f98:	08005fe1 	.word	0x08005fe1
 8005f9c:	08005fd1 	.word	0x08005fd1
 8005fa0:	08005fe1 	.word	0x08005fe1
 8005fa4:	08005fe1 	.word	0x08005fe1
 8005fa8:	08005fe1 	.word	0x08005fe1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fd9 	.word	0x08005fd9
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc6:	e0d8      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fce:	e0d4      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd6:	e0d0      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fde:	e0cc      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe6:	e0c8      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a5e      	ldr	r2, [pc, #376]	; (8006168 <UART_SetConfig+0x2ec>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d125      	bne.n	800603e <UART_SetConfig+0x1c2>
 8005ff2:	4b5b      	ldr	r3, [pc, #364]	; (8006160 <UART_SetConfig+0x2e4>)
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ffc:	2b30      	cmp	r3, #48	; 0x30
 8005ffe:	d016      	beq.n	800602e <UART_SetConfig+0x1b2>
 8006000:	2b30      	cmp	r3, #48	; 0x30
 8006002:	d818      	bhi.n	8006036 <UART_SetConfig+0x1ba>
 8006004:	2b20      	cmp	r3, #32
 8006006:	d00a      	beq.n	800601e <UART_SetConfig+0x1a2>
 8006008:	2b20      	cmp	r3, #32
 800600a:	d814      	bhi.n	8006036 <UART_SetConfig+0x1ba>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <UART_SetConfig+0x19a>
 8006010:	2b10      	cmp	r3, #16
 8006012:	d008      	beq.n	8006026 <UART_SetConfig+0x1aa>
 8006014:	e00f      	b.n	8006036 <UART_SetConfig+0x1ba>
 8006016:	2300      	movs	r3, #0
 8006018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800601c:	e0ad      	b.n	800617a <UART_SetConfig+0x2fe>
 800601e:	2302      	movs	r3, #2
 8006020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006024:	e0a9      	b.n	800617a <UART_SetConfig+0x2fe>
 8006026:	2304      	movs	r3, #4
 8006028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602c:	e0a5      	b.n	800617a <UART_SetConfig+0x2fe>
 800602e:	2308      	movs	r3, #8
 8006030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006034:	e0a1      	b.n	800617a <UART_SetConfig+0x2fe>
 8006036:	2310      	movs	r3, #16
 8006038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603c:	e09d      	b.n	800617a <UART_SetConfig+0x2fe>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4a      	ldr	r2, [pc, #296]	; (800616c <UART_SetConfig+0x2f0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d125      	bne.n	8006094 <UART_SetConfig+0x218>
 8006048:	4b45      	ldr	r3, [pc, #276]	; (8006160 <UART_SetConfig+0x2e4>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006052:	2bc0      	cmp	r3, #192	; 0xc0
 8006054:	d016      	beq.n	8006084 <UART_SetConfig+0x208>
 8006056:	2bc0      	cmp	r3, #192	; 0xc0
 8006058:	d818      	bhi.n	800608c <UART_SetConfig+0x210>
 800605a:	2b80      	cmp	r3, #128	; 0x80
 800605c:	d00a      	beq.n	8006074 <UART_SetConfig+0x1f8>
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d814      	bhi.n	800608c <UART_SetConfig+0x210>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <UART_SetConfig+0x1f0>
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d008      	beq.n	800607c <UART_SetConfig+0x200>
 800606a:	e00f      	b.n	800608c <UART_SetConfig+0x210>
 800606c:	2300      	movs	r3, #0
 800606e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006072:	e082      	b.n	800617a <UART_SetConfig+0x2fe>
 8006074:	2302      	movs	r3, #2
 8006076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607a:	e07e      	b.n	800617a <UART_SetConfig+0x2fe>
 800607c:	2304      	movs	r3, #4
 800607e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006082:	e07a      	b.n	800617a <UART_SetConfig+0x2fe>
 8006084:	2308      	movs	r3, #8
 8006086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608a:	e076      	b.n	800617a <UART_SetConfig+0x2fe>
 800608c:	2310      	movs	r3, #16
 800608e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006092:	e072      	b.n	800617a <UART_SetConfig+0x2fe>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a35      	ldr	r2, [pc, #212]	; (8006170 <UART_SetConfig+0x2f4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d12a      	bne.n	80060f4 <UART_SetConfig+0x278>
 800609e:	4b30      	ldr	r3, [pc, #192]	; (8006160 <UART_SetConfig+0x2e4>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ac:	d01a      	beq.n	80060e4 <UART_SetConfig+0x268>
 80060ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b2:	d81b      	bhi.n	80060ec <UART_SetConfig+0x270>
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b8:	d00c      	beq.n	80060d4 <UART_SetConfig+0x258>
 80060ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060be:	d815      	bhi.n	80060ec <UART_SetConfig+0x270>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <UART_SetConfig+0x250>
 80060c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c8:	d008      	beq.n	80060dc <UART_SetConfig+0x260>
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x270>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d2:	e052      	b.n	800617a <UART_SetConfig+0x2fe>
 80060d4:	2302      	movs	r3, #2
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060da:	e04e      	b.n	800617a <UART_SetConfig+0x2fe>
 80060dc:	2304      	movs	r3, #4
 80060de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e2:	e04a      	b.n	800617a <UART_SetConfig+0x2fe>
 80060e4:	2308      	movs	r3, #8
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ea:	e046      	b.n	800617a <UART_SetConfig+0x2fe>
 80060ec:	2310      	movs	r3, #16
 80060ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f2:	e042      	b.n	800617a <UART_SetConfig+0x2fe>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a17      	ldr	r2, [pc, #92]	; (8006158 <UART_SetConfig+0x2dc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d13a      	bne.n	8006174 <UART_SetConfig+0x2f8>
 80060fe:	4b18      	ldr	r3, [pc, #96]	; (8006160 <UART_SetConfig+0x2e4>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800610c:	d01a      	beq.n	8006144 <UART_SetConfig+0x2c8>
 800610e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006112:	d81b      	bhi.n	800614c <UART_SetConfig+0x2d0>
 8006114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006118:	d00c      	beq.n	8006134 <UART_SetConfig+0x2b8>
 800611a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611e:	d815      	bhi.n	800614c <UART_SetConfig+0x2d0>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <UART_SetConfig+0x2b0>
 8006124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006128:	d008      	beq.n	800613c <UART_SetConfig+0x2c0>
 800612a:	e00f      	b.n	800614c <UART_SetConfig+0x2d0>
 800612c:	2300      	movs	r3, #0
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006132:	e022      	b.n	800617a <UART_SetConfig+0x2fe>
 8006134:	2302      	movs	r3, #2
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613a:	e01e      	b.n	800617a <UART_SetConfig+0x2fe>
 800613c:	2304      	movs	r3, #4
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006142:	e01a      	b.n	800617a <UART_SetConfig+0x2fe>
 8006144:	2308      	movs	r3, #8
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800614a:	e016      	b.n	800617a <UART_SetConfig+0x2fe>
 800614c:	2310      	movs	r3, #16
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006152:	e012      	b.n	800617a <UART_SetConfig+0x2fe>
 8006154:	cfff69f3 	.word	0xcfff69f3
 8006158:	40008000 	.word	0x40008000
 800615c:	40013800 	.word	0x40013800
 8006160:	40021000 	.word	0x40021000
 8006164:	40004400 	.word	0x40004400
 8006168:	40004800 	.word	0x40004800
 800616c:	40004c00 	.word	0x40004c00
 8006170:	40005000 	.word	0x40005000
 8006174:	2310      	movs	r3, #16
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4ab0      	ldr	r2, [pc, #704]	; (8006440 <UART_SetConfig+0x5c4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	f040 809b 	bne.w	80062bc <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800618a:	2b08      	cmp	r3, #8
 800618c:	d827      	bhi.n	80061de <UART_SetConfig+0x362>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <UART_SetConfig+0x318>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061b9 	.word	0x080061b9
 8006198:	080061c1 	.word	0x080061c1
 800619c:	080061c9 	.word	0x080061c9
 80061a0:	080061df 	.word	0x080061df
 80061a4:	080061cf 	.word	0x080061cf
 80061a8:	080061df 	.word	0x080061df
 80061ac:	080061df 	.word	0x080061df
 80061b0:	080061df 	.word	0x080061df
 80061b4:	080061d7 	.word	0x080061d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b8:	f7fe fb54 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 80061bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061be:	e014      	b.n	80061ea <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c0:	f7fe fb64 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 80061c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061c6:	e010      	b.n	80061ea <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c8:	4b9e      	ldr	r3, [pc, #632]	; (8006444 <UART_SetConfig+0x5c8>)
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061cc:	e00d      	b.n	80061ea <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ce:	f7fe fa99 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061d4:	e009      	b.n	80061ea <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061dc:	e005      	b.n	80061ea <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8130 	beq.w	8006452 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	4a94      	ldr	r2, [pc, #592]	; (8006448 <UART_SetConfig+0x5cc>)
 80061f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fc:	461a      	mov	r2, r3
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	fbb3 f3f2 	udiv	r3, r3, r2
 8006204:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4413      	add	r3, r2
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	429a      	cmp	r2, r3
 8006214:	d305      	bcc.n	8006222 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	429a      	cmp	r2, r3
 8006220:	d903      	bls.n	800622a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006228:	e113      	b.n	8006452 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	2200      	movs	r2, #0
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	60fa      	str	r2, [r7, #12]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	4a84      	ldr	r2, [pc, #528]	; (8006448 <UART_SetConfig+0x5cc>)
 8006238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623c:	b29b      	uxth	r3, r3
 800623e:	2200      	movs	r2, #0
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006248:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800624c:	f7f9 fff2 	bl	8000234 <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	020b      	lsls	r3, r1, #8
 8006262:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006266:	0202      	lsls	r2, r0, #8
 8006268:	6979      	ldr	r1, [r7, #20]
 800626a:	6849      	ldr	r1, [r1, #4]
 800626c:	0849      	lsrs	r1, r1, #1
 800626e:	2000      	movs	r0, #0
 8006270:	460c      	mov	r4, r1
 8006272:	4605      	mov	r5, r0
 8006274:	eb12 0804 	adds.w	r8, r2, r4
 8006278:	eb43 0905 	adc.w	r9, r3, r5
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	469a      	mov	sl, r3
 8006284:	4693      	mov	fp, r2
 8006286:	4652      	mov	r2, sl
 8006288:	465b      	mov	r3, fp
 800628a:	4640      	mov	r0, r8
 800628c:	4649      	mov	r1, r9
 800628e:	f7f9 ffd1 	bl	8000234 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4613      	mov	r3, r2
 8006298:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a0:	d308      	bcc.n	80062b4 <UART_SetConfig+0x438>
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a8:	d204      	bcs.n	80062b4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6a3a      	ldr	r2, [r7, #32]
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	e0ce      	b.n	8006452 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062ba:	e0ca      	b.n	8006452 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c4:	d166      	bne.n	8006394 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80062c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d827      	bhi.n	800631e <UART_SetConfig+0x4a2>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x458>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	08006301 	.word	0x08006301
 80062dc:	08006309 	.word	0x08006309
 80062e0:	0800631f 	.word	0x0800631f
 80062e4:	0800630f 	.word	0x0800630f
 80062e8:	0800631f 	.word	0x0800631f
 80062ec:	0800631f 	.word	0x0800631f
 80062f0:	0800631f 	.word	0x0800631f
 80062f4:	08006317 	.word	0x08006317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7fe fab4 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 80062fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062fe:	e014      	b.n	800632a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006300:	f7fe fac4 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 8006304:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006306:	e010      	b.n	800632a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006308:	4b4e      	ldr	r3, [pc, #312]	; (8006444 <UART_SetConfig+0x5c8>)
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800630c:	e00d      	b.n	800632a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630e:	f7fe f9f9 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 8006312:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006314:	e009      	b.n	800632a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800631c:	e005      	b.n	800632a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8090 	beq.w	8006452 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	4a44      	ldr	r2, [pc, #272]	; (8006448 <UART_SetConfig+0x5cc>)
 8006338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633c:	461a      	mov	r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	fbb3 f3f2 	udiv	r3, r3, r2
 8006344:	005a      	lsls	r2, r3, #1
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	441a      	add	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	2b0f      	cmp	r3, #15
 800635c:	d916      	bls.n	800638c <UART_SetConfig+0x510>
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006364:	d212      	bcs.n	800638c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f023 030f 	bic.w	r3, r3, #15
 800636e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	b29b      	uxth	r3, r3
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	b29a      	uxth	r2, r3
 800637c:	8bfb      	ldrh	r3, [r7, #30]
 800637e:	4313      	orrs	r3, r2
 8006380:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	8bfa      	ldrh	r2, [r7, #30]
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	e062      	b.n	8006452 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006392:	e05e      	b.n	8006452 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006398:	2b08      	cmp	r3, #8
 800639a:	d828      	bhi.n	80063ee <UART_SetConfig+0x572>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0x528>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063d1 	.word	0x080063d1
 80063ac:	080063d9 	.word	0x080063d9
 80063b0:	080063ef 	.word	0x080063ef
 80063b4:	080063df 	.word	0x080063df
 80063b8:	080063ef 	.word	0x080063ef
 80063bc:	080063ef 	.word	0x080063ef
 80063c0:	080063ef 	.word	0x080063ef
 80063c4:	080063e7 	.word	0x080063e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c8:	f7fe fa4c 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 80063cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063ce:	e014      	b.n	80063fa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d0:	f7fe fa5c 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 80063d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063d6:	e010      	b.n	80063fa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d8:	4b1a      	ldr	r3, [pc, #104]	; (8006444 <UART_SetConfig+0x5c8>)
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063dc:	e00d      	b.n	80063fa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063de:	f7fe f991 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80063e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063e4:	e009      	b.n	80063fa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063ec:	e005      	b.n	80063fa <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063f8:	bf00      	nop
    }

    if (pclk != 0U)
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d028      	beq.n	8006452 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	4a10      	ldr	r2, [pc, #64]	; (8006448 <UART_SetConfig+0x5cc>)
 8006406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800640a:	461a      	mov	r2, r3
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	441a      	add	r2, r3
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d910      	bls.n	800644c <UART_SetConfig+0x5d0>
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006430:	d20c      	bcs.n	800644c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	b29a      	uxth	r2, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60da      	str	r2, [r3, #12]
 800643c:	e009      	b.n	8006452 <UART_SetConfig+0x5d6>
 800643e:	bf00      	nop
 8006440:	40008000 	.word	0x40008000
 8006444:	00f42400 	.word	0x00f42400
 8006448:	080074ac 	.word	0x080074ac
      }
      else
      {
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2201      	movs	r2, #1
 8006456:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2201      	movs	r2, #1
 800645e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2200      	movs	r2, #0
 800646c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800646e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006472:	4618      	mov	r0, r3
 8006474:	3730      	adds	r7, #48	; 0x30
 8006476:	46bd      	mov	sp, r7
 8006478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800647c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01a      	beq.n	8006592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657a:	d10a      	bne.n	8006592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	605a      	str	r2, [r3, #4]
  }
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b098      	sub	sp, #96	; 0x60
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065d0:	f7fb f86a 	bl	80016a8 <HAL_GetTick>
 80065d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d12f      	bne.n	8006644 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ec:	2200      	movs	r2, #0
 80065ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f88e 	bl	8006714 <UART_WaitOnFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d022      	beq.n	8006644 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800660c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006612:	653b      	str	r3, [r7, #80]	; 0x50
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661c:	647b      	str	r3, [r7, #68]	; 0x44
 800661e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e6      	bne.n	80065fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e063      	b.n	800670c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b04      	cmp	r3, #4
 8006650:	d149      	bne.n	80066e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006652:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665a:	2200      	movs	r2, #0
 800665c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f857 	bl	8006714 <UART_WaitOnFlagUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d03c      	beq.n	80066e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	623b      	str	r3, [r7, #32]
   return(result);
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668a:	633b      	str	r3, [r7, #48]	; 0x30
 800668c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e6      	bne.n	800666c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066be:	61fa      	str	r2, [r7, #28]
 80066c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	69b9      	ldr	r1, [r7, #24]
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	617b      	str	r3, [r7, #20]
   return(result);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e5      	bne.n	800669e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e012      	b.n	800670c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3758      	adds	r7, #88	; 0x58
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	4613      	mov	r3, r2
 8006722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006724:	e049      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d045      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672e:	f7fa ffbb 	bl	80016a8 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	429a      	cmp	r2, r3
 800673c:	d302      	bcc.n	8006744 <UART_WaitOnFlagUntilTimeout+0x30>
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e048      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d031      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b08      	cmp	r3, #8
 8006762:	d110      	bne.n	8006786 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2208      	movs	r2, #8
 800676a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f838 	bl	80067e2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2208      	movs	r2, #8
 8006776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e029      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006794:	d111      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800679e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f81e 	bl	80067e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e00f      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d0a6      	beq.n	8006726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b095      	sub	sp, #84	; 0x54
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006808:	643b      	str	r3, [r7, #64]	; 0x40
 800680a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800680e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e6      	bne.n	80067ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	61fb      	str	r3, [r7, #28]
   return(result);
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006832:	f023 0301 	bic.w	r3, r3, #1
 8006836:	64bb      	str	r3, [r7, #72]	; 0x48
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3308      	adds	r3, #8
 800683e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006840:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e3      	bne.n	800681c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d118      	bne.n	800688e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	60bb      	str	r3, [r7, #8]
   return(result);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f023 0310 	bic.w	r3, r3, #16
 8006870:	647b      	str	r3, [r7, #68]	; 0x44
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6979      	ldr	r1, [r7, #20]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	613b      	str	r3, [r7, #16]
   return(result);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e6      	bne.n	800685c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80068a2:	bf00      	nop
 80068a4:	3754      	adds	r7, #84	; 0x54
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e027      	b.n	8006914 <HAL_UARTEx_DisableFifoMode+0x66>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0201 	bic.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e02d      	b.n	8006994 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2224      	movs	r2, #36	; 0x24
 8006944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0201 	bic.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f84f 	bl	8006a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e02d      	b.n	8006a10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2224      	movs	r2, #36	; 0x24
 80069c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0201 	bic.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f811 	bl	8006a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d108      	bne.n	8006a3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a38:	e031      	b.n	8006a9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a3e:	2308      	movs	r3, #8
 8006a40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	0e5b      	lsrs	r3, r3, #25
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	0f5b      	lsrs	r3, r3, #29
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a62:	7bbb      	ldrb	r3, [r7, #14]
 8006a64:	7b3a      	ldrb	r2, [r7, #12]
 8006a66:	4911      	ldr	r1, [pc, #68]	; (8006aac <UARTEx_SetNbDataToProcess+0x94>)
 8006a68:	5c8a      	ldrb	r2, [r1, r2]
 8006a6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a6e:	7b3a      	ldrb	r2, [r7, #12]
 8006a70:	490f      	ldr	r1, [pc, #60]	; (8006ab0 <UARTEx_SetNbDataToProcess+0x98>)
 8006a72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	7b7a      	ldrb	r2, [r7, #13]
 8006a84:	4909      	ldr	r1, [pc, #36]	; (8006aac <UARTEx_SetNbDataToProcess+0x94>)
 8006a86:	5c8a      	ldrb	r2, [r1, r2]
 8006a88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a8c:	7b7a      	ldrb	r2, [r7, #13]
 8006a8e:	4908      	ldr	r1, [pc, #32]	; (8006ab0 <UARTEx_SetNbDataToProcess+0x98>)
 8006a90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a92:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	080074c4 	.word	0x080074c4
 8006ab0:	080074cc 	.word	0x080074cc

08006ab4 <siprintf>:
 8006ab4:	b40e      	push	{r1, r2, r3}
 8006ab6:	b500      	push	{lr}
 8006ab8:	b09c      	sub	sp, #112	; 0x70
 8006aba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006abe:	ab1d      	add	r3, sp, #116	; 0x74
 8006ac0:	9002      	str	r0, [sp, #8]
 8006ac2:	9006      	str	r0, [sp, #24]
 8006ac4:	9107      	str	r1, [sp, #28]
 8006ac6:	9104      	str	r1, [sp, #16]
 8006ac8:	4808      	ldr	r0, [pc, #32]	; (8006aec <siprintf+0x38>)
 8006aca:	4909      	ldr	r1, [pc, #36]	; (8006af0 <siprintf+0x3c>)
 8006acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad0:	9105      	str	r1, [sp, #20]
 8006ad2:	a902      	add	r1, sp, #8
 8006ad4:	6800      	ldr	r0, [r0, #0]
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	f000 f992 	bl	8006e00 <_svfiprintf_r>
 8006adc:	9b02      	ldr	r3, [sp, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	b01c      	add	sp, #112	; 0x70
 8006ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae8:	b003      	add	sp, #12
 8006aea:	4770      	bx	lr
 8006aec:	20000068 	.word	0x20000068
 8006af0:	ffff0208 	.word	0xffff0208

08006af4 <memset>:
 8006af4:	4402      	add	r2, r0
 8006af6:	4603      	mov	r3, r0
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d100      	bne.n	8006afe <memset+0xa>
 8006afc:	4770      	bx	lr
 8006afe:	f803 1b01 	strb.w	r1, [r3], #1
 8006b02:	e7f9      	b.n	8006af8 <memset+0x4>

08006b04 <__errno>:
 8006b04:	4b01      	ldr	r3, [pc, #4]	; (8006b0c <__errno+0x8>)
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000068 	.word	0x20000068

08006b10 <__libc_init_array>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4d0d      	ldr	r5, [pc, #52]	; (8006b48 <__libc_init_array+0x38>)
 8006b14:	2600      	movs	r6, #0
 8006b16:	4c0d      	ldr	r4, [pc, #52]	; (8006b4c <__libc_init_array+0x3c>)
 8006b18:	1b64      	subs	r4, r4, r5
 8006b1a:	10a4      	asrs	r4, r4, #2
 8006b1c:	42a6      	cmp	r6, r4
 8006b1e:	d109      	bne.n	8006b34 <__libc_init_array+0x24>
 8006b20:	4d0b      	ldr	r5, [pc, #44]	; (8006b50 <__libc_init_array+0x40>)
 8006b22:	2600      	movs	r6, #0
 8006b24:	4c0b      	ldr	r4, [pc, #44]	; (8006b54 <__libc_init_array+0x44>)
 8006b26:	f000 fc77 	bl	8007418 <_init>
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	42a6      	cmp	r6, r4
 8006b30:	d105      	bne.n	8006b3e <__libc_init_array+0x2e>
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b38:	3601      	adds	r6, #1
 8006b3a:	4798      	blx	r3
 8006b3c:	e7ee      	b.n	8006b1c <__libc_init_array+0xc>
 8006b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b42:	3601      	adds	r6, #1
 8006b44:	4798      	blx	r3
 8006b46:	e7f2      	b.n	8006b2e <__libc_init_array+0x1e>
 8006b48:	08007510 	.word	0x08007510
 8006b4c:	08007510 	.word	0x08007510
 8006b50:	08007510 	.word	0x08007510
 8006b54:	08007514 	.word	0x08007514

08006b58 <__retarget_lock_acquire_recursive>:
 8006b58:	4770      	bx	lr

08006b5a <__retarget_lock_release_recursive>:
 8006b5a:	4770      	bx	lr

08006b5c <_free_r>:
 8006b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	d043      	beq.n	8006bea <_free_r+0x8e>
 8006b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b66:	1f0c      	subs	r4, r1, #4
 8006b68:	9001      	str	r0, [sp, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bfb8      	it	lt
 8006b6e:	18e4      	addlt	r4, r4, r3
 8006b70:	f000 f8e0 	bl	8006d34 <__malloc_lock>
 8006b74:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <_free_r+0x94>)
 8006b76:	9801      	ldr	r0, [sp, #4]
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	b933      	cbnz	r3, 8006b8a <_free_r+0x2e>
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	6014      	str	r4, [r2, #0]
 8006b80:	b003      	add	sp, #12
 8006b82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b86:	f000 b8db 	b.w	8006d40 <__malloc_unlock>
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	d908      	bls.n	8006ba0 <_free_r+0x44>
 8006b8e:	6825      	ldr	r5, [r4, #0]
 8006b90:	1961      	adds	r1, r4, r5
 8006b92:	428b      	cmp	r3, r1
 8006b94:	bf01      	itttt	eq
 8006b96:	6819      	ldreq	r1, [r3, #0]
 8006b98:	685b      	ldreq	r3, [r3, #4]
 8006b9a:	1949      	addeq	r1, r1, r5
 8006b9c:	6021      	streq	r1, [r4, #0]
 8006b9e:	e7ed      	b.n	8006b7c <_free_r+0x20>
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	b10b      	cbz	r3, 8006baa <_free_r+0x4e>
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	d9fa      	bls.n	8006ba0 <_free_r+0x44>
 8006baa:	6811      	ldr	r1, [r2, #0]
 8006bac:	1855      	adds	r5, r2, r1
 8006bae:	42a5      	cmp	r5, r4
 8006bb0:	d10b      	bne.n	8006bca <_free_r+0x6e>
 8006bb2:	6824      	ldr	r4, [r4, #0]
 8006bb4:	4421      	add	r1, r4
 8006bb6:	1854      	adds	r4, r2, r1
 8006bb8:	6011      	str	r1, [r2, #0]
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	d1e0      	bne.n	8006b80 <_free_r+0x24>
 8006bbe:	681c      	ldr	r4, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	440c      	add	r4, r1
 8006bc4:	6053      	str	r3, [r2, #4]
 8006bc6:	6014      	str	r4, [r2, #0]
 8006bc8:	e7da      	b.n	8006b80 <_free_r+0x24>
 8006bca:	d902      	bls.n	8006bd2 <_free_r+0x76>
 8006bcc:	230c      	movs	r3, #12
 8006bce:	6003      	str	r3, [r0, #0]
 8006bd0:	e7d6      	b.n	8006b80 <_free_r+0x24>
 8006bd2:	6825      	ldr	r5, [r4, #0]
 8006bd4:	1961      	adds	r1, r4, r5
 8006bd6:	428b      	cmp	r3, r1
 8006bd8:	bf02      	ittt	eq
 8006bda:	6819      	ldreq	r1, [r3, #0]
 8006bdc:	685b      	ldreq	r3, [r3, #4]
 8006bde:	1949      	addeq	r1, r1, r5
 8006be0:	6063      	str	r3, [r4, #4]
 8006be2:	bf08      	it	eq
 8006be4:	6021      	streq	r1, [r4, #0]
 8006be6:	6054      	str	r4, [r2, #4]
 8006be8:	e7ca      	b.n	8006b80 <_free_r+0x24>
 8006bea:	b003      	add	sp, #12
 8006bec:	bd30      	pop	{r4, r5, pc}
 8006bee:	bf00      	nop
 8006bf0:	200003e0 	.word	0x200003e0

08006bf4 <sbrk_aligned>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4e0e      	ldr	r6, [pc, #56]	; (8006c30 <sbrk_aligned+0x3c>)
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	6831      	ldr	r1, [r6, #0]
 8006bfe:	b911      	cbnz	r1, 8006c06 <sbrk_aligned+0x12>
 8006c00:	f000 fba8 	bl	8007354 <_sbrk_r>
 8006c04:	6030      	str	r0, [r6, #0]
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 fba3 	bl	8007354 <_sbrk_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	d00a      	beq.n	8006c28 <sbrk_aligned+0x34>
 8006c12:	1cc4      	adds	r4, r0, #3
 8006c14:	f024 0403 	bic.w	r4, r4, #3
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d007      	beq.n	8006c2c <sbrk_aligned+0x38>
 8006c1c:	1a21      	subs	r1, r4, r0
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fb98 	bl	8007354 <_sbrk_r>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d101      	bne.n	8006c2c <sbrk_aligned+0x38>
 8006c28:	f04f 34ff 	mov.w	r4, #4294967295
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	200003e4 	.word	0x200003e4

08006c34 <_malloc_r>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	1ccd      	adds	r5, r1, #3
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	f025 0503 	bic.w	r5, r5, #3
 8006c40:	3508      	adds	r5, #8
 8006c42:	2d0c      	cmp	r5, #12
 8006c44:	bf38      	it	cc
 8006c46:	250c      	movcc	r5, #12
 8006c48:	2d00      	cmp	r5, #0
 8006c4a:	db01      	blt.n	8006c50 <_malloc_r+0x1c>
 8006c4c:	42a9      	cmp	r1, r5
 8006c4e:	d905      	bls.n	8006c5c <_malloc_r+0x28>
 8006c50:	230c      	movs	r3, #12
 8006c52:	2600      	movs	r6, #0
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	4630      	mov	r0, r6
 8006c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d30 <_malloc_r+0xfc>
 8006c60:	f000 f868 	bl	8006d34 <__malloc_lock>
 8006c64:	f8d8 3000 	ldr.w	r3, [r8]
 8006c68:	461c      	mov	r4, r3
 8006c6a:	bb5c      	cbnz	r4, 8006cc4 <_malloc_r+0x90>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f7ff ffc0 	bl	8006bf4 <sbrk_aligned>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	4604      	mov	r4, r0
 8006c78:	d155      	bne.n	8006d26 <_malloc_r+0xf2>
 8006c7a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c7e:	4626      	mov	r6, r4
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	d145      	bne.n	8006d10 <_malloc_r+0xdc>
 8006c84:	2c00      	cmp	r4, #0
 8006c86:	d048      	beq.n	8006d1a <_malloc_r+0xe6>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	eb04 0903 	add.w	r9, r4, r3
 8006c92:	f000 fb5f 	bl	8007354 <_sbrk_r>
 8006c96:	4581      	cmp	r9, r0
 8006c98:	d13f      	bne.n	8006d1a <_malloc_r+0xe6>
 8006c9a:	6821      	ldr	r1, [r4, #0]
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	1a6d      	subs	r5, r5, r1
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7ff ffa7 	bl	8006bf4 <sbrk_aligned>
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d037      	beq.n	8006d1a <_malloc_r+0xe6>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	442b      	add	r3, r5
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d038      	beq.n	8006d2a <_malloc_r+0xf6>
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	42a2      	cmp	r2, r4
 8006cbc:	d12b      	bne.n	8006d16 <_malloc_r+0xe2>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	e00f      	b.n	8006ce4 <_malloc_r+0xb0>
 8006cc4:	6822      	ldr	r2, [r4, #0]
 8006cc6:	1b52      	subs	r2, r2, r5
 8006cc8:	d41f      	bmi.n	8006d0a <_malloc_r+0xd6>
 8006cca:	2a0b      	cmp	r2, #11
 8006ccc:	d917      	bls.n	8006cfe <_malloc_r+0xca>
 8006cce:	1961      	adds	r1, r4, r5
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	6025      	str	r5, [r4, #0]
 8006cd4:	bf18      	it	ne
 8006cd6:	6059      	strne	r1, [r3, #4]
 8006cd8:	6863      	ldr	r3, [r4, #4]
 8006cda:	bf08      	it	eq
 8006cdc:	f8c8 1000 	streq.w	r1, [r8]
 8006ce0:	5162      	str	r2, [r4, r5]
 8006ce2:	604b      	str	r3, [r1, #4]
 8006ce4:	f104 060b 	add.w	r6, r4, #11
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f000 f829 	bl	8006d40 <__malloc_unlock>
 8006cee:	1d23      	adds	r3, r4, #4
 8006cf0:	f026 0607 	bic.w	r6, r6, #7
 8006cf4:	1af2      	subs	r2, r6, r3
 8006cf6:	d0ae      	beq.n	8006c56 <_malloc_r+0x22>
 8006cf8:	1b9b      	subs	r3, r3, r6
 8006cfa:	50a3      	str	r3, [r4, r2]
 8006cfc:	e7ab      	b.n	8006c56 <_malloc_r+0x22>
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	6862      	ldr	r2, [r4, #4]
 8006d02:	d1dd      	bne.n	8006cc0 <_malloc_r+0x8c>
 8006d04:	f8c8 2000 	str.w	r2, [r8]
 8006d08:	e7ec      	b.n	8006ce4 <_malloc_r+0xb0>
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	6864      	ldr	r4, [r4, #4]
 8006d0e:	e7ac      	b.n	8006c6a <_malloc_r+0x36>
 8006d10:	4634      	mov	r4, r6
 8006d12:	6876      	ldr	r6, [r6, #4]
 8006d14:	e7b4      	b.n	8006c80 <_malloc_r+0x4c>
 8006d16:	4613      	mov	r3, r2
 8006d18:	e7cc      	b.n	8006cb4 <_malloc_r+0x80>
 8006d1a:	230c      	movs	r3, #12
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	f000 f80e 	bl	8006d40 <__malloc_unlock>
 8006d24:	e797      	b.n	8006c56 <_malloc_r+0x22>
 8006d26:	6025      	str	r5, [r4, #0]
 8006d28:	e7dc      	b.n	8006ce4 <_malloc_r+0xb0>
 8006d2a:	605b      	str	r3, [r3, #4]
 8006d2c:	deff      	udf	#255	; 0xff
 8006d2e:	bf00      	nop
 8006d30:	200003e0 	.word	0x200003e0

08006d34 <__malloc_lock>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__malloc_lock+0x8>)
 8006d36:	f7ff bf0f 	b.w	8006b58 <__retarget_lock_acquire_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	200003dc 	.word	0x200003dc

08006d40 <__malloc_unlock>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__malloc_unlock+0x8>)
 8006d42:	f7ff bf0a 	b.w	8006b5a <__retarget_lock_release_recursive>
 8006d46:	bf00      	nop
 8006d48:	200003dc 	.word	0x200003dc

08006d4c <__ssputs_r>:
 8006d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d50:	461f      	mov	r7, r3
 8006d52:	688e      	ldr	r6, [r1, #8]
 8006d54:	4682      	mov	sl, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	42be      	cmp	r6, r7
 8006d5a:	4690      	mov	r8, r2
 8006d5c:	680b      	ldr	r3, [r1, #0]
 8006d5e:	d82c      	bhi.n	8006dba <__ssputs_r+0x6e>
 8006d60:	898a      	ldrh	r2, [r1, #12]
 8006d62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d66:	d026      	beq.n	8006db6 <__ssputs_r+0x6a>
 8006d68:	6965      	ldr	r5, [r4, #20]
 8006d6a:	6909      	ldr	r1, [r1, #16]
 8006d6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d70:	eba3 0901 	sub.w	r9, r3, r1
 8006d74:	1c7b      	adds	r3, r7, #1
 8006d76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d7a:	444b      	add	r3, r9
 8006d7c:	106d      	asrs	r5, r5, #1
 8006d7e:	429d      	cmp	r5, r3
 8006d80:	bf38      	it	cc
 8006d82:	461d      	movcc	r5, r3
 8006d84:	0553      	lsls	r3, r2, #21
 8006d86:	d527      	bpl.n	8006dd8 <__ssputs_r+0x8c>
 8006d88:	4629      	mov	r1, r5
 8006d8a:	f7ff ff53 	bl	8006c34 <_malloc_r>
 8006d8e:	4606      	mov	r6, r0
 8006d90:	b360      	cbz	r0, 8006dec <__ssputs_r+0xa0>
 8006d92:	464a      	mov	r2, r9
 8006d94:	6921      	ldr	r1, [r4, #16]
 8006d96:	f000 fafb 	bl	8007390 <memcpy>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da4:	81a3      	strh	r3, [r4, #12]
 8006da6:	6126      	str	r6, [r4, #16]
 8006da8:	444e      	add	r6, r9
 8006daa:	6165      	str	r5, [r4, #20]
 8006dac:	eba5 0509 	sub.w	r5, r5, r9
 8006db0:	6026      	str	r6, [r4, #0]
 8006db2:	463e      	mov	r6, r7
 8006db4:	60a5      	str	r5, [r4, #8]
 8006db6:	42be      	cmp	r6, r7
 8006db8:	d900      	bls.n	8006dbc <__ssputs_r+0x70>
 8006dba:	463e      	mov	r6, r7
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	f000 faad 	bl	8007320 <memmove>
 8006dc6:	68a3      	ldr	r3, [r4, #8]
 8006dc8:	2000      	movs	r0, #0
 8006dca:	1b9b      	subs	r3, r3, r6
 8006dcc:	60a3      	str	r3, [r4, #8]
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	4433      	add	r3, r6
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	462a      	mov	r2, r5
 8006dda:	f000 fae6 	bl	80073aa <_realloc_r>
 8006dde:	4606      	mov	r6, r0
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1e0      	bne.n	8006da6 <__ssputs_r+0x5a>
 8006de4:	6921      	ldr	r1, [r4, #16]
 8006de6:	4650      	mov	r0, sl
 8006de8:	f7ff feb8 	bl	8006b5c <_free_r>
 8006dec:	230c      	movs	r3, #12
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295
 8006df2:	f8ca 3000 	str.w	r3, [sl]
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	e7e9      	b.n	8006dd4 <__ssputs_r+0x88>

08006e00 <_svfiprintf_r>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	4698      	mov	r8, r3
 8006e06:	898b      	ldrh	r3, [r1, #12]
 8006e08:	b09d      	sub	sp, #116	; 0x74
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	061b      	lsls	r3, r3, #24
 8006e0e:	460d      	mov	r5, r1
 8006e10:	4614      	mov	r4, r2
 8006e12:	d50e      	bpl.n	8006e32 <_svfiprintf_r+0x32>
 8006e14:	690b      	ldr	r3, [r1, #16]
 8006e16:	b963      	cbnz	r3, 8006e32 <_svfiprintf_r+0x32>
 8006e18:	2140      	movs	r1, #64	; 0x40
 8006e1a:	f7ff ff0b 	bl	8006c34 <_malloc_r>
 8006e1e:	6028      	str	r0, [r5, #0]
 8006e20:	6128      	str	r0, [r5, #16]
 8006e22:	b920      	cbnz	r0, 8006e2e <_svfiprintf_r+0x2e>
 8006e24:	230c      	movs	r3, #12
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2c:	e0d0      	b.n	8006fd0 <_svfiprintf_r+0x1d0>
 8006e2e:	2340      	movs	r3, #64	; 0x40
 8006e30:	616b      	str	r3, [r5, #20]
 8006e32:	2300      	movs	r3, #0
 8006e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e38:	f04f 0901 	mov.w	r9, #1
 8006e3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006fe8 <_svfiprintf_r+0x1e8>
 8006e40:	9309      	str	r3, [sp, #36]	; 0x24
 8006e42:	2320      	movs	r3, #32
 8006e44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e48:	2330      	movs	r3, #48	; 0x30
 8006e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e4e:	4623      	mov	r3, r4
 8006e50:	469a      	mov	sl, r3
 8006e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e56:	b10a      	cbz	r2, 8006e5c <_svfiprintf_r+0x5c>
 8006e58:	2a25      	cmp	r2, #37	; 0x25
 8006e5a:	d1f9      	bne.n	8006e50 <_svfiprintf_r+0x50>
 8006e5c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e60:	d00b      	beq.n	8006e7a <_svfiprintf_r+0x7a>
 8006e62:	465b      	mov	r3, fp
 8006e64:	4622      	mov	r2, r4
 8006e66:	4629      	mov	r1, r5
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f7ff ff6f 	bl	8006d4c <__ssputs_r>
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f000 80a9 	beq.w	8006fc6 <_svfiprintf_r+0x1c6>
 8006e74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e76:	445a      	add	r2, fp
 8006e78:	9209      	str	r2, [sp, #36]	; 0x24
 8006e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 80a1 	beq.w	8006fc6 <_svfiprintf_r+0x1c6>
 8006e84:	2300      	movs	r3, #0
 8006e86:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8a:	f10a 0a01 	add.w	sl, sl, #1
 8006e8e:	9304      	str	r3, [sp, #16]
 8006e90:	9307      	str	r3, [sp, #28]
 8006e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e96:	931a      	str	r3, [sp, #104]	; 0x68
 8006e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e9c:	4654      	mov	r4, sl
 8006e9e:	2205      	movs	r2, #5
 8006ea0:	4851      	ldr	r0, [pc, #324]	; (8006fe8 <_svfiprintf_r+0x1e8>)
 8006ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea6:	f000 fa65 	bl	8007374 <memchr>
 8006eaa:	9a04      	ldr	r2, [sp, #16]
 8006eac:	b9d8      	cbnz	r0, 8006ee6 <_svfiprintf_r+0xe6>
 8006eae:	06d0      	lsls	r0, r2, #27
 8006eb0:	bf44      	itt	mi
 8006eb2:	2320      	movmi	r3, #32
 8006eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eb8:	0711      	lsls	r1, r2, #28
 8006eba:	bf44      	itt	mi
 8006ebc:	232b      	movmi	r3, #43	; 0x2b
 8006ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec8:	d015      	beq.n	8006ef6 <_svfiprintf_r+0xf6>
 8006eca:	9a07      	ldr	r2, [sp, #28]
 8006ecc:	4654      	mov	r4, sl
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f04f 0c0a 	mov.w	ip, #10
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eda:	3b30      	subs	r3, #48	; 0x30
 8006edc:	2b09      	cmp	r3, #9
 8006ede:	d94d      	bls.n	8006f7c <_svfiprintf_r+0x17c>
 8006ee0:	b1b0      	cbz	r0, 8006f10 <_svfiprintf_r+0x110>
 8006ee2:	9207      	str	r2, [sp, #28]
 8006ee4:	e014      	b.n	8006f10 <_svfiprintf_r+0x110>
 8006ee6:	eba0 0308 	sub.w	r3, r0, r8
 8006eea:	46a2      	mov	sl, r4
 8006eec:	fa09 f303 	lsl.w	r3, r9, r3
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	9304      	str	r3, [sp, #16]
 8006ef4:	e7d2      	b.n	8006e9c <_svfiprintf_r+0x9c>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	1d19      	adds	r1, r3, #4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	9103      	str	r1, [sp, #12]
 8006f00:	bfbb      	ittet	lt
 8006f02:	425b      	neglt	r3, r3
 8006f04:	f042 0202 	orrlt.w	r2, r2, #2
 8006f08:	9307      	strge	r3, [sp, #28]
 8006f0a:	9307      	strlt	r3, [sp, #28]
 8006f0c:	bfb8      	it	lt
 8006f0e:	9204      	strlt	r2, [sp, #16]
 8006f10:	7823      	ldrb	r3, [r4, #0]
 8006f12:	2b2e      	cmp	r3, #46	; 0x2e
 8006f14:	d10c      	bne.n	8006f30 <_svfiprintf_r+0x130>
 8006f16:	7863      	ldrb	r3, [r4, #1]
 8006f18:	2b2a      	cmp	r3, #42	; 0x2a
 8006f1a:	d134      	bne.n	8006f86 <_svfiprintf_r+0x186>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	3402      	adds	r4, #2
 8006f20:	1d1a      	adds	r2, r3, #4
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	9203      	str	r2, [sp, #12]
 8006f28:	bfb8      	it	lt
 8006f2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f2e:	9305      	str	r3, [sp, #20]
 8006f30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006ff8 <_svfiprintf_r+0x1f8>
 8006f34:	2203      	movs	r2, #3
 8006f36:	7821      	ldrb	r1, [r4, #0]
 8006f38:	4650      	mov	r0, sl
 8006f3a:	f000 fa1b 	bl	8007374 <memchr>
 8006f3e:	b138      	cbz	r0, 8006f50 <_svfiprintf_r+0x150>
 8006f40:	eba0 000a 	sub.w	r0, r0, sl
 8006f44:	2240      	movs	r2, #64	; 0x40
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	3401      	adds	r4, #1
 8006f4a:	4082      	lsls	r2, r0
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	9304      	str	r3, [sp, #16]
 8006f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f54:	2206      	movs	r2, #6
 8006f56:	4825      	ldr	r0, [pc, #148]	; (8006fec <_svfiprintf_r+0x1ec>)
 8006f58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f5c:	f000 fa0a 	bl	8007374 <memchr>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d038      	beq.n	8006fd6 <_svfiprintf_r+0x1d6>
 8006f64:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <_svfiprintf_r+0x1f0>)
 8006f66:	bb1b      	cbnz	r3, 8006fb0 <_svfiprintf_r+0x1b0>
 8006f68:	9b03      	ldr	r3, [sp, #12]
 8006f6a:	3307      	adds	r3, #7
 8006f6c:	f023 0307 	bic.w	r3, r3, #7
 8006f70:	3308      	adds	r3, #8
 8006f72:	9303      	str	r3, [sp, #12]
 8006f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f76:	4433      	add	r3, r6
 8006f78:	9309      	str	r3, [sp, #36]	; 0x24
 8006f7a:	e768      	b.n	8006e4e <_svfiprintf_r+0x4e>
 8006f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f80:	460c      	mov	r4, r1
 8006f82:	2001      	movs	r0, #1
 8006f84:	e7a6      	b.n	8006ed4 <_svfiprintf_r+0xd4>
 8006f86:	2300      	movs	r3, #0
 8006f88:	3401      	adds	r4, #1
 8006f8a:	f04f 0c0a 	mov.w	ip, #10
 8006f8e:	4619      	mov	r1, r3
 8006f90:	9305      	str	r3, [sp, #20]
 8006f92:	4620      	mov	r0, r4
 8006f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f98:	3a30      	subs	r2, #48	; 0x30
 8006f9a:	2a09      	cmp	r2, #9
 8006f9c:	d903      	bls.n	8006fa6 <_svfiprintf_r+0x1a6>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0c6      	beq.n	8006f30 <_svfiprintf_r+0x130>
 8006fa2:	9105      	str	r1, [sp, #20]
 8006fa4:	e7c4      	b.n	8006f30 <_svfiprintf_r+0x130>
 8006fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006faa:	4604      	mov	r4, r0
 8006fac:	2301      	movs	r3, #1
 8006fae:	e7f0      	b.n	8006f92 <_svfiprintf_r+0x192>
 8006fb0:	ab03      	add	r3, sp, #12
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	a904      	add	r1, sp, #16
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <_svfiprintf_r+0x1f4>)
 8006fbc:	f3af 8000 	nop.w
 8006fc0:	1c42      	adds	r2, r0, #1
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	d1d6      	bne.n	8006f74 <_svfiprintf_r+0x174>
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	065b      	lsls	r3, r3, #25
 8006fca:	f53f af2d 	bmi.w	8006e28 <_svfiprintf_r+0x28>
 8006fce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd0:	b01d      	add	sp, #116	; 0x74
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	ab03      	add	r3, sp, #12
 8006fd8:	462a      	mov	r2, r5
 8006fda:	a904      	add	r1, sp, #16
 8006fdc:	4638      	mov	r0, r7
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4b04      	ldr	r3, [pc, #16]	; (8006ff4 <_svfiprintf_r+0x1f4>)
 8006fe2:	f000 f87d 	bl	80070e0 <_printf_i>
 8006fe6:	e7eb      	b.n	8006fc0 <_svfiprintf_r+0x1c0>
 8006fe8:	080074d4 	.word	0x080074d4
 8006fec:	080074de 	.word	0x080074de
 8006ff0:	00000000 	.word	0x00000000
 8006ff4:	08006d4d 	.word	0x08006d4d
 8006ff8:	080074da 	.word	0x080074da

08006ffc <_printf_common>:
 8006ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	4616      	mov	r6, r2
 8007002:	4699      	mov	r9, r3
 8007004:	688a      	ldr	r2, [r1, #8]
 8007006:	4607      	mov	r7, r0
 8007008:	690b      	ldr	r3, [r1, #16]
 800700a:	460c      	mov	r4, r1
 800700c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007010:	4293      	cmp	r3, r2
 8007012:	bfb8      	it	lt
 8007014:	4613      	movlt	r3, r2
 8007016:	6033      	str	r3, [r6, #0]
 8007018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800701c:	b10a      	cbz	r2, 8007022 <_printf_common+0x26>
 800701e:	3301      	adds	r3, #1
 8007020:	6033      	str	r3, [r6, #0]
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	0699      	lsls	r1, r3, #26
 8007026:	bf42      	ittt	mi
 8007028:	6833      	ldrmi	r3, [r6, #0]
 800702a:	3302      	addmi	r3, #2
 800702c:	6033      	strmi	r3, [r6, #0]
 800702e:	6825      	ldr	r5, [r4, #0]
 8007030:	f015 0506 	ands.w	r5, r5, #6
 8007034:	d106      	bne.n	8007044 <_printf_common+0x48>
 8007036:	f104 0a19 	add.w	sl, r4, #25
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	6832      	ldr	r2, [r6, #0]
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	42ab      	cmp	r3, r5
 8007042:	dc2b      	bgt.n	800709c <_printf_common+0xa0>
 8007044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007048:	1e13      	subs	r3, r2, #0
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	bf18      	it	ne
 800704e:	2301      	movne	r3, #1
 8007050:	0692      	lsls	r2, r2, #26
 8007052:	d430      	bmi.n	80070b6 <_printf_common+0xba>
 8007054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007058:	4649      	mov	r1, r9
 800705a:	4638      	mov	r0, r7
 800705c:	47c0      	blx	r8
 800705e:	3001      	adds	r0, #1
 8007060:	d023      	beq.n	80070aa <_printf_common+0xae>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	341a      	adds	r4, #26
 8007066:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800706a:	f003 0306 	and.w	r3, r3, #6
 800706e:	2b04      	cmp	r3, #4
 8007070:	bf0a      	itet	eq
 8007072:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007076:	2500      	movne	r5, #0
 8007078:	6833      	ldreq	r3, [r6, #0]
 800707a:	f04f 0600 	mov.w	r6, #0
 800707e:	bf08      	it	eq
 8007080:	1aed      	subeq	r5, r5, r3
 8007082:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007086:	bf08      	it	eq
 8007088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800708c:	4293      	cmp	r3, r2
 800708e:	bfc4      	itt	gt
 8007090:	1a9b      	subgt	r3, r3, r2
 8007092:	18ed      	addgt	r5, r5, r3
 8007094:	42b5      	cmp	r5, r6
 8007096:	d11a      	bne.n	80070ce <_printf_common+0xd2>
 8007098:	2000      	movs	r0, #0
 800709a:	e008      	b.n	80070ae <_printf_common+0xb2>
 800709c:	2301      	movs	r3, #1
 800709e:	4652      	mov	r2, sl
 80070a0:	4649      	mov	r1, r9
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d103      	bne.n	80070b2 <_printf_common+0xb6>
 80070aa:	f04f 30ff 	mov.w	r0, #4294967295
 80070ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b2:	3501      	adds	r5, #1
 80070b4:	e7c1      	b.n	800703a <_printf_common+0x3e>
 80070b6:	18e1      	adds	r1, r4, r3
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	2030      	movs	r0, #48	; 0x30
 80070bc:	3302      	adds	r3, #2
 80070be:	4422      	add	r2, r4
 80070c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070cc:	e7c2      	b.n	8007054 <_printf_common+0x58>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4622      	mov	r2, r4
 80070d2:	4649      	mov	r1, r9
 80070d4:	4638      	mov	r0, r7
 80070d6:	47c0      	blx	r8
 80070d8:	3001      	adds	r0, #1
 80070da:	d0e6      	beq.n	80070aa <_printf_common+0xae>
 80070dc:	3601      	adds	r6, #1
 80070de:	e7d9      	b.n	8007094 <_printf_common+0x98>

080070e0 <_printf_i>:
 80070e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	7e0f      	ldrb	r7, [r1, #24]
 80070e6:	4691      	mov	r9, r2
 80070e8:	4680      	mov	r8, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	2f78      	cmp	r7, #120	; 0x78
 80070ee:	469a      	mov	sl, r3
 80070f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070f6:	d807      	bhi.n	8007108 <_printf_i+0x28>
 80070f8:	2f62      	cmp	r7, #98	; 0x62
 80070fa:	d80a      	bhi.n	8007112 <_printf_i+0x32>
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	f000 80d3 	beq.w	80072a8 <_printf_i+0x1c8>
 8007102:	2f58      	cmp	r7, #88	; 0x58
 8007104:	f000 80bf 	beq.w	8007286 <_printf_i+0x1a6>
 8007108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800710c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007110:	e03a      	b.n	8007188 <_printf_i+0xa8>
 8007112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007116:	2b15      	cmp	r3, #21
 8007118:	d8f6      	bhi.n	8007108 <_printf_i+0x28>
 800711a:	a101      	add	r1, pc, #4	; (adr r1, 8007120 <_printf_i+0x40>)
 800711c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007120:	08007179 	.word	0x08007179
 8007124:	0800718d 	.word	0x0800718d
 8007128:	08007109 	.word	0x08007109
 800712c:	08007109 	.word	0x08007109
 8007130:	08007109 	.word	0x08007109
 8007134:	08007109 	.word	0x08007109
 8007138:	0800718d 	.word	0x0800718d
 800713c:	08007109 	.word	0x08007109
 8007140:	08007109 	.word	0x08007109
 8007144:	08007109 	.word	0x08007109
 8007148:	08007109 	.word	0x08007109
 800714c:	0800728f 	.word	0x0800728f
 8007150:	080071b9 	.word	0x080071b9
 8007154:	0800724b 	.word	0x0800724b
 8007158:	08007109 	.word	0x08007109
 800715c:	08007109 	.word	0x08007109
 8007160:	080072b1 	.word	0x080072b1
 8007164:	08007109 	.word	0x08007109
 8007168:	080071b9 	.word	0x080071b9
 800716c:	08007109 	.word	0x08007109
 8007170:	08007109 	.word	0x08007109
 8007174:	08007253 	.word	0x08007253
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	602a      	str	r2, [r5, #0]
 8007180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007188:	2301      	movs	r3, #1
 800718a:	e09e      	b.n	80072ca <_printf_i+0x1ea>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	682b      	ldr	r3, [r5, #0]
 8007190:	0607      	lsls	r7, r0, #24
 8007192:	f103 0104 	add.w	r1, r3, #4
 8007196:	6029      	str	r1, [r5, #0]
 8007198:	d501      	bpl.n	800719e <_printf_i+0xbe>
 800719a:	681e      	ldr	r6, [r3, #0]
 800719c:	e003      	b.n	80071a6 <_printf_i+0xc6>
 800719e:	0646      	lsls	r6, r0, #25
 80071a0:	d5fb      	bpl.n	800719a <_printf_i+0xba>
 80071a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	da03      	bge.n	80071b2 <_printf_i+0xd2>
 80071aa:	232d      	movs	r3, #45	; 0x2d
 80071ac:	4276      	negs	r6, r6
 80071ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b2:	4859      	ldr	r0, [pc, #356]	; (8007318 <_printf_i+0x238>)
 80071b4:	230a      	movs	r3, #10
 80071b6:	e012      	b.n	80071de <_printf_i+0xfe>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	6820      	ldr	r0, [r4, #0]
 80071bc:	1d19      	adds	r1, r3, #4
 80071be:	6029      	str	r1, [r5, #0]
 80071c0:	0605      	lsls	r5, r0, #24
 80071c2:	d501      	bpl.n	80071c8 <_printf_i+0xe8>
 80071c4:	681e      	ldr	r6, [r3, #0]
 80071c6:	e002      	b.n	80071ce <_printf_i+0xee>
 80071c8:	0641      	lsls	r1, r0, #25
 80071ca:	d5fb      	bpl.n	80071c4 <_printf_i+0xe4>
 80071cc:	881e      	ldrh	r6, [r3, #0]
 80071ce:	2f6f      	cmp	r7, #111	; 0x6f
 80071d0:	4851      	ldr	r0, [pc, #324]	; (8007318 <_printf_i+0x238>)
 80071d2:	bf0c      	ite	eq
 80071d4:	2308      	moveq	r3, #8
 80071d6:	230a      	movne	r3, #10
 80071d8:	2100      	movs	r1, #0
 80071da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071de:	6865      	ldr	r5, [r4, #4]
 80071e0:	2d00      	cmp	r5, #0
 80071e2:	60a5      	str	r5, [r4, #8]
 80071e4:	bfa2      	ittt	ge
 80071e6:	6821      	ldrge	r1, [r4, #0]
 80071e8:	f021 0104 	bicge.w	r1, r1, #4
 80071ec:	6021      	strge	r1, [r4, #0]
 80071ee:	b90e      	cbnz	r6, 80071f4 <_printf_i+0x114>
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	d04a      	beq.n	800728a <_printf_i+0x1aa>
 80071f4:	4615      	mov	r5, r2
 80071f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071fa:	fb03 6711 	mls	r7, r3, r1, r6
 80071fe:	5dc7      	ldrb	r7, [r0, r7]
 8007200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007204:	4637      	mov	r7, r6
 8007206:	460e      	mov	r6, r1
 8007208:	42bb      	cmp	r3, r7
 800720a:	d9f4      	bls.n	80071f6 <_printf_i+0x116>
 800720c:	2b08      	cmp	r3, #8
 800720e:	d10b      	bne.n	8007228 <_printf_i+0x148>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	07de      	lsls	r6, r3, #31
 8007214:	d508      	bpl.n	8007228 <_printf_i+0x148>
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	6861      	ldr	r1, [r4, #4]
 800721a:	4299      	cmp	r1, r3
 800721c:	bfde      	ittt	le
 800721e:	2330      	movle	r3, #48	; 0x30
 8007220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007228:	1b52      	subs	r2, r2, r5
 800722a:	6122      	str	r2, [r4, #16]
 800722c:	464b      	mov	r3, r9
 800722e:	aa03      	add	r2, sp, #12
 8007230:	4621      	mov	r1, r4
 8007232:	4640      	mov	r0, r8
 8007234:	f8cd a000 	str.w	sl, [sp]
 8007238:	f7ff fee0 	bl	8006ffc <_printf_common>
 800723c:	3001      	adds	r0, #1
 800723e:	d149      	bne.n	80072d4 <_printf_i+0x1f4>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	b004      	add	sp, #16
 8007246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f043 0320 	orr.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	2778      	movs	r7, #120	; 0x78
 8007254:	4831      	ldr	r0, [pc, #196]	; (800731c <_printf_i+0x23c>)
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800725c:	061f      	lsls	r7, r3, #24
 800725e:	6829      	ldr	r1, [r5, #0]
 8007260:	f851 6b04 	ldr.w	r6, [r1], #4
 8007264:	d402      	bmi.n	800726c <_printf_i+0x18c>
 8007266:	065f      	lsls	r7, r3, #25
 8007268:	bf48      	it	mi
 800726a:	b2b6      	uxthmi	r6, r6
 800726c:	07df      	lsls	r7, r3, #31
 800726e:	6029      	str	r1, [r5, #0]
 8007270:	bf44      	itt	mi
 8007272:	f043 0320 	orrmi.w	r3, r3, #32
 8007276:	6023      	strmi	r3, [r4, #0]
 8007278:	b91e      	cbnz	r6, 8007282 <_printf_i+0x1a2>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	f023 0320 	bic.w	r3, r3, #32
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	2310      	movs	r3, #16
 8007284:	e7a8      	b.n	80071d8 <_printf_i+0xf8>
 8007286:	4824      	ldr	r0, [pc, #144]	; (8007318 <_printf_i+0x238>)
 8007288:	e7e5      	b.n	8007256 <_printf_i+0x176>
 800728a:	4615      	mov	r5, r2
 800728c:	e7be      	b.n	800720c <_printf_i+0x12c>
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	6826      	ldr	r6, [r4, #0]
 8007292:	1d18      	adds	r0, r3, #4
 8007294:	6961      	ldr	r1, [r4, #20]
 8007296:	6028      	str	r0, [r5, #0]
 8007298:	0635      	lsls	r5, r6, #24
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	d501      	bpl.n	80072a2 <_printf_i+0x1c2>
 800729e:	6019      	str	r1, [r3, #0]
 80072a0:	e002      	b.n	80072a8 <_printf_i+0x1c8>
 80072a2:	0670      	lsls	r0, r6, #25
 80072a4:	d5fb      	bpl.n	800729e <_printf_i+0x1be>
 80072a6:	8019      	strh	r1, [r3, #0]
 80072a8:	2300      	movs	r3, #0
 80072aa:	4615      	mov	r5, r2
 80072ac:	6123      	str	r3, [r4, #16]
 80072ae:	e7bd      	b.n	800722c <_printf_i+0x14c>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	2100      	movs	r1, #0
 80072b4:	1d1a      	adds	r2, r3, #4
 80072b6:	602a      	str	r2, [r5, #0]
 80072b8:	681d      	ldr	r5, [r3, #0]
 80072ba:	6862      	ldr	r2, [r4, #4]
 80072bc:	4628      	mov	r0, r5
 80072be:	f000 f859 	bl	8007374 <memchr>
 80072c2:	b108      	cbz	r0, 80072c8 <_printf_i+0x1e8>
 80072c4:	1b40      	subs	r0, r0, r5
 80072c6:	6060      	str	r0, [r4, #4]
 80072c8:	6863      	ldr	r3, [r4, #4]
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	2300      	movs	r3, #0
 80072ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d2:	e7ab      	b.n	800722c <_printf_i+0x14c>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	462a      	mov	r2, r5
 80072d8:	4649      	mov	r1, r9
 80072da:	4640      	mov	r0, r8
 80072dc:	47d0      	blx	sl
 80072de:	3001      	adds	r0, #1
 80072e0:	d0ae      	beq.n	8007240 <_printf_i+0x160>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	079b      	lsls	r3, r3, #30
 80072e6:	d413      	bmi.n	8007310 <_printf_i+0x230>
 80072e8:	68e0      	ldr	r0, [r4, #12]
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	4298      	cmp	r0, r3
 80072ee:	bfb8      	it	lt
 80072f0:	4618      	movlt	r0, r3
 80072f2:	e7a7      	b.n	8007244 <_printf_i+0x164>
 80072f4:	2301      	movs	r3, #1
 80072f6:	4632      	mov	r2, r6
 80072f8:	4649      	mov	r1, r9
 80072fa:	4640      	mov	r0, r8
 80072fc:	47d0      	blx	sl
 80072fe:	3001      	adds	r0, #1
 8007300:	d09e      	beq.n	8007240 <_printf_i+0x160>
 8007302:	3501      	adds	r5, #1
 8007304:	68e3      	ldr	r3, [r4, #12]
 8007306:	9903      	ldr	r1, [sp, #12]
 8007308:	1a5b      	subs	r3, r3, r1
 800730a:	42ab      	cmp	r3, r5
 800730c:	dcf2      	bgt.n	80072f4 <_printf_i+0x214>
 800730e:	e7eb      	b.n	80072e8 <_printf_i+0x208>
 8007310:	2500      	movs	r5, #0
 8007312:	f104 0619 	add.w	r6, r4, #25
 8007316:	e7f5      	b.n	8007304 <_printf_i+0x224>
 8007318:	080074e5 	.word	0x080074e5
 800731c:	080074f6 	.word	0x080074f6

08007320 <memmove>:
 8007320:	4288      	cmp	r0, r1
 8007322:	b510      	push	{r4, lr}
 8007324:	eb01 0402 	add.w	r4, r1, r2
 8007328:	d902      	bls.n	8007330 <memmove+0x10>
 800732a:	4284      	cmp	r4, r0
 800732c:	4623      	mov	r3, r4
 800732e:	d807      	bhi.n	8007340 <memmove+0x20>
 8007330:	1e43      	subs	r3, r0, #1
 8007332:	42a1      	cmp	r1, r4
 8007334:	d008      	beq.n	8007348 <memmove+0x28>
 8007336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800733a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800733e:	e7f8      	b.n	8007332 <memmove+0x12>
 8007340:	4402      	add	r2, r0
 8007342:	4601      	mov	r1, r0
 8007344:	428a      	cmp	r2, r1
 8007346:	d100      	bne.n	800734a <memmove+0x2a>
 8007348:	bd10      	pop	{r4, pc}
 800734a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800734e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007352:	e7f7      	b.n	8007344 <memmove+0x24>

08007354 <_sbrk_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	2300      	movs	r3, #0
 8007358:	4d05      	ldr	r5, [pc, #20]	; (8007370 <_sbrk_r+0x1c>)
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	f7fa f81a 	bl	8001398 <_sbrk>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_sbrk_r+0x1a>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_sbrk_r+0x1a>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	200003d8 	.word	0x200003d8

08007374 <memchr>:
 8007374:	b2c9      	uxtb	r1, r1
 8007376:	4402      	add	r2, r0
 8007378:	b510      	push	{r4, lr}
 800737a:	4290      	cmp	r0, r2
 800737c:	4603      	mov	r3, r0
 800737e:	d101      	bne.n	8007384 <memchr+0x10>
 8007380:	2300      	movs	r3, #0
 8007382:	e003      	b.n	800738c <memchr+0x18>
 8007384:	781c      	ldrb	r4, [r3, #0]
 8007386:	3001      	adds	r0, #1
 8007388:	428c      	cmp	r4, r1
 800738a:	d1f6      	bne.n	800737a <memchr+0x6>
 800738c:	4618      	mov	r0, r3
 800738e:	bd10      	pop	{r4, pc}

08007390 <memcpy>:
 8007390:	440a      	add	r2, r1
 8007392:	1e43      	subs	r3, r0, #1
 8007394:	4291      	cmp	r1, r2
 8007396:	d100      	bne.n	800739a <memcpy+0xa>
 8007398:	4770      	bx	lr
 800739a:	b510      	push	{r4, lr}
 800739c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a0:	4291      	cmp	r1, r2
 80073a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a6:	d1f9      	bne.n	800739c <memcpy+0xc>
 80073a8:	bd10      	pop	{r4, pc}

080073aa <_realloc_r>:
 80073aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ae:	4680      	mov	r8, r0
 80073b0:	4614      	mov	r4, r2
 80073b2:	460e      	mov	r6, r1
 80073b4:	b921      	cbnz	r1, 80073c0 <_realloc_r+0x16>
 80073b6:	4611      	mov	r1, r2
 80073b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073bc:	f7ff bc3a 	b.w	8006c34 <_malloc_r>
 80073c0:	b92a      	cbnz	r2, 80073ce <_realloc_r+0x24>
 80073c2:	4625      	mov	r5, r4
 80073c4:	f7ff fbca 	bl	8006b5c <_free_r>
 80073c8:	4628      	mov	r0, r5
 80073ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ce:	f000 f81b 	bl	8007408 <_malloc_usable_size_r>
 80073d2:	4284      	cmp	r4, r0
 80073d4:	4607      	mov	r7, r0
 80073d6:	d802      	bhi.n	80073de <_realloc_r+0x34>
 80073d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073dc:	d812      	bhi.n	8007404 <_realloc_r+0x5a>
 80073de:	4621      	mov	r1, r4
 80073e0:	4640      	mov	r0, r8
 80073e2:	f7ff fc27 	bl	8006c34 <_malloc_r>
 80073e6:	4605      	mov	r5, r0
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d0ed      	beq.n	80073c8 <_realloc_r+0x1e>
 80073ec:	42bc      	cmp	r4, r7
 80073ee:	4622      	mov	r2, r4
 80073f0:	4631      	mov	r1, r6
 80073f2:	bf28      	it	cs
 80073f4:	463a      	movcs	r2, r7
 80073f6:	f7ff ffcb 	bl	8007390 <memcpy>
 80073fa:	4631      	mov	r1, r6
 80073fc:	4640      	mov	r0, r8
 80073fe:	f7ff fbad 	bl	8006b5c <_free_r>
 8007402:	e7e1      	b.n	80073c8 <_realloc_r+0x1e>
 8007404:	4635      	mov	r5, r6
 8007406:	e7df      	b.n	80073c8 <_realloc_r+0x1e>

08007408 <_malloc_usable_size_r>:
 8007408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740c:	1f18      	subs	r0, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfbc      	itt	lt
 8007412:	580b      	ldrlt	r3, [r1, r0]
 8007414:	18c0      	addlt	r0, r0, r3
 8007416:	4770      	bx	lr

08007418 <_init>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr

08007424 <_fini>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	bf00      	nop
 8007428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742a:	bc08      	pop	{r3}
 800742c:	469e      	mov	lr, r3
 800742e:	4770      	bx	lr
