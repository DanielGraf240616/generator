
PortableGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005abc  08005abc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac4  08005ac4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000070  08005b3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08005b3c  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028e82  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a8b  00000000  00000000  00048f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013656  00000000  00000000  0004c9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001828  00000000  00000000  00060050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001468  00000000  00000000  00061878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d1cc  00000000  00000000  00062ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a3d0  00000000  00000000  0008feac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00124dba  00000000  00000000  000ba27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000048e8  00000000  00000000  001df038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001e3920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000070 	.word	0x20000070
 8000210:	00000000 	.word	0x00000000
 8000214:	080059b0 	.word	0x080059b0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000074 	.word	0x20000074
 8000230:	080059b0 	.word	0x080059b0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <AD9833_Init>:


extern SPI_HandleTypeDef hspi1;

	void AD9833_Init(void)
	{
 8000554:	b508      	push	{r3, lr}
    // Reset the AD9833 module
    HAL_SPI_Transmit(&hspi1, (uint8_t*)AD9833_REG_CMD, 1, HAL_MAX_DELAY);
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000560:	4801      	ldr	r0, [pc, #4]	; (8000568 <AD9833_Init+0x14>)
 8000562:	f003 fe41 	bl	80041e8 <HAL_SPI_Transmit>
	}
 8000566:	bd08      	pop	{r3, pc}
 8000568:	20000168 	.word	0x20000168

0800056c <AD9833_SetFrequency>:

	void AD9833_SetFrequency(uint32_t frequency)
	{
 800056c:	b510      	push	{r4, lr}
 800056e:	b082      	sub	sp, #8
	    uint16_t freq_reg = (frequency * 268435456) / 25000000;
 8000570:	0703      	lsls	r3, r0, #28
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <AD9833_SetFrequency+0x44>)
 8000574:	fba2 2303 	umull	r2, r3, r2, r3
 8000578:	0ddb      	lsrs	r3, r3, #23
	    uint16_t upper = (uint16_t)((freq_reg >> 14) & 0x3FFF);

	    lower <<= 2;
	    upper <<= 2;

	    uint16_t lower_data = AD9833_REG_FREQ0 | lower;
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000580:	f8ad 3006 	strh.w	r3, [sp, #6]
	    uint16_t upper_data = AD9833_REG_FREQ0 | upper;
 8000584:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000588:	f8ad 3004 	strh.w	r3, [sp, #4]

	    HAL_SPI_Transmit(&hspi1, (uint8_t*)&lower_data, 1, HAL_MAX_DELAY);
 800058c:	4c09      	ldr	r4, [pc, #36]	; (80005b4 <AD9833_SetFrequency+0x48>)
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	f10d 0106 	add.w	r1, sp, #6
 8000598:	4620      	mov	r0, r4
 800059a:	f003 fe25 	bl	80041e8 <HAL_SPI_Transmit>
	    HAL_SPI_Transmit(&hspi1, (uint8_t*)&upper_data, 1, HAL_MAX_DELAY);
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	2201      	movs	r2, #1
 80005a4:	a901      	add	r1, sp, #4
 80005a6:	4620      	mov	r0, r4
 80005a8:	f003 fe1e 	bl	80041e8 <HAL_SPI_Transmit>
	}
 80005ac:	b002      	add	sp, #8
 80005ae:	bd10      	pop	{r4, pc}
 80005b0:	55e63b89 	.word	0x55e63b89
 80005b4:	20000168 	.word	0x20000168

080005b8 <AD9833_SetWaveform>:
	void AD9833_SetWaveform(uint16_t waveform)
	{
 80005b8:	b508      	push	{r3, lr}
	    HAL_SPI_Transmit(&hspi1, (uint8_t*)(AD9833_REG_CMD | waveform), 1, HAL_MAX_DELAY);
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2201      	movs	r2, #1
 80005c0:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
 80005c4:	4801      	ldr	r0, [pc, #4]	; (80005cc <AD9833_SetWaveform+0x14>)
 80005c6:	f003 fe0f 	bl	80041e8 <HAL_SPI_Transmit>
	}
 80005ca:	bd08      	pop	{r3, pc}
 80005cc:	20000168 	.word	0x20000168

080005d0 <TPL0102_Write>:
    // Set digipot to 50k ohm value at the start ==> offset 0V
    TPL0102_Write(hi2c, CHANNEL_0, 128);
    TPL0102_Write(hi2c, CHANNEL_1, 128);
}

void TPL0102_Write(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t value) {
 80005d0:	b500      	push	{lr}
 80005d2:	b085      	sub	sp, #20
    uint8_t data[2] = {channel, value};
 80005d4:	f88d 100c 	strb.w	r1, [sp, #12]
 80005d8:	f88d 200d 	strb.w	r2, [sp, #13]
    HAL_I2C_Master_Transmit(hi2c, (uint16_t)(TPL0102_ADDR<<1), data, 2, HAL_MAX_DELAY);
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2302      	movs	r3, #2
 80005e4:	aa03      	add	r2, sp, #12
 80005e6:	2150      	movs	r1, #80	; 0x50
 80005e8:	f002 f93c 	bl	8002864 <HAL_I2C_Master_Transmit>
}
 80005ec:	b005      	add	sp, #20
 80005ee:	f85d fb04 	ldr.w	pc, [sp], #4

080005f2 <TPL0102_Init>:
void TPL0102_Init(I2C_HandleTypeDef *hi2c) {
 80005f2:	b510      	push	{r4, lr}
 80005f4:	4604      	mov	r4, r0
    TPL0102_Write(hi2c, CHANNEL_0, 128);
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	2100      	movs	r1, #0
 80005fa:	f7ff ffe9 	bl	80005d0 <TPL0102_Write>
    TPL0102_Write(hi2c, CHANNEL_1, 128);
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	2110      	movs	r1, #16
 8000602:	4620      	mov	r0, r4
 8000604:	f7ff ffe4 	bl	80005d0 <TPL0102_Write>
}
 8000608:	bd10      	pop	{r4, pc}
	...

0800060c <DelayInit>:
  DelayUS(20);
}

static void DelayInit(void)
{
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <DelayInit+0x3c>)
 800060e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8000612:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000616:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800061a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800061e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000622:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000626:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	f022 0201 	bic.w	r2, r2, #1
 8000630:	601a      	str	r2, [r3, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	f042 0201 	orr.w	r2, r2, #1
 8000638:	601a      	str	r2, [r3, #0]

  DWT->CYCCNT = 0;
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800063e:	bf00      	nop
  __ASM volatile ("NOP");
 8000640:	bf00      	nop
  __ASM volatile ("NOP");
 8000642:	bf00      	nop
}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <DelayUS>:

static void DelayUS(uint32_t us) {
 800064c:	b082      	sub	sp, #8
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <DelayUS+0x28>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a09      	ldr	r2, [pc, #36]	; (8000678 <DelayUS+0x2c>)
 8000654:	fba2 2303 	umull	r2, r3, r2, r3
 8000658:	0c9b      	lsrs	r3, r3, #18
 800065a:	fb03 f000 	mul.w	r0, r3, r0
  uint32_t start = DWT->CYCCNT;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <DelayUS+0x30>)
 8000660:	685a      	ldr	r2, [r3, #4]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <DelayUS+0x30>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	9301      	str	r3, [sp, #4]
  } while(cnt < cycles);
 800066a:	9b01      	ldr	r3, [sp, #4]
 800066c:	4283      	cmp	r3, r0
 800066e:	d3f8      	bcc.n	8000662 <DelayUS+0x16>
}
 8000670:	b002      	add	sp, #8
 8000672:	4770      	bx	lr
 8000674:	20000014 	.word	0x20000014
 8000678:	431bde83 	.word	0x431bde83
 800067c:	e0001000 	.word	0xe0001000

08000680 <ExpanderWrite>:
{
 8000680:	b500      	push	{lr}
 8000682:	b085      	sub	sp, #20
  uint8_t data = _data | dpBacklight;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <ExpanderWrite+0x28>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4318      	orrs	r0, r3
 800068a:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800068e:	230a      	movs	r3, #10
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	f10d 020f 	add.w	r2, sp, #15
 8000698:	214e      	movs	r1, #78	; 0x4e
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <ExpanderWrite+0x2c>)
 800069c:	f002 f8e2 	bl	8002864 <HAL_I2C_Master_Transmit>
}
 80006a0:	b005      	add	sp, #20
 80006a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a6:	bf00      	nop
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	20000114 	.word	0x20000114

080006b0 <PulseEnable>:
{
 80006b0:	b510      	push	{r4, lr}
 80006b2:	4604      	mov	r4, r0
  ExpanderWrite(_data | ENABLE);
 80006b4:	f040 0004 	orr.w	r0, r0, #4
 80006b8:	f7ff ffe2 	bl	8000680 <ExpanderWrite>
  DelayUS(20);
 80006bc:	2014      	movs	r0, #20
 80006be:	f7ff ffc5 	bl	800064c <DelayUS>
  ExpanderWrite(_data & ~ENABLE);
 80006c2:	f004 00fb 	and.w	r0, r4, #251	; 0xfb
 80006c6:	f7ff ffdb 	bl	8000680 <ExpanderWrite>
  DelayUS(20);
 80006ca:	2014      	movs	r0, #20
 80006cc:	f7ff ffbe 	bl	800064c <DelayUS>
}
 80006d0:	bd10      	pop	{r4, pc}

080006d2 <Write4Bits>:
{
 80006d2:	b510      	push	{r4, lr}
 80006d4:	4604      	mov	r4, r0
  ExpanderWrite(value);
 80006d6:	f7ff ffd3 	bl	8000680 <ExpanderWrite>
  PulseEnable(value);
 80006da:	4620      	mov	r0, r4
 80006dc:	f7ff ffe8 	bl	80006b0 <PulseEnable>
}
 80006e0:	bd10      	pop	{r4, pc}

080006e2 <Send>:
{
 80006e2:	b538      	push	{r3, r4, r5, lr}
 80006e4:	460d      	mov	r5, r1
  uint8_t highnib = value & 0xF0;
 80006e6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
  uint8_t lownib = (value<<4) & 0xF0;
 80006ea:	0104      	lsls	r4, r0, #4
 80006ec:	b2e4      	uxtb	r4, r4
  Write4Bits((highnib)|mode);
 80006ee:	ea43 0001 	orr.w	r0, r3, r1
 80006f2:	f7ff ffee 	bl	80006d2 <Write4Bits>
  Write4Bits((lownib)|mode);
 80006f6:	ea44 0005 	orr.w	r0, r4, r5
 80006fa:	f7ff ffea 	bl	80006d2 <Write4Bits>
}
 80006fe:	bd38      	pop	{r3, r4, r5, pc}

08000700 <SendCommand>:
{
 8000700:	b508      	push	{r3, lr}
  Send(cmd, 0);
 8000702:	2100      	movs	r1, #0
 8000704:	f7ff ffed 	bl	80006e2 <Send>
}
 8000708:	bd08      	pop	{r3, pc}

0800070a <SendChar>:
{
 800070a:	b508      	push	{r3, lr}
  Send(ch, RS);
 800070c:	2101      	movs	r1, #1
 800070e:	f7ff ffe8 	bl	80006e2 <Send>
}
 8000712:	bd08      	pop	{r3, pc}

08000714 <HD44780_Clear>:
{
 8000714:	b508      	push	{r3, lr}
  SendCommand(LCD_CLEARDISPLAY);
 8000716:	2001      	movs	r0, #1
 8000718:	f7ff fff2 	bl	8000700 <SendCommand>
  DelayUS(2000);
 800071c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000720:	f7ff ff94 	bl	800064c <DelayUS>
}
 8000724:	bd08      	pop	{r3, pc}

08000726 <HD44780_Home>:
{
 8000726:	b508      	push	{r3, lr}
  SendCommand(LCD_RETURNHOME);
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff ffe9 	bl	8000700 <SendCommand>
  DelayUS(2000);
 800072e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000732:	f7ff ff8b 	bl	800064c <DelayUS>
}
 8000736:	bd08      	pop	{r3, pc}

08000738 <HD44780_SetCursor>:
{
 8000738:	b510      	push	{r4, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	4684      	mov	ip, r0
 800073e:	468e      	mov	lr, r1
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HD44780_SetCursor+0x3c>)
 8000742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000744:	ac04      	add	r4, sp, #16
 8000746:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HD44780_SetCursor+0x40>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4573      	cmp	r3, lr
 8000750:	d802      	bhi.n	8000758 <HD44780_SetCursor+0x20>
    row = dpRows-1;
 8000752:	3b01      	subs	r3, #1
 8000754:	fa5f fe83 	uxtb.w	lr, r3
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000758:	ab04      	add	r3, sp, #16
 800075a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800075e:	f85e 0c10 	ldr.w	r0, [lr, #-16]
 8000762:	4460      	add	r0, ip
 8000764:	b240      	sxtb	r0, r0
 8000766:	f060 007f 	orn	r0, r0, #127	; 0x7f
 800076a:	b2c0      	uxtb	r0, r0
 800076c:	f7ff ffc8 	bl	8000700 <SendCommand>
}
 8000770:	b004      	add	sp, #16
 8000772:	bd10      	pop	{r4, pc}
 8000774:	080059c8 	.word	0x080059c8
 8000778:	20000090 	.word	0x20000090

0800077c <HD44780_Display>:
{
 800077c:	b508      	push	{r3, lr}
  dpControl |= LCD_DISPLAYON;
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HD44780_Display+0x18>)
 8000780:	7818      	ldrb	r0, [r3, #0]
 8000782:	f040 0004 	orr.w	r0, r0, #4
 8000786:	7018      	strb	r0, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000788:	f040 0008 	orr.w	r0, r0, #8
 800078c:	f7ff ffb8 	bl	8000700 <SendCommand>
}
 8000790:	bd08      	pop	{r3, pc}
 8000792:	bf00      	nop
 8000794:	2000008d 	.word	0x2000008d

08000798 <HD44780_CreateSpecialChar>:
{
 8000798:	b538      	push	{r3, r4, r5, lr}
 800079a:	460d      	mov	r5, r1
  location &= 0x7;
 800079c:	f000 0007 	and.w	r0, r0, #7
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80007a0:	00c0      	lsls	r0, r0, #3
 80007a2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80007a6:	f7ff ffab 	bl	8000700 <SendCommand>
  for (int i=0; i<8; i++)
 80007aa:	2400      	movs	r4, #0
 80007ac:	e003      	b.n	80007b6 <HD44780_CreateSpecialChar+0x1e>
    SendChar(charmap[i]);
 80007ae:	5d28      	ldrb	r0, [r5, r4]
 80007b0:	f7ff ffab 	bl	800070a <SendChar>
  for (int i=0; i<8; i++)
 80007b4:	3401      	adds	r4, #1
 80007b6:	2c07      	cmp	r4, #7
 80007b8:	ddf9      	ble.n	80007ae <HD44780_CreateSpecialChar+0x16>
}
 80007ba:	bd38      	pop	{r3, r4, r5, pc}

080007bc <HD44780_Init>:
{
 80007bc:	b508      	push	{r3, lr}
  dpRows = rows;
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <HD44780_Init+0xb8>)
 80007c0:	7018      	strb	r0, [r3, #0]
  dpBacklight = LCD_BACKLIGHT;
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <HD44780_Init+0xbc>)
 80007c4:	2208      	movs	r2, #8
 80007c6:	701a      	strb	r2, [r3, #0]
  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <HD44780_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
  if (dpRows > 1)
 80007ce:	2801      	cmp	r0, #1
 80007d0:	d94b      	bls.n	800086a <HD44780_Init+0xae>
    dpFunction |= LCD_2LINE;
 80007d2:	2208      	movs	r2, #8
 80007d4:	701a      	strb	r2, [r3, #0]
  DelayInit();
 80007d6:	f7ff ff19 	bl	800060c <DelayInit>
  HAL_Delay(50);
 80007da:	2032      	movs	r0, #50	; 0x32
 80007dc:	f000 fea4 	bl	8001528 <HAL_Delay>
  ExpanderWrite(dpBacklight);
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <HD44780_Init+0xbc>)
 80007e2:	7818      	ldrb	r0, [r3, #0]
 80007e4:	f7ff ff4c 	bl	8000680 <ExpanderWrite>
  HAL_Delay(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f000 fe9c 	bl	8001528 <HAL_Delay>
  Write4Bits(0x03 << 4);
 80007f0:	2030      	movs	r0, #48	; 0x30
 80007f2:	f7ff ff6e 	bl	80006d2 <Write4Bits>
  DelayUS(4500);
 80007f6:	f241 1094 	movw	r0, #4500	; 0x1194
 80007fa:	f7ff ff27 	bl	800064c <DelayUS>
  Write4Bits(0x03 << 4);
 80007fe:	2030      	movs	r0, #48	; 0x30
 8000800:	f7ff ff67 	bl	80006d2 <Write4Bits>
  DelayUS(4500);
 8000804:	f241 1094 	movw	r0, #4500	; 0x1194
 8000808:	f7ff ff20 	bl	800064c <DelayUS>
  Write4Bits(0x03 << 4);
 800080c:	2030      	movs	r0, #48	; 0x30
 800080e:	f7ff ff60 	bl	80006d2 <Write4Bits>
  DelayUS(4500);
 8000812:	f241 1094 	movw	r0, #4500	; 0x1194
 8000816:	f7ff ff19 	bl	800064c <DelayUS>
  Write4Bits(0x02 << 4);
 800081a:	2020      	movs	r0, #32
 800081c:	f7ff ff59 	bl	80006d2 <Write4Bits>
  DelayUS(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f7ff ff13 	bl	800064c <DelayUS>
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HD44780_Init+0xc0>)
 8000828:	7818      	ldrb	r0, [r3, #0]
 800082a:	f040 0020 	orr.w	r0, r0, #32
 800082e:	f7ff ff67 	bl	8000700 <SendCommand>
  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HD44780_Init+0xc4>)
 8000834:	2204      	movs	r2, #4
 8000836:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000838:	f7ff ffa0 	bl	800077c <HD44780_Display>
  HD44780_Clear();
 800083c:	f7ff ff6a 	bl	8000714 <HD44780_Clear>
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HD44780_Init+0xc8>)
 8000842:	2202      	movs	r2, #2
 8000844:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000846:	2006      	movs	r0, #6
 8000848:	f7ff ff5a 	bl	8000700 <SendCommand>
  DelayUS(4500);
 800084c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000850:	f7ff fefc 	bl	800064c <DelayUS>
  HD44780_CreateSpecialChar(0, special1);
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <HD44780_Init+0xcc>)
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ff9e 	bl	8000798 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800085c:	490b      	ldr	r1, [pc, #44]	; (800088c <HD44780_Init+0xd0>)
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff ff9a 	bl	8000798 <HD44780_CreateSpecialChar>
  HD44780_Home();
 8000864:	f7ff ff5f 	bl	8000726 <HD44780_Home>
}
 8000868:	bd08      	pop	{r3, pc}
    dpFunction |= LCD_5x10DOTS;
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <HD44780_Init+0xc0>)
 800086c:	2204      	movs	r2, #4
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e7b1      	b.n	80007d6 <HD44780_Init+0x1a>
 8000872:	bf00      	nop
 8000874:	20000090 	.word	0x20000090
 8000878:	2000008c 	.word	0x2000008c
 800087c:	2000008e 	.word	0x2000008e
 8000880:	2000008d 	.word	0x2000008d
 8000884:	2000008f 	.word	0x2000008f
 8000888:	20000000 	.word	0x20000000
 800088c:	20000008 	.word	0x20000008

08000890 <HD44780_PrintStr>:
{
 8000890:	b510      	push	{r4, lr}
 8000892:	4604      	mov	r4, r0
  while(*c) SendChar(*c++);
 8000894:	e002      	b.n	800089c <HD44780_PrintStr+0xc>
 8000896:	3401      	adds	r4, #1
 8000898:	f7ff ff37 	bl	800070a <SendChar>
 800089c:	7820      	ldrb	r0, [r4, #0]
 800089e:	2800      	cmp	r0, #0
 80008a0:	d1f9      	bne.n	8000896 <HD44780_PrintStr+0x6>
}
 80008a2:	bd10      	pop	{r4, pc}

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2400      	movs	r4, #0
 80008aa:	9403      	str	r4, [sp, #12]
 80008ac:	9404      	str	r4, [sp, #16]
 80008ae:	9405      	str	r4, [sp, #20]
 80008b0:	9406      	str	r4, [sp, #24]
 80008b2:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_GPIO_Init+0xa0>)
 80008b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80008be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80008c4:	9200      	str	r2, [sp, #0]
 80008c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008ca:	f042 0201 	orr.w	r2, r2, #1
 80008ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80008d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d2:	f002 0201 	and.w	r2, r2, #1
 80008d6:	9201      	str	r2, [sp, #4]
 80008d8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008dc:	f042 0202 	orr.w	r2, r2, #2
 80008e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80008ec:	4f16      	ldr	r7, [pc, #88]	; (8000948 <MX_GPIO_Init+0xa4>)
 80008ee:	4622      	mov	r2, r4
 80008f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f4:	4638      	mov	r0, r7
 80008f6:	f001 fdfc 	bl	80024f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80008fa:	4d14      	ldr	r5, [pc, #80]	; (800094c <MX_GPIO_Init+0xa8>)
 80008fc:	4622      	mov	r2, r4
 80008fe:	2110      	movs	r1, #16
 8000900:	4628      	mov	r0, r5
 8000902:	f001 fdf6 	bl	80024f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_1_Pin button_2_Pin button_3_Pin button_4_Pin
                           Encoder_SW_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin|button_3_Pin|button_4_Pin
 8000906:	f648 4306 	movw	r3, #35846	; 0x8c06
 800090a:	9303      	str	r3, [sp, #12]
                          |Encoder_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	a903      	add	r1, sp, #12
 8000912:	4628      	mov	r0, r5
 8000914:	f001 fd02 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 8000918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800091c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2601      	movs	r6, #1
 8000920:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 8000926:	a903      	add	r1, sp, #12
 8000928:	4638      	mov	r0, r7
 800092a:	f001 fcf7 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800092e:	2310      	movs	r3, #16
 8000930:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	a903      	add	r1, sp, #12
 800093a:	4628      	mov	r0, r5
 800093c:	f001 fcee 	bl	800231c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000940:	b009      	add	sp, #36	; 0x24
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	42020000 	.word	0x42020000
 800094c:	42020400 	.word	0x42020400

08000950 <HAL_ADC_ConvCpltCallback>:
	{
 8000950:	b508      	push	{r3, lr}
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <HAL_ADC_ConvCpltCallback+0x10>)
 8000954:	f000 fef0 	bl	8001738 <HAL_ADC_GetValue>
 8000958:	b280      	uxth	r0, r0
 800095a:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_ADC_ConvCpltCallback+0x14>)
 800095c:	8018      	strh	r0, [r3, #0]
	}
 800095e:	bd08      	pop	{r3, pc}
 8000960:	200000ac 	.word	0x200000ac
 8000964:	20000092 	.word	0x20000092

08000968 <adc_voltage>:
		float adc_voltage = (adc_value/4095)*reference;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <adc_voltage+0x20>)
 800096a:	fb83 2300 	smull	r2, r3, r3, r0
 800096e:	4403      	add	r3, r0
 8000970:	17c0      	asrs	r0, r0, #31
 8000972:	ebc0 20e3 	rsb	r0, r0, r3, asr #11
 8000976:	ee07 0a90 	vmov	s15, r0
 800097a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
 800097e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8000982:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000986:	4770      	bx	lr
 8000988:	80080081 	.word	0x80080081

0800098c <RotaryEncoderUpdate>:
		encoderValue=TIM1->CNT;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <RotaryEncoderUpdate+0x28>)
 800098e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <RotaryEncoderUpdate+0x2c>)
 8000992:	6013      	str	r3, [r2, #0]
		if(encoderValue != encoderValueOld)
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <RotaryEncoderUpdate+0x30>)
 8000996:	6812      	ldr	r2, [r2, #0]
 8000998:	4293      	cmp	r3, r2
 800099a:	d005      	beq.n	80009a8 <RotaryEncoderUpdate+0x1c>
				if(encoderValue > encoderValueOld)
 800099c:	d905      	bls.n	80009aa <RotaryEncoderUpdate+0x1e>
					direction = 1;
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <RotaryEncoderUpdate+0x34>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	7011      	strb	r1, [r2, #0]
				encoderValueOld=encoderValue;
 80009a4:	4a05      	ldr	r2, [pc, #20]	; (80009bc <RotaryEncoderUpdate+0x30>)
 80009a6:	6013      	str	r3, [r2, #0]
	}
 80009a8:	4770      	bx	lr
					direction = -1;
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <RotaryEncoderUpdate+0x34>)
 80009ac:	21ff      	movs	r1, #255	; 0xff
 80009ae:	7011      	strb	r1, [r2, #0]
 80009b0:	e7f8      	b.n	80009a4 <RotaryEncoderUpdate+0x18>
 80009b2:	bf00      	nop
 80009b4:	40012c00 	.word	0x40012c00
 80009b8:	2000009c 	.word	0x2000009c
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	20000098 	.word	0x20000098

080009c4 <ImpChangeState>:
	{
 80009c4:	b508      	push	{r3, lr}
		imp_currentstate = 1-imp_currentstate;
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <ImpChangeState+0x30>)
 80009c8:	7813      	ldrb	r3, [r2, #0]
 80009ca:	f1c3 0301 	rsb	r3, r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	7013      	strb	r3, [r2, #0]
		if (imp_currentstate == 0)
 80009d2:	b93b      	cbnz	r3, 80009e4 <ImpChangeState+0x20>
					HD44780_SetCursor(11,1);
 80009d4:	2101      	movs	r1, #1
 80009d6:	200b      	movs	r0, #11
 80009d8:	f7ff feae 	bl	8000738 <HD44780_SetCursor>
					HD44780_PrintStr("M:HighZ");
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <ImpChangeState+0x34>)
 80009de:	f7ff ff57 	bl	8000890 <HD44780_PrintStr>
	}
 80009e2:	bd08      	pop	{r3, pc}
					HD44780_SetCursor(13,1);
 80009e4:	2101      	movs	r1, #1
 80009e6:	200d      	movs	r0, #13
 80009e8:	f7ff fea6 	bl	8000738 <HD44780_SetCursor>
					HD44780_PrintStr("M:50Ω");
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <ImpChangeState+0x38>)
 80009ee:	f7ff ff4f 	bl	8000890 <HD44780_PrintStr>
	}
 80009f2:	e7f6      	b.n	80009e2 <ImpChangeState+0x1e>
 80009f4:	200002ac 	.word	0x200002ac
 80009f8:	080059d8 	.word	0x080059d8
 80009fc:	080059e0 	.word	0x080059e0

08000a00 <WaveformChangeState>:
	{
 8000a00:	b508      	push	{r3, lr}
		wv_currentstate = (wv_currentstate+1)% 3;
 8000a02:	491a      	ldr	r1, [pc, #104]	; (8000a6c <WaveformChangeState+0x6c>)
 8000a04:	780a      	ldrb	r2, [r1, #0]
 8000a06:	3201      	adds	r2, #1
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <WaveformChangeState+0x70>)
 8000a0a:	fb83 0302 	smull	r0, r3, r3, r2
 8000a0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	700b      	strb	r3, [r1, #0]
		switch(wv_currentstate)
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d00f      	beq.n	8000a3c <WaveformChangeState+0x3c>
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d019      	beq.n	8000a54 <WaveformChangeState+0x54>
 8000a20:	b103      	cbz	r3, 8000a24 <WaveformChangeState+0x24>
	}
 8000a22:	bd08      	pop	{r3, pc}
			AD9833_SetWaveform(AD9833_WAVEFORM_SINE);
 8000a24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a28:	f7ff fdc6 	bl	80005b8 <AD9833_SetWaveform>
			HD44780_SetCursor(0,1);
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fe82 	bl	8000738 <HD44780_SetCursor>
			HD44780_PrintStr("SINE");
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <WaveformChangeState+0x74>)
 8000a36:	f7ff ff2b 	bl	8000890 <HD44780_PrintStr>
			break;
 8000a3a:	e7f2      	b.n	8000a22 <WaveformChangeState+0x22>
			AD9833_SetWaveform(AD9833_WAVEFORM_TRIANGLE);
 8000a3c:	f242 0002 	movw	r0, #8194	; 0x2002
 8000a40:	f7ff fdba 	bl	80005b8 <AD9833_SetWaveform>
			HD44780_SetCursor(0,1);
 8000a44:	2101      	movs	r1, #1
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fe76 	bl	8000738 <HD44780_SetCursor>
			HD44780_PrintStr("TRIANGLE");
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <WaveformChangeState+0x78>)
 8000a4e:	f7ff ff1f 	bl	8000890 <HD44780_PrintStr>
			break;
 8000a52:	e7e6      	b.n	8000a22 <WaveformChangeState+0x22>
			AD9833_SetWaveform(AD9833_WAVEFORM_SQUARE);
 8000a54:	f242 0028 	movw	r0, #8232	; 0x2028
 8000a58:	f7ff fdae 	bl	80005b8 <AD9833_SetWaveform>
			HD44780_SetCursor(0,1);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fe6a 	bl	8000738 <HD44780_SetCursor>
			HD44780_PrintStr("SQUARE");
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <WaveformChangeState+0x7c>)
 8000a66:	f7ff ff13 	bl	8000890 <HD44780_PrintStr>
	}
 8000a6a:	e7da      	b.n	8000a22 <WaveformChangeState+0x22>
 8000a6c:	200002af 	.word	0x200002af
 8000a70:	55555556 	.word	0x55555556
 8000a74:	080059e8 	.word	0x080059e8
 8000a78:	080059f0 	.word	0x080059f0
 8000a7c:	080059fc 	.word	0x080059fc

08000a80 <REChangeState>:
			re_currentstate = (re_currentstate+1)% 3;
 8000a80:	495e      	ldr	r1, [pc, #376]	; (8000bfc <REChangeState+0x17c>)
 8000a82:	780a      	ldrb	r2, [r1, #0]
 8000a84:	3201      	adds	r2, #1
 8000a86:	4b5e      	ldr	r3, [pc, #376]	; (8000c00 <REChangeState+0x180>)
 8000a88:	fb83 0302 	smull	r0, r3, r3, r2
 8000a8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	700b      	strb	r3, [r1, #0]
			switch(re_currentstate)
 8000a96:	b103      	cbz	r3, 8000a9a <REChangeState+0x1a>
 8000a98:	4770      	bx	lr
		{
 8000a9a:	b510      	push	{r4, lr}
 8000a9c:	b082      	sub	sp, #8
				sprintf(frequencyStr, "%lu", frequency);
 8000a9e:	4c59      	ldr	r4, [pc, #356]	; (8000c04 <REChangeState+0x184>)
 8000aa0:	6822      	ldr	r2, [r4, #0]
 8000aa2:	4959      	ldr	r1, [pc, #356]	; (8000c08 <REChangeState+0x188>)
 8000aa4:	4668      	mov	r0, sp
 8000aa6:	f004 fad1 	bl	800504c <siprintf>
				encoderValueFrequency=encoderValue;
 8000aaa:	4b58      	ldr	r3, [pc, #352]	; (8000c0c <REChangeState+0x18c>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b58      	ldr	r3, [pc, #352]	; (8000c10 <REChangeState+0x190>)
 8000ab0:	601a      	str	r2, [r3, #0]
				if (frequency<1 || frequency>12500000)
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	4957      	ldr	r1, [pc, #348]	; (8000c14 <REChangeState+0x194>)
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d90c      	bls.n	8000ad6 <REChangeState+0x56>
					frequency=1;
 8000abc:	2201      	movs	r2, #1
 8000abe:	6022      	str	r2, [r4, #0]
				switch(pos) // Change of value based on position defined by button left & right
 8000ac0:	4b55      	ldr	r3, [pc, #340]	; (8000c18 <REChangeState+0x198>)
 8000ac2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d810      	bhi.n	8000aec <REChangeState+0x6c>
 8000aca:	e8df f003 	tbb	[pc, r3]
 8000ace:	1b07      	.short	0x1b07
 8000ad0:	69533f2d 	.word	0x69533f2d
 8000ad4:	7f          	.byte	0x7f
 8000ad5:	00          	.byte	0x00
					frequency = encoderValueFrequency;
 8000ad6:	4b4b      	ldr	r3, [pc, #300]	; (8000c04 <REChangeState+0x184>)
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e7f1      	b.n	8000ac0 <REChangeState+0x40>
					if(direction==1)
 8000adc:	4b4f      	ldr	r3, [pc, #316]	; (8000c1c <REChangeState+0x19c>)
 8000ade:	f993 3000 	ldrsb.w	r3, [r3]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d004      	beq.n	8000af0 <REChangeState+0x70>
					else if (direction==-1)
 8000ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aea:	d006      	beq.n	8000afa <REChangeState+0x7a>
		}
 8000aec:	b002      	add	sp, #8
 8000aee:	bd10      	pop	{r4, pc}
						frequency+=1;
 8000af0:	4a44      	ldr	r2, [pc, #272]	; (8000c04 <REChangeState+0x184>)
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	e7f8      	b.n	8000aec <REChangeState+0x6c>
						frequency-=1;
 8000afa:	4a42      	ldr	r2, [pc, #264]	; (8000c04 <REChangeState+0x184>)
 8000afc:	6813      	ldr	r3, [r2, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e7f3      	b.n	8000aec <REChangeState+0x6c>
					if(direction==1)
 8000b04:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <REChangeState+0x19c>)
 8000b06:	f993 3000 	ldrsb.w	r3, [r3]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d007      	beq.n	8000b1e <REChangeState+0x9e>
					else if (direction==-1)
 8000b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b12:	d1eb      	bne.n	8000aec <REChangeState+0x6c>
						frequency-=10;
 8000b14:	4a3b      	ldr	r2, [pc, #236]	; (8000c04 <REChangeState+0x184>)
 8000b16:	6813      	ldr	r3, [r2, #0]
 8000b18:	3b0a      	subs	r3, #10
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e7e6      	b.n	8000aec <REChangeState+0x6c>
						frequency+=10;
 8000b1e:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <REChangeState+0x184>)
 8000b20:	6813      	ldr	r3, [r2, #0]
 8000b22:	330a      	adds	r3, #10
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e7e1      	b.n	8000aec <REChangeState+0x6c>
					if(direction==1)
 8000b28:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <REChangeState+0x19c>)
 8000b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d007      	beq.n	8000b42 <REChangeState+0xc2>
					else if (direction==-1)
 8000b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b36:	d1d9      	bne.n	8000aec <REChangeState+0x6c>
						frequency-=100;
 8000b38:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <REChangeState+0x184>)
 8000b3a:	6813      	ldr	r3, [r2, #0]
 8000b3c:	3b64      	subs	r3, #100	; 0x64
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	e7d4      	b.n	8000aec <REChangeState+0x6c>
						frequency+=100;
 8000b42:	4a30      	ldr	r2, [pc, #192]	; (8000c04 <REChangeState+0x184>)
 8000b44:	6813      	ldr	r3, [r2, #0]
 8000b46:	3364      	adds	r3, #100	; 0x64
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e7cf      	b.n	8000aec <REChangeState+0x6c>
					if(direction==1)
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <REChangeState+0x19c>)
 8000b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d008      	beq.n	8000b68 <REChangeState+0xe8>
					else if (direction==-1)
 8000b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5a:	d1c7      	bne.n	8000aec <REChangeState+0x6c>
						frequency-=1000;
 8000b5c:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <REChangeState+0x184>)
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e7c1      	b.n	8000aec <REChangeState+0x6c>
						frequency+=1000;
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <REChangeState+0x184>)
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e7bb      	b.n	8000aec <REChangeState+0x6c>
					if(direction==1)
 8000b74:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <REChangeState+0x19c>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d009      	beq.n	8000b92 <REChangeState+0x112>
					else if (direction==-1)
 8000b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b82:	d1b3      	bne.n	8000aec <REChangeState+0x6c>
						frequency-=10000;
 8000b84:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <REChangeState+0x184>)
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000b8c:	3b10      	subs	r3, #16
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e7ac      	b.n	8000aec <REChangeState+0x6c>
						frequency+=10000;
 8000b92:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <REChangeState+0x184>)
 8000b94:	6813      	ldr	r3, [r2, #0]
 8000b96:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000b9a:	3310      	adds	r3, #16
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	e7a5      	b.n	8000aec <REChangeState+0x6c>
					if(direction==1)
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <REChangeState+0x19c>)
 8000ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d009      	beq.n	8000bbe <REChangeState+0x13e>
					else if (direction==-1)
 8000baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bae:	d19d      	bne.n	8000aec <REChangeState+0x6c>
						frequency-=100000;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <REChangeState+0x184>)
 8000bb2:	6813      	ldr	r3, [r2, #0]
 8000bb4:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000bb8:	3ba0      	subs	r3, #160	; 0xa0
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e796      	b.n	8000aec <REChangeState+0x6c>
						frequency+=100000;
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <REChangeState+0x184>)
 8000bc0:	6813      	ldr	r3, [r2, #0]
 8000bc2:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8000bc6:	33a0      	adds	r3, #160	; 0xa0
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e78f      	b.n	8000aec <REChangeState+0x6c>
					if(direction==1)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <REChangeState+0x19c>)
 8000bce:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d00a      	beq.n	8000bec <REChangeState+0x16c>
					else if (direction==-1)
 8000bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bda:	d187      	bne.n	8000aec <REChangeState+0x6c>
						frequency-=1000000;
 8000bdc:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <REChangeState+0x184>)
 8000bde:	6813      	ldr	r3, [r2, #0]
 8000be0:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8000be4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000be8:	6013      	str	r3, [r2, #0]
		}
 8000bea:	e77f      	b.n	8000aec <REChangeState+0x6c>
						frequency+=1000000;
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <REChangeState+0x184>)
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8000bf4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e777      	b.n	8000aec <REChangeState+0x6c>
 8000bfc:	200002ae 	.word	0x200002ae
 8000c00:	55555556 	.word	0x55555556
 8000c04:	200000a8 	.word	0x200000a8
 8000c08:	08005a04 	.word	0x08005a04
 8000c0c:	2000009c 	.word	0x2000009c
 8000c10:	200000a0 	.word	0x200000a0
 8000c14:	00bebc1f 	.word	0x00bebc1f
 8000c18:	200002ad 	.word	0x200002ad
 8000c1c:	20000098 	.word	0x20000098

08000c20 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c22:	e7fe      	b.n	8000c22 <Error_Handler+0x2>

08000c24 <MX_TIM1_Init>:
{
 8000c24:	b500      	push	{lr}
 8000c26:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c28:	2224      	movs	r2, #36	; 0x24
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	a803      	add	r0, sp, #12
 8000c2e:	f004 fa2d 	bl	800508c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	2300      	movs	r3, #0
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	9302      	str	r3, [sp, #8]
  htim1.Instance = TIM1;
 8000c3a:	4812      	ldr	r0, [pc, #72]	; (8000c84 <MX_TIM1_Init+0x60>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_TIM1_Init+0x64>)
 8000c3e:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000c40:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8000c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c48:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c4c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c50:	2303      	movs	r3, #3
 8000c52:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c54:	2301      	movs	r3, #1
 8000c56:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c5a:	a903      	add	r1, sp, #12
 8000c5c:	f003 fcfc 	bl	8004658 <HAL_TIM_Encoder_Init>
 8000c60:	b958      	cbnz	r0, 8000c7a <MX_TIM1_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c66:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6a:	4669      	mov	r1, sp
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_TIM1_Init+0x60>)
 8000c6e:	f003 fdd5 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	b920      	cbnz	r0, 8000c7e <MX_TIM1_Init+0x5a>
}
 8000c74:	b00d      	add	sp, #52	; 0x34
 8000c76:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c7a:	f7ff ffd1 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000c7e:	f7ff ffcf 	bl	8000c20 <Error_Handler>
 8000c82:	bf00      	nop
 8000c84:	200001cc 	.word	0x200001cc
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <MX_I2C1_Init>:
{
 8000c8c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_I2C1_Init+0x48>)
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_I2C1_Init+0x4c>)
 8000c92:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000c94:	f640 6314 	movw	r3, #3604	; 0xe14
 8000c98:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000caa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cac:	f001 fd7c 	bl	80027a8 <HAL_I2C_Init>
 8000cb0:	b950      	cbnz	r0, 8000cc8 <MX_I2C1_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_I2C1_Init+0x48>)
 8000cb6:	f001 fe93 	bl	80029e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cba:	b938      	cbnz	r0, 8000ccc <MX_I2C1_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_I2C1_Init+0x48>)
 8000cc0:	f001 febc 	bl	8002a3c <HAL_I2CEx_ConfigDigitalFilter>
 8000cc4:	b920      	cbnz	r0, 8000cd0 <MX_I2C1_Init+0x44>
}
 8000cc6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cc8:	f7ff ffaa 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000ccc:	f7ff ffa8 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000cd0:	f7ff ffa6 	bl	8000c20 <Error_Handler>
 8000cd4:	20000114 	.word	0x20000114
 8000cd8:	40005400 	.word	0x40005400

08000cdc <MX_UART4_Init>:
{
 8000cdc:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 8000cde:	4815      	ldr	r0, [pc, #84]	; (8000d34 <MX_UART4_Init+0x58>)
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_UART4_Init+0x5c>)
 8000ce2:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8000ce4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ce8:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	2300      	movs	r3, #0
 8000cec:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cee:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cf0:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cfc:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d00:	f004 f8e1 	bl	8004ec6 <HAL_UART_Init>
 8000d04:	b970      	cbnz	r0, 8000d24 <MX_UART4_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <MX_UART4_Init+0x58>)
 8000d0a:	f004 f954 	bl	8004fb6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d0e:	b958      	cbnz	r0, 8000d28 <MX_UART4_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	4808      	ldr	r0, [pc, #32]	; (8000d34 <MX_UART4_Init+0x58>)
 8000d14:	f004 f974 	bl	8005000 <HAL_UARTEx_SetRxFifoThreshold>
 8000d18:	b940      	cbnz	r0, 8000d2c <MX_UART4_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_UART4_Init+0x58>)
 8000d1c:	f004 f92c 	bl	8004f78 <HAL_UARTEx_DisableFifoMode>
 8000d20:	b930      	cbnz	r0, 8000d30 <MX_UART4_Init+0x54>
}
 8000d22:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d24:	f7ff ff7c 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000d28:	f7ff ff7a 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000d2c:	f7ff ff78 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000d30:	f7ff ff76 	bl	8000c20 <Error_Handler>
 8000d34:	20000218 	.word	0x20000218
 8000d38:	40004c00 	.word	0x40004c00

08000d3c <MX_SPI1_Init>:
{
 8000d3c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8000d3e:	4810      	ldr	r0, [pc, #64]	; (8000d80 <MX_SPI1_Init+0x44>)
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_SPI1_Init+0x48>)
 8000d42:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d48:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d4e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000d52:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d54:	2202      	movs	r2, #2
 8000d56:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d58:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d5a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d5e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d60:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d62:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d64:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d66:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d68:	2207      	movs	r2, #7
 8000d6a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d6c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d72:	f003 f9ca 	bl	800410a <HAL_SPI_Init>
 8000d76:	b900      	cbnz	r0, 8000d7a <MX_SPI1_Init+0x3e>
}
 8000d78:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d7a:	f7ff ff51 	bl	8000c20 <Error_Handler>
 8000d7e:	bf00      	nop
 8000d80:	20000168 	.word	0x20000168
 8000d84:	40013000 	.word	0x40013000

08000d88 <MX_ADC1_Init>:
{
 8000d88:	b500      	push	{lr}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9307      	str	r3, [sp, #28]
 8000d90:	9308      	str	r3, [sp, #32]
 8000d92:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	9303      	str	r3, [sp, #12]
 8000d9a:	9304      	str	r3, [sp, #16]
 8000d9c:	9305      	str	r3, [sp, #20]
 8000d9e:	9306      	str	r3, [sp, #24]
  hadc1.Instance = ADC1;
 8000da0:	481d      	ldr	r0, [pc, #116]	; (8000e18 <MX_ADC1_Init+0x90>)
 8000da2:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000da4:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000da6:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000da8:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000daa:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dac:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dae:	2204      	movs	r2, #4
 8000db0:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000db2:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000db4:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000db6:	2201      	movs	r2, #1
 8000db8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dba:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbe:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dca:	6342      	str	r2, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dcc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd0:	f000 fbbe 	bl	8001550 <HAL_ADC_Init>
 8000dd4:	b9d0      	cbnz	r0, 8000e0c <MX_ADC1_Init+0x84>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dda:	a907      	add	r1, sp, #28
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <MX_ADC1_Init+0x90>)
 8000dde:	f001 f9a5 	bl	800212c <HAL_ADCEx_MultiModeConfigChannel>
 8000de2:	b9a8      	cbnz	r0, 8000e10 <MX_ADC1_Init+0x88>
  sConfig.Channel = ADC_CHANNEL_7;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000de6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de8:	2306      	movs	r3, #6
 8000dea:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dec:	2300      	movs	r3, #0
 8000dee:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df0:	227f      	movs	r2, #127	; 0x7f
 8000df2:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df4:	2204      	movs	r2, #4
 8000df6:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8000df8:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfa:	eb0d 0102 	add.w	r1, sp, r2
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_ADC1_Init+0x90>)
 8000e00:	f000 fdee 	bl	80019e0 <HAL_ADC_ConfigChannel>
 8000e04:	b930      	cbnz	r0, 8000e14 <MX_ADC1_Init+0x8c>
}
 8000e06:	b00b      	add	sp, #44	; 0x2c
 8000e08:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e0c:	f7ff ff08 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000e10:	f7ff ff06 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000e14:	f7ff ff04 	bl	8000c20 <Error_Handler>
 8000e18:	200000ac 	.word	0x200000ac
 8000e1c:	42028000 	.word	0x42028000
 8000e20:	1d500080 	.word	0x1d500080

08000e24 <SystemClock_Config>:
{
 8000e24:	b500      	push	{lr}
 8000e26:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e28:	2248      	movs	r2, #72	; 0x48
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	a806      	add	r0, sp, #24
 8000e2e:	f004 f92d 	bl	800508c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e32:	2300      	movs	r3, #0
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	9303      	str	r3, [sp, #12]
 8000e3a:	9304      	str	r3, [sp, #16]
 8000e3c:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000e3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e42:	f001 fe41 	bl	8002ac8 <HAL_PWREx_ControlVoltageScaling>
 8000e46:	b9d0      	cbnz	r0, 8000e7e <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e54:	2260      	movs	r2, #96	; 0x60
 8000e56:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e58:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5a:	a806      	add	r0, sp, #24
 8000e5c:	f001 ff86 	bl	8002d6c <HAL_RCC_OscConfig>
 8000e60:	b978      	cbnz	r0, 8000e82 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e66:	2100      	movs	r1, #0
 8000e68:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e70:	a801      	add	r0, sp, #4
 8000e72:	f002 fb55 	bl	8003520 <HAL_RCC_ClockConfig>
 8000e76:	b930      	cbnz	r0, 8000e86 <SystemClock_Config+0x62>
}
 8000e78:	b019      	add	sp, #100	; 0x64
 8000e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e7e:	f7ff fecf 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000e82:	f7ff fecd 	bl	8000c20 <Error_Handler>
    Error_Handler();
 8000e86:	f7ff fecb 	bl	8000c20 <Error_Handler>
	...

08000e8c <main>:
{
 8000e8c:	b510      	push	{r4, lr}
  HAL_Init();
 8000e8e:	f000 fb27 	bl	80014e0 <HAL_Init>
  SystemClock_Config();
 8000e92:	f7ff ffc7 	bl	8000e24 <SystemClock_Config>
  MX_GPIO_Init();
 8000e96:	f7ff fd05 	bl	80008a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e9a:	f7ff fec3 	bl	8000c24 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e9e:	f7ff fef5 	bl	8000c8c <MX_I2C1_Init>
  MX_UART4_Init();
 8000ea2:	f7ff ff1b 	bl	8000cdc <MX_UART4_Init>
  MX_SPI1_Init();
 8000ea6:	f7ff ff49 	bl	8000d3c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000eaa:	f7ff ff6d 	bl	8000d88 <MX_ADC1_Init>
  HD44780_Init(2);
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff fc84 	bl	80007bc <HD44780_Init>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000eb4:	213c      	movs	r1, #60	; 0x3c
 8000eb6:	4841      	ldr	r0, [pc, #260]	; (8000fbc <main+0x130>)
 8000eb8:	f003 fc35 	bl	8004726 <HAL_TIM_Encoder_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000ebc:	4840      	ldr	r0, [pc, #256]	; (8000fc0 <main+0x134>)
 8000ebe:	f001 f867 	bl	8001f90 <HAL_ADC_Start_IT>
  AD9833_Init();
 8000ec2:	f7ff fb47 	bl	8000554 <AD9833_Init>
  TPL0102_Init(&hi2c1);
 8000ec6:	483f      	ldr	r0, [pc, #252]	; (8000fc4 <main+0x138>)
 8000ec8:	f7ff fb93 	bl	80005f2 <TPL0102_Init>
 8000ecc:	e03e      	b.n	8000f4c <main+0xc0>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000ece:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed2:	483d      	ldr	r0, [pc, #244]	; (8000fc8 <main+0x13c>)
 8000ed4:	f001 fb12 	bl	80024fc <HAL_GPIO_TogglePin>
		ImpChangeState();
 8000ed8:	f7ff fd74 	bl	80009c4 <ImpChangeState>
		HAL_Delay(500);
 8000edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee0:	f000 fb22 	bl	8001528 <HAL_Delay>
 8000ee4:	e039      	b.n	8000f5a <main+0xce>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4838      	ldr	r0, [pc, #224]	; (8000fcc <main+0x140>)
 8000eec:	f001 fb01 	bl	80024f2 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f000 fb18 	bl	8001528 <HAL_Delay>
	AD9833_SetFrequency(frequency);
 8000ef8:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <main+0x144>)
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	f7ff fb36 	bl	800056c <AD9833_SetFrequency>
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==GPIO_PIN_RESET)
 8000f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f04:	4831      	ldr	r0, [pc, #196]	; (8000fcc <main+0x140>)
 8000f06:	f001 faed 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d03e      	beq.n	8000f8c <main+0x100>
	TPL0102_Write(&hi2c1, CHANNEL_0, res0);
 8000f0e:	4c2d      	ldr	r4, [pc, #180]	; (8000fc4 <main+0x138>)
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <main+0x148>)
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	2100      	movs	r1, #0
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fb5a 	bl	80005d0 <TPL0102_Write>
	TPL0102_Write(&hi2c1, CHANNEL_1, res1);
 8000f1c:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <main+0x14c>)
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	2110      	movs	r1, #16
 8000f22:	4620      	mov	r0, r4
 8000f24:	f7ff fb54 	bl	80005d0 <TPL0102_Write>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==GPIO_PIN_RESET)
 8000f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2c:	4827      	ldr	r0, [pc, #156]	; (8000fcc <main+0x140>)
 8000f2e:	f001 fad9 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f32:	b390      	cbz	r0, 8000f9a <main+0x10e>
	RotaryEncoderUpdate();
 8000f34:	f7ff fd2a 	bl	800098c <RotaryEncoderUpdate>
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==GPIO_PIN_RESET) // Left button
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4824      	ldr	r0, [pc, #144]	; (8000fcc <main+0x140>)
 8000f3c:	f001 fad2 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f40:	b390      	cbz	r0, 8000fa8 <main+0x11c>
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET) // Right button
 8000f42:	2104      	movs	r1, #4
 8000f44:	4821      	ldr	r0, [pc, #132]	; (8000fcc <main+0x140>)
 8000f46:	f001 facd 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f4a:	b390      	cbz	r0, 8000fb2 <main+0x126>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)==GPIO_PIN_RESET)
 8000f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <main+0x140>)
 8000f52:	f001 fac7 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d0b9      	beq.n	8000ece <main+0x42>
	battery_voltage = adc_voltage(adc_value);
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <main+0x150>)
 8000f5c:	8818      	ldrh	r0, [r3, #0]
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	f7ff fd02 	bl	8000968 <adc_voltage>
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <main+0x154>)
 8000f66:	ed83 0a00 	vstr	s0, [r3]
	if (battery_voltage <= 3.5)
 8000f6a:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8000f6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d9b6      	bls.n	8000ee6 <main+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <main+0x140>)
 8000f7e:	f001 fab8 	bl	80024f2 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f86:	f000 facf 	bl	8001528 <HAL_Delay>
 8000f8a:	e7b5      	b.n	8000ef8 <main+0x6c>
		WaveformChangeState();
 8000f8c:	f7ff fd38 	bl	8000a00 <WaveformChangeState>
		HAL_Delay(500);
 8000f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f94:	f000 fac8 	bl	8001528 <HAL_Delay>
 8000f98:	e7b9      	b.n	8000f0e <main+0x82>
		REChangeState();
 8000f9a:	f7ff fd71 	bl	8000a80 <REChangeState>
		HAL_Delay(500);
 8000f9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa2:	f000 fac1 	bl	8001528 <HAL_Delay>
 8000fa6:	e7c5      	b.n	8000f34 <main+0xa8>
			HAL_Delay(500);
 8000fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fac:	f000 fabc 	bl	8001528 <HAL_Delay>
 8000fb0:	e7c7      	b.n	8000f42 <main+0xb6>
			HAL_Delay(500);
 8000fb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb6:	f000 fab7 	bl	8001528 <HAL_Delay>
 8000fba:	e7c7      	b.n	8000f4c <main+0xc0>
 8000fbc:	200001cc 	.word	0x200001cc
 8000fc0:	200000ac 	.word	0x200000ac
 8000fc4:	20000114 	.word	0x20000114
 8000fc8:	42020000 	.word	0x42020000
 8000fcc:	42020400 	.word	0x42020400
 8000fd0:	200000a8 	.word	0x200000a8
 8000fd4:	20000010 	.word	0x20000010
 8000fd8:	20000011 	.word	0x20000011
 8000fdc:	20000092 	.word	0x20000092
 8000fe0:	20000094 	.word	0x20000094

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_MspInit+0x2c>)
 8000fe8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	661a      	str	r2, [r3, #96]	; 0x60
 8000ff0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ff2:	f002 0201 	and.w	r2, r2, #1
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ffc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001000:	659a      	str	r2, [r3, #88]	; 0x58
 8001002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	b002      	add	sp, #8
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001014:	b510      	push	{r4, lr}
 8001016:	b0ac      	sub	sp, #176	; 0xb0
 8001018:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	2100      	movs	r1, #0
 800101c:	9127      	str	r1, [sp, #156]	; 0x9c
 800101e:	9128      	str	r1, [sp, #160]	; 0xa0
 8001020:	9129      	str	r1, [sp, #164]	; 0xa4
 8001022:	912a      	str	r1, [sp, #168]	; 0xa8
 8001024:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001026:	2294      	movs	r2, #148	; 0x94
 8001028:	a802      	add	r0, sp, #8
 800102a:	f004 f82f 	bl	800508c <memset>
  if(hadc->Instance==ADC1)
 800102e:	6822      	ldr	r2, [r4, #0]
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_ADC_MspInit+0xa8>)
 8001032:	429a      	cmp	r2, r3
 8001034:	d001      	beq.n	800103a <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001036:	b02c      	add	sp, #176	; 0xb0
 8001038:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800103a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800103e:	9302      	str	r3, [sp, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001044:	9322      	str	r3, [sp, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8001046:	2301      	movs	r3, #1
 8001048:	9303      	str	r3, [sp, #12]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800104a:	9304      	str	r3, [sp, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800104c:	2310      	movs	r3, #16
 800104e:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001050:	2307      	movs	r3, #7
 8001052:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	9307      	str	r3, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001058:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800105a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800105e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	a802      	add	r0, sp, #8
 8001062:	f002 fc8b 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 8001066:	bb28      	cbnz	r0, 80010b4 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC_CLK_ENABLE();
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_ADC_MspInit+0xac>)
 800106a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800106c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001070:	64da      	str	r2, [r3, #76]	; 0x4c
 8001072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001074:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	64da      	str	r2, [r3, #76]	; 0x4c
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800108e:	2304      	movs	r3, #4
 8001090:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2400      	movs	r4, #0
 8001098:	9429      	str	r4, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	a927      	add	r1, sp, #156	; 0x9c
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <HAL_ADC_MspInit+0xb0>)
 800109e:	f001 f93d 	bl	800231c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010a2:	4622      	mov	r2, r4
 80010a4:	4621      	mov	r1, r4
 80010a6:	2025      	movs	r0, #37	; 0x25
 80010a8:	f001 f8de 	bl	8002268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010ac:	2025      	movs	r0, #37	; 0x25
 80010ae:	f001 f913 	bl	80022d8 <HAL_NVIC_EnableIRQ>
}
 80010b2:	e7c0      	b.n	8001036 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80010b4:	f7ff fdb4 	bl	8000c20 <Error_Handler>
 80010b8:	e7d6      	b.n	8001068 <HAL_ADC_MspInit+0x54>
 80010ba:	bf00      	nop
 80010bc:	42028000 	.word	0x42028000
 80010c0:	40021000 	.word	0x40021000
 80010c4:	42020000 	.word	0x42020000

080010c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c8:	b510      	push	{r4, lr}
 80010ca:	b0ac      	sub	sp, #176	; 0xb0
 80010cc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	2100      	movs	r1, #0
 80010d0:	9127      	str	r1, [sp, #156]	; 0x9c
 80010d2:	9128      	str	r1, [sp, #160]	; 0xa0
 80010d4:	9129      	str	r1, [sp, #164]	; 0xa4
 80010d6:	912a      	str	r1, [sp, #168]	; 0xa8
 80010d8:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010da:	2294      	movs	r2, #148	; 0x94
 80010dc:	a802      	add	r0, sp, #8
 80010de:	f003 ffd5 	bl	800508c <memset>
  if(hi2c->Instance==I2C1)
 80010e2:	6822      	ldr	r2, [r4, #0]
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_I2C_MspInit+0x7c>)
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d001      	beq.n	80010ee <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ea:	b02c      	add	sp, #176	; 0xb0
 80010ec:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010ee:	2340      	movs	r3, #64	; 0x40
 80010f0:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f2:	a802      	add	r0, sp, #8
 80010f4:	f002 fc42 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	bb08      	cbnz	r0, 800113e <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4c13      	ldr	r4, [pc, #76]	; (8001148 <HAL_I2C_MspInit+0x80>)
 80010fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001104:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800110e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001112:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001114:	2312      	movs	r3, #18
 8001116:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111e:	2304      	movs	r3, #4
 8001120:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	a927      	add	r1, sp, #156	; 0x9c
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <HAL_I2C_MspInit+0x84>)
 8001126:	f001 f8f9 	bl	800231c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001130:	65a3      	str	r3, [r4, #88]	; 0x58
 8001132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	9b01      	ldr	r3, [sp, #4]
}
 800113c:	e7d5      	b.n	80010ea <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800113e:	f7ff fd6f 	bl	8000c20 <Error_Handler>
 8001142:	e7da      	b.n	80010fa <HAL_I2C_MspInit+0x32>
 8001144:	40005400 	.word	0x40005400
 8001148:	40021000 	.word	0x40021000
 800114c:	42020400 	.word	0x42020400

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b500      	push	{lr}
 8001152:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	2300      	movs	r3, #0
 8001156:	9303      	str	r3, [sp, #12]
 8001158:	9304      	str	r3, [sp, #16]
 800115a:	9305      	str	r3, [sp, #20]
 800115c:	9306      	str	r3, [sp, #24]
 800115e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_SPI_MspInit+0x5c>)
 8001164:	429a      	cmp	r2, r3
 8001166:	d002      	beq.n	800116e <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001168:	b009      	add	sp, #36	; 0x24
 800116a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001172:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001178:	661a      	str	r2, [r3, #96]	; 0x60
 800117a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800117c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001180:	9201      	str	r2, [sp, #4]
 8001182:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001186:	f042 0201 	orr.w	r2, r2, #1
 800118a:	64da      	str	r2, [r3, #76]	; 0x4c
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001196:	23b0      	movs	r3, #176	; 0xb0
 8001198:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800119e:	2305      	movs	r3, #5
 80011a0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	a903      	add	r1, sp, #12
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <HAL_SPI_MspInit+0x60>)
 80011a6:	f001 f8b9 	bl	800231c <HAL_GPIO_Init>
}
 80011aa:	e7dd      	b.n	8001168 <HAL_SPI_MspInit+0x18>
 80011ac:	40013000 	.word	0x40013000
 80011b0:	42020000 	.word	0x42020000

080011b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011b4:	b500      	push	{lr}
 80011b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	2300      	movs	r3, #0
 80011ba:	9303      	str	r3, [sp, #12]
 80011bc:	9304      	str	r3, [sp, #16]
 80011be:	9305      	str	r3, [sp, #20]
 80011c0:	9306      	str	r3, [sp, #24]
 80011c2:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM1)
 80011c4:	6802      	ldr	r2, [r0, #0]
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_TIM_Encoder_MspInit+0x80>)
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d002      	beq.n	80011d2 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011cc:	b009      	add	sp, #36	; 0x24
 80011ce:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80011d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011dc:	661a      	str	r2, [r3, #96]	; 0x60
 80011de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011e4:	9201      	str	r2, [sp, #4]
 80011e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001204:	2301      	movs	r3, #1
 8001206:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	a903      	add	r1, sp, #12
 800120a:	480b      	ldr	r0, [pc, #44]	; (8001238 <HAL_TIM_Encoder_MspInit+0x84>)
 800120c:	f001 f886 	bl	800231c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	4611      	mov	r1, r2
 8001214:	202a      	movs	r0, #42	; 0x2a
 8001216:	f001 f827 	bl	8002268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800121a:	202a      	movs	r0, #42	; 0x2a
 800121c:	f001 f85c 	bl	80022d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	4611      	mov	r1, r2
 8001224:	202c      	movs	r0, #44	; 0x2c
 8001226:	f001 f81f 	bl	8002268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800122a:	202c      	movs	r0, #44	; 0x2c
 800122c:	f001 f854 	bl	80022d8 <HAL_NVIC_EnableIRQ>
}
 8001230:	e7cc      	b.n	80011cc <HAL_TIM_Encoder_MspInit+0x18>
 8001232:	bf00      	nop
 8001234:	40012c00 	.word	0x40012c00
 8001238:	42020000 	.word	0x42020000

0800123c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800123c:	b510      	push	{r4, lr}
 800123e:	b0ac      	sub	sp, #176	; 0xb0
 8001240:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	2100      	movs	r1, #0
 8001244:	9127      	str	r1, [sp, #156]	; 0x9c
 8001246:	9128      	str	r1, [sp, #160]	; 0xa0
 8001248:	9129      	str	r1, [sp, #164]	; 0xa4
 800124a:	912a      	str	r1, [sp, #168]	; 0xa8
 800124c:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124e:	2294      	movs	r2, #148	; 0x94
 8001250:	a802      	add	r0, sp, #8
 8001252:	f003 ff1b 	bl	800508c <memset>
  if(huart->Instance==UART4)
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_UART_MspInit+0x7c>)
 800125a:	429a      	cmp	r2, r3
 800125c:	d001      	beq.n	8001262 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800125e:	b02c      	add	sp, #176	; 0xb0
 8001260:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001262:	2308      	movs	r3, #8
 8001264:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001266:	eb0d 0003 	add.w	r0, sp, r3
 800126a:	f002 fb87 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 800126e:	bb00      	cbnz	r0, 80012b2 <HAL_UART_MspInit+0x76>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_UART_MspInit+0x80>)
 8001272:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001274:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001278:	659a      	str	r2, [r3, #88]	; 0x58
 800127a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800127c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001286:	f042 0201 	orr.w	r2, r2, #1
 800128a:	64da      	str	r2, [r3, #76]	; 0x4c
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001296:	2303      	movs	r3, #3
 8001298:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012a4:	2308      	movs	r3, #8
 80012a6:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	a927      	add	r1, sp, #156	; 0x9c
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_UART_MspInit+0x84>)
 80012ac:	f001 f836 	bl	800231c <HAL_GPIO_Init>
}
 80012b0:	e7d5      	b.n	800125e <HAL_UART_MspInit+0x22>
      Error_Handler();
 80012b2:	f7ff fcb5 	bl	8000c20 <Error_Handler>
 80012b6:	e7db      	b.n	8001270 <HAL_UART_MspInit+0x34>
 80012b8:	40004c00 	.word	0x40004c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	42020000 	.word	0x42020000

080012c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler>

080012c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler>

080012c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler>

080012ca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler>

080012cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler>

080012ce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	4770      	bx	lr

080012d0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f915 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bd08      	pop	{r3, pc}

080012dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012de:	4802      	ldr	r0, [pc, #8]	; (80012e8 <ADC1_2_IRQHandler+0xc>)
 80012e0:	f000 fa30 	bl	8001744 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012e4:	bd08      	pop	{r3, pc}
 80012e6:	bf00      	nop
 80012e8:	200000ac 	.word	0x200000ac

080012ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ee:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM1_UP_IRQHandler+0xc>)
 80012f0:	f003 f880 	bl	80043f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012f4:	bd08      	pop	{r3, pc}
 80012f6:	bf00      	nop
 80012f8:	200001cc 	.word	0x200001cc

080012fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012fe:	4802      	ldr	r0, [pc, #8]	; (8001308 <TIM1_CC_IRQHandler+0xc>)
 8001300:	f003 f878 	bl	80043f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001304:	bd08      	pop	{r3, pc}
 8001306:	bf00      	nop
 8001308:	200001cc 	.word	0x200001cc

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b510      	push	{r4, lr}
 800130e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <_sbrk+0x38>)
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <_sbrk+0x40>)
 8001316:	6800      	ldr	r0, [r0, #0]
 8001318:	b140      	cbz	r0, 800132c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <_sbrk+0x40>)
 800131c:	6800      	ldr	r0, [r0, #0]
 800131e:	4403      	add	r3, r0
 8001320:	1a52      	subs	r2, r2, r1
 8001322:	4293      	cmp	r3, r2
 8001324:	d806      	bhi.n	8001334 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <_sbrk+0x40>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800132a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <_sbrk+0x40>)
 800132e:	4c08      	ldr	r4, [pc, #32]	; (8001350 <_sbrk+0x44>)
 8001330:	6004      	str	r4, [r0, #0]
 8001332:	e7f2      	b.n	800131a <_sbrk+0xe>
    errno = ENOMEM;
 8001334:	f003 feb2 	bl	800509c <__errno>
 8001338:	230c      	movs	r3, #12
 800133a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	e7f3      	b.n	800132a <_sbrk+0x1e>
 8001342:	bf00      	nop
 8001344:	20030000 	.word	0x20030000
 8001348:	00000400 	.word	0x00000400
 800134c:	200002b0 	.word	0x200002b0
 8001350:	20000400 	.word	0x20000400

08001354 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001354:	4a03      	ldr	r2, [pc, #12]	; (8001364 <SystemInit+0x10>)
 8001356:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800135a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <SystemCoreClockUpdate+0xc0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f013 0f08 	tst.w	r3, #8
 8001370:	d116      	bne.n	80013a0 <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <SystemCoreClockUpdate+0xc0>)
 8001374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001378:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800137c:	4a2b      	ldr	r2, [pc, #172]	; (800142c <SystemCoreClockUpdate+0xc4>)
 800137e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <SystemCoreClockUpdate+0xc0>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d848      	bhi.n	8001420 <SystemCoreClockUpdate+0xb8>
 800138e:	e8df f003 	tbb	[pc, r3]
 8001392:	470c      	.short	0x470c
 8001394:	470f4747 	.word	0x470f4747
 8001398:	47134747 	.word	0x47134747
 800139c:	4747      	.short	0x4747
 800139e:	17          	.byte	0x17
 800139f:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <SystemCoreClockUpdate+0xc0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013a8:	e7e8      	b.n	800137c <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <SystemCoreClockUpdate+0xc8>)
 80013ac:	601a      	str	r2, [r3, #0]
      break;
 80013ae:	e028      	b.n	8001402 <SystemCoreClockUpdate+0x9a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <SystemCoreClockUpdate+0xc8>)
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <SystemCoreClockUpdate+0xcc>)
 80013b4:	601a      	str	r2, [r3, #0]
      break;
 80013b6:	e024      	b.n	8001402 <SystemCoreClockUpdate+0x9a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <SystemCoreClockUpdate+0xc8>)
 80013ba:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <SystemCoreClockUpdate+0xcc>)
 80013bc:	601a      	str	r2, [r3, #0]
      break;
 80013be:	e020      	b.n	8001402 <SystemCoreClockUpdate+0x9a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <SystemCoreClockUpdate+0xc0>)
 80013c2:	68d9      	ldr	r1, [r3, #12]
 80013c4:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013ce:	3301      	adds	r3, #1

      switch (pllsource)
 80013d0:	2902      	cmp	r1, #2
 80013d2:	d004      	beq.n	80013de <SystemCoreClockUpdate+0x76>
 80013d4:	2903      	cmp	r1, #3
 80013d6:	d01f      	beq.n	8001418 <SystemCoreClockUpdate+0xb0>
        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
          break;

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80013d8:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 80013dc:	e002      	b.n	80013e4 <SystemCoreClockUpdate+0x7c>
          pllvco = (HSI_VALUE / pllm);
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <SystemCoreClockUpdate+0xcc>)
 80013e0:	fbb2 f2f3 	udiv	r2, r2, r3
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80013e4:	4910      	ldr	r1, [pc, #64]	; (8001428 <SystemCoreClockUpdate+0xc0>)
 80013e6:	68cb      	ldr	r3, [r1, #12]
 80013e8:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80013f0:	68ca      	ldr	r2, [r1, #12]
 80013f2:	f3c2 6241 	ubfx	r2, r2, #25, #2
 80013f6:	3201      	adds	r2, #1
 80013f8:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 80013fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <SystemCoreClockUpdate+0xc8>)
 8001400:	6013      	str	r3, [r2, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <SystemCoreClockUpdate+0xc0>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <SystemCoreClockUpdate+0xd0>)
 800140c:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <SystemCoreClockUpdate+0xc8>)
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	40cb      	lsrs	r3, r1
 8001414:	6013      	str	r3, [r2, #0]
}
 8001416:	4770      	bx	lr
          pllvco = (HSE_VALUE / pllm);
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <SystemCoreClockUpdate+0xcc>)
 800141a:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 800141e:	e7e1      	b.n	80013e4 <SystemCoreClockUpdate+0x7c>
      SystemCoreClock = msirange;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <SystemCoreClockUpdate+0xc8>)
 8001422:	601a      	str	r2, [r3, #0]
      break;
 8001424:	e7ed      	b.n	8001402 <SystemCoreClockUpdate+0x9a>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	08005a20 	.word	0x08005a20
 8001430:	20000014 	.word	0x20000014
 8001434:	00f42400 	.word	0x00f42400
 8001438:	08005a08 	.word	0x08005a08

0800143c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001440:	f7ff ff88 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001444:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001446:	e003      	b.n	8001450 <LoopCopyDataInit>

08001448 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800144a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800144c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800144e:	3104      	adds	r1, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001450:	480a      	ldr	r0, [pc, #40]	; (800147c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001454:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001456:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001458:	d3f6      	bcc.n	8001448 <CopyDataInit>
	ldr	r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
	b	LoopFillZerobss
 800145c:	e002      	b.n	8001464 <LoopFillZerobss>

0800145e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800145e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001460:	f842 3b04 	str.w	r3, [r2], #4

08001464 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <LoopForever+0x16>)
	cmp	r2, r3
 8001466:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001468:	d3f9      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800146a:	f003 fe1d 	bl	80050a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146e:	f7ff fd0d 	bl	8000e8c <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001474:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001478:	08005acc 	.word	0x08005acc
	ldr	r0, =_sdata
 800147c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001480:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001484:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001488:	20000400 	.word	0x20000400

0800148c <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800148c:	e7fe      	b.n	800148c <AES_IRQHandler>
	...

08001490 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_InitTick+0x44>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b90b      	cbnz	r3, 800149a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001496:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001498:	4770      	bx	lr
{
 800149a:	b510      	push	{r4, lr}
 800149c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800149e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <HAL_InitTick+0x48>)
 80014a8:	6810      	ldr	r0, [r2, #0]
 80014aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ae:	f000 ff21 	bl	80022f4 <HAL_SYSTICK_Config>
 80014b2:	b968      	cbnz	r0, 80014d0 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b4:	2c07      	cmp	r4, #7
 80014b6:	d901      	bls.n	80014bc <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80014b8:	2001      	movs	r0, #1
 80014ba:	e00a      	b.n	80014d2 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	4621      	mov	r1, r4
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 fed0 	bl	8002268 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_InitTick+0x4c>)
 80014ca:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80014cc:	2000      	movs	r0, #0
 80014ce:	e000      	b.n	80014d2 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
}
 80014d2:	bd10      	pop	{r4, pc}
 80014d4:	20000018 	.word	0x20000018
 80014d8:	20000014 	.word	0x20000014
 80014dc:	2000001c 	.word	0x2000001c

080014e0 <HAL_Init>:
{
 80014e0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80014e2:	2004      	movs	r0, #4
 80014e4:	f000 feae 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 80014e8:	f7ff ff3e 	bl	8001368 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ec:	2007      	movs	r0, #7
 80014ee:	f7ff ffcf 	bl	8001490 <HAL_InitTick>
 80014f2:	b110      	cbz	r0, 80014fa <HAL_Init+0x1a>
    status = HAL_ERROR;
 80014f4:	2401      	movs	r4, #1
}
 80014f6:	4620      	mov	r0, r4
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	4604      	mov	r4, r0
    HAL_MspInit();
 80014fc:	f7ff fd72 	bl	8000fe4 <HAL_MspInit>
 8001500:	e7f9      	b.n	80014f6 <HAL_Init+0x16>
	...

08001504 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_IncTick+0x10>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_IncTick+0x14>)
 800150a:	6811      	ldr	r1, [r2, #0]
 800150c:	440b      	add	r3, r1
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000018 	.word	0x20000018
 8001518:	200002b4 	.word	0x200002b4

0800151c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800151c:	4b01      	ldr	r3, [pc, #4]	; (8001524 <HAL_GetTick+0x8>)
 800151e:	6818      	ldr	r0, [r3, #0]
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200002b4 	.word	0x200002b4

08001528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001528:	b538      	push	{r3, r4, r5, lr}
 800152a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff fff6 	bl	800151c <HAL_GetTick>
 8001530:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001536:	d002      	beq.n	800153e <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_Delay+0x24>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153e:	f7ff ffed 	bl	800151c <HAL_GetTick>
 8001542:	1b40      	subs	r0, r0, r5
 8001544:	42a0      	cmp	r0, r4
 8001546:	d3fa      	bcc.n	800153e <HAL_Delay+0x16>
  {
  }
}
 8001548:	bd38      	pop	{r3, r4, r5, pc}
 800154a:	bf00      	nop
 800154c:	20000018 	.word	0x20000018

08001550 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001550:	b530      	push	{r4, r5, lr}
 8001552:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001554:	2300      	movs	r3, #0
 8001556:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001558:	2800      	cmp	r0, #0
 800155a:	f000 80df 	beq.w	800171c <HAL_ADC_Init+0x1cc>
 800155e:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001560:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001562:	b313      	cbz	r3, 80015aa <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001564:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 800156c:	d005      	beq.n	800157a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8001574:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001578:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800157a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800157c:	6893      	ldr	r3, [r2, #8]
 800157e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001582:	d11f      	bne.n	80015c4 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8001584:	6893      	ldr	r3, [r2, #8]
 8001586:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800158a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001592:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001594:	4b62      	ldr	r3, [pc, #392]	; (8001720 <HAL_ADC_Init+0x1d0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	4a62      	ldr	r2, [pc, #392]	; (8001724 <HAL_ADC_Init+0x1d4>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	3301      	adds	r3, #1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80015a8:	e009      	b.n	80015be <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 80015aa:	f7ff fd33 	bl	8001014 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	2300      	movs	r3, #0
 80015b0:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80015b6:	e7d5      	b.n	8001564 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80015b8:	9b01      	ldr	r3, [sp, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80015be:	9b01      	ldr	r3, [sp, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f9      	bne.n	80015b8 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015c4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015c6:	6893      	ldr	r3, [r2, #8]
 80015c8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80015cc:	d17d      	bne.n	80016ca <HAL_ADC_Init+0x17a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015de:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015e0:	6893      	ldr	r3, [r2, #8]
 80015e2:	f013 0304 	ands.w	r3, r3, #4
 80015e6:	d000      	beq.n	80015ea <HAL_ADC_Init+0x9a>
 80015e8:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80015ec:	f011 0f10 	tst.w	r1, #16
 80015f0:	f040 808d 	bne.w	800170e <HAL_ADC_Init+0x1be>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 808a 	bne.w	800170e <HAL_ADC_Init+0x1be>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001606:	6893      	ldr	r3, [r2, #8]
 8001608:	f013 0f01 	tst.w	r3, #1
 800160c:	d114      	bne.n	8001638 <HAL_ADC_Init+0xe8>
 800160e:	4b46      	ldr	r3, [pc, #280]	; (8001728 <HAL_ADC_Init+0x1d8>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	f012 0201 	ands.w	r2, r2, #1
 8001616:	d000      	beq.n	800161a <HAL_ADC_Init+0xca>
 8001618:	2201      	movs	r2, #1
 800161a:	4b44      	ldr	r3, [pc, #272]	; (800172c <HAL_ADC_Init+0x1dc>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f013 0301 	ands.w	r3, r3, #1
 8001622:	d000      	beq.n	8001626 <HAL_ADC_Init+0xd6>
 8001624:	2301      	movs	r3, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001626:	4313      	orrs	r3, r2
 8001628:	d106      	bne.n	8001638 <HAL_ADC_Init+0xe8>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800162a:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800162c:	4940      	ldr	r1, [pc, #256]	; (8001730 <HAL_ADC_Init+0x1e0>)
 800162e:	688a      	ldr	r2, [r1, #8]
 8001630:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001634:	4313      	orrs	r3, r2
 8001636:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001638:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 800163a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800163c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 8001640:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 8001642:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8001644:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 8001646:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001648:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800164c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001650:	2a01      	cmp	r2, #1
 8001652:	d03c      	beq.n	80016ce <HAL_ADC_Init+0x17e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001656:	b122      	cbz	r2, 8001662 <HAL_ADC_Init+0x112>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001658:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800165c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800165e:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001660:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001662:	6821      	ldr	r1, [r4, #0]
 8001664:	68cd      	ldr	r5, [r1, #12]
 8001666:	4a33      	ldr	r2, [pc, #204]	; (8001734 <HAL_ADC_Init+0x1e4>)
 8001668:	402a      	ands	r2, r5
 800166a:	431a      	orrs	r2, r3
 800166c:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800166e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001670:	6893      	ldr	r3, [r2, #8]
 8001672:	f013 0308 	ands.w	r3, r3, #8
 8001676:	d000      	beq.n	800167a <HAL_ADC_Init+0x12a>
 8001678:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800167a:	b9bb      	cbnz	r3, 80016ac <HAL_ADC_Init+0x15c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800167c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800167e:	7e21      	ldrb	r1, [r4, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001680:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001684:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001688:	ea43 0141 	orr.w	r1, r3, r1, lsl #1

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800168c:	68d3      	ldr	r3, [r2, #12]
 800168e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001692:	f023 0306 	bic.w	r3, r3, #6
 8001696:	430b      	orrs	r3, r1
 8001698:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800169a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d01a      	beq.n	80016d8 <HAL_ADC_Init+0x188>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016a2:	6822      	ldr	r2, [r4, #0]
 80016a4:	6913      	ldr	r3, [r2, #16]
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016ac:	6923      	ldr	r3, [r4, #16]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d024      	beq.n	80016fc <HAL_ADC_Init+0x1ac>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016b2:	6822      	ldr	r2, [r4, #0]
 80016b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016b6:	f023 030f 	bic.w	r3, r3, #15
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80016c8:	e026      	b.n	8001718 <HAL_ADC_Init+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ca:	2000      	movs	r0, #0
 80016cc:	e788      	b.n	80015e0 <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016d0:	3a01      	subs	r2, #1
 80016d2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80016d6:	e7bd      	b.n	8001654 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 80016d8:	6821      	ldr	r1, [r4, #0]
 80016da:	690b      	ldr	r3, [r1, #16]
 80016dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80016e6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80016e8:	432a      	orrs	r2, r5
 80016ea:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80016ec:	432a      	orrs	r2, r5
 80016ee:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80016f0:	432a      	orrs	r2, r5
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	610b      	str	r3, [r1, #16]
 80016fa:	e7d7      	b.n	80016ac <HAL_ADC_Init+0x15c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016fc:	6821      	ldr	r1, [r4, #0]
 80016fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001700:	f023 030f 	bic.w	r3, r3, #15
 8001704:	69e2      	ldr	r2, [r4, #28]
 8001706:	3a01      	subs	r2, #1
 8001708:	4313      	orrs	r3, r2
 800170a:	630b      	str	r3, [r1, #48]	; 0x30
 800170c:	e7d6      	b.n	80016bc <HAL_ADC_Init+0x16c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001716:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001718:	b003      	add	sp, #12
 800171a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
 800171e:	e7fb      	b.n	8001718 <HAL_ADC_Init+0x1c8>
 8001720:	20000014 	.word	0x20000014
 8001724:	053e2d63 	.word	0x053e2d63
 8001728:	42028000 	.word	0x42028000
 800172c:	42028100 	.word	0x42028100
 8001730:	42028300 	.word	0x42028300
 8001734:	fff0c007 	.word	0xfff0c007

08001738 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800173c:	4770      	bx	lr

0800173e <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800173e:	4770      	bx	lr

08001740 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001740:	4770      	bx	lr
	...

08001744 <HAL_ADC_IRQHandler>:
{
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001746:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001748:	6803      	ldr	r3, [r0, #0]
 800174a:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800174c:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800174e:	4b9a      	ldr	r3, [pc, #616]	; (80019b8 <HAL_ADC_IRQHandler+0x274>)
 8001750:	689e      	ldr	r6, [r3, #8]
 8001752:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001756:	f017 0f02 	tst.w	r7, #2
 800175a:	d010      	beq.n	800177e <HAL_ADC_IRQHandler+0x3a>
 800175c:	f015 0f02 	tst.w	r5, #2
 8001760:	d00d      	beq.n	800177e <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001762:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001764:	f013 0f10 	tst.w	r3, #16
 8001768:	d103      	bne.n	8001772 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800176a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800176c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001770:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001772:	4620      	mov	r0, r4
 8001774:	f000 fcd8 	bl	8002128 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	2202      	movs	r2, #2
 800177c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800177e:	f017 0f04 	tst.w	r7, #4
 8001782:	d002      	beq.n	800178a <HAL_ADC_IRQHandler+0x46>
 8001784:	f015 0f04 	tst.w	r5, #4
 8001788:	d105      	bne.n	8001796 <HAL_ADC_IRQHandler+0x52>
 800178a:	f017 0f08 	tst.w	r7, #8
 800178e:	d04d      	beq.n	800182c <HAL_ADC_IRQHandler+0xe8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001790:	f015 0f08 	tst.w	r5, #8
 8001794:	d04a      	beq.n	800182c <HAL_ADC_IRQHandler+0xe8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001798:	f013 0f10 	tst.w	r3, #16
 800179c:	d103      	bne.n	80017a6 <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800179e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a4:	65a3      	str	r3, [r4, #88]	; 0x58
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017a6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80017ae:	d137      	bne.n	8001820 <HAL_ADC_IRQHandler+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017b0:	4a82      	ldr	r2, [pc, #520]	; (80019bc <HAL_ADC_IRQHandler+0x278>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00c      	beq.n	80017d0 <HAL_ADC_IRQHandler+0x8c>
 80017b6:	461a      	mov	r2, r3
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00c      	beq.n	80017d6 <HAL_ADC_IRQHandler+0x92>
 80017bc:	2e09      	cmp	r6, #9
 80017be:	d805      	bhi.n	80017cc <HAL_ADC_IRQHandler+0x88>
 80017c0:	f240 2121 	movw	r1, #545	; 0x221
 80017c4:	40f1      	lsrs	r1, r6
 80017c6:	f011 0f01 	tst.w	r1, #1
 80017ca:	d104      	bne.n	80017d6 <HAL_ADC_IRQHandler+0x92>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017cc:	68d2      	ldr	r2, [r2, #12]
 80017ce:	e003      	b.n	80017d8 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017d0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80017d4:	e7f0      	b.n	80017b8 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017d6:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80017d8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80017dc:	d120      	bne.n	8001820 <HAL_ADC_IRQHandler+0xdc>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	f012 0f08 	tst.w	r2, #8
 80017e4:	d01c      	beq.n	8001820 <HAL_ADC_IRQHandler+0xdc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	f012 0f04 	tst.w	r2, #4
 80017ec:	d110      	bne.n	8001810 <HAL_ADC_IRQHandler+0xcc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	f022 020c 	bic.w	r2, r2, #12
 80017f4:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017fc:	65a3      	str	r3, [r4, #88]	; 0x58
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001800:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001804:	d10c      	bne.n	8001820 <HAL_ADC_IRQHandler+0xdc>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	65a3      	str	r3, [r4, #88]	; 0x58
 800180e:	e007      	b.n	8001820 <HAL_ADC_IRQHandler+0xdc>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001810:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001820:	4620      	mov	r0, r4
 8001822:	f7ff f895 	bl	8000950 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	220c      	movs	r2, #12
 800182a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800182c:	f017 0f20 	tst.w	r7, #32
 8001830:	d002      	beq.n	8001838 <HAL_ADC_IRQHandler+0xf4>
 8001832:	f015 0f20 	tst.w	r5, #32
 8001836:	d105      	bne.n	8001844 <HAL_ADC_IRQHandler+0x100>
 8001838:	f017 0f40 	tst.w	r7, #64	; 0x40
 800183c:	d05c      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800183e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001842:	d059      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x1b4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001844:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001846:	f013 0f10 	tst.w	r3, #16
 800184a:	d103      	bne.n	8001854 <HAL_ADC_IRQHandler+0x110>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800184c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800184e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001852:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001854:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001858:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800185c:	d112      	bne.n	8001884 <HAL_ADC_IRQHandler+0x140>
 800185e:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001866:	d10f      	bne.n	8001888 <HAL_ADC_IRQHandler+0x144>
 8001868:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800186a:	4a54      	ldr	r2, [pc, #336]	; (80019bc <HAL_ADC_IRQHandler+0x278>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00d      	beq.n	800188c <HAL_ADC_IRQHandler+0x148>
 8001870:	461a      	mov	r2, r3
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001876:	b166      	cbz	r6, 8001892 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001878:	2e06      	cmp	r6, #6
 800187a:	d00a      	beq.n	8001892 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800187c:	2e07      	cmp	r6, #7
 800187e:	d008      	beq.n	8001892 <HAL_ADC_IRQHandler+0x14e>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001880:	68d2      	ldr	r2, [r2, #12]
 8001882:	e007      	b.n	8001894 <HAL_ADC_IRQHandler+0x150>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001884:	2100      	movs	r1, #0
 8001886:	e7eb      	b.n	8001860 <HAL_ADC_IRQHandler+0x11c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001888:	2000      	movs	r0, #0
 800188a:	e7ee      	b.n	800186a <HAL_ADC_IRQHandler+0x126>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800188c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001890:	e7ef      	b.n	8001872 <HAL_ADC_IRQHandler+0x12e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001892:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001894:	b351      	cbz	r1, 80018ec <HAL_ADC_IRQHandler+0x1a8>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001896:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800189a:	d003      	beq.n	80018a4 <HAL_ADC_IRQHandler+0x160>
 800189c:	b330      	cbz	r0, 80018ec <HAL_ADC_IRQHandler+0x1a8>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800189e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80018a2:	d123      	bne.n	80018ec <HAL_ADC_IRQHandler+0x1a8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	f011 0f40 	tst.w	r1, #64	; 0x40
 80018aa:	d01f      	beq.n	80018ec <HAL_ADC_IRQHandler+0x1a8>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80018ac:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80018b0:	d11c      	bne.n	80018ec <HAL_ADC_IRQHandler+0x1a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	f012 0f08 	tst.w	r2, #8
 80018b8:	d110      	bne.n	80018dc <HAL_ADC_IRQHandler+0x198>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018c0:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018c8:	65a3      	str	r3, [r4, #88]	; 0x58
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80018ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018d0:	d10c      	bne.n	80018ec <HAL_ADC_IRQHandler+0x1a8>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80018da:	e007      	b.n	80018ec <HAL_ADC_IRQHandler+0x1a8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	65a3      	str	r3, [r4, #88]	; 0x58
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f000 fc17 	bl	8002120 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	2260      	movs	r2, #96	; 0x60
 80018f6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80018f8:	f017 0f80 	tst.w	r7, #128	; 0x80
 80018fc:	d002      	beq.n	8001904 <HAL_ADC_IRQHandler+0x1c0>
 80018fe:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001902:	d12f      	bne.n	8001964 <HAL_ADC_IRQHandler+0x220>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001904:	f417 7f80 	tst.w	r7, #256	; 0x100
 8001908:	d002      	beq.n	8001910 <HAL_ADC_IRQHandler+0x1cc>
 800190a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800190e:	d134      	bne.n	800197a <HAL_ADC_IRQHandler+0x236>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001910:	f417 7f00 	tst.w	r7, #512	; 0x200
 8001914:	d002      	beq.n	800191c <HAL_ADC_IRQHandler+0x1d8>
 8001916:	f415 7f00 	tst.w	r5, #512	; 0x200
 800191a:	d13a      	bne.n	8001992 <HAL_ADC_IRQHandler+0x24e>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800191c:	f017 0f10 	tst.w	r7, #16
 8001920:	d019      	beq.n	8001956 <HAL_ADC_IRQHandler+0x212>
 8001922:	f015 0f10 	tst.w	r5, #16
 8001926:	d016      	beq.n	8001956 <HAL_ADC_IRQHandler+0x212>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001928:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800192a:	b133      	cbz	r3, 800193a <HAL_ADC_IRQHandler+0x1f6>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800192c:	2e00      	cmp	r6, #0
 800192e:	d03c      	beq.n	80019aa <HAL_ADC_IRQHandler+0x266>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_ADC_IRQHandler+0x274>)
 8001932:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001934:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8001938:	d00a      	beq.n	8001950 <HAL_ADC_IRQHandler+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800193a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800193c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001940:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001942:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800194a:	4620      	mov	r0, r4
 800194c:	f7ff fef8 	bl	8001740 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	2210      	movs	r2, #16
 8001954:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001956:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800195a:	d002      	beq.n	8001962 <HAL_ADC_IRQHandler+0x21e>
 800195c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8001960:	d12e      	bne.n	80019c0 <HAL_ADC_IRQHandler+0x27c>
}
 8001962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff fee6 	bl	800173e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e7c4      	b.n	8001904 <HAL_ADC_IRQHandler+0x1c0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800197a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001982:	4620      	mov	r0, r4
 8001984:	f000 fbce 	bl	8002124 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e7be      	b.n	8001910 <HAL_ADC_IRQHandler+0x1cc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001992:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800199a:	4620      	mov	r0, r4
 800199c:	f000 fbc3 	bl	8002126 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e7b8      	b.n	800191c <HAL_ADC_IRQHandler+0x1d8>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f013 0f01 	tst.w	r3, #1
 80019b2:	d0cd      	beq.n	8001950 <HAL_ADC_IRQHandler+0x20c>
 80019b4:	e7c1      	b.n	800193a <HAL_ADC_IRQHandler+0x1f6>
 80019b6:	bf00      	nop
 80019b8:	42028300 	.word	0x42028300
 80019bc:	42028100 	.word	0x42028100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80019c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	65e3      	str	r3, [r4, #92]	; 0x5c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80019d8:	4620      	mov	r0, r4
 80019da:	f000 fba2 	bl	8002122 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80019de:	e7c0      	b.n	8001962 <HAL_ADC_IRQHandler+0x21e>

080019e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019e4:	2200      	movs	r2, #0
 80019e6:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e8:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80019ec:	2a01      	cmp	r2, #1
 80019ee:	f000 8257 	beq.w	8001ea0 <HAL_ADC_ConfigChannel+0x4c0>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2201      	movs	r2, #1
 80019f6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019fa:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019fc:	68a8      	ldr	r0, [r5, #8]
 80019fe:	f010 0f04 	tst.w	r0, #4
 8001a02:	d009      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a0c:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8001a14:	b003      	add	sp, #12
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a18:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a1a:	3530      	adds	r5, #48	; 0x30
 8001a1c:	0a22      	lsrs	r2, r4, #8
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8001a24:	58a8      	ldr	r0, [r5, r2]
 8001a26:	f004 0e1f 	and.w	lr, r4, #31
 8001a2a:	241f      	movs	r4, #31
 8001a2c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a30:	ea20 0004 	bic.w	r0, r0, r4
 8001a34:	680c      	ldr	r4, [r1, #0]
 8001a36:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8001a3a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001a3e:	ea40 000c 	orr.w	r0, r0, ip
 8001a42:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a44:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a46:	68a2      	ldr	r2, [r4, #8]
 8001a48:	f012 0204 	ands.w	r2, r2, #4
 8001a4c:	d000      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0x70>
 8001a4e:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a50:	68a0      	ldr	r0, [r4, #8]
 8001a52:	f010 0008 	ands.w	r0, r0, #8
 8001a56:	d000      	beq.n	8001a5a <HAL_ADC_ConfigChannel+0x7a>
 8001a58:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a5a:	2a00      	cmp	r2, #0
 8001a5c:	d134      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0xe8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d132      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0xe8>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a62:	6888      	ldr	r0, [r1, #8]
 8001a64:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8001a68:	d073      	beq.n	8001b52 <HAL_ADC_ConfigChannel+0x172>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a6a:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a6c:	3414      	adds	r4, #20
 8001a6e:	0e72      	lsrs	r2, r6, #25
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8001a76:	58a5      	ldr	r5, [r4, r2]
 8001a78:	f3c6 5c04 	ubfx	ip, r6, #20, #5
 8001a7c:	2607      	movs	r6, #7
 8001a7e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a82:	ea25 0506 	bic.w	r5, r5, r6
 8001a86:	fa00 f00c 	lsl.w	r0, r0, ip
 8001a8a:	4328      	orrs	r0, r5
 8001a8c:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a8e:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a90:	6942      	ldr	r2, [r0, #20]
 8001a92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a96:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a98:	694c      	ldr	r4, [r1, #20]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	68c2      	ldr	r2, [r0, #12]
 8001a9e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	4094      	lsls	r4, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001aa6:	690d      	ldr	r5, [r1, #16]
 8001aa8:	2d04      	cmp	r5, #4
 8001aaa:	d067      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x19c>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001aac:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aae:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8001ab0:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8001ab4:	4aae      	ldr	r2, [pc, #696]	; (8001d70 <HAL_ADC_ConfigChannel+0x390>)
 8001ab6:	403a      	ands	r2, r7
 8001ab8:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001abc:	4334      	orrs	r4, r6
 8001abe:	4322      	orrs	r2, r4
 8001ac0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ac4:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac8:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aca:	6882      	ldr	r2, [r0, #8]
 8001acc:	f012 0f01 	tst.w	r2, #1
 8001ad0:	f040 81e0 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x4b4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ad4:	680a      	ldr	r2, [r1, #0]
 8001ad6:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001ad8:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001adc:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8001ae0:	ea24 040c 	bic.w	r4, r4, ip
 8001ae4:	f005 0c18 	and.w	ip, r5, #24
 8001ae8:	4da2      	ldr	r5, [pc, #648]	; (8001d74 <HAL_ADC_ConfigChannel+0x394>)
 8001aea:	fa25 f50c 	lsr.w	r5, r5, ip
 8001aee:	402a      	ands	r2, r5
 8001af0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001af4:	4322      	orrs	r2, r4
 8001af6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001afa:	68c8      	ldr	r0, [r1, #12]
 8001afc:	4a9e      	ldr	r2, [pc, #632]	; (8001d78 <HAL_ADC_ConfigChannel+0x398>)
 8001afe:	4290      	cmp	r0, r2
 8001b00:	f000 80a4 	beq.w	8001c4c <HAL_ADC_ConfigChannel+0x26c>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b04:	6808      	ldr	r0, [r1, #0]
 8001b06:	4a9d      	ldr	r2, [pc, #628]	; (8001d7c <HAL_ADC_ConfigChannel+0x39c>)
 8001b08:	4210      	tst	r0, r2
 8001b0a:	f000 81c5 	beq.w	8001e98 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b0e:	4a9c      	ldr	r2, [pc, #624]	; (8001d80 <HAL_ADC_ConfigChannel+0x3a0>)
 8001b10:	6894      	ldr	r4, [r2, #8]
 8001b12:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b16:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8001b1a:	6891      	ldr	r1, [r2, #8]
 8001b1c:	f011 0101 	ands.w	r1, r1, #1
 8001b20:	d000      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0x144>
 8001b22:	2101      	movs	r1, #1
 8001b24:	4a97      	ldr	r2, [pc, #604]	; (8001d84 <HAL_ADC_ConfigChannel+0x3a4>)
 8001b26:	6892      	ldr	r2, [r2, #8]
 8001b28:	f012 0201 	ands.w	r2, r2, #1
 8001b2c:	d000      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0x150>
 8001b2e:	2201      	movs	r2, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	f040 81a9 	bne.w	8001e88 <HAL_ADC_ConfigChannel+0x4a8>
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b36:	4a94      	ldr	r2, [pc, #592]	; (8001d88 <HAL_ADC_ConfigChannel+0x3a8>)
 8001b38:	4290      	cmp	r0, r2
 8001b3a:	f000 8157 	beq.w	8001dec <HAL_ADC_ConfigChannel+0x40c>
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b3e:	4a93      	ldr	r2, [pc, #588]	; (8001d8c <HAL_ADC_ConfigChannel+0x3ac>)
 8001b40:	4290      	cmp	r0, r2
 8001b42:	f000 817a 	beq.w	8001e3a <HAL_ADC_ConfigChannel+0x45a>
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b46:	4a92      	ldr	r2, [pc, #584]	; (8001d90 <HAL_ADC_ConfigChannel+0x3b0>)
 8001b48:	4290      	cmp	r0, r2
 8001b4a:	f000 818a 	beq.w	8001e62 <HAL_ADC_ConfigChannel+0x482>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e75d      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b52:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b54:	3414      	adds	r4, #20
 8001b56:	0e42      	lsrs	r2, r0, #25
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8001b5e:	58a5      	ldr	r5, [r4, r2]
 8001b60:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001b64:	2607      	movs	r6, #7
 8001b66:	fa06 f000 	lsl.w	r0, r6, r0
 8001b6a:	ea25 0000 	bic.w	r0, r5, r0
 8001b6e:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b70:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b72:	6942      	ldr	r2, [r0, #20]
 8001b74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b78:	6142      	str	r2, [r0, #20]
}
 8001b7a:	e78d      	b.n	8001a98 <HAL_ADC_ConfigChannel+0xb8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b7c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001b7e:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b80:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b84:	680a      	ldr	r2, [r1, #0]
 8001b86:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001b8a:	bb85      	cbnz	r5, 8001bee <HAL_ADC_ConfigChannel+0x20e>
 8001b8c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b90:	4294      	cmp	r4, r2
 8001b92:	d034      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0x21e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b94:	681c      	ldr	r4, [r3, #0]
 8001b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b98:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001b9a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b9e:	680a      	ldr	r2, [r1, #0]
 8001ba0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001ba4:	bb85      	cbnz	r5, 8001c08 <HAL_ADC_ConfigChannel+0x228>
 8001ba6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001baa:	4290      	cmp	r0, r2
 8001bac:	d034      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0x238>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bae:	681c      	ldr	r4, [r3, #0]
 8001bb0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001bb2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001bb4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bb8:	680a      	ldr	r2, [r1, #0]
 8001bba:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001bbe:	bb85      	cbnz	r5, 8001c22 <HAL_ADC_ConfigChannel+0x242>
 8001bc0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bc4:	4290      	cmp	r0, r2
 8001bc6:	d034      	beq.n	8001c32 <HAL_ADC_ConfigChannel+0x252>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bc8:	681c      	ldr	r4, [r3, #0]
 8001bca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001bcc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001bce:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bd2:	680a      	ldr	r2, [r1, #0]
 8001bd4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001bd8:	bb85      	cbnz	r5, 8001c3c <HAL_ADC_ConfigChannel+0x25c>
 8001bda:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bde:	4290      	cmp	r0, r2
 8001be0:	f47f af72 	bne.w	8001ac8 <HAL_ADC_ConfigChannel+0xe8>
  MODIFY_REG(*preg,
 8001be4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001be6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bea:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8001bec:	e76c      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0xe8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bf2:	b112      	cbz	r2, 8001bfa <HAL_ADC_ConfigChannel+0x21a>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001bf4:	fab2 f282 	clz	r2, r2
 8001bf8:	e7ca      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x1b0>
    return 32U;
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	e7c8      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x1b0>
  MODIFY_REG(*preg,
 8001bfe:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001c00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c04:	6602      	str	r2, [r0, #96]	; 0x60
}
 8001c06:	e7c5      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x1b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001c0c:	b112      	cbz	r2, 8001c14 <HAL_ADC_ConfigChannel+0x234>
  return __builtin_clz(value);
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	e7ca      	b.n	8001baa <HAL_ADC_ConfigChannel+0x1ca>
    return 32U;
 8001c14:	2220      	movs	r2, #32
 8001c16:	e7c8      	b.n	8001baa <HAL_ADC_ConfigChannel+0x1ca>
  MODIFY_REG(*preg,
 8001c18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c1e:	6662      	str	r2, [r4, #100]	; 0x64
}
 8001c20:	e7c5      	b.n	8001bae <HAL_ADC_ConfigChannel+0x1ce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001c26:	b112      	cbz	r2, 8001c2e <HAL_ADC_ConfigChannel+0x24e>
  return __builtin_clz(value);
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	e7ca      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x1e4>
    return 32U;
 8001c2e:	2220      	movs	r2, #32
 8001c30:	e7c8      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x1e4>
  MODIFY_REG(*preg,
 8001c32:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001c34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c38:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8001c3a:	e7c5      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x1e8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001c40:	b112      	cbz	r2, 8001c48 <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	e7ca      	b.n	8001bde <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8001c48:	2220      	movs	r2, #32
 8001c4a:	e7c8      	b.n	8001bde <HAL_ADC_ConfigChannel+0x1fe>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c4c:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c4e:	680a      	ldr	r2, [r1, #0]
 8001c50:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001c54:	2d00      	cmp	r5, #0
 8001c56:	d138      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x2ea>
 8001c58:	0e90      	lsrs	r0, r2, #26
 8001c5a:	3001      	adds	r0, #1
 8001c5c:	f000 001f 	and.w	r0, r0, #31
 8001c60:	2809      	cmp	r0, #9
 8001c62:	bf8c      	ite	hi
 8001c64:	2000      	movhi	r0, #0
 8001c66:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d066      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x35a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c6c:	2d00      	cmp	r5, #0
 8001c6e:	d13b      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x308>
 8001c70:	0e90      	lsrs	r0, r2, #26
 8001c72:	3001      	adds	r0, #1
 8001c74:	0680      	lsls	r0, r0, #26
 8001c76:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001c7a:	2d00      	cmp	r5, #0
 8001c7c:	d140      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x320>
 8001c7e:	0e97      	lsrs	r7, r2, #26
 8001c80:	3701      	adds	r7, #1
 8001c82:	f007 071f 	and.w	r7, r7, #31
 8001c86:	2601      	movs	r6, #1
 8001c88:	40be      	lsls	r6, r7
 8001c8a:	4330      	orrs	r0, r6
 8001c8c:	2d00      	cmp	r5, #0
 8001c8e:	d146      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x33e>
 8001c90:	0e92      	lsrs	r2, r2, #26
 8001c92:	3201      	adds	r2, #1
 8001c94:	f002 021f 	and.w	r2, r2, #31
 8001c98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c9c:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c9e:	4310      	orrs	r0, r2
                                      pConfig->SamplingTime);
 8001ca0:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ca2:	f104 0e14 	add.w	lr, r4, #20
 8001ca6:	0e42      	lsrs	r2, r0, #25
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8001cae:	f85e 4002 	ldr.w	r4, [lr, r2]
 8001cb2:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001cb6:	2607      	movs	r6, #7
 8001cb8:	4086      	lsls	r6, r0
 8001cba:	ea24 0c06 	bic.w	ip, r4, r6
 8001cbe:	4085      	lsls	r5, r0
 8001cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8001cc4:	f84e 5002 	str.w	r5, [lr, r2]
}
 8001cc8:	e71c      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001cce:	b148      	cbz	r0, 8001ce4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8001cd0:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cd4:	3001      	adds	r0, #1
 8001cd6:	f000 001f 	and.w	r0, r0, #31
 8001cda:	2809      	cmp	r0, #9
 8001cdc:	bf8c      	ite	hi
 8001cde:	2000      	movhi	r0, #0
 8001ce0:	2001      	movls	r0, #1
 8001ce2:	e7c1      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001ce4:	2020      	movs	r0, #32
 8001ce6:	e7f5      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x2f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001cec:	b130      	cbz	r0, 8001cfc <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 8001cee:	fab0 f080 	clz	r0, r0
 8001cf2:	3001      	adds	r0, #1
 8001cf4:	0680      	lsls	r0, r0, #26
 8001cf6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001cfa:	e7be      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x29a>
    return 32U;
 8001cfc:	2020      	movs	r0, #32
 8001cfe:	e7f8      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x312>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8001d04:	b14e      	cbz	r6, 8001d1a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001d06:	fab6 f686 	clz	r6, r6
 8001d0a:	3601      	adds	r6, #1
 8001d0c:	f006 061f 	and.w	r6, r6, #31
 8001d10:	f04f 0c01 	mov.w	ip, #1
 8001d14:	fa0c f606 	lsl.w	r6, ip, r6
 8001d18:	e7b7      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x2aa>
    return 32U;
 8001d1a:	2620      	movs	r6, #32
 8001d1c:	e7f5      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x32a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001d22:	b142      	cbz	r2, 8001d36 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001d24:	fab2 f282 	clz	r2, r2
 8001d28:	3201      	adds	r2, #1
 8001d2a:	f002 021f 	and.w	r2, r2, #31
 8001d2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d32:	0512      	lsls	r2, r2, #20
 8001d34:	e7b3      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x2be>
    return 32U;
 8001d36:	2220      	movs	r2, #32
 8001d38:	e7f6      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x348>
 8001d3a:	bb5d      	cbnz	r5, 8001d94 <HAL_ADC_ConfigChannel+0x3b4>
 8001d3c:	0e90      	lsrs	r0, r2, #26
 8001d3e:	3001      	adds	r0, #1
 8001d40:	0680      	lsls	r0, r0, #26
 8001d42:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001d46:	bb8d      	cbnz	r5, 8001dac <HAL_ADC_ConfigChannel+0x3cc>
 8001d48:	0e97      	lsrs	r7, r2, #26
 8001d4a:	3701      	adds	r7, #1
 8001d4c:	f007 071f 	and.w	r7, r7, #31
 8001d50:	2601      	movs	r6, #1
 8001d52:	40be      	lsls	r6, r7
 8001d54:	4330      	orrs	r0, r6
 8001d56:	bbc5      	cbnz	r5, 8001dca <HAL_ADC_ConfigChannel+0x3ea>
 8001d58:	0e92      	lsrs	r2, r2, #26
 8001d5a:	3201      	adds	r2, #1
 8001d5c:	f002 021f 	and.w	r2, r2, #31
 8001d60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d64:	3a1e      	subs	r2, #30
 8001d66:	0512      	lsls	r2, r2, #20
 8001d68:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d6c:	4310      	orrs	r0, r2
 8001d6e:	e797      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x2c0>
 8001d70:	03fff000 	.word	0x03fff000
 8001d74:	0007ffff 	.word	0x0007ffff
 8001d78:	407f0000 	.word	0x407f0000
 8001d7c:	80080000 	.word	0x80080000
 8001d80:	42028300 	.word	0x42028300
 8001d84:	42028100 	.word	0x42028100
 8001d88:	c7520000 	.word	0xc7520000
 8001d8c:	cb840000 	.word	0xcb840000
 8001d90:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001d98:	b130      	cbz	r0, 8001da8 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8001d9a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d9e:	3001      	adds	r0, #1
 8001da0:	0680      	lsls	r0, r0, #26
 8001da2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001da6:	e7ce      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x366>
    return 32U;
 8001da8:	2020      	movs	r0, #32
 8001daa:	e7f8      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x3be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8001db0:	b14e      	cbz	r6, 8001dc6 <HAL_ADC_ConfigChannel+0x3e6>
  return __builtin_clz(value);
 8001db2:	fab6 f686 	clz	r6, r6
 8001db6:	3601      	adds	r6, #1
 8001db8:	f006 061f 	and.w	r6, r6, #31
 8001dbc:	f04f 0c01 	mov.w	ip, #1
 8001dc0:	fa0c f606 	lsl.w	r6, ip, r6
 8001dc4:	e7c6      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x374>
    return 32U;
 8001dc6:	2620      	movs	r6, #32
 8001dc8:	e7f5      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x3d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001dce:	b15a      	cbz	r2, 8001de8 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	3201      	adds	r2, #1
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001dde:	3a1e      	subs	r2, #30
 8001de0:	0512      	lsls	r2, r2, #20
 8001de2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001de6:	e7c1      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x38c>
    return 32U;
 8001de8:	2220      	movs	r2, #32
 8001dea:	e7f3      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x3f4>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dec:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8001df0:	f47f aea5 	bne.w	8001b3e <HAL_ADC_ConfigChannel+0x15e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <HAL_ADC_ConfigChannel+0x4c4>)
 8001df8:	4291      	cmp	r1, r2
 8001dfa:	d001      	beq.n	8001e00 <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	e606      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e00:	f445 0200 	orr.w	r2, r5, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e04:	4828      	ldr	r0, [pc, #160]	; (8001ea8 <HAL_ADC_ConfigChannel+0x4c8>)
 8001e06:	6881      	ldr	r1, [r0, #8]
 8001e08:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	6082      	str	r2, [r0, #8]
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_ADC_ConfigChannel+0x4cc>)
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	0992      	lsrs	r2, r2, #6
 8001e16:	4926      	ldr	r1, [pc, #152]	; (8001eb0 <HAL_ADC_ConfigChannel+0x4d0>)
 8001e18:	fba1 1202 	umull	r1, r2, r1, r2
 8001e1c:	0992      	lsrs	r2, r2, #6
 8001e1e:	3201      	adds	r2, #1
 8001e20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e24:	0092      	lsls	r2, r2, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8001e26:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x450>
                wait_loop_index--;
 8001e2a:	9a01      	ldr	r2, [sp, #4]
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8001e30:	9a01      	ldr	r2, [sp, #4]
 8001e32:	2a00      	cmp	r2, #0
 8001e34:	d1f9      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x44a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e36:	2000      	movs	r0, #0
 8001e38:	e5e9      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e3a:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8001e3e:	f47f ae82 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x166>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_ADC_ConfigChannel+0x4c4>)
 8001e46:	4291      	cmp	r1, r2
 8001e48:	d001      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0x46e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	e5df      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4e:	f045 7280 	orr.w	r2, r5, #16777216	; 0x1000000
 8001e52:	4815      	ldr	r0, [pc, #84]	; (8001ea8 <HAL_ADC_ConfigChannel+0x4c8>)
 8001e54:	6881      	ldr	r1, [r0, #8]
 8001e56:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5e:	2000      	movs	r0, #0
}
 8001e60:	e5d5      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e62:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8001e66:	d119      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x4bc>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <HAL_ADC_ConfigChannel+0x4c4>)
 8001e6c:	4291      	cmp	r1, r2
 8001e6e:	d001      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0x494>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2000      	movs	r0, #0
 8001e72:	e5cc      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e74:	f445 0280 	orr.w	r2, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e78:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <HAL_ADC_ConfigChannel+0x4c8>)
 8001e7a:	6881      	ldr	r1, [r0, #8]
 8001e7c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001e80:	430a      	orrs	r2, r1
 8001e82:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2000      	movs	r0, #0
}
 8001e86:	e5c2      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e8a:	f042 0220 	orr.w	r2, r2, #32
 8001e8e:	659a      	str	r2, [r3, #88]	; 0x58
          tmp_hal_status = HAL_ERROR;
 8001e90:	2001      	movs	r0, #1
 8001e92:	e5bc      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e94:	2000      	movs	r0, #0
 8001e96:	e5ba      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e5b8      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	e5b6      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	e5b7      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x34>
 8001ea4:	42028000 	.word	0x42028000
 8001ea8:	42028300 	.word	0x42028300
 8001eac:	20000014 	.word	0x20000014
 8001eb0:	053e2d63 	.word	0x053e2d63

08001eb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b530      	push	{r4, r5, lr}
 8001eb6:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ebc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	f012 0f01 	tst.w	r2, #1
 8001ec4:	d158      	bne.n	8001f78 <ADC_Enable+0xc4>
 8001ec6:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ec8:	6899      	ldr	r1, [r3, #8]
 8001eca:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <ADC_Enable+0xcc>)
 8001ecc:	4211      	tst	r1, r2
 8001ece:	d119      	bne.n	8001f04 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ed6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <ADC_Enable+0xd0>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ee4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001ee8:	d01c      	beq.n	8001f24 <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <ADC_Enable+0xd4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <ADC_Enable+0xd8>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	3301      	adds	r3, #1
 8001efa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001f02:	e00c      	b.n	8001f1e <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f04:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
 8001f16:	e030      	b.n	8001f7a <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 8001f18:	9b01      	ldr	r3, [sp, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001f1e:	9b01      	ldr	r3, [sp, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f9      	bne.n	8001f18 <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f24:	f7ff fafa 	bl	800151c <HAL_GetTick>
 8001f28:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	f012 0f01 	tst.w	r2, #1
 8001f32:	d11f      	bne.n	8001f74 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	f012 0f01 	tst.w	r2, #1
 8001f3a:	d107      	bne.n	8001f4c <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f42:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f4c:	f7ff fae6 	bl	800151c <HAL_GetTick>
 8001f50:	1b43      	subs	r3, r0, r5
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d9e9      	bls.n	8001f2a <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f013 0f01 	tst.w	r3, #1
 8001f5e:	d1e4      	bne.n	8001f2a <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
 8001f72:	e002      	b.n	8001f7a <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f74:	2000      	movs	r0, #0
 8001f76:	e000      	b.n	8001f7a <ADC_Enable+0xc6>
 8001f78:	2000      	movs	r0, #0
}
 8001f7a:	b003      	add	sp, #12
 8001f7c:	bd30      	pop	{r4, r5, pc}
 8001f7e:	bf00      	nop
 8001f80:	8000003f 	.word	0x8000003f
 8001f84:	42028300 	.word	0x42028300
 8001f88:	20000014 	.word	0x20000014
 8001f8c:	053e2d63 	.word	0x053e2d63

08001f90 <HAL_ADC_Start_IT>:
{
 8001f90:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f92:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_ADC_Start_IT+0x188>)
 8001f94:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f96:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f013 0f04 	tst.w	r3, #4
 8001f9e:	f040 80b6 	bne.w	800210e <HAL_ADC_Start_IT+0x17e>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8001fa8:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	f000 80b0 	beq.w	8002112 <HAL_ADC_Start_IT+0x182>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8001fb8:	f7ff ff7c 	bl	8001eb4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	f040 80a2 	bne.w	8002106 <HAL_ADC_Start_IT+0x176>
      ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	65a3      	str	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_ADC_Start_IT+0x18c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d052      	beq.n	8002080 <HAL_ADC_Start_IT+0xf0>
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d000      	beq.n	8001fe2 <HAL_ADC_Start_IT+0x52>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe0:	b91d      	cbnz	r5, 8001fea <HAL_ADC_Start_IT+0x5a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fe2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001fe4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001fe8:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fea:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001fec:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001ff0:	d049      	beq.n	8002086 <HAL_ADC_Start_IT+0xf6>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ff2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ff4:	f022 0206 	bic.w	r2, r2, #6
 8001ff8:	65e2      	str	r2, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ffa:	221c      	movs	r2, #28
 8001ffc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8001ffe:	2300      	movs	r3, #0
 8002000:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	6853      	ldr	r3, [r2, #4]
 8002008:	f023 031c 	bic.w	r3, r3, #28
 800200c:	6053      	str	r3, [r2, #4]
      switch (hadc->Init.EOCSelection)
 800200e:	6963      	ldr	r3, [r4, #20]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d03b      	beq.n	800208c <HAL_ADC_Start_IT+0xfc>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	6853      	ldr	r3, [r2, #4]
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6053      	str	r3, [r2, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800201e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002020:	b923      	cbnz	r3, 800202c <HAL_ADC_Start_IT+0x9c>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002022:	6822      	ldr	r2, [r4, #0]
 8002024:	6853      	ldr	r3, [r2, #4]
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6053      	str	r3, [r2, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	4a3b      	ldr	r2, [pc, #236]	; (800211c <HAL_ADC_Start_IT+0x18c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d031      	beq.n	8002098 <HAL_ADC_Start_IT+0x108>
 8002034:	461a      	mov	r2, r3
 8002036:	4293      	cmp	r3, r2
 8002038:	d031      	beq.n	800209e <HAL_ADC_Start_IT+0x10e>
 800203a:	2d09      	cmp	r5, #9
 800203c:	d805      	bhi.n	800204a <HAL_ADC_Start_IT+0xba>
 800203e:	f240 2121 	movw	r1, #545	; 0x221
 8002042:	40e9      	lsrs	r1, r5
 8002044:	f011 0f01 	tst.w	r1, #1
 8002048:	d129      	bne.n	800209e <HAL_ADC_Start_IT+0x10e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800204a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800204c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002050:	65a1      	str	r1, [r4, #88]	; 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002052:	68d2      	ldr	r2, [r2, #12]
 8002054:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002058:	d05a      	beq.n	8002110 <HAL_ADC_Start_IT+0x180>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800205a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800205c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002064:	65a2      	str	r2, [r4, #88]	; 0x58
          switch (hadc->Init.EOCSelection)
 8002066:	6962      	ldr	r2, [r4, #20]
 8002068:	2a08      	cmp	r2, #8
 800206a:	d042      	beq.n	80020f2 <HAL_ADC_Start_IT+0x162>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002072:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	6853      	ldr	r3, [r2, #4]
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	6053      	str	r3, [r2, #4]
              break;
 800207e:	e047      	b.n	8002110 <HAL_ADC_Start_IT+0x180>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002080:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002084:	e7aa      	b.n	8001fdc <HAL_ADC_Start_IT+0x4c>
        ADC_CLEAR_ERRORCODE(hadc);
 8002086:	2200      	movs	r2, #0
 8002088:	65e2      	str	r2, [r4, #92]	; 0x5c
 800208a:	e7b6      	b.n	8001ffa <HAL_ADC_Start_IT+0x6a>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	6853      	ldr	r3, [r2, #4]
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6053      	str	r3, [r2, #4]
          break;
 8002096:	e7c2      	b.n	800201e <HAL_ADC_Start_IT+0x8e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002098:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800209c:	e7cb      	b.n	8002036 <HAL_ADC_Start_IT+0xa6>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80020a4:	d011      	beq.n	80020ca <HAL_ADC_Start_IT+0x13a>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020a6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80020a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020b0:	65a2      	str	r2, [r4, #88]	; 0x58
          switch (hadc->Init.EOCSelection)
 80020b2:	6962      	ldr	r2, [r4, #20]
 80020b4:	2a08      	cmp	r2, #8
 80020b6:	d012      	beq.n	80020de <HAL_ADC_Start_IT+0x14e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020be:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80020c0:	6822      	ldr	r2, [r4, #0]
 80020c2:	6853      	ldr	r3, [r2, #4]
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020ca:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80020cc:	6893      	ldr	r3, [r2, #8]
 80020ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6093      	str	r3, [r2, #8]
}
 80020dc:	e018      	b.n	8002110 <HAL_ADC_Start_IT+0x180>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	f022 0220 	bic.w	r2, r2, #32
 80020e4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80020e6:	6822      	ldr	r2, [r4, #0]
 80020e8:	6853      	ldr	r3, [r2, #4]
 80020ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ee:	6053      	str	r3, [r2, #4]
              break;
 80020f0:	e7eb      	b.n	80020ca <HAL_ADC_Start_IT+0x13a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	f022 0220 	bic.w	r2, r2, #32
 80020f8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80020fa:	6822      	ldr	r2, [r4, #0]
 80020fc:	6853      	ldr	r3, [r2, #4]
 80020fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002102:	6053      	str	r3, [r2, #4]
              break;
 8002104:	e004      	b.n	8002110 <HAL_ADC_Start_IT+0x180>
      __HAL_UNLOCK(hadc);
 8002106:	2300      	movs	r3, #0
 8002108:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800210c:	e000      	b.n	8002110 <HAL_ADC_Start_IT+0x180>
    tmp_hal_status = HAL_BUSY;
 800210e:	2002      	movs	r0, #2
}
 8002110:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8002112:	2002      	movs	r0, #2
 8002114:	e7fc      	b.n	8002110 <HAL_ADC_Start_IT+0x180>
 8002116:	bf00      	nop
 8002118:	42028300 	.word	0x42028300
 800211c:	42028100 	.word	0x42028100

08002120 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002120:	4770      	bx	lr

08002122 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002122:	4770      	bx	lr

08002124 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002124:	4770      	bx	lr

08002126 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002126:	4770      	bx	lr

08002128 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002128:	4770      	bx	lr
	...

0800212c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002130:	2a01      	cmp	r2, #1
 8002132:	d07e      	beq.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0x106>
{
 8002134:	b410      	push	{r4}
 8002136:	b09b      	sub	sp, #108	; 0x6c
 8002138:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800213a:	2201      	movs	r2, #1
 800213c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002140:	2200      	movs	r2, #0
 8002142:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002144:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002146:	6800      	ldr	r0, [r0, #0]
 8002148:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 800214a:	4290      	cmp	r0, r2
 800214c:	d038      	beq.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800214e:	2200      	movs	r2, #0
 8002150:	9200      	str	r2, [sp, #0]

  if (tmp_hadc_slave.Instance == NULL)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	2a00      	cmp	r2, #0
 8002156:	d037      	beq.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002158:	6892      	ldr	r2, [r2, #8]
 800215a:	f012 0204 	ands.w	r2, r2, #4
 800215e:	d000      	beq.n	8002162 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002160:	2201      	movs	r2, #1
 8002162:	6880      	ldr	r0, [r0, #8]
 8002164:	f010 0f04 	tst.w	r0, #4
 8002168:	d153      	bne.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800216a:	2a00      	cmp	r2, #0
 800216c:	d151      	bne.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800216e:	680a      	ldr	r2, [r1, #0]
 8002170:	2a00      	cmp	r2, #0
 8002172:	d032      	beq.n	80021da <HAL_ADCEx_MultiModeConfigChannel+0xae>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002174:	4c31      	ldr	r4, [pc, #196]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002176:	68a2      	ldr	r2, [r4, #8]
 8002178:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800217c:	6848      	ldr	r0, [r1, #4]
 800217e:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8002182:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8002186:	4302      	orrs	r2, r0
 8002188:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800218a:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 800218c:	6890      	ldr	r0, [r2, #8]
 800218e:	f010 0001 	ands.w	r0, r0, #1
 8002192:	d000      	beq.n	8002196 <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8002194:	2001      	movs	r0, #1
 8002196:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002198:	6892      	ldr	r2, [r2, #8]
 800219a:	f012 0201 	ands.w	r2, r2, #1
 800219e:	d000      	beq.n	80021a2 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 80021a0:	2201      	movs	r2, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a2:	4302      	orrs	r2, r0
 80021a4:	d141      	bne.n	800222a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021a6:	4c25      	ldr	r4, [pc, #148]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80021a8:	68a2      	ldr	r2, [r4, #8]
 80021aa:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80021ae:	f022 020f 	bic.w	r2, r2, #15
 80021b2:	6808      	ldr	r0, [r1, #0]
 80021b4:	6889      	ldr	r1, [r1, #8]
 80021b6:	4301      	orrs	r1, r0
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021bc:	2000      	movs	r0, #0
 80021be:	e02d      	b.n	800221c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80021c0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	e7c4      	b.n	8002152 <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ca:	f042 0220 	orr.w	r2, r2, #32
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021d6:	2001      	movs	r0, #1
 80021d8:	e023      	b.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021da:	4918      	ldr	r1, [pc, #96]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80021dc:	688a      	ldr	r2, [r1, #8]
 80021de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021e2:	608a      	str	r2, [r1, #8]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80021e6:	6891      	ldr	r1, [r2, #8]
 80021e8:	f011 0101 	ands.w	r1, r1, #1
 80021ec:	d000      	beq.n	80021f0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80021ee:	2101      	movs	r1, #1
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80021f2:	6892      	ldr	r2, [r2, #8]
 80021f4:	f012 0201 	ands.w	r2, r2, #1
 80021f8:	d000      	beq.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80021fa:	2201      	movs	r2, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021fc:	430a      	orrs	r2, r1
 80021fe:	d116      	bne.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0x102>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002200:	490e      	ldr	r1, [pc, #56]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002202:	688a      	ldr	r2, [r1, #8]
 8002204:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002208:	f022 020f 	bic.w	r2, r2, #15
 800220c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220e:	2000      	movs	r0, #0
 8002210:	e004      	b.n	800221c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002212:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800221a:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8002222:	b01b      	add	sp, #108	; 0x6c
 8002224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002228:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2000      	movs	r0, #0
 800222c:	e7f6      	b.n	800221c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 800222e:	2000      	movs	r0, #0
 8002230:	e7f4      	b.n	800221c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  __HAL_LOCK(hadc);
 8002232:	2002      	movs	r0, #2
}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	42028000 	.word	0x42028000
 800223c:	42028300 	.word	0x42028300
 8002240:	42028100 	.word	0x42028100

08002244 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002246:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002248:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	0200      	lsls	r0, r0, #8
 8002252:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002256:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002260:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002268:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_NVIC_SetPriority+0x68>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002272:	f1c3 0c07 	rsb	ip, r3, #7
 8002276:	f1bc 0f03 	cmp.w	ip, #3
 800227a:	bf28      	it	cs
 800227c:	f04f 0c03 	movcs.w	ip, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002280:	f103 0e03 	add.w	lr, r3, #3
 8002284:	f1be 0f06 	cmp.w	lr, #6
 8002288:	d918      	bls.n	80022bc <HAL_NVIC_SetPriority+0x54>
 800228a:	3b04      	subs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 3eff 	mov.w	lr, #4294967295
 8002290:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002294:	ea21 010c 	bic.w	r1, r1, ip
 8002298:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229a:	fa0e fe03 	lsl.w	lr, lr, r3
 800229e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80022a4:	2800      	cmp	r0, #0
 80022a6:	db0b      	blt.n	80022c0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	0152      	lsls	r2, r2, #5
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80022b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80022b4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80022b8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022bc:	2300      	movs	r3, #0
 80022be:	e7e5      	b.n	800228c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	f000 000f 	and.w	r0, r0, #15
 80022c4:	0152      	lsls	r2, r2, #5
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_NVIC_SetPriority+0x6c>)
 80022ca:	541a      	strb	r2, [r3, r0]
 80022cc:	e7f4      	b.n	80022b8 <HAL_NVIC_SetPriority+0x50>
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00
 80022d4:	e000ed14 	.word	0xe000ed14

080022d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80022d8:	2800      	cmp	r0, #0
 80022da:	db07      	blt.n	80022ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022dc:	f000 021f 	and.w	r2, r0, #31
 80022e0:	0940      	lsrs	r0, r0, #5
 80022e2:	2301      	movs	r3, #1
 80022e4:	4093      	lsls	r3, r2
 80022e6:	4a02      	ldr	r2, [pc, #8]	; (80022f0 <HAL_NVIC_EnableIRQ+0x18>)
 80022e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f4:	3801      	subs	r0, #1
 80022f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80022fa:	d20b      	bcs.n	8002314 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002300:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <HAL_SYSTICK_Config+0x24>)
 8002304:	21e0      	movs	r1, #224	; 0xe0
 8002306:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230a:	2000      	movs	r0, #0
 800230c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	2207      	movs	r2, #7
 8002310:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002312:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002314:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0U;
 800231e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002320:	e065      	b.n	80023ee <HAL_GPIO_Init+0xd2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002322:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002324:	005e      	lsls	r6, r3, #1
 8002326:	2403      	movs	r4, #3
 8002328:	40b4      	lsls	r4, r6
 800232a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232e:	68cc      	ldr	r4, [r1, #12]
 8002330:	40b4      	lsls	r4, r6
 8002332:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002334:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002336:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002338:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233c:	684c      	ldr	r4, [r1, #4]
 800233e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002342:	409c      	lsls	r4, r3
 8002344:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002346:	6044      	str	r4, [r0, #4]
 8002348:	e062      	b.n	8002410 <HAL_GPIO_Init+0xf4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234a:	08dd      	lsrs	r5, r3, #3
 800234c:	3508      	adds	r5, #8
 800234e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002352:	f003 0c07 	and.w	ip, r3, #7
 8002356:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800235a:	f04f 0e0f 	mov.w	lr, #15
 800235e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002362:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002366:	690c      	ldr	r4, [r1, #16]
 8002368:	fa04 f40c 	lsl.w	r4, r4, ip
 800236c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002370:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002374:	e063      	b.n	800243e <HAL_GPIO_Init+0x122>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002376:	2406      	movs	r4, #6
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x60>
 800237a:	2400      	movs	r4, #0
 800237c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002380:	432c      	orrs	r4, r5
        EXTI->EXTICR[position >> 2U] = temp;
 8002382:	4d56      	ldr	r5, [pc, #344]	; (80024dc <HAL_GPIO_Init+0x1c0>)
 8002384:	f10c 0c18 	add.w	ip, ip, #24
 8002388:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800238c:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800238e:	43d4      	mvns	r4, r2
 8002390:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002394:	684f      	ldr	r7, [r1, #4]
 8002396:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800239a:	d001      	beq.n	80023a0 <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 800239c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80023a0:	4d4e      	ldr	r5, [pc, #312]	; (80024dc <HAL_GPIO_Init+0x1c0>)
 80023a2:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80023a4:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80023a6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023aa:	684f      	ldr	r7, [r1, #4]
 80023ac:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80023b0:	d001      	beq.n	80023b6 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 80023b2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80023b6:	4d49      	ldr	r5, [pc, #292]	; (80024dc <HAL_GPIO_Init+0x1c0>)
 80023b8:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023ba:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 80023be:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023c2:	684f      	ldr	r7, [r1, #4]
 80023c4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80023c8:	d001      	beq.n	80023ce <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80023ca:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80023ce:	4d43      	ldr	r5, [pc, #268]	; (80024dc <HAL_GPIO_Init+0x1c0>)
 80023d0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        temp = EXTI->IMR1;
 80023d4:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 80023d8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023da:	684e      	ldr	r6, [r1, #4]
 80023dc:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80023e0:	d001      	beq.n	80023e6 <HAL_GPIO_Init+0xca>
        {
          temp |= iocurrent;
 80023e2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80023e6:	4a3d      	ldr	r2, [pc, #244]	; (80024dc <HAL_GPIO_Init+0x1c0>)
 80023e8:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 80023ec:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023ee:	680a      	ldr	r2, [r1, #0]
 80023f0:	fa32 f403 	lsrs.w	r4, r2, r3
 80023f4:	d071      	beq.n	80024da <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023f6:	f04f 0c01 	mov.w	ip, #1
 80023fa:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0U)
 80023fe:	ea1c 0202 	ands.w	r2, ip, r2
 8002402:	d0f3      	beq.n	80023ec <HAL_GPIO_Init+0xd0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002404:	684c      	ldr	r4, [r1, #4]
 8002406:	f004 0403 	and.w	r4, r4, #3
 800240a:	3c01      	subs	r4, #1
 800240c:	2c01      	cmp	r4, #1
 800240e:	d988      	bls.n	8002322 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002410:	684c      	ldr	r4, [r1, #4]
 8002412:	f004 0403 	and.w	r4, r4, #3
 8002416:	2c03      	cmp	r4, #3
 8002418:	d00c      	beq.n	8002434 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 800241a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800241c:	005d      	lsls	r5, r3, #1
 800241e:	f04f 0c03 	mov.w	ip, #3
 8002422:	fa0c fc05 	lsl.w	ip, ip, r5
 8002426:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242a:	688c      	ldr	r4, [r1, #8]
 800242c:	40ac      	lsls	r4, r5
 800242e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002432:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002434:	684c      	ldr	r4, [r1, #4]
 8002436:	f004 0403 	and.w	r4, r4, #3
 800243a:	2c02      	cmp	r4, #2
 800243c:	d085      	beq.n	800234a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800243e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002440:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002444:	f04f 0c03 	mov.w	ip, #3
 8002448:	fa0c fc0e 	lsl.w	ip, ip, lr
 800244c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002450:	684c      	ldr	r4, [r1, #4]
 8002452:	f004 0403 	and.w	r4, r4, #3
 8002456:	fa04 f40e 	lsl.w	r4, r4, lr
 800245a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800245e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002460:	684c      	ldr	r4, [r1, #4]
 8002462:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002466:	d0c1      	beq.n	80023ec <HAL_GPIO_Init+0xd0>
        temp = EXTI->EXTICR[position >> 2U];
 8002468:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800246c:	f10c 0518 	add.w	r5, ip, #24
 8002470:	4c1a      	ldr	r4, [pc, #104]	; (80024dc <HAL_GPIO_Init+0x1c0>)
 8002472:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002476:	f003 0e03 	and.w	lr, r3, #3
 800247a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800247e:	240f      	movs	r4, #15
 8002480:	fa04 f40e 	lsl.w	r4, r4, lr
 8002484:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002488:	4c15      	ldr	r4, [pc, #84]	; (80024e0 <HAL_GPIO_Init+0x1c4>)
 800248a:	42a0      	cmp	r0, r4
 800248c:	f43f af75 	beq.w	800237a <HAL_GPIO_Init+0x5e>
 8002490:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002494:	42a0      	cmp	r0, r4
 8002496:	d016      	beq.n	80024c6 <HAL_GPIO_Init+0x1aa>
 8002498:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800249c:	42a0      	cmp	r0, r4
 800249e:	d014      	beq.n	80024ca <HAL_GPIO_Init+0x1ae>
 80024a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024a4:	42a0      	cmp	r0, r4
 80024a6:	d012      	beq.n	80024ce <HAL_GPIO_Init+0x1b2>
 80024a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024ac:	42a0      	cmp	r0, r4
 80024ae:	d010      	beq.n	80024d2 <HAL_GPIO_Init+0x1b6>
 80024b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024b4:	42a0      	cmp	r0, r4
 80024b6:	d00e      	beq.n	80024d6 <HAL_GPIO_Init+0x1ba>
 80024b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024bc:	42a0      	cmp	r0, r4
 80024be:	f43f af5a 	beq.w	8002376 <HAL_GPIO_Init+0x5a>
 80024c2:	2407      	movs	r4, #7
 80024c4:	e75a      	b.n	800237c <HAL_GPIO_Init+0x60>
 80024c6:	2401      	movs	r4, #1
 80024c8:	e758      	b.n	800237c <HAL_GPIO_Init+0x60>
 80024ca:	2402      	movs	r4, #2
 80024cc:	e756      	b.n	800237c <HAL_GPIO_Init+0x60>
 80024ce:	2403      	movs	r4, #3
 80024d0:	e754      	b.n	800237c <HAL_GPIO_Init+0x60>
 80024d2:	2404      	movs	r4, #4
 80024d4:	e752      	b.n	800237c <HAL_GPIO_Init+0x60>
 80024d6:	2405      	movs	r4, #5
 80024d8:	e750      	b.n	800237c <HAL_GPIO_Init+0x60>
  }
}
 80024da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024dc:	4002f400 	.word	0x4002f400
 80024e0:	42020000 	.word	0x42020000

080024e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80024e4:	6903      	ldr	r3, [r0, #16]
 80024e6:	4219      	tst	r1, r3
 80024e8:	d001      	beq.n	80024ee <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80024ea:	2001      	movs	r0, #1
 80024ec:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ee:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80024f0:	4770      	bx	lr

080024f2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f2:	b10a      	cbz	r2, 80024f8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f4:	6181      	str	r1, [r0, #24]
 80024f6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80024fa:	4770      	bx	lr

080024fc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024fe:	ea01 0203 	and.w	r2, r1, r3
 8002502:	ea21 0103 	bic.w	r1, r1, r3
 8002506:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800250a:	6181      	str	r1, [r0, #24]
}
 800250c:	4770      	bx	lr

0800250e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800250e:	6803      	ldr	r3, [r0, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	f012 0f02 	tst.w	r2, #2
 8002516:	d001      	beq.n	800251c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002518:	2200      	movs	r2, #0
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800251c:	6803      	ldr	r3, [r0, #0]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	f012 0f01 	tst.w	r2, #1
 8002524:	d103      	bne.n	800252e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	619a      	str	r2, [r3, #24]
  }
}
 800252e:	4770      	bx	lr

08002530 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002530:	b410      	push	{r4}
 8002532:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002534:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800253c:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800253e:	4321      	orrs	r1, r4
 8002540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002544:	6802      	ldr	r2, [r0, #0]
 8002546:	6853      	ldr	r3, [r2, #4]
 8002548:	0d64      	lsrs	r4, r4, #21
 800254a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800254e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002552:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002556:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800255a:	f044 0403 	orr.w	r4, r4, #3
 800255e:	ea23 0304 	bic.w	r3, r3, r4
 8002562:	430b      	orrs	r3, r1
 8002564:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800256a:	4770      	bx	lr

0800256c <I2C_IsErrorOccurred>:
{
 800256c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002570:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8002572:	6803      	ldr	r3, [r0, #0]
 8002574:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002576:	f016 0610 	ands.w	r6, r6, #16
 800257a:	d07c      	beq.n	8002676 <I2C_IsErrorOccurred+0x10a>
 800257c:	460d      	mov	r5, r1
 800257e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002580:	2210      	movs	r2, #16
 8002582:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8002584:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	6998      	ldr	r0, [r3, #24]
 800258c:	f010 0f20 	tst.w	r0, #32
 8002590:	d130      	bne.n	80025f4 <I2C_IsErrorOccurred+0x88>
 8002592:	bb7f      	cbnz	r7, 80025f4 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8002594:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002598:	d0f6      	beq.n	8002588 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800259a:	f7fe ffbf 	bl	800151c <HAL_GetTick>
 800259e:	eba0 0008 	sub.w	r0, r0, r8
 80025a2:	42a8      	cmp	r0, r5
 80025a4:	d801      	bhi.n	80025aa <I2C_IsErrorOccurred+0x3e>
 80025a6:	2d00      	cmp	r5, #0
 80025a8:	d1ee      	bne.n	8002588 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025aa:	6821      	ldr	r1, [r4, #0]
 80025ac:	684b      	ldr	r3, [r1, #4]
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80025b2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80025b6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025b8:	6988      	ldr	r0, [r1, #24]
 80025ba:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80025be:	d002      	beq.n	80025c6 <I2C_IsErrorOccurred+0x5a>
 80025c0:	b90b      	cbnz	r3, 80025c6 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80025c2:	2a20      	cmp	r2, #32
 80025c4:	d10e      	bne.n	80025e4 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f013 0f20 	tst.w	r3, #32
 80025ce:	d1db      	bne.n	8002588 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025d0:	f7fe ffa4 	bl	800151c <HAL_GetTick>
 80025d4:	eba0 0008 	sub.w	r0, r0, r8
 80025d8:	2819      	cmp	r0, #25
 80025da:	d9f4      	bls.n	80025c6 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025dc:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80025e0:	2701      	movs	r7, #1
              break;
 80025e2:	e7d1      	b.n	8002588 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025e4:	684b      	ldr	r3, [r1, #4]
 80025e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ea:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80025ec:	f7fe ff96 	bl	800151c <HAL_GetTick>
 80025f0:	4680      	mov	r8, r0
 80025f2:	e7e8      	b.n	80025c6 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80025f4:	b90f      	cbnz	r7, 80025fa <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f6:	2220      	movs	r2, #32
 80025f8:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80025fa:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80025fe:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8002600:	6822      	ldr	r2, [r4, #0]
 8002602:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002604:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002608:	d005      	beq.n	8002616 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800260a:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800260e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002612:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002614:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002616:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800261a:	d006      	beq.n	800262a <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 800261c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002626:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002628:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800262a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800262e:	d024      	beq.n	800267a <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002630:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263a:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800263c:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff ff65 	bl	800250e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002644:	6822      	ldr	r2, [r4, #0]
 8002646:	6853      	ldr	r3, [r2, #4]
 8002648:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800264c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002650:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800265a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800265c:	4333      	orrs	r3, r6
 800265e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	2320      	movs	r3, #32
 8002662:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800266c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002670:	4628      	mov	r0, r5
 8002672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2500      	movs	r5, #0
 8002678:	e7c2      	b.n	8002600 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 800267a:	2d00      	cmp	r5, #0
 800267c:	d0f8      	beq.n	8002670 <I2C_IsErrorOccurred+0x104>
 800267e:	e7de      	b.n	800263e <I2C_IsErrorOccurred+0xd2>

08002680 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	4604      	mov	r4, r0
 8002684:	460d      	mov	r5, r1
 8002686:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f013 0f02 	tst.w	r3, #2
 8002690:	d122      	bne.n	80026d8 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002692:	4632      	mov	r2, r6
 8002694:	4629      	mov	r1, r5
 8002696:	4620      	mov	r0, r4
 8002698:	f7ff ff68 	bl	800256c <I2C_IsErrorOccurred>
 800269c:	b9f0      	cbnz	r0, 80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800269e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80026a2:	d0f1      	beq.n	8002688 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a4:	f7fe ff3a 	bl	800151c <HAL_GetTick>
 80026a8:	1b80      	subs	r0, r0, r6
 80026aa:	42a8      	cmp	r0, r5
 80026ac:	d801      	bhi.n	80026b2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80026ae:	2d00      	cmp	r5, #0
 80026b0:	d1ea      	bne.n	8002688 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f013 0f02 	tst.w	r3, #2
 80026ba:	d1e5      	bne.n	8002688 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026be:	f043 0320 	orr.w	r3, r3, #32
 80026c2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	2320      	movs	r3, #32
 80026c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80026d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80026d4:	2001      	movs	r0, #1
 80026d6:	e000      	b.n	80026da <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 80026d8:	2000      	movs	r0, #0
}
 80026da:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80026dc:	2001      	movs	r0, #1
 80026de:	e7fc      	b.n	80026da <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

080026e0 <I2C_WaitOnFlagUntilTimeout>:
{
 80026e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e4:	4605      	mov	r5, r0
 80026e6:	460f      	mov	r7, r1
 80026e8:	4616      	mov	r6, r2
 80026ea:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ec:	682c      	ldr	r4, [r5, #0]
 80026ee:	69a4      	ldr	r4, [r4, #24]
 80026f0:	ea37 0404 	bics.w	r4, r7, r4
 80026f4:	bf0c      	ite	eq
 80026f6:	2401      	moveq	r4, #1
 80026f8:	2400      	movne	r4, #0
 80026fa:	42b4      	cmp	r4, r6
 80026fc:	d122      	bne.n	8002744 <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002702:	d0f3      	beq.n	80026ec <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002704:	f7fe ff0a 	bl	800151c <HAL_GetTick>
 8002708:	9b06      	ldr	r3, [sp, #24]
 800270a:	1ac0      	subs	r0, r0, r3
 800270c:	4540      	cmp	r0, r8
 800270e:	d802      	bhi.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x36>
 8002710:	f1b8 0f00 	cmp.w	r8, #0
 8002714:	d1ea      	bne.n	80026ec <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002716:	682b      	ldr	r3, [r5, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	ea37 0303 	bics.w	r3, r7, r3
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	42b3      	cmp	r3, r6
 8002726:	d1e1      	bne.n	80026ec <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002728:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800272a:	f043 0320 	orr.w	r3, r3, #32
 800272e:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002730:	2320      	movs	r3, #32
 8002732:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	2300      	movs	r3, #0
 8002738:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800273c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8002740:	2001      	movs	r0, #1
 8002742:	e000      	b.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8002744:	2000      	movs	r0, #0
}
 8002746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800274a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800274a:	b570      	push	{r4, r5, r6, lr}
 800274c:	4604      	mov	r4, r0
 800274e:	460d      	mov	r5, r1
 8002750:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002752:	e004      	b.n	800275e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f013 0f20 	tst.w	r3, #32
 800275c:	d012      	beq.n	8002784 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f013 0f20 	tst.w	r3, #32
 8002766:	d11b      	bne.n	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002768:	4632      	mov	r2, r6
 800276a:	4629      	mov	r1, r5
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff fefd 	bl	800256c <I2C_IsErrorOccurred>
 8002772:	b9b8      	cbnz	r0, 80027a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002774:	f7fe fed2 	bl	800151c <HAL_GetTick>
 8002778:	1b80      	subs	r0, r0, r6
 800277a:	42a8      	cmp	r0, r5
 800277c:	d8ea      	bhi.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800277e:	2d00      	cmp	r5, #0
 8002780:	d1ed      	bne.n	800275e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8002782:	e7e7      	b.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002784:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002786:	f043 0320 	orr.w	r3, r3, #32
 800278a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800278c:	2320      	movs	r3, #32
 800278e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002792:	2300      	movs	r3, #0
 8002794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002798:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800279c:	2001      	movs	r0, #1
 800279e:	e000      	b.n	80027a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 80027a0:	2000      	movs	r0, #0
}
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
 80027a6:	e7fc      	b.n	80027a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

080027a8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80027a8:	2800      	cmp	r0, #0
 80027aa:	d059      	beq.n	8002860 <HAL_I2C_Init+0xb8>
{
 80027ac:	b510      	push	{r4, lr}
 80027ae:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d043      	beq.n	8002840 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b8:	2324      	movs	r3, #36	; 0x24
 80027ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80027be:	6822      	ldr	r2, [r4, #0]
 80027c0:	6813      	ldr	r3, [r2, #0]
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027c8:	6863      	ldr	r3, [r4, #4]
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80027d0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027d2:	6822      	ldr	r2, [r4, #0]
 80027d4:	6893      	ldr	r3, [r2, #8]
 80027d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027da:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027dc:	68e3      	ldr	r3, [r4, #12]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d033      	beq.n	800284a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027e2:	68a3      	ldr	r3, [r4, #8]
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80027ea:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027ec:	68e3      	ldr	r3, [r4, #12]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d031      	beq.n	8002856 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	6853      	ldr	r3, [r2, #4]
 80027f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fe:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	68d3      	ldr	r3, [r2, #12]
 8002804:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002808:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800280a:	6923      	ldr	r3, [r4, #16]
 800280c:	6962      	ldr	r2, [r4, #20]
 800280e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002810:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002818:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800281a:	69e3      	ldr	r3, [r4, #28]
 800281c:	6a21      	ldr	r1, [r4, #32]
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	430b      	orrs	r3, r1
 8002822:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	6813      	ldr	r3, [r2, #0]
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282e:	2000      	movs	r0, #0
 8002830:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002832:	2320      	movs	r3, #32
 8002834:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002838:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800283e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002840:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002844:	f7fe fc40 	bl	80010c8 <HAL_I2C_MspInit>
 8002848:	e7b6      	b.n	80027b8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800284a:	68a3      	ldr	r3, [r4, #8]
 800284c:	6822      	ldr	r2, [r4, #0]
 800284e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002852:	6093      	str	r3, [r2, #8]
 8002854:	e7ca      	b.n	80027ec <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	e7c8      	b.n	80027f2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002860:	2001      	movs	r0, #1
}
 8002862:	4770      	bx	lr

08002864 <HAL_I2C_Master_Transmit>:
{
 8002864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	460f      	mov	r7, r1
 800286c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800286e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002872:	b2c9      	uxtb	r1, r1
 8002874:	2920      	cmp	r1, #32
 8002876:	f040 80a3 	bne.w	80029c0 <HAL_I2C_Master_Transmit+0x15c>
 800287a:	4604      	mov	r4, r0
 800287c:	4690      	mov	r8, r2
 800287e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002880:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002884:	2b01      	cmp	r3, #1
 8002886:	f000 809f 	beq.w	80029c8 <HAL_I2C_Master_Transmit+0x164>
 800288a:	f04f 0a01 	mov.w	sl, #1
 800288e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002892:	f7fe fe43 	bl	800151c <HAL_GetTick>
 8002896:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002898:	9000      	str	r0, [sp, #0]
 800289a:	2319      	movs	r3, #25
 800289c:	4652      	mov	r2, sl
 800289e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a2:	4620      	mov	r0, r4
 80028a4:	f7ff ff1c 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	f040 808f 	bne.w	80029cc <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028ae:	2321      	movs	r3, #33	; 0x21
 80028b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028b4:	2310      	movs	r3, #16
 80028b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80028be:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80028c2:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c6:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2bff      	cmp	r3, #255	; 0xff
 80028ce:	d90a      	bls.n	80028e6 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d0:	22ff      	movs	r2, #255	; 0xff
 80028d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d4:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_I2C_Master_Transmit+0x178>)
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028dc:	4639      	mov	r1, r7
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff fe26 	bl	8002530 <I2C_TransferConfig>
 80028e4:	e018      	b.n	8002918 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80028e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028e8:	b292      	uxth	r2, r2
 80028ea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ec:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_I2C_Master_Transmit+0x178>)
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	4639      	mov	r1, r7
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff fe19 	bl	8002530 <I2C_TransferConfig>
 80028fe:	e00b      	b.n	8002918 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002900:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002902:	b292      	uxth	r2, r2
 8002904:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	4639      	mov	r1, r7
 8002912:	4620      	mov	r0, r4
 8002914:	f7ff fe0c 	bl	8002530 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002918:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d033      	beq.n	8002988 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002920:	462a      	mov	r2, r5
 8002922:	4631      	mov	r1, r6
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff feab 	bl	8002680 <I2C_WaitOnTXISFlagUntilTimeout>
 800292a:	2800      	cmp	r0, #0
 800292c:	d150      	bne.n	80029d0 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800292e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800293c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29b      	uxth	r3, r3
 8002944:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002946:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29b      	uxth	r3, r3
 800294c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800294e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002950:	b292      	uxth	r2, r2
 8002952:	2a00      	cmp	r2, #0
 8002954:	d0e0      	beq.n	8002918 <HAL_I2C_Master_Transmit+0xb4>
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1de      	bne.n	8002918 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800295a:	9500      	str	r5, [sp, #0]
 800295c:	4633      	mov	r3, r6
 800295e:	2200      	movs	r2, #0
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	4620      	mov	r0, r4
 8002964:	f7ff febc 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8002968:	bba0      	cbnz	r0, 80029d4 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800296a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2bff      	cmp	r3, #255	; 0xff
 8002970:	d9c6      	bls.n	8002900 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002976:	2300      	movs	r3, #0
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800297e:	4639      	mov	r1, r7
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fdd5 	bl	8002530 <I2C_TransferConfig>
 8002986:	e7c7      	b.n	8002918 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002988:	462a      	mov	r2, r5
 800298a:	4631      	mov	r1, r6
 800298c:	4620      	mov	r0, r4
 800298e:	f7ff fedc 	bl	800274a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002992:	bb08      	cbnz	r0, 80029d8 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800299a:	6821      	ldr	r1, [r4, #0]
 800299c:	684b      	ldr	r3, [r1, #4]
 800299e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80029a2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80029a6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80029ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80029be:	e000      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 80029c0:	2002      	movs	r0, #2
}
 80029c2:	b002      	add	sp, #8
 80029c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80029c8:	2002      	movs	r0, #2
 80029ca:	e7fa      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 80029cc:	2001      	movs	r0, #1
 80029ce:	e7f8      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 80029d0:	2001      	movs	r0, #1
 80029d2:	e7f6      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 80029d4:	2001      	movs	r0, #1
 80029d6:	e7f4      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 80029d8:	2001      	movs	r0, #1
 80029da:	e7f2      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x15e>
 80029dc:	80002000 	.word	0x80002000

080029e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029e0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	2a20      	cmp	r2, #32
 80029ea:	d123      	bne.n	8002a34 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ec:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80029f0:	2a01      	cmp	r2, #1
 80029f2:	d021      	beq.n	8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80029f4:	2201      	movs	r2, #1
 80029f6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029fa:	2224      	movs	r2, #36	; 0x24
 80029fc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a00:	6800      	ldr	r0, [r0, #0]
 8002a02:	6802      	ldr	r2, [r0, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	6802      	ldr	r2, [r0, #0]
 8002a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a12:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	6802      	ldr	r2, [r0, #0]
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	680a      	ldr	r2, [r1, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002a32:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2002      	movs	r0, #2
 8002a36:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002a38:	2002      	movs	r0, #2
  }
}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a3c:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	2a20      	cmp	r2, #32
 8002a46:	d121      	bne.n	8002a8c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a48:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002a4c:	2a01      	cmp	r2, #1
 8002a4e:	d01f      	beq.n	8002a90 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002a50:	2201      	movs	r2, #1
 8002a52:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a56:	2224      	movs	r2, #36	; 0x24
 8002a58:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a5c:	6800      	ldr	r0, [r0, #0]
 8002a5e:	6802      	ldr	r2, [r0, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a6a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a72:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	680a      	ldr	r2, [r1, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002a8a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002a90:	2002      	movs	r0, #2
  }
}
 8002a92:	4770      	bx	lr

08002a94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a94:	4b02      	ldr	r3, [pc, #8]	; (8002aa0 <HAL_PWREx_GetVoltageRange+0xc>)
 8002a96:	6818      	ldr	r0, [r3, #0]
}
 8002a98:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40007000 	.word	0x40007000

08002aa4 <HAL_PWREx_SMPS_GetEffectiveMode>:
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <HAL_PWREx_SMPS_GetEffectiveMode+0x20>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002aa8:	f413 5080 	ands.w	r0, r3, #4096	; 0x1000
 8002aac:	d106      	bne.n	8002abc <HAL_PWREx_SMPS_GetEffectiveMode+0x18>
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002aae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ab2:	d000      	beq.n	8002ab6 <HAL_PWREx_SMPS_GetEffectiveMode+0x12>
  {
    mode = PWR_SMPS_HIGH_POWER;
  }

  return mode;
}
 8002ab4:	4770      	bx	lr
    mode = PWR_SMPS_LOW_POWER;
 8002ab6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002aba:	4770      	bx	lr
    mode = PWR_SMPS_BYPASS;
 8002abc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  return mode;
 8002ac0:	e7f8      	b.n	8002ab4 <HAL_PWREx_SMPS_GetEffectiveMode+0x10>
 8002ac2:	bf00      	nop
 8002ac4:	40007000 	.word	0x40007000

08002ac8 <HAL_PWREx_ControlVoltageScaling>:
{
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4605      	mov	r5, r0
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002ace:	681c      	ldr	r4, [r3, #0]
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002ad0:	f7ff ffe8 	bl	8002aa4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002ad4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ad8:	d02d      	beq.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ada:	f404 64c0 	and.w	r4, r4, #1536	; 0x600
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ae6:	d128      	bne.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x72>
  if (vos_old == VoltageScaling)
 8002ae8:	42ac      	cmp	r4, r5
 8002aea:	d028      	beq.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x76>
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002aec:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002aee:	6813      	ldr	r3, [r2, #0]
 8002af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af4:	432b      	orrs	r3, r5
 8002af6:	6013      	str	r3, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	09db      	lsrs	r3, r3, #7
 8002b06:	2232      	movs	r2, #50	; 0x32
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	08db      	lsrs	r3, r3, #3
 8002b14:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b16:	e000      	b.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0x52>
    wait_loop_index--;
 8002b18:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002b1c:	6952      	ldr	r2, [r2, #20]
 8002b1e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b22:	d001      	beq.n	8002b28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f7      	bne.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0x50>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b30:	d107      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8002b32:	2000      	movs	r0, #0
}
 8002b34:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e7fc      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e7fa      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_OK;
 8002b3e:	2000      	movs	r0, #0
 8002b40:	e7f8      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_TIMEOUT;
 8002b42:	2003      	movs	r0, #3
 8002b44:	e7f6      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8002b46:	bf00      	nop
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	20000014 	.word	0x20000014
 8002b50:	0a7c5ac5 	.word	0x0a7c5ac5
 8002b54:	cccccccd 	.word	0xcccccccd

08002b58 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b5a:	68d3      	ldr	r3, [r2, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002b66:	3201      	adds	r2, #1

  switch (pllsource)
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d00d      	beq.n	8002b88 <RCC_GetSysClockFreqFromPLLSource+0x30>
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d015      	beq.n	8002b9c <RCC_GetSysClockFreqFromPLLSource+0x44>
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d01d      	beq.n	8002bb0 <RCC_GetSysClockFreqFromPLLSource+0x58>
 8002b74:	2000      	movs	r0, #0
      /* unexpected */
      pllvco = 0;
      break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8002b82:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b86:	4770      	bx	lr
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b88:	4814      	ldr	r0, [pc, #80]	; (8002bdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b8a:	fbb0 f0f2 	udiv	r0, r0, r2
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002b96:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8002b9a:	e7ec      	b.n	8002b76 <RCC_GetSysClockFreqFromPLLSource+0x1e>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b9c:	480f      	ldr	r0, [pc, #60]	; (8002bdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b9e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002baa:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8002bae:	e7e2      	b.n	8002b76 <RCC_GetSysClockFreqFromPLLSource+0x1e>
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f013 0f08 	tst.w	r3, #8
 8002bb8:	d108      	bne.n	8002bcc <RCC_GetSysClockFreqFromPLLSource+0x74>
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc0:	f3c3 2303 	ubfx	r3, r3, #8, #4
        pllvco = MSIRangeTable[msirange];
 8002bc4:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8002bca:	e7d4      	b.n	8002b76 <RCC_GetSysClockFreqFromPLLSource+0x1e>
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bcc:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bd4:	e7f6      	b.n	8002bc4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	08005a20 	.word	0x08005a20

08002be4 <RCC_SetFlashLatencyFromMSIRange>:
{
 8002be4:	b530      	push	{r4, r5, lr}
 8002be6:	b083      	sub	sp, #12
 8002be8:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bea:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002bf2:	d00c      	beq.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0x2a>
    vos = HAL_PWREx_GetVoltageRange();
 8002bf4:	f7ff ff4e 	bl	8002a94 <HAL_PWREx_GetVoltageRange>
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002bf8:	b1d0      	cbz	r0, 8002c30 <RCC_SetFlashLatencyFromMSIRange+0x4c>
 8002bfa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002bfe:	d017      	beq.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0x4c>
    if (msirange > RCC_MSIRANGE_8)
 8002c00:	2c80      	cmp	r4, #128	; 0x80
 8002c02:	d82c      	bhi.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x7a>
      if (msirange == RCC_MSIRANGE_8)
 8002c04:	d02d      	beq.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      else if (msirange == RCC_MSIRANGE_7)
 8002c06:	2c70      	cmp	r4, #112	; 0x70
 8002c08:	d02d      	beq.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x82>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	e017      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x5a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4d18      	ldr	r5, [pc, #96]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002c10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	65ab      	str	r3, [r5, #88]	; 0x58
 8002c18:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002c22:	f7ff ff37 	bl	8002a94 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c26:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	65ab      	str	r3, [r5, #88]	; 0x58
 8002c2e:	e7e3      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if (msirange > RCC_MSIRANGE_8)
 8002c30:	2c80      	cmp	r4, #128	; 0x80
 8002c32:	d903      	bls.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x58>
      if (msirange > RCC_MSIRANGE_10)
 8002c34:	2ca0      	cmp	r4, #160	; 0xa0
 8002c36:	d910      	bls.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x76>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c38:	2102      	movs	r1, #2
 8002c3a:	e000      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x5a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c3c:	2100      	movs	r1, #0
  __HAL_FLASH_SET_LATENCY(latency);
 8002c3e:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0x90>)
 8002c40:	6813      	ldr	r3, [r2, #0]
 8002c42:	f023 030f 	bic.w	r3, r3, #15
 8002c46:	430b      	orrs	r3, r1
 8002c48:	6013      	str	r3, [r2, #0]
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002c4a:	6813      	ldr	r3, [r2, #0]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d10a      	bne.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x86>
  return HAL_OK;
 8002c54:	2000      	movs	r0, #0
}
 8002c56:	b003      	add	sp, #12
 8002c58:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	e7ef      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x5a>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c5e:	2103      	movs	r1, #3
 8002c60:	e7ed      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c62:	2102      	movs	r1, #2
 8002c64:	e7eb      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c66:	2101      	movs	r1, #1
 8002c68:	e7e9      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x5a>
    return HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	e7f3      	b.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40022000 	.word	0x40022000

08002c78 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c78:	4a31      	ldr	r2, [pc, #196]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c7a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	f002 0203 	and.w	r2, r2, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c82:	f013 030c 	ands.w	r3, r3, #12
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x26>
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	d006      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x22>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d01f      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x58>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c94:	2000      	movs	r0, #0
 8002c96:	4601      	mov	r1, r0
 8002c98:	e010      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x44>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c9a:	2a01      	cmp	r2, #1
 8002c9c:	d1f6      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x14>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c9e:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	f012 0f08 	tst.w	r2, #8
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ca8:	4a25      	ldr	r2, [pc, #148]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002caa:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8002cae:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002cb2:	4924      	ldr	r1, [pc, #144]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cb4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cb8:	b143      	cbz	r3, 8002ccc <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cba:	2000      	movs	r0, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d00d      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x64>
}
 8002cc0:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cc2:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002cca:	e7f2      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002ccc:	4608      	mov	r0, r1
 8002cce:	e7f5      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002cd0:	481d      	ldr	r0, [pc, #116]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xd0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	e7f2      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002cd6:	481c      	ldr	r0, [pc, #112]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xd0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cd8:	2100      	movs	r1, #0
 8002cda:	e7ef      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002cea:	3301      	adds	r3, #1
    switch (pllsource)
 8002cec:	2a02      	cmp	r2, #2
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x8e>
 8002cf0:	2a03      	cmp	r2, #3
 8002cf2:	d01a      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0xb2>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cf4:	fbb1 f1f3 	udiv	r1, r1, r3
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cfa:	68d8      	ldr	r0, [r3, #12]
 8002cfc:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002d00:	fb01 f000 	mul.w	r0, r1, r0
        break;
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d06:	4810      	ldr	r0, [pc, #64]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d08:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002d14:	fb03 f000 	mul.w	r0, r3, r0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002d20:	3301      	adds	r3, #1
 8002d22:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8002d24:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002d28:	e7ca      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x48>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2a:	4807      	ldr	r0, [pc, #28]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002d38:	fb03 f000 	mul.w	r0, r3, r0
        break;
 8002d3c:	e7ec      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xa0>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08005a20 	.word	0x08005a20
 8002d48:	00f42400 	.word	0x00f42400

08002d4c <HAL_RCC_GetHCLKFreq>:
{
 8002d4c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002d4e:	f7ff ff93 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <HAL_RCC_GetHCLKFreq+0x18>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d5a:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d5e:	40d8      	lsrs	r0, r3
 8002d60:	bd08      	pop	{r3, pc}
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08005a08 	.word	0x08005a08

08002d6c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	f000 83b6 	beq.w	80034de <HAL_RCC_OscConfig+0x772>
{
 8002d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d74:	b083      	sub	sp, #12
 8002d76:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d78:	4b9e      	ldr	r3, [pc, #632]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002d7a:	689d      	ldr	r5, [r3, #8]
 8002d7c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d80:	68de      	ldr	r6, [r3, #12]
 8002d82:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d86:	6803      	ldr	r3, [r0, #0]
 8002d88:	f013 0f10 	tst.w	r3, #16
 8002d8c:	d056      	beq.n	8002e3c <HAL_RCC_OscConfig+0xd0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d8e:	b30d      	cbz	r5, 8002dd4 <HAL_RCC_OscConfig+0x68>
 8002d90:	2d0c      	cmp	r5, #12
 8002d92:	d01d      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x64>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d94:	69e3      	ldr	r3, [r4, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80bc 	beq.w	8002f14 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8002d9c:	4a95      	ldr	r2, [pc, #596]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002d9e:	6813      	ldr	r3, [r2, #0]
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002da6:	f7fe fbb9 	bl	800151c <HAL_GetTick>
 8002daa:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dac:	4b91      	ldr	r3, [pc, #580]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f013 0f02 	tst.w	r3, #2
 8002db4:	f040 809b 	bne.w	8002eee <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002db8:	f7fe fbb0 	bl	800151c <HAL_GetTick>
 8002dbc:	1bc0      	subs	r0, r0, r7
 8002dbe:	2802      	cmp	r0, #2
 8002dc0:	d9f4      	bls.n	8002dac <HAL_RCC_OscConfig+0x40>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc2:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f013 0f02 	tst.w	r3, #2
 8002dca:	d1ef      	bne.n	8002dac <HAL_RCC_OscConfig+0x40>
              return HAL_TIMEOUT;
 8002dcc:	2003      	movs	r0, #3
 8002dce:	e391      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dd0:	2e01      	cmp	r6, #1
 8002dd2:	d1df      	bne.n	8002d94 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd4:	4b87      	ldr	r3, [pc, #540]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f013 0f02 	tst.w	r3, #2
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_OscConfig+0x7a>
 8002dde:	69e3      	ldr	r3, [r4, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 837e 	beq.w	80034e2 <HAL_RCC_OscConfig+0x776>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002de6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002de8:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f013 0f08 	tst.w	r3, #8
 8002df0:	d057      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x136>
 8002df2:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfa:	4298      	cmp	r0, r3
 8002dfc:	d858      	bhi.n	8002eb0 <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfe:	4b7d      	ldr	r3, [pc, #500]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f042 0208 	orr.w	r2, r2, #8
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002e1a:	6a21      	ldr	r1, [r4, #32]
 8002e1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e20:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	d05c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e26:	f7ff ff91 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002e2a:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <HAL_RCC_OscConfig+0x28c>)
 8002e2c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002e2e:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <HAL_RCC_OscConfig+0x290>)
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	f7fe fb2d 	bl	8001490 <HAL_InitTick>
        if (status != HAL_OK)
 8002e36:	2800      	cmp	r0, #0
 8002e38:	f040 835c 	bne.w	80034f4 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	f013 0f01 	tst.w	r3, #1
 8002e42:	f000 808b 	beq.w	8002f5c <HAL_RCC_OscConfig+0x1f0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e46:	2d08      	cmp	r5, #8
 8002e48:	d07f      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1de>
 8002e4a:	2d0c      	cmp	r5, #12
 8002e4c:	d07b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4e:	6863      	ldr	r3, [r4, #4]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	f000 80a7 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x23a>
 8002e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e5c:	f000 80a9 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x246>
 8002e60:	4b64      	ldr	r3, [pc, #400]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e70:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e72:	6863      	ldr	r3, [r4, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a9 	beq.w	8002fcc <HAL_RCC_OscConfig+0x260>
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fb4f 	bl	800151c <HAL_GetTick>
 8002e7e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e80:	4b5c      	ldr	r3, [pc, #368]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e88:	d168      	bne.n	8002f5c <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fb47 	bl	800151c <HAL_GetTick>
 8002e8e:	1bc0      	subs	r0, r0, r7
 8002e90:	2864      	cmp	r0, #100	; 0x64
 8002e92:	d9f5      	bls.n	8002e80 <HAL_RCC_OscConfig+0x114>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e94:	4b57      	ldr	r3, [pc, #348]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x114>
              return HAL_TIMEOUT;
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	e328      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ea2:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eae:	e7a4      	b.n	8002dfa <HAL_RCC_OscConfig+0x8e>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb0:	f7ff fe98 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	f040 8316 	bne.w	80034e6 <HAL_RCC_OscConfig+0x77a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eba:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	f042 0208 	orr.w	r2, r2, #8
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002eca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002ed6:	6a21      	ldr	r1, [r4, #32]
 8002ed8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	e7a2      	b.n	8002e26 <HAL_RCC_OscConfig+0xba>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ee0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ee2:	f7ff fe7f 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d09d      	beq.n	8002e26 <HAL_RCC_OscConfig+0xba>
              return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
 8002eec:	e302      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	f042 0208 	orr.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002efe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002f0a:	6a21      	ldr	r1, [r4, #32]
 8002f0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e793      	b.n	8002e3c <HAL_RCC_OscConfig+0xd0>
        __HAL_RCC_MSI_DISABLE();
 8002f14:	4a37      	ldr	r2, [pc, #220]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fafd 	bl	800151c <HAL_GetTick>
 8002f22:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f24:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f013 0f02 	tst.w	r3, #2
 8002f2c:	d086      	beq.n	8002e3c <HAL_RCC_OscConfig+0xd0>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f2e:	f7fe faf5 	bl	800151c <HAL_GetTick>
 8002f32:	1bc0      	subs	r0, r0, r7
 8002f34:	2802      	cmp	r0, #2
 8002f36:	d9f5      	bls.n	8002f24 <HAL_RCC_OscConfig+0x1b8>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f013 0f02 	tst.w	r3, #2
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x1b8>
              return HAL_TIMEOUT;
 8002f42:	2003      	movs	r0, #3
 8002f44:	e2d6      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f46:	2e03      	cmp	r6, #3
 8002f48:	d181      	bne.n	8002e4e <HAL_RCC_OscConfig+0xe2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f52:	d003      	beq.n	8002f5c <HAL_RCC_OscConfig+0x1f0>
 8002f54:	6863      	ldr	r3, [r4, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 82c7 	beq.w	80034ea <HAL_RCC_OscConfig+0x77e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	f013 0f02 	tst.w	r3, #2
 8002f62:	d060      	beq.n	8003026 <HAL_RCC_OscConfig+0x2ba>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f64:	2d04      	cmp	r5, #4
 8002f66:	d04d      	beq.n	8003004 <HAL_RCC_OscConfig+0x298>
 8002f68:	2d0c      	cmp	r5, #12
 8002f6a:	d049      	beq.n	8003000 <HAL_RCC_OscConfig+0x294>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f6c:	68e3      	ldr	r3, [r4, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8090 	beq.w	8003094 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_HSI_ENABLE();
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f7e:	f7fe facd 	bl	800151c <HAL_GetTick>
 8002f82:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002f8c:	d179      	bne.n	8003082 <HAL_RCC_OscConfig+0x316>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fac5 	bl	800151c <HAL_GetTick>
 8002f92:	1b40      	subs	r0, r0, r5
 8002f94:	2802      	cmp	r0, #2
 8002f96:	d9f5      	bls.n	8002f84 <HAL_RCC_OscConfig+0x218>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x218>
              return HAL_TIMEOUT;
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	e2a6      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa6:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002fa8:	6813      	ldr	r3, [r2, #0]
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	e75f      	b.n	8002e72 <HAL_RCC_OscConfig+0x106>
 8002fb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fb6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e752      	b.n	8002e72 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002fcc:	f7fe faa6 	bl	800151c <HAL_GetTick>
 8002fd0:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fda:	d0bf      	beq.n	8002f5c <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fa9e 	bl	800151c <HAL_GetTick>
 8002fe0:	1bc0      	subs	r0, r0, r7
 8002fe2:	2864      	cmp	r0, #100	; 0x64
 8002fe4:	d9f5      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x266>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe6:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x266>
              return HAL_TIMEOUT;
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	e27f      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	20000014 	.word	0x20000014
 8002ffc:	2000001c 	.word	0x2000001c
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003000:	2e02      	cmp	r6, #2
 8003002:	d1b3      	bne.n	8002f6c <HAL_RCC_OscConfig+0x200>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003004:	4ba9      	ldr	r3, [pc, #676]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800300c:	d003      	beq.n	8003016 <HAL_RCC_OscConfig+0x2aa>
 800300e:	68e3      	ldr	r3, [r4, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 826c 	beq.w	80034ee <HAL_RCC_OscConfig+0x782>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4aa5      	ldr	r2, [pc, #660]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003018:	6853      	ldr	r3, [r2, #4]
 800301a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800301e:	6921      	ldr	r1, [r4, #16]
 8003020:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003024:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	f013 0f08 	tst.w	r3, #8
 800302c:	d070      	beq.n	8003110 <HAL_RCC_OscConfig+0x3a4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302e:	6963      	ldr	r3, [r4, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d050      	beq.n	80030d6 <HAL_RCC_OscConfig+0x36a>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003034:	69a3      	ldr	r3, [r4, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d145      	bne.n	80030c6 <HAL_RCC_OscConfig+0x35a>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800303a:	4a9c      	ldr	r2, [pc, #624]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 800303c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003040:	f023 0310 	bic.w	r3, r3, #16
 8003044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8003048:	4a98      	ldr	r2, [pc, #608]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 800304a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003056:	f7fe fa61 	bl	800151c <HAL_GetTick>
 800305a:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800305c:	4b93      	ldr	r3, [pc, #588]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003062:	f013 0f02 	tst.w	r3, #2
 8003066:	d153      	bne.n	8003110 <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7fe fa58 	bl	800151c <HAL_GetTick>
 800306c:	1b40      	subs	r0, r0, r5
 800306e:	2807      	cmp	r0, #7
 8003070:	d9f4      	bls.n	800305c <HAL_RCC_OscConfig+0x2f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003072:	4b8e      	ldr	r3, [pc, #568]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003078:	f013 0f02 	tst.w	r3, #2
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x2f0>
            return HAL_TIMEOUT;
 800307e:	2003      	movs	r0, #3
 8003080:	e238      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4a8a      	ldr	r2, [pc, #552]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003084:	6853      	ldr	r3, [r2, #4]
 8003086:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800308a:	6921      	ldr	r1, [r4, #16]
 800308c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003090:	6053      	str	r3, [r2, #4]
 8003092:	e7c8      	b.n	8003026 <HAL_RCC_OscConfig+0x2ba>
        __HAL_RCC_HSI_DISABLE();
 8003094:	4a85      	ldr	r2, [pc, #532]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800309e:	f7fe fa3d 	bl	800151c <HAL_GetTick>
 80030a2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a4:	4b81      	ldr	r3, [pc, #516]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030ac:	d0bb      	beq.n	8003026 <HAL_RCC_OscConfig+0x2ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ae:	f7fe fa35 	bl	800151c <HAL_GetTick>
 80030b2:	1b40      	subs	r0, r0, r5
 80030b4:	2802      	cmp	r0, #2
 80030b6:	d9f5      	bls.n	80030a4 <HAL_RCC_OscConfig+0x338>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b8:	4b7c      	ldr	r3, [pc, #496]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x338>
              return HAL_TIMEOUT;
 80030c2:	2003      	movs	r0, #3
 80030c4:	e216      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80030c6:	4a79      	ldr	r2, [pc, #484]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80030c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80030cc:	f043 0310 	orr.w	r3, r3, #16
 80030d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80030d4:	e7b8      	b.n	8003048 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_LSI_DISABLE();
 80030d6:	4a75      	ldr	r2, [pc, #468]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80030d8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80030e4:	f7fe fa1a 	bl	800151c <HAL_GetTick>
 80030e8:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030ea:	4b70      	ldr	r3, [pc, #448]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80030ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f0:	f013 0f02 	tst.w	r3, #2
 80030f4:	d00c      	beq.n	8003110 <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe fa11 	bl	800151c <HAL_GetTick>
 80030fa:	1b40      	subs	r0, r0, r5
 80030fc:	2807      	cmp	r0, #7
 80030fe:	d9f4      	bls.n	80030ea <HAL_RCC_OscConfig+0x37e>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003100:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003106:	f013 0f02 	tst.w	r3, #2
 800310a:	d0ee      	beq.n	80030ea <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 800310c:	2003      	movs	r0, #3
 800310e:	e1f1      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	f013 0f04 	tst.w	r3, #4
 8003116:	f000 80f0 	beq.w	80032fa <HAL_RCC_OscConfig+0x58e>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800311a:	4b64      	ldr	r3, [pc, #400]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003122:	d124      	bne.n	800316e <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b61      	ldr	r3, [pc, #388]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003126:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003128:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800312c:	659a      	str	r2, [r3, #88]	; 0x58
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003138:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313a:	4b5d      	ldr	r3, [pc, #372]	; (80032b0 <HAL_RCC_OscConfig+0x544>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003142:	d016      	beq.n	8003172 <HAL_RCC_OscConfig+0x406>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003144:	68a3      	ldr	r3, [r4, #8]
 8003146:	f013 0f01 	tst.w	r3, #1
 800314a:	d033      	beq.n	80031b4 <HAL_RCC_OscConfig+0x448>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800314c:	f013 0f04 	tst.w	r3, #4
 8003150:	d028      	beq.n	80031a4 <HAL_RCC_OscConfig+0x438>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003152:	4b56      	ldr	r3, [pc, #344]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003154:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003158:	f042 0204 	orr.w	r2, r2, #4
 800315c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003160:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800316c:	e02f      	b.n	80031ce <HAL_RCC_OscConfig+0x462>
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2500      	movs	r5, #0
 8003170:	e7e3      	b.n	800313a <HAL_RCC_OscConfig+0x3ce>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003172:	4a4f      	ldr	r2, [pc, #316]	; (80032b0 <HAL_RCC_OscConfig+0x544>)
 8003174:	6813      	ldr	r3, [r2, #0]
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800317c:	f7fe f9ce 	bl	800151c <HAL_GetTick>
 8003180:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	4b4b      	ldr	r3, [pc, #300]	; (80032b0 <HAL_RCC_OscConfig+0x544>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f413 7f80 	tst.w	r3, #256	; 0x100
 800318a:	d1db      	bne.n	8003144 <HAL_RCC_OscConfig+0x3d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318c:	f7fe f9c6 	bl	800151c <HAL_GetTick>
 8003190:	1b80      	subs	r0, r0, r6
 8003192:	2802      	cmp	r0, #2
 8003194:	d9f5      	bls.n	8003182 <HAL_RCC_OscConfig+0x416>
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003196:	4b46      	ldr	r3, [pc, #280]	; (80032b0 <HAL_RCC_OscConfig+0x544>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800319e:	d1f0      	bne.n	8003182 <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 80031a0:	2003      	movs	r0, #3
 80031a2:	e1a7      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031a4:	4a41      	ldr	r2, [pc, #260]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80031a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b2:	e00c      	b.n	80031ce <HAL_RCC_OscConfig+0x462>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031b4:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80031b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ce:	68a3      	ldr	r3, [r4, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d053      	beq.n	800327c <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 80031d4:	f7fe f9a2 	bl	800151c <HAL_GetTick>
 80031d8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f013 0f02 	tst.w	r3, #2
 80031e4:	d10e      	bne.n	8003204 <HAL_RCC_OscConfig+0x498>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fe f999 	bl	800151c <HAL_GetTick>
 80031ea:	1b80      	subs	r0, r0, r6
 80031ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80031f0:	4298      	cmp	r0, r3
 80031f2:	d9f2      	bls.n	80031da <HAL_RCC_OscConfig+0x46e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f4:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f013 0f02 	tst.w	r3, #2
 80031fe:	d1ec      	bne.n	80031da <HAL_RCC_OscConfig+0x46e>
            return HAL_TIMEOUT;
 8003200:	2003      	movs	r0, #3
 8003202:	e177      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003204:	68a3      	ldr	r3, [r4, #8]
 8003206:	f013 0f80 	tst.w	r3, #128	; 0x80
 800320a:	d01b      	beq.n	8003244 <HAL_RCC_OscConfig+0x4d8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 800320e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003224:	d168      	bne.n	80032f8 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe f979 	bl	800151c <HAL_GetTick>
 800322a:	1b80      	subs	r0, r0, r6
 800322c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003230:	4298      	cmp	r0, r3
 8003232:	d9f2      	bls.n	800321a <HAL_RCC_OscConfig+0x4ae>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800323e:	d1ec      	bne.n	800321a <HAL_RCC_OscConfig+0x4ae>
              return HAL_TIMEOUT;
 8003240:	2003      	movs	r0, #3
 8003242:	e157      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003244:	4a19      	ldr	r2, [pc, #100]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003246:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800324a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800325c:	d04c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe f95d 	bl	800151c <HAL_GetTick>
 8003262:	1b80      	subs	r0, r0, r6
 8003264:	f241 3388 	movw	r3, #5000	; 0x1388
 8003268:	4298      	cmp	r0, r3
 800326a:	d9f2      	bls.n	8003252 <HAL_RCC_OscConfig+0x4e6>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003276:	d0ec      	beq.n	8003252 <HAL_RCC_OscConfig+0x4e6>
              return HAL_TIMEOUT;
 8003278:	2003      	movs	r0, #3
 800327a:	e13b      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
      tickstart = HAL_GetTick();
 800327c:	f7fe f94e 	bl	800151c <HAL_GetTick>
 8003280:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f013 0f02 	tst.w	r3, #2
 800328c:	d012      	beq.n	80032b4 <HAL_RCC_OscConfig+0x548>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fe f945 	bl	800151c <HAL_GetTick>
 8003292:	1b80      	subs	r0, r0, r6
 8003294:	f241 3388 	movw	r3, #5000	; 0x1388
 8003298:	4298      	cmp	r0, r3
 800329a:	d9f2      	bls.n	8003282 <HAL_RCC_OscConfig+0x516>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_OscConfig+0x540>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f013 0f02 	tst.w	r3, #2
 80032a6:	d0ec      	beq.n	8003282 <HAL_RCC_OscConfig+0x516>
            return HAL_TIMEOUT;
 80032a8:	2003      	movs	r0, #3
 80032aa:	e123      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80032b4:	4b97      	ldr	r3, [pc, #604]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032be:	d01b      	beq.n	80032f8 <HAL_RCC_OscConfig+0x58c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032c0:	4a94      	ldr	r2, [pc, #592]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80032c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032ce:	4b91      	ldr	r3, [pc, #580]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80032d8:	d00e      	beq.n	80032f8 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe f91f 	bl	800151c <HAL_GetTick>
 80032de:	1b80      	subs	r0, r0, r6
 80032e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80032e4:	4298      	cmp	r0, r3
 80032e6:	d9f2      	bls.n	80032ce <HAL_RCC_OscConfig+0x562>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032e8:	4b8a      	ldr	r3, [pc, #552]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80032f2:	d0ec      	beq.n	80032ce <HAL_RCC_OscConfig+0x562>
              return HAL_TIMEOUT;
 80032f4:	2003      	movs	r0, #3
 80032f6:	e0fd      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
    if (pwrclkchanged == SET)
 80032f8:	bb15      	cbnz	r5, 8003340 <HAL_RCC_OscConfig+0x5d4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	f013 0f20 	tst.w	r3, #32
 8003300:	d041      	beq.n	8003386 <HAL_RCC_OscConfig+0x61a>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003304:	b313      	cbz	r3, 800334c <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSI48_ENABLE();
 8003306:	4a83      	ldr	r2, [pc, #524]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003308:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003314:	f7fe f902 	bl	800151c <HAL_GetTick>
 8003318:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800331a:	4b7e      	ldr	r3, [pc, #504]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 800331c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003320:	f013 0f02 	tst.w	r3, #2
 8003324:	d12f      	bne.n	8003386 <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003326:	f7fe f8f9 	bl	800151c <HAL_GetTick>
 800332a:	1b40      	subs	r0, r0, r5
 800332c:	2802      	cmp	r0, #2
 800332e:	d9f4      	bls.n	800331a <HAL_RCC_OscConfig+0x5ae>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003330:	4b78      	ldr	r3, [pc, #480]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003336:	f013 0f02 	tst.w	r3, #2
 800333a:	d1ee      	bne.n	800331a <HAL_RCC_OscConfig+0x5ae>
            return HAL_TIMEOUT;
 800333c:	2003      	movs	r0, #3
 800333e:	e0d9      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003340:	4a74      	ldr	r2, [pc, #464]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003342:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
 800334a:	e7d6      	b.n	80032fa <HAL_RCC_OscConfig+0x58e>
      __HAL_RCC_HSI48_DISABLE();
 800334c:	4a71      	ldr	r2, [pc, #452]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 800334e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800335a:	f7fe f8df 	bl	800151c <HAL_GetTick>
 800335e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003360:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003366:	f013 0f02 	tst.w	r3, #2
 800336a:	d00c      	beq.n	8003386 <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800336c:	f7fe f8d6 	bl	800151c <HAL_GetTick>
 8003370:	1b40      	subs	r0, r0, r5
 8003372:	2802      	cmp	r0, #2
 8003374:	d9f4      	bls.n	8003360 <HAL_RCC_OscConfig+0x5f4>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003376:	4b67      	ldr	r3, [pc, #412]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800337c:	f013 0f02 	tst.w	r3, #2
 8003380:	d0ee      	beq.n	8003360 <HAL_RCC_OscConfig+0x5f4>
            return HAL_TIMEOUT;
 8003382:	2003      	movs	r0, #3
 8003384:	e0b6      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80b2 	beq.w	80034f2 <HAL_RCC_OscConfig+0x786>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800338e:	4a61      	ldr	r2, [pc, #388]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003390:	6892      	ldr	r2, [r2, #8]
 8003392:	f002 020c 	and.w	r2, r2, #12
 8003396:	2a0c      	cmp	r2, #12
 8003398:	d073      	beq.n	8003482 <HAL_RCC_OscConfig+0x716>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800339a:	2b02      	cmp	r3, #2
 800339c:	d018      	beq.n	80033d0 <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_PLL_DISABLE();
 800339e:	4a5d      	ldr	r2, [pc, #372]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033a8:	f7fe f8b8 	bl	800151c <HAL_GetTick>
 80033ac:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ae:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033b6:	d05d      	beq.n	8003474 <HAL_RCC_OscConfig+0x708>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe f8b0 	bl	800151c <HAL_GetTick>
 80033bc:	1b00      	subs	r0, r0, r4
 80033be:	2802      	cmp	r0, #2
 80033c0:	d9f5      	bls.n	80033ae <HAL_RCC_OscConfig+0x642>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c2:	4b54      	ldr	r3, [pc, #336]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x642>
              return HAL_TIMEOUT;
 80033cc:	2003      	movs	r0, #3
 80033ce:	e091      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_DISABLE();
 80033d0:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033da:	f7fe f89f 	bl	800151c <HAL_GetTick>
 80033de:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e0:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033e8:	d00b      	beq.n	8003402 <HAL_RCC_OscConfig+0x696>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe f897 	bl	800151c <HAL_GetTick>
 80033ee:	1b40      	subs	r0, r0, r5
 80033f0:	2802      	cmp	r0, #2
 80033f2:	d9f5      	bls.n	80033e0 <HAL_RCC_OscConfig+0x674>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f4:	4b47      	ldr	r3, [pc, #284]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x674>
              return HAL_TIMEOUT;
 80033fe:	2003      	movs	r0, #3
 8003400:	e078      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003402:	4a44      	ldr	r2, [pc, #272]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003404:	68d3      	ldr	r3, [r2, #12]
 8003406:	4944      	ldr	r1, [pc, #272]	; (8003518 <HAL_RCC_OscConfig+0x7ac>)
 8003408:	4019      	ands	r1, r3
 800340a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800340c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800340e:	3801      	subs	r0, #1
 8003410:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003414:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003416:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800341a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800341c:	0840      	lsrs	r0, r0, #1
 800341e:	3801      	subs	r0, #1
 8003420:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003424:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003426:	0840      	lsrs	r0, r0, #1
 8003428:	3801      	subs	r0, #1
 800342a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800342e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003430:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003434:	4319      	orrs	r1, r3
 8003436:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003438:	6813      	ldr	r3, [r2, #0]
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003440:	68d3      	ldr	r3, [r2, #12]
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003446:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003448:	f7fe f868 	bl	800151c <HAL_GetTick>
 800344c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003456:	d10b      	bne.n	8003470 <HAL_RCC_OscConfig+0x704>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe f860 	bl	800151c <HAL_GetTick>
 800345c:	1b00      	subs	r0, r0, r4
 800345e:	2802      	cmp	r0, #2
 8003460:	d9f5      	bls.n	800344e <HAL_RCC_OscConfig+0x6e2>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800346a:	d1f0      	bne.n	800344e <HAL_RCC_OscConfig+0x6e2>
              return HAL_TIMEOUT;
 800346c:	2003      	movs	r0, #3
 800346e:	e041      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 8003470:	2000      	movs	r0, #0
 8003472:	e03f      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003474:	4a27      	ldr	r2, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003476:	68d1      	ldr	r1, [r2, #12]
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <HAL_RCC_OscConfig+0x7b0>)
 800347a:	400b      	ands	r3, r1
 800347c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800347e:	2000      	movs	r0, #0
 8003480:	e038      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003482:	2b01      	cmp	r3, #1
 8003484:	d038      	beq.n	80034f8 <HAL_RCC_OscConfig+0x78c>
        pll_config = RCC->PLLCFGR;
 8003486:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_RCC_OscConfig+0x7a8>)
 8003488:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	f003 0103 	and.w	r1, r3, #3
 800348e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003490:	4291      	cmp	r1, r2
 8003492:	d133      	bne.n	80034fc <HAL_RCC_OscConfig+0x790>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800349a:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80034a0:	d12e      	bne.n	8003500 <HAL_RCC_OscConfig+0x794>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034a8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80034ac:	d12a      	bne.n	8003504 <HAL_RCC_OscConfig+0x798>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034b2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80034b8:	d126      	bne.n	8003508 <HAL_RCC_OscConfig+0x79c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ba:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80034be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034c0:	0852      	lsrs	r2, r2, #1
 80034c2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034c4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80034c8:	d120      	bne.n	800350c <HAL_RCC_OscConfig+0x7a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ca:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80034ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80034d0:	0852      	lsrs	r2, r2, #1
 80034d2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80034d8:	d11a      	bne.n	8003510 <HAL_RCC_OscConfig+0x7a4>
  return HAL_OK;
 80034da:	2000      	movs	r0, #0
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
    return HAL_ERROR;
 80034de:	2001      	movs	r0, #1
}
 80034e0:	4770      	bx	lr
        return HAL_ERROR;
 80034e2:	2001      	movs	r0, #1
 80034e4:	e006      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
            return HAL_ERROR;
 80034e6:	2001      	movs	r0, #1
 80034e8:	e004      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	e002      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 80034ee:	2001      	movs	r0, #1
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 80034f2:	2000      	movs	r0, #0
}
 80034f4:	b003      	add	sp, #12
 80034f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80034f8:	2001      	movs	r0, #1
 80034fa:	e7fb      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
          return HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
 80034fe:	e7f9      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
 8003500:	2001      	movs	r0, #1
 8003502:	e7f7      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
 8003504:	2001      	movs	r0, #1
 8003506:	e7f5      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
 8003508:	2001      	movs	r0, #1
 800350a:	e7f3      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
 800350c:	2001      	movs	r0, #1
 800350e:	e7f1      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
 8003510:	2001      	movs	r0, #1
 8003512:	e7ef      	b.n	80034f4 <HAL_RCC_OscConfig+0x788>
 8003514:	40021000 	.word	0x40021000
 8003518:	019f800c 	.word	0x019f800c
 800351c:	feeefffc 	.word	0xfeeefffc

08003520 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003520:	2800      	cmp	r0, #0
 8003522:	f000 80e9 	beq.w	80036f8 <HAL_RCC_ClockConfig+0x1d8>
{
 8003526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003528:	460d      	mov	r5, r1
 800352a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b76      	ldr	r3, [pc, #472]	; (8003708 <HAL_RCC_ClockConfig+0x1e8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	428b      	cmp	r3, r1
 8003536:	d20b      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003538:	4a73      	ldr	r2, [pc, #460]	; (8003708 <HAL_RCC_ClockConfig+0x1e8>)
 800353a:	6813      	ldr	r3, [r2, #0]
 800353c:	f023 030f 	bic.w	r3, r3, #15
 8003540:	430b      	orrs	r3, r1
 8003542:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	428b      	cmp	r3, r1
 800354c:	f040 80d6 	bne.w	80036fc <HAL_RCC_ClockConfig+0x1dc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	f013 0f02 	tst.w	r3, #2
 8003556:	d00c      	beq.n	8003572 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003558:	68a2      	ldr	r2, [r4, #8]
 800355a:	4b6c      	ldr	r3, [pc, #432]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003562:	429a      	cmp	r2, r3
 8003564:	d905      	bls.n	8003572 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003566:	4969      	ldr	r1, [pc, #420]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003568:	688b      	ldr	r3, [r1, #8]
 800356a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356e:	431a      	orrs	r2, r3
 8003570:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	f013 0f01 	tst.w	r3, #1
 8003578:	d076      	beq.n	8003668 <HAL_RCC_ClockConfig+0x148>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357a:	6863      	ldr	r3, [r4, #4]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d00d      	beq.n	800359c <HAL_RCC_ClockConfig+0x7c>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003580:	2b02      	cmp	r3, #2
 8003582:	d025      	beq.n	80035d0 <HAL_RCC_ClockConfig+0xb0>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003584:	2b00      	cmp	r3, #0
 8003586:	d13c      	bne.n	8003602 <HAL_RCC_ClockConfig+0xe2>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800358c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f013 0f02 	tst.w	r3, #2
 8003596:	d121      	bne.n	80035dc <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
 800359a:	e0a6      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ca>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359c:	4b5b      	ldr	r3, [pc, #364]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 80035a6:	2001      	movs	r0, #1
 80035a8:	e09f      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ca>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035aa:	f7ff fad5 	bl	8002b58 <RCC_GetSysClockFreqFromPLLSource>
      if (pllfreq > 80000000U)
 80035ae:	4b58      	ldr	r3, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	4298      	cmp	r0, r3
 80035b2:	d92d      	bls.n	8003610 <HAL_RCC_ClockConfig+0xf0>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80035bc:	d12a      	bne.n	8003614 <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035be:	4a53      	ldr	r2, [pc, #332]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 80035c0:	6893      	ldr	r3, [r2, #8]
 80035c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035cc:	2780      	movs	r7, #128	; 0x80
 80035ce:	e024      	b.n	800361a <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d0:	4b4e      	ldr	r3, [pc, #312]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035d8:	f000 8092 	beq.w	8003700 <HAL_RCC_ClockConfig+0x1e0>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035dc:	f7ff fb4c 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 80035e0:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	4298      	cmp	r0, r3
 80035e4:	d918      	bls.n	8003618 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80035ee:	d137      	bne.n	8003660 <HAL_RCC_ClockConfig+0x140>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035f0:	4a46      	ldr	r2, [pc, #280]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 80035f2:	6893      	ldr	r3, [r2, #8]
 80035f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035fe:	2780      	movs	r7, #128	; 0x80
 8003600:	e00b      	b.n	800361a <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003602:	4b42      	ldr	r3, [pc, #264]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800360a:	d1e7      	bne.n	80035dc <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e06c      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003610:	2700      	movs	r7, #0
 8003612:	e002      	b.n	800361a <HAL_RCC_ClockConfig+0xfa>
 8003614:	2700      	movs	r7, #0
 8003616:	e000      	b.n	800361a <HAL_RCC_ClockConfig+0xfa>
 8003618:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800361a:	4a3c      	ldr	r2, [pc, #240]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 800361c:	6893      	ldr	r3, [r2, #8]
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	6861      	ldr	r1, [r4, #4]
 8003624:	430b      	orrs	r3, r1
 8003626:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003628:	f7fd ff78 	bl	800151c <HAL_GetTick>
 800362c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	6862      	ldr	r2, [r4, #4]
 8003638:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800363c:	d012      	beq.n	8003664 <HAL_RCC_ClockConfig+0x144>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363e:	f7fd ff6d 	bl	800151c <HAL_GetTick>
 8003642:	1b80      	subs	r0, r0, r6
 8003644:	f241 3388 	movw	r3, #5000	; 0x1388
 8003648:	4298      	cmp	r0, r3
 800364a:	d9f0      	bls.n	800362e <HAL_RCC_ClockConfig+0x10e>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364c:	4b2f      	ldr	r3, [pc, #188]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	6862      	ldr	r2, [r4, #4]
 8003656:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800365a:	d0e8      	beq.n	800362e <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 800365c:	2003      	movs	r0, #3
 800365e:	e044      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003660:	2700      	movs	r7, #0
 8003662:	e7da      	b.n	800361a <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 8003664:	2f00      	cmp	r7, #0
 8003666:	d141      	bne.n	80036ec <HAL_RCC_ClockConfig+0x1cc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f013 0f02 	tst.w	r3, #2
 800366e:	d00c      	beq.n	800368a <HAL_RCC_ClockConfig+0x16a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003670:	68a2      	ldr	r2, [r4, #8]
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367a:	429a      	cmp	r2, r3
 800367c:	d205      	bcs.n	800368a <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367e:	4923      	ldr	r1, [pc, #140]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003680:	688b      	ldr	r3, [r1, #8]
 8003682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003686:	431a      	orrs	r2, r3
 8003688:	608a      	str	r2, [r1, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800368a:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <HAL_RCC_ClockConfig+0x1e8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	42ab      	cmp	r3, r5
 8003694:	d90a      	bls.n	80036ac <HAL_RCC_ClockConfig+0x18c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_RCC_ClockConfig+0x1e8>)
 8003698:	6813      	ldr	r3, [r2, #0]
 800369a:	f023 030f 	bic.w	r3, r3, #15
 800369e:	432b      	orrs	r3, r5
 80036a0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	42ab      	cmp	r3, r5
 80036aa:	d12b      	bne.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	f013 0f04 	tst.w	r3, #4
 80036b2:	d006      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b4:	4a15      	ldr	r2, [pc, #84]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 80036b6:	6893      	ldr	r3, [r2, #8]
 80036b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036bc:	68e1      	ldr	r1, [r4, #12]
 80036be:	430b      	orrs	r3, r1
 80036c0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	f013 0f08 	tst.w	r3, #8
 80036c8:	d007      	beq.n	80036da <HAL_RCC_ClockConfig+0x1ba>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4a10      	ldr	r2, [pc, #64]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 80036cc:	6893      	ldr	r3, [r2, #8]
 80036ce:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80036d2:	6921      	ldr	r1, [r4, #16]
 80036d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036d8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036da:	f7ff fb37 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_RCC_ClockConfig+0x1f4>)
 80036e0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_RCC_ClockConfig+0x1f8>)
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	f7fd fed3 	bl	8001490 <HAL_InitTick>
}
 80036ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 80036ee:	6893      	ldr	r3, [r2, #8]
 80036f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f4:	6093      	str	r3, [r2, #8]
 80036f6:	e7b7      	b.n	8003668 <HAL_RCC_ClockConfig+0x148>
    return HAL_ERROR;
 80036f8:	2001      	movs	r0, #1
}
 80036fa:	4770      	bx	lr
      return HAL_ERROR;
 80036fc:	2001      	movs	r0, #1
 80036fe:	e7f4      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ca>
          return HAL_ERROR;
 8003700:	2001      	movs	r0, #1
 8003702:	e7f2      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ca>
      return HAL_ERROR;
 8003704:	2001      	movs	r0, #1
 8003706:	e7f0      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ca>
 8003708:	40022000 	.word	0x40022000
 800370c:	40021000 	.word	0x40021000
 8003710:	04c4b400 	.word	0x04c4b400
 8003714:	20000014 	.word	0x20000014
 8003718:	2000001c 	.word	0x2000001c

0800371c <HAL_RCC_GetPCLK1Freq>:
{
 800371c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800371e:	f7ff fb15 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800372a:	4a03      	ldr	r2, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
}
 800372e:	40d8      	lsrs	r0, r3
 8003730:	bd08      	pop	{r3, pc}
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	08005a18 	.word	0x08005a18

0800373c <HAL_RCC_GetPCLK2Freq>:
{
 800373c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800373e:	f7ff fb05 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8003742:	4b04      	ldr	r3, [pc, #16]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800374a:	4a03      	ldr	r2, [pc, #12]	; (8003758 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
}
 800374e:	40d8      	lsrs	r0, r3
 8003750:	bd08      	pop	{r3, pc}
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	08005a18 	.word	0x08005a18

0800375c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4604      	mov	r4, r0
 8003760:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003762:	6803      	ldr	r3, [r0, #0]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d051      	beq.n	800380c <RCCEx_PLLSAI2_Config+0xb0>
 8003768:	2b03      	cmp	r3, #3
 800376a:	d056      	beq.n	800381a <RCCEx_PLLSAI2_Config+0xbe>
 800376c:	2b01      	cmp	r3, #1
 800376e:	d001      	beq.n	8003774 <RCCEx_PLLSAI2_Config+0x18>
 8003770:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003772:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003774:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f013 0f02 	tst.w	r3, #2
 800377c:	d054      	beq.n	8003828 <RCCEx_PLLSAI2_Config+0xcc>
    __HAL_RCC_PLLSAI2_DISABLE();
 800377e:	4a2d      	ldr	r2, [pc, #180]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 8003780:	6813      	ldr	r3, [r2, #0]
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003788:	f7fd fec8 	bl	800151c <HAL_GetTick>
 800378c:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003796:	d009      	beq.n	80037ac <RCCEx_PLLSAI2_Config+0x50>
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003798:	f7fd fec0 	bl	800151c <HAL_GetTick>
 800379c:	1b43      	subs	r3, r0, r5
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d9f5      	bls.n	800378e <RCCEx_PLLSAI2_Config+0x32>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80037aa:	d13f      	bne.n	800382c <RCCEx_PLLSAI2_Config+0xd0>
      if (Divider == DIVIDER_P_UPDATE)
 80037ac:	b986      	cbnz	r6, 80037d0 <RCCEx_PLLSAI2_Config+0x74>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037ae:	4821      	ldr	r0, [pc, #132]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 80037b0:	6943      	ldr	r3, [r0, #20]
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <RCCEx_PLLSAI2_Config+0xdc>)
 80037b4:	401a      	ands	r2, r3
 80037b6:	68a1      	ldr	r1, [r4, #8]
 80037b8:	68e3      	ldr	r3, [r4, #12]
 80037ba:	06db      	lsls	r3, r3, #27
 80037bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037c0:	6861      	ldr	r1, [r4, #4]
 80037c2:	3901      	subs	r1, #1
 80037c4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80037c8:	6821      	ldr	r1, [r4, #0]
 80037ca:	430b      	orrs	r3, r1
 80037cc:	431a      	orrs	r2, r3
 80037ce:	6142      	str	r2, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80037da:	f7fd fe9f 	bl	800151c <HAL_GetTick>
 80037de:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80037e8:	d109      	bne.n	80037fe <RCCEx_PLLSAI2_Config+0xa2>
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ea:	f7fd fe97 	bl	800151c <HAL_GetTick>
 80037ee:	1b43      	subs	r3, r0, r5
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d9f5      	bls.n	80037e0 <RCCEx_PLLSAI2_Config+0x84>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80037fc:	d018      	beq.n	8003830 <RCCEx_PLLSAI2_Config+0xd4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80037fe:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 8003800:	6953      	ldr	r3, [r2, #20]
 8003802:	6921      	ldr	r1, [r4, #16]
 8003804:	430b      	orrs	r3, r1
 8003806:	6153      	str	r3, [r2, #20]
 8003808:	2000      	movs	r0, #0
 800380a:	e7b2      	b.n	8003772 <RCCEx_PLLSAI2_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003814:	d1b3      	bne.n	800377e <RCCEx_PLLSAI2_Config+0x22>
        status = HAL_ERROR;
 8003816:	2001      	movs	r0, #1
 8003818:	e7ab      	b.n	8003772 <RCCEx_PLLSAI2_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <RCCEx_PLLSAI2_Config+0xd8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8003822:	d1ac      	bne.n	800377e <RCCEx_PLLSAI2_Config+0x22>
        status = HAL_ERROR;
 8003824:	2001      	movs	r0, #1
 8003826:	e7a4      	b.n	8003772 <RCCEx_PLLSAI2_Config+0x16>
        status = HAL_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	e7a2      	b.n	8003772 <RCCEx_PLLSAI2_Config+0x16>
          status = HAL_TIMEOUT;
 800382c:	2003      	movs	r0, #3
 800382e:	e7a0      	b.n	8003772 <RCCEx_PLLSAI2_Config+0x16>
            status = HAL_TIMEOUT;
 8003830:	2003      	movs	r0, #3
 8003832:	e79e      	b.n	8003772 <RCCEx_PLLSAI2_Config+0x16>
 8003834:	40021000 	.word	0x40021000
 8003838:	07ff800c 	.word	0x07ff800c

0800383c <RCCEx_PLLSAI1_Config>:
{
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4604      	mov	r4, r0
 8003840:	460e      	mov	r6, r1
  switch (pPllSai1->PLLSAI1Source)
 8003842:	6803      	ldr	r3, [r0, #0]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d052      	beq.n	80038ee <RCCEx_PLLSAI1_Config+0xb2>
 8003848:	2b03      	cmp	r3, #3
 800384a:	d057      	beq.n	80038fc <RCCEx_PLLSAI1_Config+0xc0>
 800384c:	2b01      	cmp	r3, #1
 800384e:	d001      	beq.n	8003854 <RCCEx_PLLSAI1_Config+0x18>
 8003850:	2001      	movs	r0, #1
}
 8003852:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003854:	4b45      	ldr	r3, [pc, #276]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f013 0f02 	tst.w	r3, #2
 800385c:	d07f      	beq.n	800395e <RCCEx_PLLSAI1_Config+0x122>
    __HAL_RCC_PLLSAI1_DISABLE();
 800385e:	4a43      	ldr	r2, [pc, #268]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 8003860:	6813      	ldr	r3, [r2, #0]
 8003862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003866:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003868:	f7fd fe58 	bl	800151c <HAL_GetTick>
 800386c:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800386e:	4b3f      	ldr	r3, [pc, #252]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003876:	d009      	beq.n	800388c <RCCEx_PLLSAI1_Config+0x50>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003878:	f7fd fe50 	bl	800151c <HAL_GetTick>
 800387c:	1b43      	subs	r3, r0, r5
 800387e:	2b02      	cmp	r3, #2
 8003880:	d9f5      	bls.n	800386e <RCCEx_PLLSAI1_Config+0x32>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800388a:	d16a      	bne.n	8003962 <RCCEx_PLLSAI1_Config+0x126>
      if (Divider == DIVIDER_P_UPDATE)
 800388c:	2e00      	cmp	r6, #0
 800388e:	d13c      	bne.n	800390a <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003890:	4836      	ldr	r0, [pc, #216]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 8003892:	6903      	ldr	r3, [r0, #16]
 8003894:	4a36      	ldr	r2, [pc, #216]	; (8003970 <RCCEx_PLLSAI1_Config+0x134>)
 8003896:	401a      	ands	r2, r3
 8003898:	68a1      	ldr	r1, [r4, #8]
 800389a:	68e3      	ldr	r3, [r4, #12]
 800389c:	06db      	lsls	r3, r3, #27
 800389e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038a2:	6861      	ldr	r1, [r4, #4]
 80038a4:	3901      	subs	r1, #1
 80038a6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80038aa:	6821      	ldr	r1, [r4, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	431a      	orrs	r2, r3
 80038b0:	6102      	str	r2, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80038b2:	4a2e      	ldr	r2, [pc, #184]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 80038b4:	6813      	ldr	r3, [r2, #0]
 80038b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80038bc:	f7fd fe2e 	bl	800151c <HAL_GetTick>
 80038c0:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038c2:	4b2a      	ldr	r3, [pc, #168]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80038ca:	d109      	bne.n	80038e0 <RCCEx_PLLSAI1_Config+0xa4>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038cc:	f7fd fe26 	bl	800151c <HAL_GetTick>
 80038d0:	1b43      	subs	r3, r0, r5
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d9f5      	bls.n	80038c2 <RCCEx_PLLSAI1_Config+0x86>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80038de:	d042      	beq.n	8003966 <RCCEx_PLLSAI1_Config+0x12a>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 80038e2:	6913      	ldr	r3, [r2, #16]
 80038e4:	69a1      	ldr	r1, [r4, #24]
 80038e6:	430b      	orrs	r3, r1
 80038e8:	6113      	str	r3, [r2, #16]
 80038ea:	2000      	movs	r0, #0
 80038ec:	e7b1      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038ee:	4b1f      	ldr	r3, [pc, #124]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038f6:	d1b2      	bne.n	800385e <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7aa      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8003904:	d1ab      	bne.n	800385e <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 8003906:	2001      	movs	r0, #1
 8003908:	e7a3      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x16>
      else if (Divider == DIVIDER_Q_UPDATE)
 800390a:	2e01      	cmp	r6, #1
 800390c:	d013      	beq.n	8003936 <RCCEx_PLLSAI1_Config+0xfa>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800390e:	4817      	ldr	r0, [pc, #92]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 8003910:	6903      	ldr	r3, [r0, #16]
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <RCCEx_PLLSAI1_Config+0x138>)
 8003914:	401a      	ands	r2, r3
 8003916:	68a1      	ldr	r1, [r4, #8]
 8003918:	6963      	ldr	r3, [r4, #20]
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	3b01      	subs	r3, #1
 800391e:	065b      	lsls	r3, r3, #25
 8003920:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003924:	6861      	ldr	r1, [r4, #4]
 8003926:	3901      	subs	r1, #1
 8003928:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800392c:	6821      	ldr	r1, [r4, #0]
 800392e:	430b      	orrs	r3, r1
 8003930:	431a      	orrs	r2, r3
 8003932:	6102      	str	r2, [r0, #16]
 8003934:	e7bd      	b.n	80038b2 <RCCEx_PLLSAI1_Config+0x76>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003936:	480d      	ldr	r0, [pc, #52]	; (800396c <RCCEx_PLLSAI1_Config+0x130>)
 8003938:	6903      	ldr	r3, [r0, #16]
 800393a:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <RCCEx_PLLSAI1_Config+0x13c>)
 800393c:	401a      	ands	r2, r3
 800393e:	68a1      	ldr	r1, [r4, #8]
 8003940:	6923      	ldr	r3, [r4, #16]
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	3b01      	subs	r3, #1
 8003946:	055b      	lsls	r3, r3, #21
 8003948:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800394c:	6861      	ldr	r1, [r4, #4]
 800394e:	3901      	subs	r1, #1
 8003950:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003954:	6821      	ldr	r1, [r4, #0]
 8003956:	430b      	orrs	r3, r1
 8003958:	431a      	orrs	r2, r3
 800395a:	6102      	str	r2, [r0, #16]
 800395c:	e7a9      	b.n	80038b2 <RCCEx_PLLSAI1_Config+0x76>
        status = HAL_ERROR;
 800395e:	2001      	movs	r0, #1
 8003960:	e777      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x16>
          status = HAL_TIMEOUT;
 8003962:	2003      	movs	r0, #3
 8003964:	e775      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x16>
            status = HAL_TIMEOUT;
 8003966:	2003      	movs	r0, #3
 8003968:	e773      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x16>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	07ff800c 	.word	0x07ff800c
 8003974:	f9ff800c 	.word	0xf9ff800c
 8003978:	ff9f800c 	.word	0xff9f800c

0800397c <HAL_RCCEx_PeriphCLKConfig>:
{
 800397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003984:	6803      	ldr	r3, [r0, #0]
 8003986:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800398a:	d034      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 800398c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d01f      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003992:	d80b      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x30>
 8003994:	b323      	cbz	r3, 80039e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d105      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800399a:	2100      	movs	r1, #0
 800399c:	3020      	adds	r0, #32
 800399e:	f7ff fedd 	bl	800375c <RCCEx_PLLSAI2_Config>
 80039a2:	4606      	mov	r6, r0
        break;
 80039a4:	e021      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->Sai1ClockSelection)
 80039a6:	2701      	movs	r7, #1
 80039a8:	463e      	mov	r6, r7
 80039aa:	e026      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80039ac:	2b60      	cmp	r3, #96	; 0x60
 80039ae:	d020      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039b0:	2b80      	cmp	r3, #128	; 0x80
 80039b2:	d10b      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80039b4:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b6:	4a69      	ldr	r2, [pc, #420]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039b8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80039bc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80039c0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80039c2:	430b      	orrs	r3, r1
 80039c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c8:	2700      	movs	r7, #0
 80039ca:	e016      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 80039cc:	2701      	movs	r7, #1
 80039ce:	463e      	mov	r6, r7
 80039d0:	e013      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d2:	4a62      	ldr	r2, [pc, #392]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039d4:	68d3      	ldr	r3, [r2, #12]
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039dc:	2600      	movs	r6, #0
 80039de:	e7ea      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039e0:	2100      	movs	r1, #0
 80039e2:	3004      	adds	r0, #4
 80039e4:	f7ff ff2a 	bl	800383c <RCCEx_PLLSAI1_Config>
 80039e8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80039ea:	2e00      	cmp	r6, #0
 80039ec:	d0e3      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80039ee:	4637      	mov	r7, r6
 80039f0:	e003      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 80039f2:	2600      	movs	r6, #0
 80039f4:	e7df      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f6:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f8:	463e      	mov	r6, r7
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003a00:	d033      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch (PeriphClkInit->Sai2ClockSelection)
 8003a02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	d022      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a0a:	d80d      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003a0c:	b333      	cbz	r3, 8003a5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	d106      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a14:	2100      	movs	r1, #0
 8003a16:	f104 0020 	add.w	r0, r4, #32
 8003a1a:	f7ff fe9f 	bl	800375c <RCCEx_PLLSAI2_Config>
 8003a1e:	4606      	mov	r6, r0
        break;
 8003a20:	e008      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai2ClockSelection)
 8003a22:	2701      	movs	r7, #1
 8003a24:	463e      	mov	r6, r7
 8003a26:	e020      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a32:	d10a      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xce>
    if (ret == HAL_OK)
 8003a34:	b9c6      	cbnz	r6, 8003a68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a36:	4a49      	ldr	r2, [pc, #292]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a38:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003a3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a40:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003a42:	430b      	orrs	r3, r1
 8003a44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a48:	e00f      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch (PeriphClkInit->Sai2ClockSelection)
 8003a4a:	2701      	movs	r7, #1
 8003a4c:	463e      	mov	r6, r7
 8003a4e:	e00c      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a50:	4a42      	ldr	r2, [pc, #264]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a52:	68d3      	ldr	r3, [r2, #12]
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	60d3      	str	r3, [r2, #12]
        break;
 8003a5a:	e7eb      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	1d20      	adds	r0, r4, #4
 8003a60:	f7ff feec 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003a64:	4606      	mov	r6, r0
        break;
 8003a66:	e7e5      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003a68:	4637      	mov	r7, r6
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a70:	d07d      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a72:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a7a:	d14f      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7c:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a84:	659a      	str	r2, [r3, #88]	; 0x58
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003a90:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a94:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a9e:	f7fd fd3d 	bl	800151c <HAL_GetTick>
 8003aa2:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x146>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aae:	f7fd fd35 	bl	800151c <HAL_GetTick>
 8003ab2:	1b40      	subs	r0, r0, r5
 8003ab4:	2802      	cmp	r0, #2
 8003ab6:	d9f5      	bls.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x128>
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab8:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ac0:	d048      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    if (ret == HAL_OK)
 8003ac2:	2e00      	cmp	r6, #0
 8003ac4:	d14e      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003acc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ad0:	d016      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003ad2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d012      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x184>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ada:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003adc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ae4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003ae8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003aec:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003af0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003af4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003af8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b00:	f013 0f01 	tst.w	r3, #1
 8003b04:	d10d      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b08:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b10:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003b14:	430b      	orrs	r3, r1
 8003b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b1a:	e024      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    FlagStatus       pwrclkchanged = RESET;
 8003b1c:	f04f 0800 	mov.w	r8, #0
 8003b20:	e7b8      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x118>
        tickstart = HAL_GetTick();
 8003b22:	f7fd fcfb 	bl	800151c <HAL_GetTick>
 8003b26:	4605      	mov	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f013 0f02 	tst.w	r3, #2
 8003b32:	d1e8      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fd fcf2 	bl	800151c <HAL_GetTick>
 8003b38:	1b40      	subs	r0, r0, r5
 8003b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b3e:	4298      	cmp	r0, r3
 8003b40:	d9f2      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f013 0f02 	tst.w	r3, #2
 8003b4c:	d1db      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
              ret = HAL_TIMEOUT;
 8003b4e:	2703      	movs	r7, #3
 8003b50:	463e      	mov	r6, r7
 8003b52:	e008      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
          ret = HAL_TIMEOUT;
 8003b54:	2703      	movs	r7, #3
 8003b56:	463e      	mov	r6, r7
 8003b58:	e005      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40007000 	.word	0x40007000
 8003b64:	4637      	mov	r7, r6
    if (pwrclkchanged == SET)
 8003b66:	f1b8 0f00 	cmp.w	r8, #0
 8003b6a:	f040 8151 	bne.w	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	f013 0f01 	tst.w	r3, #1
 8003b74:	d008      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b76:	4ab8      	ldr	r2, [pc, #736]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003b78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003b7c:	f023 0303 	bic.w	r3, r3, #3
 8003b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b82:	430b      	orrs	r3, r1
 8003b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	f013 0f02 	tst.w	r3, #2
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b90:	4ab1      	ldr	r2, [pc, #708]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003b92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003b96:	f023 030c 	bic.w	r3, r3, #12
 8003b9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	f013 0f04 	tst.w	r3, #4
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x240>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003baa:	4aab      	ldr	r2, [pc, #684]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003bac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003bb0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003bb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	f013 0f08 	tst.w	r3, #8
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bc4:	4aa4      	ldr	r2, [pc, #656]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003bc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003bca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	f013 0f10 	tst.w	r3, #16
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x274>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bde:	4a9e      	ldr	r2, [pc, #632]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003be0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003bea:	430b      	orrs	r3, r1
 8003bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f013 0f20 	tst.w	r3, #32
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bf8:	4a97      	ldr	r2, [pc, #604]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003bfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003bfe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c02:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c04:	430b      	orrs	r3, r1
 8003c06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c12:	4a91      	ldr	r2, [pc, #580]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003c14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c18:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003c1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c2c:	4a8a      	ldr	r2, [pc, #552]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003c2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c32:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c36:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c46:	4a84      	ldr	r2, [pc, #528]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003c48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c4c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003c52:	430b      	orrs	r3, r1
 8003c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c5e:	d00c      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    switch (PeriphClkInit->FdcanClockSelection)
 8003c60:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003c62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c66:	f000 80d9 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6e:	f000 80e5 	beq.w	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80d7 	beq.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003c78:	2701      	movs	r7, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c82:	4a75      	ldr	r2, [pc, #468]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003c84:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c8c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c9a:	d008      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x332>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003c9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ca2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ca6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb6:	4a68      	ldr	r2, [pc, #416]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003cb8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cbc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003cc0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x366>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cd0:	4a61      	ldr	r2, [pc, #388]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003cd2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003ce8:	d011      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x392>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003cec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cf0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003cf4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cfc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d02:	f000 80a3 	beq.w	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d0a:	f000 80a7 	beq.w	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003d14:	d01f      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d16:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1c:	f000 80a7 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003d20:	4a4d      	ldr	r2, [pc, #308]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003d22:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8003d26:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003d30:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d38:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d3c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d42:	f000 809c 	beq.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d4a:	f000 80a1 	beq.w	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d52:	f000 80a3 	beq.w	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x520>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003d5c:	d011      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5e:	4a3e      	ldr	r2, [pc, #248]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003d60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d64:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003d68:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d70:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d76:	f000 8097 	beq.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d7e:	f000 8098 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x536>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003d88:	d00f      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d8a:	4a33      	ldr	r2, [pc, #204]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003d8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d90:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003d94:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d9e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da6:	f000 808d 	beq.w	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003db2:	4a29      	ldr	r2, [pc, #164]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003db4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x466>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003dce:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003dd0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003dd4:	f023 0318 	bic.w	r3, r3, #24
 8003dd8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003de8:	d00e      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003dec:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003df0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003df4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003dfe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e06:	d066      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
}
 8003e08:	4638      	mov	r0, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003e12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1a:	e6a8      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1c:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003e1e:	68d3      	ldr	r3, [r2, #12]
 8003e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e24:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8003e26:	b97e      	cbnz	r6, 8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e28:	4a0b      	ldr	r2, [pc, #44]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003e2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e2e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003e32:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003e34:	430b      	orrs	r3, r1
 8003e36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003e3a:	e71e      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	1d20      	adds	r0, r4, #4
 8003e40:	f7ff fcfc 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003e44:	4606      	mov	r6, r0
        break;
 8003e46:	e7ee      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003e48:	4637      	mov	r7, r6
 8003e4a:	e716      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4c:	68d3      	ldr	r3, [r2, #12]
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
 8003e54:	e75b      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	1d20      	adds	r0, r4, #4
 8003e60:	f7ff fcec 	bl	800383c <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 8003e64:	2800      	cmp	r0, #0
 8003e66:	f43f af52 	beq.w	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x392>
          status = ret;
 8003e6a:	4607      	mov	r7, r0
 8003e6c:	e74f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x392>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003e70:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003e7c:	e75e      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e7e:	2101      	movs	r1, #1
 8003e80:	1d20      	adds	r0, r4, #4
 8003e82:	f7ff fcdb 	bl	800383c <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8003e86:	2800      	cmp	r0, #0
 8003e88:	f43f af65 	beq.w	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        status = ret;
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	e762      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e90:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003e92:	68d3      	ldr	r3, [r2, #12]
 8003e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e98:	60d3      	str	r3, [r2, #12]
 8003e9a:	e75c      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e9c:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003e9e:	68d3      	ldr	r3, [r2, #12]
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	60d3      	str	r3, [r2, #12]
 8003ea6:	e756      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	68d3      	ldr	r3, [r2, #12]
 8003eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eae:	60d3      	str	r3, [r2, #12]
 8003eb0:	e767      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	1d20      	adds	r0, r4, #4
 8003eb6:	f7ff fcc1 	bl	800383c <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	f43f af61 	beq.w	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
        status = ret;
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	e75e      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	1d20      	adds	r0, r4, #4
 8003ec8:	f7ff fcb8 	bl	800383c <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	f43f af6c 	beq.w	8003daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
        status = ret;
 8003ed2:	4607      	mov	r7, r0
 8003ed4:	e769      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed6:	68d3      	ldr	r3, [r2, #12]
 8003ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003edc:	60d3      	str	r3, [r2, #12]
 8003ede:	e793      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003ee0:	40021000 	.word	0x40021000

08003ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	4605      	mov	r5, r0
 8003eec:	4688      	mov	r8, r1
 8003eee:	4617      	mov	r7, r2
 8003ef0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ef2:	f7fd fb13 	bl	800151c <HAL_GetTick>
 8003ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ef8:	1a1b      	subs	r3, r3, r0
 8003efa:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003efe:	f7fd fb0d 	bl	800151c <HAL_GetTick>
 8003f02:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f04:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003f0c:	fb09 f303 	mul.w	r3, r9, r3
 8003f10:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	689c      	ldr	r4, [r3, #8]
 8003f16:	ea38 0404 	bics.w	r4, r8, r4
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	42bb      	cmp	r3, r7
 8003f22:	d040      	beq.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f24:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003f28:	d0f3      	beq.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f2a:	f7fd faf7 	bl	800151c <HAL_GetTick>
 8003f2e:	eba0 000a 	sub.w	r0, r0, sl
 8003f32:	4548      	cmp	r0, r9
 8003f34:	d20a      	bcs.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x68>
 8003f36:	f1b9 0f00 	cmp.w	r9, #0
 8003f3a:	d007      	beq.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f3c:	9a01      	ldr	r2, [sp, #4]
 8003f3e:	b102      	cbz	r2, 8003f42 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8003f40:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003f42:	9b01      	ldr	r3, [sp, #4]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	4691      	mov	r9, r2
 8003f4a:	e7e2      	b.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f4c:	682a      	ldr	r2, [r5, #0]
 8003f4e:	6853      	ldr	r3, [r2, #4]
 8003f50:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003f54:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f56:	686b      	ldr	r3, [r5, #4]
 8003f58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5c:	d00b      	beq.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f64:	d014      	beq.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003f72:	2003      	movs	r0, #3
 8003f74:	e018      	b.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f76:	68ab      	ldr	r3, [r5, #8]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	d002      	beq.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d1ec      	bne.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8003f84:	682a      	ldr	r2, [r5, #0]
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e7e6      	b.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8003f90:	682a      	ldr	r2, [r5, #0]
 8003f92:	6813      	ldr	r3, [r2, #0]
 8003f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	682a      	ldr	r2, [r5, #0]
 8003f9c:	6813      	ldr	r3, [r2, #0]
 8003f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e7df      	b.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8003fa6:	2000      	movs	r0, #0
}
 8003fa8:	b002      	add	sp, #8
 8003faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000014 	.word	0x20000014

08003fb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	4606      	mov	r6, r0
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	4615      	mov	r5, r2
 8003fc0:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fc8:	f7fd faa8 	bl	800151c <HAL_GetTick>
 8003fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fce:	1a1b      	subs	r3, r3, r0
 8003fd0:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8003fd4:	f7fd faa2 	bl	800151c <HAL_GetTick>
 8003fd8:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fda:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fe6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003fea:	0d1b      	lsrs	r3, r3, #20
 8003fec:	fb08 f303 	mul.w	r3, r8, r3
 8003ff0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ff2:	e002      	b.n	8003ffa <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003ff8:	d112      	bne.n	8004020 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8003ffa:	6833      	ldr	r3, [r6, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	ea03 0c04 	and.w	ip, r3, r4
 8004002:	45ac      	cmp	ip, r5
 8004004:	d04a      	beq.n	800409c <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004006:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800400a:	d1f3      	bne.n	8003ff4 <SPI_WaitFifoStateUntilTimeout+0x40>
 800400c:	2d00      	cmp	r5, #0
 800400e:	d1f1      	bne.n	8003ff4 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8004010:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800401a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800401e:	e7e9      	b.n	8003ff4 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004020:	f7fd fa7c 	bl	800151c <HAL_GetTick>
 8004024:	eba0 0009 	sub.w	r0, r0, r9
 8004028:	4540      	cmp	r0, r8
 800402a:	d20a      	bcs.n	8004042 <SPI_WaitFifoStateUntilTimeout+0x8e>
 800402c:	f1b8 0f00 	cmp.w	r8, #0
 8004030:	d007      	beq.n	8004042 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004032:	9a01      	ldr	r2, [sp, #4]
 8004034:	b102      	cbz	r2, 8004038 <SPI_WaitFifoStateUntilTimeout+0x84>
 8004036:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8004038:	9b01      	ldr	r3, [sp, #4]
 800403a:	3b01      	subs	r3, #1
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	4690      	mov	r8, r2
 8004040:	e7db      	b.n	8003ffa <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004042:	6832      	ldr	r2, [r6, #0]
 8004044:	6853      	ldr	r3, [r2, #4]
 8004046:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800404a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404c:	6873      	ldr	r3, [r6, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004052:	d00b      	beq.n	800406c <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004054:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405a:	d014      	beq.n	8004086 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 800405c:	2301      	movs	r3, #1
 800405e:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004062:	2300      	movs	r3, #0
 8004064:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004068:	2003      	movs	r0, #3
 800406a:	e018      	b.n	800409e <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406c:	68b3      	ldr	r3, [r6, #8]
 800406e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004072:	d002      	beq.n	800407a <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004078:	d1ec      	bne.n	8004054 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 800407a:	6832      	ldr	r2, [r6, #0]
 800407c:	6813      	ldr	r3, [r2, #0]
 800407e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	e7e6      	b.n	8004054 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8004086:	6832      	ldr	r2, [r6, #0]
 8004088:	6813      	ldr	r3, [r2, #0]
 800408a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	6832      	ldr	r2, [r6, #0]
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e7df      	b.n	800405c <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 800409c:	2000      	movs	r0, #0
}
 800409e:	b002      	add	sp, #8
 80040a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a4:	20000014 	.word	0x20000014

080040a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	4604      	mov	r4, r0
 80040ae:	460d      	mov	r5, r1
 80040b0:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b2:	9200      	str	r2, [sp, #0]
 80040b4:	460b      	mov	r3, r1
 80040b6:	2200      	movs	r2, #0
 80040b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80040bc:	f7ff ff7a 	bl	8003fb4 <SPI_WaitFifoStateUntilTimeout>
 80040c0:	b9b0      	cbnz	r0, 80040f0 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040c2:	9600      	str	r6, [sp, #0]
 80040c4:	462b      	mov	r3, r5
 80040c6:	2200      	movs	r2, #0
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7ff ff0a 	bl	8003ee4 <SPI_WaitFlagStateUntilTimeout>
 80040d0:	b9a8      	cbnz	r0, 80040fe <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040d2:	9600      	str	r6, [sp, #0]
 80040d4:	462b      	mov	r3, r5
 80040d6:	2200      	movs	r2, #0
 80040d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040dc:	4620      	mov	r0, r4
 80040de:	f7ff ff69 	bl	8003fb4 <SPI_WaitFifoStateUntilTimeout>
 80040e2:	b150      	cbz	r0, 80040fa <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80040e6:	f043 0320 	orr.w	r3, r3, #32
 80040ea:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80040ec:	2003      	movs	r0, #3
 80040ee:	e004      	b.n	80040fa <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80040f2:	f043 0320 	orr.w	r3, r3, #32
 80040f6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80040f8:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80040fa:	b002      	add	sp, #8
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004106:	2003      	movs	r0, #3
 8004108:	e7f7      	b.n	80040fa <SPI_EndRxTxTransaction+0x52>

0800410a <HAL_SPI_Init>:
  if (hspi == NULL)
 800410a:	2800      	cmp	r0, #0
 800410c:	d06a      	beq.n	80041e4 <HAL_SPI_Init+0xda>
{
 800410e:	b510      	push	{r4, lr}
 8004110:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004112:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004114:	b933      	cbnz	r3, 8004124 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004116:	6843      	ldr	r3, [r0, #4]
 8004118:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411c:	d005      	beq.n	800412a <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800411e:	2300      	movs	r3, #0
 8004120:	61c3      	str	r3, [r0, #28]
 8004122:	e002      	b.n	800412a <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004124:	2300      	movs	r3, #0
 8004126:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004128:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800412e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04d      	beq.n	80041d2 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004136:	2302      	movs	r3, #2
 8004138:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004144:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800414c:	d947      	bls.n	80041de <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800414e:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004150:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004154:	d004      	beq.n	8004160 <HAL_SPI_Init+0x56>
 8004156:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800415a:	d001      	beq.n	8004160 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415c:	2300      	movs	r3, #0
 800415e:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004160:	6863      	ldr	r3, [r4, #4]
 8004162:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004166:	68a1      	ldr	r1, [r4, #8]
 8004168:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800416c:	430b      	orrs	r3, r1
 800416e:	6921      	ldr	r1, [r4, #16]
 8004170:	f001 0102 	and.w	r1, r1, #2
 8004174:	430b      	orrs	r3, r1
 8004176:	6961      	ldr	r1, [r4, #20]
 8004178:	f001 0101 	and.w	r1, r1, #1
 800417c:	430b      	orrs	r3, r1
 800417e:	69a1      	ldr	r1, [r4, #24]
 8004180:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004184:	430b      	orrs	r3, r1
 8004186:	69e1      	ldr	r1, [r4, #28]
 8004188:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800418c:	430b      	orrs	r3, r1
 800418e:	6a21      	ldr	r1, [r4, #32]
 8004190:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004194:	430b      	orrs	r3, r1
 8004196:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004198:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	430b      	orrs	r3, r1
 80041a0:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041a2:	8b63      	ldrh	r3, [r4, #26]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80041aa:	f001 0110 	and.w	r1, r1, #16
 80041ae:	430b      	orrs	r3, r1
 80041b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041b2:	f001 0108 	and.w	r1, r1, #8
 80041b6:	430b      	orrs	r3, r1
 80041b8:	68e1      	ldr	r1, [r4, #12]
 80041ba:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80041be:	430b      	orrs	r3, r1
 80041c0:	6821      	ldr	r1, [r4, #0]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041c6:	2000      	movs	r0, #0
 80041c8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80041d0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80041d2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7fc ffba 	bl	8001150 <HAL_SPI_MspInit>
 80041dc:	e7ab      	b.n	8004136 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041e2:	e7b5      	b.n	8004150 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80041e4:	2001      	movs	r0, #1
}
 80041e6:	4770      	bx	lr

080041e8 <HAL_SPI_Transmit>:
{
 80041e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041ec:	b083      	sub	sp, #12
 80041ee:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80041f0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	f000 80f6 	beq.w	80043e6 <HAL_SPI_Transmit+0x1fe>
 80041fa:	4604      	mov	r4, r0
 80041fc:	4688      	mov	r8, r1
 80041fe:	4691      	mov	r9, r2
 8004200:	2301      	movs	r3, #1
 8004202:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004206:	f7fd f989 	bl	800151c <HAL_GetTick>
 800420a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800420c:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8004210:	b2f6      	uxtb	r6, r6
 8004212:	2e01      	cmp	r6, #1
 8004214:	f040 80d4 	bne.w	80043c0 <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8004218:	f1b8 0f00 	cmp.w	r8, #0
 800421c:	f000 80d1 	beq.w	80043c2 <HAL_SPI_Transmit+0x1da>
 8004220:	f1b9 0f00 	cmp.w	r9, #0
 8004224:	f000 80cd 	beq.w	80043c2 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004228:	2303      	movs	r3, #3
 800422a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800422e:	2300      	movs	r3, #0
 8004230:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004232:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004236:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800423a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800423e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004240:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004244:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004248:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800424a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424c:	68a3      	ldr	r3, [r4, #8]
 800424e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004252:	d01e      	beq.n	8004292 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	f012 0f40 	tst.w	r2, #64	; 0x40
 800425c:	d103      	bne.n	8004266 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004264:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004266:	68e3      	ldr	r3, [r4, #12]
 8004268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800426c:	d942      	bls.n	80042f4 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	b113      	cbz	r3, 8004278 <HAL_SPI_Transmit+0x90>
 8004272:	f1b9 0f01 	cmp.w	r9, #1
 8004276:	d123      	bne.n	80042c0 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004278:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	8812      	ldrh	r2, [r2, #0]
 800427e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004282:	3302      	adds	r3, #2
 8004284:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004286:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29b      	uxth	r3, r3
 800428e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004290:	e016      	b.n	80042c0 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	6813      	ldr	r3, [r2, #0]
 8004296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800429c:	6822      	ldr	r2, [r4, #0]
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e7d5      	b.n	8004254 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a8:	f7fd f938 	bl	800151c <HAL_GetTick>
 80042ac:	1bc0      	subs	r0, r0, r7
 80042ae:	42a8      	cmp	r0, r5
 80042b0:	d303      	bcc.n	80042ba <HAL_SPI_Transmit+0xd2>
 80042b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80042b6:	f040 808e 	bne.w	80043d6 <HAL_SPI_Transmit+0x1ee>
 80042ba:	2d00      	cmp	r5, #0
 80042bc:	f000 808d 	beq.w	80043da <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 80042c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d066      	beq.n	8004396 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	f012 0f02 	tst.w	r2, #2
 80042d0:	d0ea      	beq.n	80042a8 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042d4:	8812      	ldrh	r2, [r2, #0]
 80042d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042da:	3302      	adds	r3, #2
 80042dc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80042de:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80042e2:	fa1f fc8c 	uxth.w	ip, ip
 80042e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80042ea:	fa1f fc8c 	uxth.w	ip, ip
 80042ee:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 80042f2:	e7e5      	b.n	80042c0 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	b113      	cbz	r3, 80042fe <HAL_SPI_Transmit+0x116>
 80042f8:	f1b9 0f01 	cmp.w	r9, #1
 80042fc:	d133      	bne.n	8004366 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 80042fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d90c      	bls.n	8004320 <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004306:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	8812      	ldrh	r2, [r2, #0]
 800430c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800430e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004310:	3302      	adds	r3, #2
 8004312:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004314:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b02      	subs	r3, #2
 800431a:	b29b      	uxth	r3, r3
 800431c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800431e:	e022      	b.n	8004366 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004320:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8004328:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800432a:	3301      	adds	r3, #1
 800432c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800432e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29b      	uxth	r3, r3
 8004336:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004338:	e015      	b.n	8004366 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800433a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004342:	3301      	adds	r3, #1
 8004344:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004346:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29b      	uxth	r3, r3
 800434e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004350:	e009      	b.n	8004366 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004352:	f7fd f8e3 	bl	800151c <HAL_GetTick>
 8004356:	1bc0      	subs	r0, r0, r7
 8004358:	42a8      	cmp	r0, r5
 800435a:	d302      	bcc.n	8004362 <HAL_SPI_Transmit+0x17a>
 800435c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004360:	d13d      	bne.n	80043de <HAL_SPI_Transmit+0x1f6>
 8004362:	2d00      	cmp	r5, #0
 8004364:	d03d      	beq.n	80043e2 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8004366:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	b1a3      	cbz	r3, 8004396 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	6893      	ldr	r3, [r2, #8]
 8004370:	f013 0f02 	tst.w	r3, #2
 8004374:	d0ed      	beq.n	8004352 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8004376:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d9dd      	bls.n	800433a <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800437e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004386:	3302      	adds	r3, #2
 8004388:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800438a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b02      	subs	r3, #2
 8004390:	b29b      	uxth	r3, r3
 8004392:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004394:	e7e7      	b.n	8004366 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004396:	463a      	mov	r2, r7
 8004398:	4629      	mov	r1, r5
 800439a:	4620      	mov	r0, r4
 800439c:	f7ff fe84 	bl	80040a8 <SPI_EndRxTxTransaction>
 80043a0:	b108      	cbz	r0, 80043a6 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043a2:	2320      	movs	r3, #32
 80043a4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	b933      	cbnz	r3, 80043b8 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	9201      	str	r2, [sp, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043ba:	b913      	cbnz	r3, 80043c2 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043bc:	2600      	movs	r6, #0
 80043be:	e000      	b.n	80043c2 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 80043c0:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043c8:	2300      	movs	r3, #0
 80043ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80043ce:	4630      	mov	r0, r6
 80043d0:	b003      	add	sp, #12
 80043d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80043d6:	2603      	movs	r6, #3
 80043d8:	e7f3      	b.n	80043c2 <HAL_SPI_Transmit+0x1da>
 80043da:	2603      	movs	r6, #3
 80043dc:	e7f1      	b.n	80043c2 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 80043de:	2603      	movs	r6, #3
 80043e0:	e7ef      	b.n	80043c2 <HAL_SPI_Transmit+0x1da>
 80043e2:	2603      	movs	r6, #3
 80043e4:	e7ed      	b.n	80043c2 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 80043e6:	2602      	movs	r6, #2
 80043e8:	e7f1      	b.n	80043ce <HAL_SPI_Transmit+0x1e6>

080043ea <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043ea:	4770      	bx	lr

080043ec <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f0:	4770      	bx	lr

080043f2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_IRQHandler>:
{
 80043f4:	b510      	push	{r4, lr}
 80043f6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f8:	6803      	ldr	r3, [r0, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	f012 0f02 	tst.w	r2, #2
 8004400:	d011      	beq.n	8004426 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	f012 0f02 	tst.w	r2, #2
 8004408:	d00d      	beq.n	8004426 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800440a:	f06f 0202 	mvn.w	r2, #2
 800440e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004410:	2301      	movs	r3, #1
 8004412:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004414:	6803      	ldr	r3, [r0, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f013 0f03 	tst.w	r3, #3
 800441c:	d079      	beq.n	8004512 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800441e:	f7ff ffe6 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	2300      	movs	r3, #0
 8004424:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	f012 0f04 	tst.w	r2, #4
 800442e:	d012      	beq.n	8004456 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	f012 0f04 	tst.w	r2, #4
 8004436:	d00e      	beq.n	8004456 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004438:	f06f 0204 	mvn.w	r2, #4
 800443c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800443e:	2302      	movs	r3, #2
 8004440:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f413 7f40 	tst.w	r3, #768	; 0x300
 800444a:	d068      	beq.n	800451e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff ffce 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	2300      	movs	r3, #0
 8004454:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	f012 0f08 	tst.w	r2, #8
 800445e:	d012      	beq.n	8004486 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	f012 0f08 	tst.w	r2, #8
 8004466:	d00e      	beq.n	8004486 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004468:	f06f 0208 	mvn.w	r2, #8
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446e:	2304      	movs	r3, #4
 8004470:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f013 0f03 	tst.w	r3, #3
 800447a:	d057      	beq.n	800452c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff ffb6 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	2300      	movs	r3, #0
 8004484:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	f012 0f10 	tst.w	r2, #16
 800448e:	d012      	beq.n	80044b6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	f012 0f10 	tst.w	r2, #16
 8004496:	d00e      	beq.n	80044b6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004498:	f06f 0210 	mvn.w	r2, #16
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449e:	2308      	movs	r3, #8
 80044a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80044aa:	d046      	beq.n	800453a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff ff9e 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b2:	2300      	movs	r3, #0
 80044b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	f012 0f01 	tst.w	r2, #1
 80044be:	d003      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	f012 0f01 	tst.w	r2, #1
 80044c6:	d13f      	bne.n	8004548 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044d8:	d13d      	bne.n	8004556 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	f412 7f80 	tst.w	r2, #256	; 0x100
 80044e2:	d003      	beq.n	80044ec <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044ea:	d13b      	bne.n	8004564 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044fc:	d139      	bne.n	8004572 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	f012 0f20 	tst.w	r2, #32
 8004506:	d003      	beq.n	8004510 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	f012 0f20 	tst.w	r2, #32
 800450e:	d137      	bne.n	8004580 <HAL_TIM_IRQHandler+0x18c>
}
 8004510:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	f7ff ff6b 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff ff6a 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800451c:	e781      	b.n	8004422 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	4620      	mov	r0, r4
 8004520:	f7ff ff64 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff ff63 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800452a:	e792      	b.n	8004452 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452c:	4620      	mov	r0, r4
 800452e:	f7ff ff5d 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004532:	4620      	mov	r0, r4
 8004534:	f7ff ff5c 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004538:	e7a3      	b.n	8004482 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	4620      	mov	r0, r4
 800453c:	f7ff ff56 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	4620      	mov	r0, r4
 8004542:	f7ff ff55 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004546:	e7b4      	b.n	80044b2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004548:	f06f 0201 	mvn.w	r2, #1
 800454c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff ff4b 	bl	80043ea <HAL_TIM_PeriodElapsedCallback>
 8004554:	e7b8      	b.n	80044c8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004556:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800455a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800455c:	4620      	mov	r0, r4
 800455e:	f000 f9aa 	bl	80048b6 <HAL_TIMEx_BreakCallback>
 8004562:	e7ba      	b.n	80044da <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004564:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004568:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800456a:	4620      	mov	r0, r4
 800456c:	f000 f9a4 	bl	80048b8 <HAL_TIMEx_Break2Callback>
 8004570:	e7bc      	b.n	80044ec <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004572:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004576:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff ff3a 	bl	80043f2 <HAL_TIM_TriggerCallback>
 800457e:	e7be      	b.n	80044fe <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004580:	f06f 0220 	mvn.w	r2, #32
 8004584:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004586:	4620      	mov	r0, r4
 8004588:	f000 f994 	bl	80048b4 <HAL_TIMEx_CommutCallback>
}
 800458c:	e7c0      	b.n	8004510 <HAL_TIM_IRQHandler+0x11c>
	...

08004590 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004590:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004592:	4a30      	ldr	r2, [pc, #192]	; (8004654 <TIM_Base_SetConfig+0xc4>)
 8004594:	4290      	cmp	r0, r2
 8004596:	d012      	beq.n	80045be <TIM_Base_SetConfig+0x2e>
 8004598:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800459c:	d00f      	beq.n	80045be <TIM_Base_SetConfig+0x2e>
 800459e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045a2:	4290      	cmp	r0, r2
 80045a4:	d00b      	beq.n	80045be <TIM_Base_SetConfig+0x2e>
 80045a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045aa:	4290      	cmp	r0, r2
 80045ac:	d007      	beq.n	80045be <TIM_Base_SetConfig+0x2e>
 80045ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045b2:	4290      	cmp	r0, r2
 80045b4:	d003      	beq.n	80045be <TIM_Base_SetConfig+0x2e>
 80045b6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80045ba:	4290      	cmp	r0, r2
 80045bc:	d103      	bne.n	80045c6 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045c2:	684a      	ldr	r2, [r1, #4]
 80045c4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c6:	4a23      	ldr	r2, [pc, #140]	; (8004654 <TIM_Base_SetConfig+0xc4>)
 80045c8:	4290      	cmp	r0, r2
 80045ca:	d01e      	beq.n	800460a <TIM_Base_SetConfig+0x7a>
 80045cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80045d0:	d01b      	beq.n	800460a <TIM_Base_SetConfig+0x7a>
 80045d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045d6:	4290      	cmp	r0, r2
 80045d8:	d017      	beq.n	800460a <TIM_Base_SetConfig+0x7a>
 80045da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045de:	4290      	cmp	r0, r2
 80045e0:	d013      	beq.n	800460a <TIM_Base_SetConfig+0x7a>
 80045e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045e6:	4290      	cmp	r0, r2
 80045e8:	d00f      	beq.n	800460a <TIM_Base_SetConfig+0x7a>
 80045ea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80045ee:	4290      	cmp	r0, r2
 80045f0:	d00b      	beq.n	800460a <TIM_Base_SetConfig+0x7a>
 80045f2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80045f6:	4290      	cmp	r0, r2
 80045f8:	d007      	beq.n	800460a <TIM_Base_SetConfig+0x7a>
 80045fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045fe:	4290      	cmp	r0, r2
 8004600:	d003      	beq.n	800460a <TIM_Base_SetConfig+0x7a>
 8004602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004606:	4290      	cmp	r0, r2
 8004608:	d103      	bne.n	8004612 <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800460e:	68ca      	ldr	r2, [r1, #12]
 8004610:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004616:	694a      	ldr	r2, [r1, #20]
 8004618:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800461a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800461c:	688b      	ldr	r3, [r1, #8]
 800461e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004620:	680b      	ldr	r3, [r1, #0]
 8004622:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <TIM_Base_SetConfig+0xc4>)
 8004626:	4298      	cmp	r0, r3
 8004628:	d00f      	beq.n	800464a <TIM_Base_SetConfig+0xba>
 800462a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462e:	4298      	cmp	r0, r3
 8004630:	d00b      	beq.n	800464a <TIM_Base_SetConfig+0xba>
 8004632:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004636:	4298      	cmp	r0, r3
 8004638:	d007      	beq.n	800464a <TIM_Base_SetConfig+0xba>
 800463a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463e:	4298      	cmp	r0, r3
 8004640:	d003      	beq.n	800464a <TIM_Base_SetConfig+0xba>
 8004642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004646:	4298      	cmp	r0, r3
 8004648:	d101      	bne.n	800464e <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800464a:	690b      	ldr	r3, [r1, #16]
 800464c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800464e:	2301      	movs	r3, #1
 8004650:	6143      	str	r3, [r0, #20]
}
 8004652:	4770      	bx	lr
 8004654:	40012c00 	.word	0x40012c00

08004658 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8004658:	2800      	cmp	r0, #0
 800465a:	d053      	beq.n	8004704 <HAL_TIM_Encoder_Init+0xac>
{
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	460d      	mov	r5, r1
 8004660:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004662:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004666:	2b00      	cmp	r3, #0
 8004668:	d047      	beq.n	80046fa <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 800466a:	2302      	movs	r3, #2
 800466c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	6893      	ldr	r3, [r2, #8]
 8004674:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004678:	f023 0307 	bic.w	r3, r3, #7
 800467c:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467e:	4621      	mov	r1, r4
 8004680:	f851 0b04 	ldr.w	r0, [r1], #4
 8004684:	f7ff ff84 	bl	8004590 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004688:	6821      	ldr	r1, [r4, #0]
 800468a:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800468c:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 800468e:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8004690:	6828      	ldr	r0, [r5, #0]
 8004692:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004694:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004698:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800469c:	68ab      	ldr	r3, [r5, #8]
 800469e:	69af      	ldr	r7, [r5, #24]
 80046a0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80046a4:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046a6:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80046aa:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046ae:	68ea      	ldr	r2, [r5, #12]
 80046b0:	69ef      	ldr	r7, [r5, #28]
 80046b2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80046b6:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046b8:	6a2b      	ldr	r3, [r5, #32]
 80046ba:	031b      	lsls	r3, r3, #12
 80046bc:	692f      	ldr	r7, [r5, #16]
 80046be:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 80046c2:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046c4:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046c8:	686a      	ldr	r2, [r5, #4]
 80046ca:	696d      	ldr	r5, [r5, #20]
 80046cc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80046d0:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80046d2:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80046d4:	6821      	ldr	r1, [r4, #0]
 80046d6:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	2301      	movs	r3, #1
 80046de:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80046f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80046f6:	2000      	movs	r0, #0
}
 80046f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80046fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80046fe:	f7fc fd59 	bl	80011b4 <HAL_TIM_Encoder_MspInit>
 8004702:	e7b2      	b.n	800466a <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8004704:	2001      	movs	r0, #1
}
 8004706:	4770      	bx	lr

08004708 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004708:	f001 011f 	and.w	r1, r1, #31
 800470c:	f04f 0c01 	mov.w	ip, #1
 8004710:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004714:	6a03      	ldr	r3, [r0, #32]
 8004716:	ea23 030c 	bic.w	r3, r3, ip
 800471a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800471c:	6a03      	ldr	r3, [r0, #32]
 800471e:	408a      	lsls	r2, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	6203      	str	r3, [r0, #32]
}
 8004724:	4770      	bx	lr

08004726 <HAL_TIM_Encoder_Start_IT>:
{
 8004726:	b538      	push	{r3, r4, r5, lr}
 8004728:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800472a:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800472e:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004730:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004734:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8004738:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800473a:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
  if (Channel == TIM_CHANNEL_1)
 800473e:	460d      	mov	r5, r1
 8004740:	bb09      	cbnz	r1, 8004786 <HAL_TIM_Encoder_Start_IT+0x60>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004742:	2801      	cmp	r0, #1
 8004744:	d15e      	bne.n	8004804 <HAL_TIM_Encoder_Start_IT+0xde>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004746:	2a01      	cmp	r2, #1
 8004748:	d15d      	bne.n	8004806 <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800474a:	2302      	movs	r3, #2
 800474c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004750:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  switch (Channel)
 8004754:	2d00      	cmp	r5, #0
 8004756:	d039      	beq.n	80047cc <HAL_TIM_Encoder_Start_IT+0xa6>
 8004758:	2d04      	cmp	r5, #4
 800475a:	d048      	beq.n	80047ee <HAL_TIM_Encoder_Start_IT+0xc8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800475c:	2201      	movs	r2, #1
 800475e:	2100      	movs	r1, #0
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	f7ff ffd1 	bl	8004708 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004766:	2201      	movs	r2, #1
 8004768:	2104      	movs	r1, #4
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	f7ff ffcc 	bl	8004708 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	68d3      	ldr	r3, [r2, #12]
 8004774:	f043 0302 	orr.w	r3, r3, #2
 8004778:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	68d3      	ldr	r3, [r2, #12]
 800477e:	f043 0304 	orr.w	r3, r3, #4
 8004782:	60d3      	str	r3, [r2, #12]
      break;
 8004784:	e02c      	b.n	80047e0 <HAL_TIM_Encoder_Start_IT+0xba>
 8004786:	b2db      	uxtb	r3, r3
 8004788:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 800478c:	2904      	cmp	r1, #4
 800478e:	d012      	beq.n	80047b6 <HAL_TIM_Encoder_Start_IT+0x90>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004790:	2801      	cmp	r0, #1
 8004792:	d13d      	bne.n	8004810 <HAL_TIM_Encoder_Start_IT+0xea>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004794:	2b01      	cmp	r3, #1
 8004796:	d136      	bne.n	8004806 <HAL_TIM_Encoder_Start_IT+0xe0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004798:	2a01      	cmp	r2, #1
 800479a:	d13b      	bne.n	8004814 <HAL_TIM_Encoder_Start_IT+0xee>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800479c:	f1bc 0f01 	cmp.w	ip, #1
 80047a0:	d13a      	bne.n	8004818 <HAL_TIM_Encoder_Start_IT+0xf2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a2:	2302      	movs	r3, #2
 80047a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047b4:	e7ce      	b.n	8004754 <HAL_TIM_Encoder_Start_IT+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d126      	bne.n	8004808 <HAL_TIM_Encoder_Start_IT+0xe2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047ba:	f1bc 0f01 	cmp.w	ip, #1
 80047be:	d125      	bne.n	800480c <HAL_TIM_Encoder_Start_IT+0xe6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c0:	2302      	movs	r3, #2
 80047c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047ca:	e7c3      	b.n	8004754 <HAL_TIM_Encoder_Start_IT+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047cc:	2201      	movs	r2, #1
 80047ce:	2100      	movs	r1, #0
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	f7ff ff99 	bl	8004708 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	68d3      	ldr	r3, [r2, #12]
 80047da:	f043 0302 	orr.w	r3, r3, #2
 80047de:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	6813      	ldr	r3, [r2, #0]
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80047ea:	2000      	movs	r0, #0
 80047ec:	e00b      	b.n	8004806 <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ee:	2201      	movs	r2, #1
 80047f0:	2104      	movs	r1, #4
 80047f2:	6820      	ldr	r0, [r4, #0]
 80047f4:	f7ff ff88 	bl	8004708 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	68d3      	ldr	r3, [r2, #12]
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	60d3      	str	r3, [r2, #12]
      break;
 8004802:	e7ed      	b.n	80047e0 <HAL_TIM_Encoder_Start_IT+0xba>
      return HAL_ERROR;
 8004804:	2001      	movs	r0, #1
}
 8004806:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004808:	2001      	movs	r0, #1
 800480a:	e7fc      	b.n	8004806 <HAL_TIM_Encoder_Start_IT+0xe0>
 800480c:	4618      	mov	r0, r3
 800480e:	e7fa      	b.n	8004806 <HAL_TIM_Encoder_Start_IT+0xe0>
      return HAL_ERROR;
 8004810:	2001      	movs	r0, #1
 8004812:	e7f8      	b.n	8004806 <HAL_TIM_Encoder_Start_IT+0xe0>
 8004814:	4618      	mov	r0, r3
 8004816:	e7f6      	b.n	8004806 <HAL_TIM_Encoder_Start_IT+0xe0>
 8004818:	4610      	mov	r0, r2
 800481a:	e7f4      	b.n	8004806 <HAL_TIM_Encoder_Start_IT+0xe0>

0800481c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800481c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004820:	2a01      	cmp	r2, #1
 8004822:	d042      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8004824:	b430      	push	{r4, r5}
 8004826:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004828:	2201      	movs	r2, #1
 800482a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482e:	2202      	movs	r2, #2
 8004830:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004834:	6800      	ldr	r0, [r0, #0]
 8004836:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004838:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800483a:	4d1d      	ldr	r5, [pc, #116]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800483c:	42a8      	cmp	r0, r5
 800483e:	d003      	beq.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8004840:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004844:	42a8      	cmp	r0, r5
 8004846:	d103      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004848:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800484c:	684d      	ldr	r5, [r1, #4]
 800484e:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004850:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004854:	680d      	ldr	r5, [r1, #0]
 8004856:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004858:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4814      	ldr	r0, [pc, #80]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800485e:	4282      	cmp	r2, r0
 8004860:	d016      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8004862:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004866:	d013      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8004868:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800486c:	4282      	cmp	r2, r0
 800486e:	d00f      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8004870:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004874:	4282      	cmp	r2, r0
 8004876:	d00b      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8004878:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800487c:	4282      	cmp	r2, r0
 800487e:	d007      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8004880:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 8004884:	4282      	cmp	r2, r0
 8004886:	d003      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8004888:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800488c:	4282      	cmp	r2, r0
 800488e:	d104      	bne.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004890:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004894:	6889      	ldr	r1, [r1, #8]
 8004896:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004898:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a0:	2000      	movs	r0, #0
 80048a2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 80048a6:	bc30      	pop	{r4, r5}
 80048a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80048aa:	2002      	movs	r0, #2
}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40012c00 	.word	0x40012c00

080048b4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b4:	4770      	bx	lr

080048b6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048b8:	4770      	bx	lr

080048ba <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048ba:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	e852 3f00 	ldrex	r3, [r2]
 80048c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	e842 3100 	strex	r1, r3, [r2]
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d1f6      	bne.n	80048ba <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	f102 0308 	add.w	r3, r2, #8
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048da:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	3208      	adds	r2, #8
 80048e0:	e842 3100 	strex	r1, r3, [r2]
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d1f1      	bne.n	80048cc <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d006      	beq.n	80048fc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048ee:	2320      	movs	r3, #32
 80048f0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f4:	2300      	movs	r3, #0
 80048f6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048f8:	6743      	str	r3, [r0, #116]	; 0x74
}
 80048fa:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	e852 3f00 	ldrex	r3, [r2]
 8004902:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	e842 3100 	strex	r1, r3, [r2]
 800490a:	2900      	cmp	r1, #0
 800490c:	d1f6      	bne.n	80048fc <UART_EndRxTransfer+0x42>
 800490e:	e7ee      	b.n	80048ee <UART_EndRxTransfer+0x34>

08004910 <UART_SetConfig>:
{
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004914:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004916:	6883      	ldr	r3, [r0, #8]
 8004918:	6902      	ldr	r2, [r0, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	6942      	ldr	r2, [r0, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	69c2      	ldr	r2, [r0, #28]
 8004922:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004924:	6808      	ldr	r0, [r1, #0]
 8004926:	4a97      	ldr	r2, [pc, #604]	; (8004b84 <UART_SetConfig+0x274>)
 8004928:	4002      	ands	r2, r0
 800492a:	431a      	orrs	r2, r3
 800492c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	6853      	ldr	r3, [r2, #4]
 8004932:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004936:	68e1      	ldr	r1, [r4, #12]
 8004938:	430b      	orrs	r3, r1
 800493a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800493c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	4b91      	ldr	r3, [pc, #580]	; (8004b88 <UART_SetConfig+0x278>)
 8004942:	429a      	cmp	r2, r3
 8004944:	d001      	beq.n	800494a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8004946:	6a23      	ldr	r3, [r4, #32]
 8004948:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800494a:	6893      	ldr	r3, [r2, #8]
 800494c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004950:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004954:	430b      	orrs	r3, r1
 8004956:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800495c:	f023 030f 	bic.w	r3, r3, #15
 8004960:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004962:	430b      	orrs	r3, r1
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	4a88      	ldr	r2, [pc, #544]	; (8004b8c <UART_SetConfig+0x27c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d010      	beq.n	8004990 <UART_SetConfig+0x80>
 800496e:	4a88      	ldr	r2, [pc, #544]	; (8004b90 <UART_SetConfig+0x280>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d021      	beq.n	80049b8 <UART_SetConfig+0xa8>
 8004974:	4a87      	ldr	r2, [pc, #540]	; (8004b94 <UART_SetConfig+0x284>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d037      	beq.n	80049ea <UART_SetConfig+0xda>
 800497a:	4a87      	ldr	r2, [pc, #540]	; (8004b98 <UART_SetConfig+0x288>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d05c      	beq.n	8004a3a <UART_SetConfig+0x12a>
 8004980:	4a86      	ldr	r2, [pc, #536]	; (8004b9c <UART_SetConfig+0x28c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d06b      	beq.n	8004a5e <UART_SetConfig+0x14e>
 8004986:	4a80      	ldr	r2, [pc, #512]	; (8004b88 <UART_SetConfig+0x278>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d07d      	beq.n	8004a88 <UART_SetConfig+0x178>
 800498c:	2210      	movs	r2, #16
 800498e:	e03a      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004990:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8004994:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004998:	f002 0203 	and.w	r2, r2, #3
 800499c:	2a03      	cmp	r2, #3
 800499e:	d809      	bhi.n	80049b4 <UART_SetConfig+0xa4>
 80049a0:	e8df f002 	tbb	[pc, r2]
 80049a4:	06870402 	.word	0x06870402
 80049a8:	2201      	movs	r2, #1
 80049aa:	e02c      	b.n	8004a06 <UART_SetConfig+0xf6>
 80049ac:	2204      	movs	r2, #4
 80049ae:	e02a      	b.n	8004a06 <UART_SetConfig+0xf6>
 80049b0:	2208      	movs	r2, #8
 80049b2:	e028      	b.n	8004a06 <UART_SetConfig+0xf6>
 80049b4:	2210      	movs	r2, #16
 80049b6:	e026      	b.n	8004a06 <UART_SetConfig+0xf6>
 80049b8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80049bc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80049c0:	f002 020c 	and.w	r2, r2, #12
 80049c4:	2a0c      	cmp	r2, #12
 80049c6:	d80e      	bhi.n	80049e6 <UART_SetConfig+0xd6>
 80049c8:	e8df f002 	tbb	[pc, r2]
 80049cc:	0d0d0d07 	.word	0x0d0d0d07
 80049d0:	0d0d0d09 	.word	0x0d0d0d09
 80049d4:	0d0d0d75 	.word	0x0d0d0d75
 80049d8:	0b          	.byte	0x0b
 80049d9:	00          	.byte	0x00
 80049da:	2200      	movs	r2, #0
 80049dc:	e013      	b.n	8004a06 <UART_SetConfig+0xf6>
 80049de:	2204      	movs	r2, #4
 80049e0:	e011      	b.n	8004a06 <UART_SetConfig+0xf6>
 80049e2:	2208      	movs	r2, #8
 80049e4:	e00f      	b.n	8004a06 <UART_SetConfig+0xf6>
 80049e6:	2210      	movs	r2, #16
 80049e8:	e00d      	b.n	8004a06 <UART_SetConfig+0xf6>
 80049ea:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80049ee:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80049f2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80049f6:	2a20      	cmp	r2, #32
 80049f8:	d05f      	beq.n	8004aba <UART_SetConfig+0x1aa>
 80049fa:	d81a      	bhi.n	8004a32 <UART_SetConfig+0x122>
 80049fc:	2a00      	cmp	r2, #0
 80049fe:	d05e      	beq.n	8004abe <UART_SetConfig+0x1ae>
 8004a00:	2a10      	cmp	r2, #16
 8004a02:	d15e      	bne.n	8004ac2 <UART_SetConfig+0x1b2>
 8004a04:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a06:	4960      	ldr	r1, [pc, #384]	; (8004b88 <UART_SetConfig+0x278>)
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	d076      	beq.n	8004afa <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0c:	69e0      	ldr	r0, [r4, #28]
 8004a0e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004a12:	f000 80cb 	beq.w	8004bac <UART_SetConfig+0x29c>
    switch (clocksource)
 8004a16:	2a08      	cmp	r2, #8
 8004a18:	f200 8136 	bhi.w	8004c88 <UART_SetConfig+0x378>
 8004a1c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004a20:	011b00f9 	.word	0x011b00f9
 8004a24:	013400f7 	.word	0x013400f7
 8004a28:	0134011e 	.word	0x0134011e
 8004a2c:	01340134 	.word	0x01340134
 8004a30:	0121      	.short	0x0121
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a32:	2a30      	cmp	r2, #48	; 0x30
 8004a34:	d147      	bne.n	8004ac6 <UART_SetConfig+0x1b6>
 8004a36:	2208      	movs	r2, #8
 8004a38:	e7e5      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004a3a:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8004a3e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004a42:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004a46:	2a80      	cmp	r2, #128	; 0x80
 8004a48:	d03f      	beq.n	8004aca <UART_SetConfig+0x1ba>
 8004a4a:	d804      	bhi.n	8004a56 <UART_SetConfig+0x146>
 8004a4c:	b3fa      	cbz	r2, 8004ace <UART_SetConfig+0x1be>
 8004a4e:	2a40      	cmp	r2, #64	; 0x40
 8004a50:	d13f      	bne.n	8004ad2 <UART_SetConfig+0x1c2>
 8004a52:	2204      	movs	r2, #4
 8004a54:	e7d7      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004a56:	2ac0      	cmp	r2, #192	; 0xc0
 8004a58:	d13d      	bne.n	8004ad6 <UART_SetConfig+0x1c6>
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	e7d3      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004a5e:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8004a62:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004a66:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004a6a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004a6e:	d034      	beq.n	8004ada <UART_SetConfig+0x1ca>
 8004a70:	d805      	bhi.n	8004a7e <UART_SetConfig+0x16e>
 8004a72:	b3a2      	cbz	r2, 8004ade <UART_SetConfig+0x1ce>
 8004a74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004a78:	d133      	bne.n	8004ae2 <UART_SetConfig+0x1d2>
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	e7c3      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004a7e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004a82:	d130      	bne.n	8004ae6 <UART_SetConfig+0x1d6>
 8004a84:	2208      	movs	r2, #8
 8004a86:	e7be      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004a88:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8004a8c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004a90:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004a94:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004a98:	d027      	beq.n	8004aea <UART_SetConfig+0x1da>
 8004a9a:	d805      	bhi.n	8004aa8 <UART_SetConfig+0x198>
 8004a9c:	b33a      	cbz	r2, 8004aee <UART_SetConfig+0x1de>
 8004a9e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004aa2:	d126      	bne.n	8004af2 <UART_SetConfig+0x1e2>
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	e7ae      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004aa8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004aac:	d123      	bne.n	8004af6 <UART_SetConfig+0x1e6>
 8004aae:	2208      	movs	r2, #8
 8004ab0:	e7a9      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	e7a7      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	e7a5      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004aba:	2202      	movs	r2, #2
 8004abc:	e7a3      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004abe:	2200      	movs	r2, #0
 8004ac0:	e7a1      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	e79f      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ac6:	2210      	movs	r2, #16
 8004ac8:	e79d      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004aca:	2202      	movs	r2, #2
 8004acc:	e79b      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ace:	2200      	movs	r2, #0
 8004ad0:	e799      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ad2:	2210      	movs	r2, #16
 8004ad4:	e797      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	e795      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ada:	2202      	movs	r2, #2
 8004adc:	e793      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	e791      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ae2:	2210      	movs	r2, #16
 8004ae4:	e78f      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	e78d      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004aea:	2202      	movs	r2, #2
 8004aec:	e78b      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004aee:	2200      	movs	r2, #0
 8004af0:	e789      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004af2:	2210      	movs	r2, #16
 8004af4:	e787      	b.n	8004a06 <UART_SetConfig+0xf6>
 8004af6:	2210      	movs	r2, #16
 8004af8:	e785      	b.n	8004a06 <UART_SetConfig+0xf6>
    switch (clocksource)
 8004afa:	2a08      	cmp	r2, #8
 8004afc:	f200 80b4 	bhi.w	8004c68 <UART_SetConfig+0x358>
 8004b00:	e8df f002 	tbb	[pc, r2]
 8004b04:	b23e3808 	.word	0xb23e3808
 8004b08:	b2b2b23b 	.word	0xb2b2b23b
 8004b0c:	05          	.byte	0x05
 8004b0d:	00          	.byte	0x00
 8004b0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004b12:	e004      	b.n	8004b1e <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b14:	f7fe fe02 	bl	800371c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f000 80a7 	beq.w	8004c6c <UART_SetConfig+0x35c>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004b20:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <UART_SetConfig+0x290>)
 8004b22:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004b26:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b2a:	6865      	ldr	r5, [r4, #4]
 8004b2c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004b30:	4299      	cmp	r1, r3
 8004b32:	f200 809d 	bhi.w	8004c70 <UART_SetConfig+0x360>
 8004b36:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004b3a:	f200 809b 	bhi.w	8004c74 <UART_SetConfig+0x364>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b3e:	2600      	movs	r6, #0
 8004b40:	4633      	mov	r3, r6
 8004b42:	4631      	mov	r1, r6
 8004b44:	f7fb fb76 	bl	8000234 <__aeabi_uldivmod>
 8004b48:	0209      	lsls	r1, r1, #8
 8004b4a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8004b4e:	0200      	lsls	r0, r0, #8
 8004b50:	086b      	lsrs	r3, r5, #1
 8004b52:	18c0      	adds	r0, r0, r3
 8004b54:	462a      	mov	r2, r5
 8004b56:	4633      	mov	r3, r6
 8004b58:	f141 0100 	adc.w	r1, r1, #0
 8004b5c:	f7fb fb6a 	bl	8000234 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b60:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004b64:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <UART_SetConfig+0x294>)
 8004b66:	429a      	cmp	r2, r3
 8004b68:	f200 8086 	bhi.w	8004c78 <UART_SetConfig+0x368>
          huart->Instance->BRR = usartdiv;
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	60d8      	str	r0, [r3, #12]
 8004b70:	4630      	mov	r0, r6
 8004b72:	e067      	b.n	8004c44 <UART_SetConfig+0x334>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7fe fde2 	bl	800373c <HAL_RCC_GetPCLK2Freq>
        break;
 8004b78:	e7ce      	b.n	8004b18 <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fe f87d 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
        break;
 8004b7e:	e7cb      	b.n	8004b18 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8004b80:	4809      	ldr	r0, [pc, #36]	; (8004ba8 <UART_SetConfig+0x298>)
 8004b82:	e7cc      	b.n	8004b1e <UART_SetConfig+0x20e>
 8004b84:	cfff69f3 	.word	0xcfff69f3
 8004b88:	40008000 	.word	0x40008000
 8004b8c:	40013800 	.word	0x40013800
 8004b90:	40004400 	.word	0x40004400
 8004b94:	40004800 	.word	0x40004800
 8004b98:	40004c00 	.word	0x40004c00
 8004b9c:	40005000 	.word	0x40005000
 8004ba0:	08005a60 	.word	0x08005a60
 8004ba4:	000ffcff 	.word	0x000ffcff
 8004ba8:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8004bac:	2a08      	cmp	r2, #8
 8004bae:	d865      	bhi.n	8004c7c <UART_SetConfig+0x36c>
 8004bb0:	e8df f002 	tbb	[pc, r2]
 8004bb4:	64052707 	.word	0x64052707
 8004bb8:	6464642a 	.word	0x6464642a
 8004bbc:	0b          	.byte	0x0b
 8004bbd:	00          	.byte	0x00
 8004bbe:	4835      	ldr	r0, [pc, #212]	; (8004c94 <UART_SetConfig+0x384>)
 8004bc0:	e003      	b.n	8004bca <UART_SetConfig+0x2ba>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc2:	f7fe fdab 	bl	800371c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d05a      	beq.n	8004c80 <UART_SetConfig+0x370>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004bcc:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <UART_SetConfig+0x388>)
 8004bce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004bd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8004bd6:	6862      	ldr	r2, [r4, #4]
 8004bd8:	0853      	lsrs	r3, r2, #1
 8004bda:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004bde:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be2:	f1a3 0110 	sub.w	r1, r3, #16
 8004be6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004bea:	4291      	cmp	r1, r2
 8004bec:	d84a      	bhi.n	8004c84 <UART_SetConfig+0x374>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bf4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004bf8:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	60d3      	str	r3, [r2, #12]
 8004bfe:	2000      	movs	r0, #0
 8004c00:	e020      	b.n	8004c44 <UART_SetConfig+0x334>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c02:	f7fe fd9b 	bl	800373c <HAL_RCC_GetPCLK2Freq>
        break;
 8004c06:	e7de      	b.n	8004bc6 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c08:	f7fe f836 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
        break;
 8004c0c:	e7db      	b.n	8004bc6 <UART_SetConfig+0x2b6>
    switch (clocksource)
 8004c0e:	4821      	ldr	r0, [pc, #132]	; (8004c94 <UART_SetConfig+0x384>)
 8004c10:	e003      	b.n	8004c1a <UART_SetConfig+0x30a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c12:	f7fe fd83 	bl	800371c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d038      	beq.n	8004c8c <UART_SetConfig+0x37c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c1c:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <UART_SetConfig+0x388>)
 8004c1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004c2c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c30:	f1a0 0210 	sub.w	r2, r0, #16
 8004c34:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d829      	bhi.n	8004c90 <UART_SetConfig+0x380>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	b280      	uxth	r0, r0
 8004c40:	60d8      	str	r0, [r3, #12]
 8004c42:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c4a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8004c52:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c56:	f7fe fd71 	bl	800373c <HAL_RCC_GetPCLK2Freq>
        break;
 8004c5a:	e7dc      	b.n	8004c16 <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c5c:	f7fe f80c 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
        break;
 8004c60:	e7d9      	b.n	8004c16 <UART_SetConfig+0x306>
        pclk = (uint32_t) LSE_VALUE;
 8004c62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c66:	e7d8      	b.n	8004c1a <UART_SetConfig+0x30a>
    switch (clocksource)
 8004c68:	2001      	movs	r0, #1
 8004c6a:	e7eb      	b.n	8004c44 <UART_SetConfig+0x334>
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	e7e9      	b.n	8004c44 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 8004c70:	2001      	movs	r0, #1
 8004c72:	e7e7      	b.n	8004c44 <UART_SetConfig+0x334>
 8004c74:	2001      	movs	r0, #1
 8004c76:	e7e5      	b.n	8004c44 <UART_SetConfig+0x334>
          ret = HAL_ERROR;
 8004c78:	2001      	movs	r0, #1
 8004c7a:	e7e3      	b.n	8004c44 <UART_SetConfig+0x334>
    switch (clocksource)
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	e7e1      	b.n	8004c44 <UART_SetConfig+0x334>
 8004c80:	2000      	movs	r0, #0
 8004c82:	e7df      	b.n	8004c44 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 8004c84:	2001      	movs	r0, #1
 8004c86:	e7dd      	b.n	8004c44 <UART_SetConfig+0x334>
    switch (clocksource)
 8004c88:	2001      	movs	r0, #1
 8004c8a:	e7db      	b.n	8004c44 <UART_SetConfig+0x334>
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e7d9      	b.n	8004c44 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 8004c90:	2001      	movs	r0, #1
 8004c92:	e7d7      	b.n	8004c44 <UART_SetConfig+0x334>
 8004c94:	00f42400 	.word	0x00f42400
 8004c98:	08005a60 	.word	0x08005a60

08004c9c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c9e:	f013 0f01 	tst.w	r3, #1
 8004ca2:	d006      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca4:	6802      	ldr	r2, [r0, #0]
 8004ca6:	6853      	ldr	r3, [r2, #4]
 8004ca8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cb4:	f013 0f02 	tst.w	r3, #2
 8004cb8:	d006      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cba:	6802      	ldr	r2, [r0, #0]
 8004cbc:	6853      	ldr	r3, [r2, #4]
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cca:	f013 0f04 	tst.w	r3, #4
 8004cce:	d006      	beq.n	8004cde <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd0:	6802      	ldr	r2, [r0, #0]
 8004cd2:	6853      	ldr	r3, [r2, #4]
 8004cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004ce0:	f013 0f08 	tst.w	r3, #8
 8004ce4:	d006      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ce6:	6802      	ldr	r2, [r0, #0]
 8004ce8:	6853      	ldr	r3, [r2, #4]
 8004cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cf6:	f013 0f10 	tst.w	r3, #16
 8004cfa:	d006      	beq.n	8004d0a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cfc:	6802      	ldr	r2, [r0, #0]
 8004cfe:	6893      	ldr	r3, [r2, #8]
 8004d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d04:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004d06:	430b      	orrs	r3, r1
 8004d08:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d0c:	f013 0f20 	tst.w	r3, #32
 8004d10:	d006      	beq.n	8004d20 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d12:	6802      	ldr	r2, [r0, #0]
 8004d14:	6893      	ldr	r3, [r2, #8]
 8004d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d26:	d00a      	beq.n	8004d3e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d28:	6802      	ldr	r2, [r0, #0]
 8004d2a:	6853      	ldr	r3, [r2, #4]
 8004d2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d30:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3c:	d00b      	beq.n	8004d56 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d44:	d006      	beq.n	8004d54 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d46:	6802      	ldr	r2, [r0, #0]
 8004d48:	6853      	ldr	r3, [r2, #4]
 8004d4a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004d4e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6053      	str	r3, [r2, #4]
}
 8004d54:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d56:	6802      	ldr	r2, [r0, #0]
 8004d58:	6853      	ldr	r3, [r2, #4]
 8004d5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d5e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6053      	str	r3, [r2, #4]
 8004d64:	e7eb      	b.n	8004d3e <UART_AdvFeatureConfig+0xa2>

08004d66 <UART_WaitOnFlagUntilTimeout>:
{
 8004d66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	460f      	mov	r7, r1
 8004d6e:	4616      	mov	r6, r2
 8004d70:	4699      	mov	r9, r3
 8004d72:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d76:	682b      	ldr	r3, [r5, #0]
 8004d78:	69dc      	ldr	r4, [r3, #28]
 8004d7a:	ea37 0404 	bics.w	r4, r7, r4
 8004d7e:	bf0c      	ite	eq
 8004d80:	2401      	moveq	r4, #1
 8004d82:	2400      	movne	r4, #0
 8004d84:	42b4      	cmp	r4, r6
 8004d86:	d132      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x88>
    if (Timeout != HAL_MAX_DELAY)
 8004d88:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004d8c:	d0f3      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8e:	f7fc fbc5 	bl	800151c <HAL_GetTick>
 8004d92:	eba0 0009 	sub.w	r0, r0, r9
 8004d96:	4540      	cmp	r0, r8
 8004d98:	d82c      	bhi.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x8e>
 8004d9a:	f1b8 0f00 	cmp.w	r8, #0
 8004d9e:	d02b      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f012 0f04 	tst.w	r2, #4
 8004da8:	d0e5      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	f012 0f08 	tst.w	r2, #8
 8004db0:	d111      	bne.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004db8:	d0dd      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dbe:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f7ff fd7a 	bl	80048ba <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 8004dd2:	2003      	movs	r0, #3
 8004dd4:	e00c      	b.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x8a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dd6:	2408      	movs	r4, #8
 8004dd8:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f7ff fd6d 	bl	80048ba <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004de0:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
           __HAL_UNLOCK(huart);
 8004de4:	2300      	movs	r3, #0
 8004de6:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
           return HAL_ERROR;
 8004dea:	2001      	movs	r0, #1
 8004dec:	e000      	b.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x8a>
  return HAL_OK;
 8004dee:	2000      	movs	r0, #0
}
 8004df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004df4:	2003      	movs	r0, #3
 8004df6:	e7fb      	b.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004df8:	2003      	movs	r0, #3
 8004dfa:	e7f9      	b.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x8a>

08004dfc <UART_CheckIdleState>:
{
 8004dfc:	b530      	push	{r4, r5, lr}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8004e08:	f7fc fb88 	bl	800151c <HAL_GetTick>
 8004e0c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e0e:	6822      	ldr	r2, [r4, #0]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	f012 0f08 	tst.w	r2, #8
 8004e16:	d110      	bne.n	8004e3a <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f013 0f04 	tst.w	r3, #4
 8004e20:	d128      	bne.n	8004e74 <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 8004e22:	2320      	movs	r3, #32
 8004e24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e30:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8004e32:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8004e36:	b003      	add	sp, #12
 8004e38:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4603      	mov	r3, r0
 8004e42:	2200      	movs	r2, #0
 8004e44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f7ff ff8c 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d0e2      	beq.n	8004e18 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	e852 3f00 	ldrex	r3, [r2]
 8004e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	e842 3100 	strex	r1, r3, [r2]
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d1f6      	bne.n	8004e52 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8004e64:	2320      	movs	r3, #32
 8004e66:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      __HAL_UNLOCK(huart);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8004e70:	2003      	movs	r0, #3
 8004e72:	e7e0      	b.n	8004e36 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e82:	4620      	mov	r0, r4
 8004e84:	f7ff ff6f 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d0ca      	beq.n	8004e22 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	e852 3f00 	ldrex	r3, [r2]
 8004e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	e842 3100 	strex	r1, r3, [r2]
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	d1f6      	bne.n	8004e8c <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	f102 0308 	add.w	r3, r2, #8
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	3208      	adds	r2, #8
 8004eae:	e842 3100 	strex	r1, r3, [r2]
 8004eb2:	2900      	cmp	r1, #0
 8004eb4:	d1f3      	bne.n	8004e9e <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	2320      	movs	r3, #32
 8004eb8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8004ec2:	2003      	movs	r0, #3
 8004ec4:	e7b7      	b.n	8004e36 <UART_CheckIdleState+0x3a>

08004ec6 <HAL_UART_Init>:
  if (huart == NULL)
 8004ec6:	b378      	cbz	r0, 8004f28 <HAL_UART_Init+0x62>
{
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004ecc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004ed0:	b30b      	cbz	r3, 8004f16 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ed2:	2324      	movs	r3, #36	; 0x24
 8004ed4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff fd14 	bl	8004910 <UART_SetConfig>
 8004ee8:	2801      	cmp	r0, #1
 8004eea:	d013      	beq.n	8004f14 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eee:	b9bb      	cbnz	r3, 8004f20 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	6853      	ldr	r3, [r2, #4]
 8004ef4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004ef8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	6893      	ldr	r3, [r2, #8]
 8004efe:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004f02:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	6813      	ldr	r3, [r2, #0]
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff ff74 	bl	8004dfc <UART_CheckIdleState>
}
 8004f14:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004f16:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8004f1a:	f7fc f98f 	bl	800123c <HAL_UART_MspInit>
 8004f1e:	e7d8      	b.n	8004ed2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004f20:	4620      	mov	r0, r4
 8004f22:	f7ff febb 	bl	8004c9c <UART_AdvFeatureConfig>
 8004f26:	e7e3      	b.n	8004ef0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004f28:	2001      	movs	r0, #1
}
 8004f2a:	4770      	bx	lr

08004f2c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f2c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004f2e:	b92b      	cbnz	r3, 8004f3c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f36:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8004f3a:	4770      	bx	lr
{
 8004f3c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f3e:	6803      	ldr	r3, [r0, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f46:	6899      	ldr	r1, [r3, #8]
 8004f48:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f4a:	4d09      	ldr	r5, [pc, #36]	; (8004f70 <UARTEx_SetNbDataToProcess+0x44>)
 8004f4c:	5c6b      	ldrb	r3, [r5, r1]
 8004f4e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f50:	4c08      	ldr	r4, [pc, #32]	; (8004f74 <UARTEx_SetNbDataToProcess+0x48>)
 8004f52:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f54:	fb93 f3f1 	sdiv	r3, r3, r1
 8004f58:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f5c:	5cab      	ldrb	r3, [r5, r2]
 8004f5e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f60:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f62:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f66:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8004f6a:	bc30      	pop	{r4, r5}
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	08005a80 	.word	0x08005a80
 8004f74:	08005a78 	.word	0x08005a78

08004f78 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004f78:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d018      	beq.n	8004fb2 <HAL_UARTEx_DisableFifoMode+0x3a>
 8004f80:	2301      	movs	r3, #1
 8004f82:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004f86:	2324      	movs	r3, #36	; 0x24
 8004f88:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f8c:	6803      	ldr	r3, [r0, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004f90:	6819      	ldr	r1, [r3, #0]
 8004f92:	f021 0101 	bic.w	r1, r1, #1
 8004f96:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f98:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fa0:	6801      	ldr	r1, [r0, #0]
 8004fa2:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8004faa:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8004fae:	4618      	mov	r0, r3
 8004fb0:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004fb2:	2002      	movs	r0, #2
}
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004fb6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004fb8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d01d      	beq.n	8004ffc <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004fc8:	2324      	movs	r3, #36	; 0x24
 8004fca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fce:	6803      	ldr	r3, [r0, #0]
 8004fd0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	f022 0201 	bic.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fda:	6802      	ldr	r2, [r0, #0]
 8004fdc:	6893      	ldr	r3, [r2, #8]
 8004fde:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004fe2:	4319      	orrs	r1, r3
 8004fe4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004fe6:	f7ff ffa1 	bl	8004f2c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004fee:	2320      	movs	r3, #32
 8004ff0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004ffc:	2002      	movs	r0, #2
 8004ffe:	e7fc      	b.n	8004ffa <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005000 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005000:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005002:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005006:	2b01      	cmp	r3, #1
 8005008:	d01d      	beq.n	8005046 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800500a:	4604      	mov	r4, r0
 800500c:	2301      	movs	r3, #1
 800500e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005012:	2324      	movs	r3, #36	; 0x24
 8005014:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005018:	6803      	ldr	r3, [r0, #0]
 800501a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005024:	6802      	ldr	r2, [r0, #0]
 8005026:	6893      	ldr	r3, [r2, #8]
 8005028:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800502c:	4319      	orrs	r1, r3
 800502e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005030:	f7ff ff7c 	bl	8004f2c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005038:	2320      	movs	r3, #32
 800503a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800503e:	2000      	movs	r0, #0
 8005040:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005044:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005046:	2002      	movs	r0, #2
 8005048:	e7fc      	b.n	8005044 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800504c <siprintf>:
 800504c:	b40e      	push	{r1, r2, r3}
 800504e:	b500      	push	{lr}
 8005050:	b09c      	sub	sp, #112	; 0x70
 8005052:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005056:	ab1d      	add	r3, sp, #116	; 0x74
 8005058:	9002      	str	r0, [sp, #8]
 800505a:	9006      	str	r0, [sp, #24]
 800505c:	9107      	str	r1, [sp, #28]
 800505e:	9104      	str	r1, [sp, #16]
 8005060:	4808      	ldr	r0, [pc, #32]	; (8005084 <siprintf+0x38>)
 8005062:	4909      	ldr	r1, [pc, #36]	; (8005088 <siprintf+0x3c>)
 8005064:	f853 2b04 	ldr.w	r2, [r3], #4
 8005068:	9105      	str	r1, [sp, #20]
 800506a:	a902      	add	r1, sp, #8
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	f000 f992 	bl	8005398 <_svfiprintf_r>
 8005074:	9b02      	ldr	r3, [sp, #8]
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	b01c      	add	sp, #112	; 0x70
 800507c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005080:	b003      	add	sp, #12
 8005082:	4770      	bx	lr
 8005084:	2000006c 	.word	0x2000006c
 8005088:	ffff0208 	.word	0xffff0208

0800508c <memset>:
 800508c:	4402      	add	r2, r0
 800508e:	4603      	mov	r3, r0
 8005090:	4293      	cmp	r3, r2
 8005092:	d100      	bne.n	8005096 <memset+0xa>
 8005094:	4770      	bx	lr
 8005096:	f803 1b01 	strb.w	r1, [r3], #1
 800509a:	e7f9      	b.n	8005090 <memset+0x4>

0800509c <__errno>:
 800509c:	4b01      	ldr	r3, [pc, #4]	; (80050a4 <__errno+0x8>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	2000006c 	.word	0x2000006c

080050a8 <__libc_init_array>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4d0d      	ldr	r5, [pc, #52]	; (80050e0 <__libc_init_array+0x38>)
 80050ac:	2600      	movs	r6, #0
 80050ae:	4c0d      	ldr	r4, [pc, #52]	; (80050e4 <__libc_init_array+0x3c>)
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	42a6      	cmp	r6, r4
 80050b6:	d109      	bne.n	80050cc <__libc_init_array+0x24>
 80050b8:	4d0b      	ldr	r5, [pc, #44]	; (80050e8 <__libc_init_array+0x40>)
 80050ba:	2600      	movs	r6, #0
 80050bc:	4c0b      	ldr	r4, [pc, #44]	; (80050ec <__libc_init_array+0x44>)
 80050be:	f000 fc77 	bl	80059b0 <_init>
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	42a6      	cmp	r6, r4
 80050c8:	d105      	bne.n	80050d6 <__libc_init_array+0x2e>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d0:	3601      	adds	r6, #1
 80050d2:	4798      	blx	r3
 80050d4:	e7ee      	b.n	80050b4 <__libc_init_array+0xc>
 80050d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050da:	3601      	adds	r6, #1
 80050dc:	4798      	blx	r3
 80050de:	e7f2      	b.n	80050c6 <__libc_init_array+0x1e>
 80050e0:	08005ac4 	.word	0x08005ac4
 80050e4:	08005ac4 	.word	0x08005ac4
 80050e8:	08005ac4 	.word	0x08005ac4
 80050ec:	08005ac8 	.word	0x08005ac8

080050f0 <__retarget_lock_acquire_recursive>:
 80050f0:	4770      	bx	lr

080050f2 <__retarget_lock_release_recursive>:
 80050f2:	4770      	bx	lr

080050f4 <_free_r>:
 80050f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050f6:	2900      	cmp	r1, #0
 80050f8:	d043      	beq.n	8005182 <_free_r+0x8e>
 80050fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fe:	1f0c      	subs	r4, r1, #4
 8005100:	9001      	str	r0, [sp, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfb8      	it	lt
 8005106:	18e4      	addlt	r4, r4, r3
 8005108:	f000 f8e0 	bl	80052cc <__malloc_lock>
 800510c:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <_free_r+0x94>)
 800510e:	9801      	ldr	r0, [sp, #4]
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	b933      	cbnz	r3, 8005122 <_free_r+0x2e>
 8005114:	6063      	str	r3, [r4, #4]
 8005116:	6014      	str	r4, [r2, #0]
 8005118:	b003      	add	sp, #12
 800511a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800511e:	f000 b8db 	b.w	80052d8 <__malloc_unlock>
 8005122:	42a3      	cmp	r3, r4
 8005124:	d908      	bls.n	8005138 <_free_r+0x44>
 8005126:	6825      	ldr	r5, [r4, #0]
 8005128:	1961      	adds	r1, r4, r5
 800512a:	428b      	cmp	r3, r1
 800512c:	bf01      	itttt	eq
 800512e:	6819      	ldreq	r1, [r3, #0]
 8005130:	685b      	ldreq	r3, [r3, #4]
 8005132:	1949      	addeq	r1, r1, r5
 8005134:	6021      	streq	r1, [r4, #0]
 8005136:	e7ed      	b.n	8005114 <_free_r+0x20>
 8005138:	461a      	mov	r2, r3
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	b10b      	cbz	r3, 8005142 <_free_r+0x4e>
 800513e:	42a3      	cmp	r3, r4
 8005140:	d9fa      	bls.n	8005138 <_free_r+0x44>
 8005142:	6811      	ldr	r1, [r2, #0]
 8005144:	1855      	adds	r5, r2, r1
 8005146:	42a5      	cmp	r5, r4
 8005148:	d10b      	bne.n	8005162 <_free_r+0x6e>
 800514a:	6824      	ldr	r4, [r4, #0]
 800514c:	4421      	add	r1, r4
 800514e:	1854      	adds	r4, r2, r1
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	42a3      	cmp	r3, r4
 8005154:	d1e0      	bne.n	8005118 <_free_r+0x24>
 8005156:	681c      	ldr	r4, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	440c      	add	r4, r1
 800515c:	6053      	str	r3, [r2, #4]
 800515e:	6014      	str	r4, [r2, #0]
 8005160:	e7da      	b.n	8005118 <_free_r+0x24>
 8005162:	d902      	bls.n	800516a <_free_r+0x76>
 8005164:	230c      	movs	r3, #12
 8005166:	6003      	str	r3, [r0, #0]
 8005168:	e7d6      	b.n	8005118 <_free_r+0x24>
 800516a:	6825      	ldr	r5, [r4, #0]
 800516c:	1961      	adds	r1, r4, r5
 800516e:	428b      	cmp	r3, r1
 8005170:	bf02      	ittt	eq
 8005172:	6819      	ldreq	r1, [r3, #0]
 8005174:	685b      	ldreq	r3, [r3, #4]
 8005176:	1949      	addeq	r1, r1, r5
 8005178:	6063      	str	r3, [r4, #4]
 800517a:	bf08      	it	eq
 800517c:	6021      	streq	r1, [r4, #0]
 800517e:	6054      	str	r4, [r2, #4]
 8005180:	e7ca      	b.n	8005118 <_free_r+0x24>
 8005182:	b003      	add	sp, #12
 8005184:	bd30      	pop	{r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	200003f8 	.word	0x200003f8

0800518c <sbrk_aligned>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	4e0e      	ldr	r6, [pc, #56]	; (80051c8 <sbrk_aligned+0x3c>)
 8005190:	460c      	mov	r4, r1
 8005192:	4605      	mov	r5, r0
 8005194:	6831      	ldr	r1, [r6, #0]
 8005196:	b911      	cbnz	r1, 800519e <sbrk_aligned+0x12>
 8005198:	f000 fba8 	bl	80058ec <_sbrk_r>
 800519c:	6030      	str	r0, [r6, #0]
 800519e:	4621      	mov	r1, r4
 80051a0:	4628      	mov	r0, r5
 80051a2:	f000 fba3 	bl	80058ec <_sbrk_r>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	d00a      	beq.n	80051c0 <sbrk_aligned+0x34>
 80051aa:	1cc4      	adds	r4, r0, #3
 80051ac:	f024 0403 	bic.w	r4, r4, #3
 80051b0:	42a0      	cmp	r0, r4
 80051b2:	d007      	beq.n	80051c4 <sbrk_aligned+0x38>
 80051b4:	1a21      	subs	r1, r4, r0
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 fb98 	bl	80058ec <_sbrk_r>
 80051bc:	3001      	adds	r0, #1
 80051be:	d101      	bne.n	80051c4 <sbrk_aligned+0x38>
 80051c0:	f04f 34ff 	mov.w	r4, #4294967295
 80051c4:	4620      	mov	r0, r4
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	200003fc 	.word	0x200003fc

080051cc <_malloc_r>:
 80051cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d0:	1ccd      	adds	r5, r1, #3
 80051d2:	4607      	mov	r7, r0
 80051d4:	f025 0503 	bic.w	r5, r5, #3
 80051d8:	3508      	adds	r5, #8
 80051da:	2d0c      	cmp	r5, #12
 80051dc:	bf38      	it	cc
 80051de:	250c      	movcc	r5, #12
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	db01      	blt.n	80051e8 <_malloc_r+0x1c>
 80051e4:	42a9      	cmp	r1, r5
 80051e6:	d905      	bls.n	80051f4 <_malloc_r+0x28>
 80051e8:	230c      	movs	r3, #12
 80051ea:	2600      	movs	r6, #0
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	4630      	mov	r0, r6
 80051f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052c8 <_malloc_r+0xfc>
 80051f8:	f000 f868 	bl	80052cc <__malloc_lock>
 80051fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005200:	461c      	mov	r4, r3
 8005202:	bb5c      	cbnz	r4, 800525c <_malloc_r+0x90>
 8005204:	4629      	mov	r1, r5
 8005206:	4638      	mov	r0, r7
 8005208:	f7ff ffc0 	bl	800518c <sbrk_aligned>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	4604      	mov	r4, r0
 8005210:	d155      	bne.n	80052be <_malloc_r+0xf2>
 8005212:	f8d8 4000 	ldr.w	r4, [r8]
 8005216:	4626      	mov	r6, r4
 8005218:	2e00      	cmp	r6, #0
 800521a:	d145      	bne.n	80052a8 <_malloc_r+0xdc>
 800521c:	2c00      	cmp	r4, #0
 800521e:	d048      	beq.n	80052b2 <_malloc_r+0xe6>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	4631      	mov	r1, r6
 8005224:	4638      	mov	r0, r7
 8005226:	eb04 0903 	add.w	r9, r4, r3
 800522a:	f000 fb5f 	bl	80058ec <_sbrk_r>
 800522e:	4581      	cmp	r9, r0
 8005230:	d13f      	bne.n	80052b2 <_malloc_r+0xe6>
 8005232:	6821      	ldr	r1, [r4, #0]
 8005234:	4638      	mov	r0, r7
 8005236:	1a6d      	subs	r5, r5, r1
 8005238:	4629      	mov	r1, r5
 800523a:	f7ff ffa7 	bl	800518c <sbrk_aligned>
 800523e:	3001      	adds	r0, #1
 8005240:	d037      	beq.n	80052b2 <_malloc_r+0xe6>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	442b      	add	r3, r5
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	f8d8 3000 	ldr.w	r3, [r8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d038      	beq.n	80052c2 <_malloc_r+0xf6>
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	42a2      	cmp	r2, r4
 8005254:	d12b      	bne.n	80052ae <_malloc_r+0xe2>
 8005256:	2200      	movs	r2, #0
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	e00f      	b.n	800527c <_malloc_r+0xb0>
 800525c:	6822      	ldr	r2, [r4, #0]
 800525e:	1b52      	subs	r2, r2, r5
 8005260:	d41f      	bmi.n	80052a2 <_malloc_r+0xd6>
 8005262:	2a0b      	cmp	r2, #11
 8005264:	d917      	bls.n	8005296 <_malloc_r+0xca>
 8005266:	1961      	adds	r1, r4, r5
 8005268:	42a3      	cmp	r3, r4
 800526a:	6025      	str	r5, [r4, #0]
 800526c:	bf18      	it	ne
 800526e:	6059      	strne	r1, [r3, #4]
 8005270:	6863      	ldr	r3, [r4, #4]
 8005272:	bf08      	it	eq
 8005274:	f8c8 1000 	streq.w	r1, [r8]
 8005278:	5162      	str	r2, [r4, r5]
 800527a:	604b      	str	r3, [r1, #4]
 800527c:	f104 060b 	add.w	r6, r4, #11
 8005280:	4638      	mov	r0, r7
 8005282:	f000 f829 	bl	80052d8 <__malloc_unlock>
 8005286:	1d23      	adds	r3, r4, #4
 8005288:	f026 0607 	bic.w	r6, r6, #7
 800528c:	1af2      	subs	r2, r6, r3
 800528e:	d0ae      	beq.n	80051ee <_malloc_r+0x22>
 8005290:	1b9b      	subs	r3, r3, r6
 8005292:	50a3      	str	r3, [r4, r2]
 8005294:	e7ab      	b.n	80051ee <_malloc_r+0x22>
 8005296:	42a3      	cmp	r3, r4
 8005298:	6862      	ldr	r2, [r4, #4]
 800529a:	d1dd      	bne.n	8005258 <_malloc_r+0x8c>
 800529c:	f8c8 2000 	str.w	r2, [r8]
 80052a0:	e7ec      	b.n	800527c <_malloc_r+0xb0>
 80052a2:	4623      	mov	r3, r4
 80052a4:	6864      	ldr	r4, [r4, #4]
 80052a6:	e7ac      	b.n	8005202 <_malloc_r+0x36>
 80052a8:	4634      	mov	r4, r6
 80052aa:	6876      	ldr	r6, [r6, #4]
 80052ac:	e7b4      	b.n	8005218 <_malloc_r+0x4c>
 80052ae:	4613      	mov	r3, r2
 80052b0:	e7cc      	b.n	800524c <_malloc_r+0x80>
 80052b2:	230c      	movs	r3, #12
 80052b4:	4638      	mov	r0, r7
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	f000 f80e 	bl	80052d8 <__malloc_unlock>
 80052bc:	e797      	b.n	80051ee <_malloc_r+0x22>
 80052be:	6025      	str	r5, [r4, #0]
 80052c0:	e7dc      	b.n	800527c <_malloc_r+0xb0>
 80052c2:	605b      	str	r3, [r3, #4]
 80052c4:	deff      	udf	#255	; 0xff
 80052c6:	bf00      	nop
 80052c8:	200003f8 	.word	0x200003f8

080052cc <__malloc_lock>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__malloc_lock+0x8>)
 80052ce:	f7ff bf0f 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 80052d2:	bf00      	nop
 80052d4:	200003f4 	.word	0x200003f4

080052d8 <__malloc_unlock>:
 80052d8:	4801      	ldr	r0, [pc, #4]	; (80052e0 <__malloc_unlock+0x8>)
 80052da:	f7ff bf0a 	b.w	80050f2 <__retarget_lock_release_recursive>
 80052de:	bf00      	nop
 80052e0:	200003f4 	.word	0x200003f4

080052e4 <__ssputs_r>:
 80052e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	461f      	mov	r7, r3
 80052ea:	688e      	ldr	r6, [r1, #8]
 80052ec:	4682      	mov	sl, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	42be      	cmp	r6, r7
 80052f2:	4690      	mov	r8, r2
 80052f4:	680b      	ldr	r3, [r1, #0]
 80052f6:	d82c      	bhi.n	8005352 <__ssputs_r+0x6e>
 80052f8:	898a      	ldrh	r2, [r1, #12]
 80052fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052fe:	d026      	beq.n	800534e <__ssputs_r+0x6a>
 8005300:	6965      	ldr	r5, [r4, #20]
 8005302:	6909      	ldr	r1, [r1, #16]
 8005304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005308:	eba3 0901 	sub.w	r9, r3, r1
 800530c:	1c7b      	adds	r3, r7, #1
 800530e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005312:	444b      	add	r3, r9
 8005314:	106d      	asrs	r5, r5, #1
 8005316:	429d      	cmp	r5, r3
 8005318:	bf38      	it	cc
 800531a:	461d      	movcc	r5, r3
 800531c:	0553      	lsls	r3, r2, #21
 800531e:	d527      	bpl.n	8005370 <__ssputs_r+0x8c>
 8005320:	4629      	mov	r1, r5
 8005322:	f7ff ff53 	bl	80051cc <_malloc_r>
 8005326:	4606      	mov	r6, r0
 8005328:	b360      	cbz	r0, 8005384 <__ssputs_r+0xa0>
 800532a:	464a      	mov	r2, r9
 800532c:	6921      	ldr	r1, [r4, #16]
 800532e:	f000 fafb 	bl	8005928 <memcpy>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533c:	81a3      	strh	r3, [r4, #12]
 800533e:	6126      	str	r6, [r4, #16]
 8005340:	444e      	add	r6, r9
 8005342:	6165      	str	r5, [r4, #20]
 8005344:	eba5 0509 	sub.w	r5, r5, r9
 8005348:	6026      	str	r6, [r4, #0]
 800534a:	463e      	mov	r6, r7
 800534c:	60a5      	str	r5, [r4, #8]
 800534e:	42be      	cmp	r6, r7
 8005350:	d900      	bls.n	8005354 <__ssputs_r+0x70>
 8005352:	463e      	mov	r6, r7
 8005354:	4632      	mov	r2, r6
 8005356:	4641      	mov	r1, r8
 8005358:	6820      	ldr	r0, [r4, #0]
 800535a:	f000 faad 	bl	80058b8 <memmove>
 800535e:	68a3      	ldr	r3, [r4, #8]
 8005360:	2000      	movs	r0, #0
 8005362:	1b9b      	subs	r3, r3, r6
 8005364:	60a3      	str	r3, [r4, #8]
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	4433      	add	r3, r6
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005370:	462a      	mov	r2, r5
 8005372:	f000 fae6 	bl	8005942 <_realloc_r>
 8005376:	4606      	mov	r6, r0
 8005378:	2800      	cmp	r0, #0
 800537a:	d1e0      	bne.n	800533e <__ssputs_r+0x5a>
 800537c:	6921      	ldr	r1, [r4, #16]
 800537e:	4650      	mov	r0, sl
 8005380:	f7ff feb8 	bl	80050f4 <_free_r>
 8005384:	230c      	movs	r3, #12
 8005386:	f04f 30ff 	mov.w	r0, #4294967295
 800538a:	f8ca 3000 	str.w	r3, [sl]
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	e7e9      	b.n	800536c <__ssputs_r+0x88>

08005398 <_svfiprintf_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	4698      	mov	r8, r3
 800539e:	898b      	ldrh	r3, [r1, #12]
 80053a0:	b09d      	sub	sp, #116	; 0x74
 80053a2:	4607      	mov	r7, r0
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	460d      	mov	r5, r1
 80053a8:	4614      	mov	r4, r2
 80053aa:	d50e      	bpl.n	80053ca <_svfiprintf_r+0x32>
 80053ac:	690b      	ldr	r3, [r1, #16]
 80053ae:	b963      	cbnz	r3, 80053ca <_svfiprintf_r+0x32>
 80053b0:	2140      	movs	r1, #64	; 0x40
 80053b2:	f7ff ff0b 	bl	80051cc <_malloc_r>
 80053b6:	6028      	str	r0, [r5, #0]
 80053b8:	6128      	str	r0, [r5, #16]
 80053ba:	b920      	cbnz	r0, 80053c6 <_svfiprintf_r+0x2e>
 80053bc:	230c      	movs	r3, #12
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	e0d0      	b.n	8005568 <_svfiprintf_r+0x1d0>
 80053c6:	2340      	movs	r3, #64	; 0x40
 80053c8:	616b      	str	r3, [r5, #20]
 80053ca:	2300      	movs	r3, #0
 80053cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d0:	f04f 0901 	mov.w	r9, #1
 80053d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005580 <_svfiprintf_r+0x1e8>
 80053d8:	9309      	str	r3, [sp, #36]	; 0x24
 80053da:	2320      	movs	r3, #32
 80053dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053e0:	2330      	movs	r3, #48	; 0x30
 80053e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053e6:	4623      	mov	r3, r4
 80053e8:	469a      	mov	sl, r3
 80053ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ee:	b10a      	cbz	r2, 80053f4 <_svfiprintf_r+0x5c>
 80053f0:	2a25      	cmp	r2, #37	; 0x25
 80053f2:	d1f9      	bne.n	80053e8 <_svfiprintf_r+0x50>
 80053f4:	ebba 0b04 	subs.w	fp, sl, r4
 80053f8:	d00b      	beq.n	8005412 <_svfiprintf_r+0x7a>
 80053fa:	465b      	mov	r3, fp
 80053fc:	4622      	mov	r2, r4
 80053fe:	4629      	mov	r1, r5
 8005400:	4638      	mov	r0, r7
 8005402:	f7ff ff6f 	bl	80052e4 <__ssputs_r>
 8005406:	3001      	adds	r0, #1
 8005408:	f000 80a9 	beq.w	800555e <_svfiprintf_r+0x1c6>
 800540c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800540e:	445a      	add	r2, fp
 8005410:	9209      	str	r2, [sp, #36]	; 0x24
 8005412:	f89a 3000 	ldrb.w	r3, [sl]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80a1 	beq.w	800555e <_svfiprintf_r+0x1c6>
 800541c:	2300      	movs	r3, #0
 800541e:	f04f 32ff 	mov.w	r2, #4294967295
 8005422:	f10a 0a01 	add.w	sl, sl, #1
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	9307      	str	r3, [sp, #28]
 800542a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800542e:	931a      	str	r3, [sp, #104]	; 0x68
 8005430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005434:	4654      	mov	r4, sl
 8005436:	2205      	movs	r2, #5
 8005438:	4851      	ldr	r0, [pc, #324]	; (8005580 <_svfiprintf_r+0x1e8>)
 800543a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800543e:	f000 fa65 	bl	800590c <memchr>
 8005442:	9a04      	ldr	r2, [sp, #16]
 8005444:	b9d8      	cbnz	r0, 800547e <_svfiprintf_r+0xe6>
 8005446:	06d0      	lsls	r0, r2, #27
 8005448:	bf44      	itt	mi
 800544a:	2320      	movmi	r3, #32
 800544c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005450:	0711      	lsls	r1, r2, #28
 8005452:	bf44      	itt	mi
 8005454:	232b      	movmi	r3, #43	; 0x2b
 8005456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800545a:	f89a 3000 	ldrb.w	r3, [sl]
 800545e:	2b2a      	cmp	r3, #42	; 0x2a
 8005460:	d015      	beq.n	800548e <_svfiprintf_r+0xf6>
 8005462:	9a07      	ldr	r2, [sp, #28]
 8005464:	4654      	mov	r4, sl
 8005466:	2000      	movs	r0, #0
 8005468:	f04f 0c0a 	mov.w	ip, #10
 800546c:	4621      	mov	r1, r4
 800546e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005472:	3b30      	subs	r3, #48	; 0x30
 8005474:	2b09      	cmp	r3, #9
 8005476:	d94d      	bls.n	8005514 <_svfiprintf_r+0x17c>
 8005478:	b1b0      	cbz	r0, 80054a8 <_svfiprintf_r+0x110>
 800547a:	9207      	str	r2, [sp, #28]
 800547c:	e014      	b.n	80054a8 <_svfiprintf_r+0x110>
 800547e:	eba0 0308 	sub.w	r3, r0, r8
 8005482:	46a2      	mov	sl, r4
 8005484:	fa09 f303 	lsl.w	r3, r9, r3
 8005488:	4313      	orrs	r3, r2
 800548a:	9304      	str	r3, [sp, #16]
 800548c:	e7d2      	b.n	8005434 <_svfiprintf_r+0x9c>
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	1d19      	adds	r1, r3, #4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	9103      	str	r1, [sp, #12]
 8005498:	bfbb      	ittet	lt
 800549a:	425b      	neglt	r3, r3
 800549c:	f042 0202 	orrlt.w	r2, r2, #2
 80054a0:	9307      	strge	r3, [sp, #28]
 80054a2:	9307      	strlt	r3, [sp, #28]
 80054a4:	bfb8      	it	lt
 80054a6:	9204      	strlt	r2, [sp, #16]
 80054a8:	7823      	ldrb	r3, [r4, #0]
 80054aa:	2b2e      	cmp	r3, #46	; 0x2e
 80054ac:	d10c      	bne.n	80054c8 <_svfiprintf_r+0x130>
 80054ae:	7863      	ldrb	r3, [r4, #1]
 80054b0:	2b2a      	cmp	r3, #42	; 0x2a
 80054b2:	d134      	bne.n	800551e <_svfiprintf_r+0x186>
 80054b4:	9b03      	ldr	r3, [sp, #12]
 80054b6:	3402      	adds	r4, #2
 80054b8:	1d1a      	adds	r2, r3, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	9203      	str	r2, [sp, #12]
 80054c0:	bfb8      	it	lt
 80054c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80054c6:	9305      	str	r3, [sp, #20]
 80054c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005590 <_svfiprintf_r+0x1f8>
 80054cc:	2203      	movs	r2, #3
 80054ce:	7821      	ldrb	r1, [r4, #0]
 80054d0:	4650      	mov	r0, sl
 80054d2:	f000 fa1b 	bl	800590c <memchr>
 80054d6:	b138      	cbz	r0, 80054e8 <_svfiprintf_r+0x150>
 80054d8:	eba0 000a 	sub.w	r0, r0, sl
 80054dc:	2240      	movs	r2, #64	; 0x40
 80054de:	9b04      	ldr	r3, [sp, #16]
 80054e0:	3401      	adds	r4, #1
 80054e2:	4082      	lsls	r2, r0
 80054e4:	4313      	orrs	r3, r2
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ec:	2206      	movs	r2, #6
 80054ee:	4825      	ldr	r0, [pc, #148]	; (8005584 <_svfiprintf_r+0x1ec>)
 80054f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054f4:	f000 fa0a 	bl	800590c <memchr>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d038      	beq.n	800556e <_svfiprintf_r+0x1d6>
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <_svfiprintf_r+0x1f0>)
 80054fe:	bb1b      	cbnz	r3, 8005548 <_svfiprintf_r+0x1b0>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	3307      	adds	r3, #7
 8005504:	f023 0307 	bic.w	r3, r3, #7
 8005508:	3308      	adds	r3, #8
 800550a:	9303      	str	r3, [sp, #12]
 800550c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550e:	4433      	add	r3, r6
 8005510:	9309      	str	r3, [sp, #36]	; 0x24
 8005512:	e768      	b.n	80053e6 <_svfiprintf_r+0x4e>
 8005514:	fb0c 3202 	mla	r2, ip, r2, r3
 8005518:	460c      	mov	r4, r1
 800551a:	2001      	movs	r0, #1
 800551c:	e7a6      	b.n	800546c <_svfiprintf_r+0xd4>
 800551e:	2300      	movs	r3, #0
 8005520:	3401      	adds	r4, #1
 8005522:	f04f 0c0a 	mov.w	ip, #10
 8005526:	4619      	mov	r1, r3
 8005528:	9305      	str	r3, [sp, #20]
 800552a:	4620      	mov	r0, r4
 800552c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005530:	3a30      	subs	r2, #48	; 0x30
 8005532:	2a09      	cmp	r2, #9
 8005534:	d903      	bls.n	800553e <_svfiprintf_r+0x1a6>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0c6      	beq.n	80054c8 <_svfiprintf_r+0x130>
 800553a:	9105      	str	r1, [sp, #20]
 800553c:	e7c4      	b.n	80054c8 <_svfiprintf_r+0x130>
 800553e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005542:	4604      	mov	r4, r0
 8005544:	2301      	movs	r3, #1
 8005546:	e7f0      	b.n	800552a <_svfiprintf_r+0x192>
 8005548:	ab03      	add	r3, sp, #12
 800554a:	462a      	mov	r2, r5
 800554c:	a904      	add	r1, sp, #16
 800554e:	4638      	mov	r0, r7
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	4b0e      	ldr	r3, [pc, #56]	; (800558c <_svfiprintf_r+0x1f4>)
 8005554:	f3af 8000 	nop.w
 8005558:	1c42      	adds	r2, r0, #1
 800555a:	4606      	mov	r6, r0
 800555c:	d1d6      	bne.n	800550c <_svfiprintf_r+0x174>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	065b      	lsls	r3, r3, #25
 8005562:	f53f af2d 	bmi.w	80053c0 <_svfiprintf_r+0x28>
 8005566:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005568:	b01d      	add	sp, #116	; 0x74
 800556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556e:	ab03      	add	r3, sp, #12
 8005570:	462a      	mov	r2, r5
 8005572:	a904      	add	r1, sp, #16
 8005574:	4638      	mov	r0, r7
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4b04      	ldr	r3, [pc, #16]	; (800558c <_svfiprintf_r+0x1f4>)
 800557a:	f000 f87d 	bl	8005678 <_printf_i>
 800557e:	e7eb      	b.n	8005558 <_svfiprintf_r+0x1c0>
 8005580:	08005a88 	.word	0x08005a88
 8005584:	08005a92 	.word	0x08005a92
 8005588:	00000000 	.word	0x00000000
 800558c:	080052e5 	.word	0x080052e5
 8005590:	08005a8e 	.word	0x08005a8e

08005594 <_printf_common>:
 8005594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	4616      	mov	r6, r2
 800559a:	4699      	mov	r9, r3
 800559c:	688a      	ldr	r2, [r1, #8]
 800559e:	4607      	mov	r7, r0
 80055a0:	690b      	ldr	r3, [r1, #16]
 80055a2:	460c      	mov	r4, r1
 80055a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055a8:	4293      	cmp	r3, r2
 80055aa:	bfb8      	it	lt
 80055ac:	4613      	movlt	r3, r2
 80055ae:	6033      	str	r3, [r6, #0]
 80055b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055b4:	b10a      	cbz	r2, 80055ba <_printf_common+0x26>
 80055b6:	3301      	adds	r3, #1
 80055b8:	6033      	str	r3, [r6, #0]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	0699      	lsls	r1, r3, #26
 80055be:	bf42      	ittt	mi
 80055c0:	6833      	ldrmi	r3, [r6, #0]
 80055c2:	3302      	addmi	r3, #2
 80055c4:	6033      	strmi	r3, [r6, #0]
 80055c6:	6825      	ldr	r5, [r4, #0]
 80055c8:	f015 0506 	ands.w	r5, r5, #6
 80055cc:	d106      	bne.n	80055dc <_printf_common+0x48>
 80055ce:	f104 0a19 	add.w	sl, r4, #25
 80055d2:	68e3      	ldr	r3, [r4, #12]
 80055d4:	6832      	ldr	r2, [r6, #0]
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	42ab      	cmp	r3, r5
 80055da:	dc2b      	bgt.n	8005634 <_printf_common+0xa0>
 80055dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e0:	1e13      	subs	r3, r2, #0
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	bf18      	it	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	0692      	lsls	r2, r2, #26
 80055ea:	d430      	bmi.n	800564e <_printf_common+0xba>
 80055ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f0:	4649      	mov	r1, r9
 80055f2:	4638      	mov	r0, r7
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d023      	beq.n	8005642 <_printf_common+0xae>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	341a      	adds	r4, #26
 80055fe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005602:	f003 0306 	and.w	r3, r3, #6
 8005606:	2b04      	cmp	r3, #4
 8005608:	bf0a      	itet	eq
 800560a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800560e:	2500      	movne	r5, #0
 8005610:	6833      	ldreq	r3, [r6, #0]
 8005612:	f04f 0600 	mov.w	r6, #0
 8005616:	bf08      	it	eq
 8005618:	1aed      	subeq	r5, r5, r3
 800561a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800561e:	bf08      	it	eq
 8005620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005624:	4293      	cmp	r3, r2
 8005626:	bfc4      	itt	gt
 8005628:	1a9b      	subgt	r3, r3, r2
 800562a:	18ed      	addgt	r5, r5, r3
 800562c:	42b5      	cmp	r5, r6
 800562e:	d11a      	bne.n	8005666 <_printf_common+0xd2>
 8005630:	2000      	movs	r0, #0
 8005632:	e008      	b.n	8005646 <_printf_common+0xb2>
 8005634:	2301      	movs	r3, #1
 8005636:	4652      	mov	r2, sl
 8005638:	4649      	mov	r1, r9
 800563a:	4638      	mov	r0, r7
 800563c:	47c0      	blx	r8
 800563e:	3001      	adds	r0, #1
 8005640:	d103      	bne.n	800564a <_printf_common+0xb6>
 8005642:	f04f 30ff 	mov.w	r0, #4294967295
 8005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564a:	3501      	adds	r5, #1
 800564c:	e7c1      	b.n	80055d2 <_printf_common+0x3e>
 800564e:	18e1      	adds	r1, r4, r3
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	2030      	movs	r0, #48	; 0x30
 8005654:	3302      	adds	r3, #2
 8005656:	4422      	add	r2, r4
 8005658:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800565c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005664:	e7c2      	b.n	80055ec <_printf_common+0x58>
 8005666:	2301      	movs	r3, #1
 8005668:	4622      	mov	r2, r4
 800566a:	4649      	mov	r1, r9
 800566c:	4638      	mov	r0, r7
 800566e:	47c0      	blx	r8
 8005670:	3001      	adds	r0, #1
 8005672:	d0e6      	beq.n	8005642 <_printf_common+0xae>
 8005674:	3601      	adds	r6, #1
 8005676:	e7d9      	b.n	800562c <_printf_common+0x98>

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	4691      	mov	r9, r2
 8005680:	4680      	mov	r8, r0
 8005682:	460c      	mov	r4, r1
 8005684:	2f78      	cmp	r7, #120	; 0x78
 8005686:	469a      	mov	sl, r3
 8005688:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800568a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	; 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d3 	beq.w	8005840 <_printf_i+0x1c8>
 800569a:	2f58      	cmp	r7, #88	; 0x58
 800569c:	f000 80bf 	beq.w	800581e <_printf_i+0x1a6>
 80056a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	; (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005827 	.word	0x08005827
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080057e3 	.word	0x080057e3
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	08005849 	.word	0x08005849
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	08005751 	.word	0x08005751
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	080057eb 	.word	0x080057eb
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	602a      	str	r2, [r5, #0]
 8005718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e09e      	b.n	8005862 <_printf_i+0x1ea>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	0607      	lsls	r7, r0, #24
 800572a:	f103 0104 	add.w	r1, r3, #4
 800572e:	6029      	str	r1, [r5, #0]
 8005730:	d501      	bpl.n	8005736 <_printf_i+0xbe>
 8005732:	681e      	ldr	r6, [r3, #0]
 8005734:	e003      	b.n	800573e <_printf_i+0xc6>
 8005736:	0646      	lsls	r6, r0, #25
 8005738:	d5fb      	bpl.n	8005732 <_printf_i+0xba>
 800573a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800573e:	2e00      	cmp	r6, #0
 8005740:	da03      	bge.n	800574a <_printf_i+0xd2>
 8005742:	232d      	movs	r3, #45	; 0x2d
 8005744:	4276      	negs	r6, r6
 8005746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574a:	4859      	ldr	r0, [pc, #356]	; (80058b0 <_printf_i+0x238>)
 800574c:	230a      	movs	r3, #10
 800574e:	e012      	b.n	8005776 <_printf_i+0xfe>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	1d19      	adds	r1, r3, #4
 8005756:	6029      	str	r1, [r5, #0]
 8005758:	0605      	lsls	r5, r0, #24
 800575a:	d501      	bpl.n	8005760 <_printf_i+0xe8>
 800575c:	681e      	ldr	r6, [r3, #0]
 800575e:	e002      	b.n	8005766 <_printf_i+0xee>
 8005760:	0641      	lsls	r1, r0, #25
 8005762:	d5fb      	bpl.n	800575c <_printf_i+0xe4>
 8005764:	881e      	ldrh	r6, [r3, #0]
 8005766:	2f6f      	cmp	r7, #111	; 0x6f
 8005768:	4851      	ldr	r0, [pc, #324]	; (80058b0 <_printf_i+0x238>)
 800576a:	bf0c      	ite	eq
 800576c:	2308      	moveq	r3, #8
 800576e:	230a      	movne	r3, #10
 8005770:	2100      	movs	r1, #0
 8005772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005776:	6865      	ldr	r5, [r4, #4]
 8005778:	2d00      	cmp	r5, #0
 800577a:	60a5      	str	r5, [r4, #8]
 800577c:	bfa2      	ittt	ge
 800577e:	6821      	ldrge	r1, [r4, #0]
 8005780:	f021 0104 	bicge.w	r1, r1, #4
 8005784:	6021      	strge	r1, [r4, #0]
 8005786:	b90e      	cbnz	r6, 800578c <_printf_i+0x114>
 8005788:	2d00      	cmp	r5, #0
 800578a:	d04a      	beq.n	8005822 <_printf_i+0x1aa>
 800578c:	4615      	mov	r5, r2
 800578e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005792:	fb03 6711 	mls	r7, r3, r1, r6
 8005796:	5dc7      	ldrb	r7, [r0, r7]
 8005798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800579c:	4637      	mov	r7, r6
 800579e:	460e      	mov	r6, r1
 80057a0:	42bb      	cmp	r3, r7
 80057a2:	d9f4      	bls.n	800578e <_printf_i+0x116>
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d10b      	bne.n	80057c0 <_printf_i+0x148>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	07de      	lsls	r6, r3, #31
 80057ac:	d508      	bpl.n	80057c0 <_printf_i+0x148>
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	6861      	ldr	r1, [r4, #4]
 80057b2:	4299      	cmp	r1, r3
 80057b4:	bfde      	ittt	le
 80057b6:	2330      	movle	r3, #48	; 0x30
 80057b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057c0:	1b52      	subs	r2, r2, r5
 80057c2:	6122      	str	r2, [r4, #16]
 80057c4:	464b      	mov	r3, r9
 80057c6:	aa03      	add	r2, sp, #12
 80057c8:	4621      	mov	r1, r4
 80057ca:	4640      	mov	r0, r8
 80057cc:	f8cd a000 	str.w	sl, [sp]
 80057d0:	f7ff fee0 	bl	8005594 <_printf_common>
 80057d4:	3001      	adds	r0, #1
 80057d6:	d149      	bne.n	800586c <_printf_i+0x1f4>
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	b004      	add	sp, #16
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f043 0320 	orr.w	r3, r3, #32
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	2778      	movs	r7, #120	; 0x78
 80057ec:	4831      	ldr	r0, [pc, #196]	; (80058b4 <_printf_i+0x23c>)
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057f4:	061f      	lsls	r7, r3, #24
 80057f6:	6829      	ldr	r1, [r5, #0]
 80057f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80057fc:	d402      	bmi.n	8005804 <_printf_i+0x18c>
 80057fe:	065f      	lsls	r7, r3, #25
 8005800:	bf48      	it	mi
 8005802:	b2b6      	uxthmi	r6, r6
 8005804:	07df      	lsls	r7, r3, #31
 8005806:	6029      	str	r1, [r5, #0]
 8005808:	bf44      	itt	mi
 800580a:	f043 0320 	orrmi.w	r3, r3, #32
 800580e:	6023      	strmi	r3, [r4, #0]
 8005810:	b91e      	cbnz	r6, 800581a <_printf_i+0x1a2>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	f023 0320 	bic.w	r3, r3, #32
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	2310      	movs	r3, #16
 800581c:	e7a8      	b.n	8005770 <_printf_i+0xf8>
 800581e:	4824      	ldr	r0, [pc, #144]	; (80058b0 <_printf_i+0x238>)
 8005820:	e7e5      	b.n	80057ee <_printf_i+0x176>
 8005822:	4615      	mov	r5, r2
 8005824:	e7be      	b.n	80057a4 <_printf_i+0x12c>
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	6826      	ldr	r6, [r4, #0]
 800582a:	1d18      	adds	r0, r3, #4
 800582c:	6961      	ldr	r1, [r4, #20]
 800582e:	6028      	str	r0, [r5, #0]
 8005830:	0635      	lsls	r5, r6, #24
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	d501      	bpl.n	800583a <_printf_i+0x1c2>
 8005836:	6019      	str	r1, [r3, #0]
 8005838:	e002      	b.n	8005840 <_printf_i+0x1c8>
 800583a:	0670      	lsls	r0, r6, #25
 800583c:	d5fb      	bpl.n	8005836 <_printf_i+0x1be>
 800583e:	8019      	strh	r1, [r3, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	4615      	mov	r5, r2
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	e7bd      	b.n	80057c4 <_printf_i+0x14c>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	2100      	movs	r1, #0
 800584c:	1d1a      	adds	r2, r3, #4
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	681d      	ldr	r5, [r3, #0]
 8005852:	6862      	ldr	r2, [r4, #4]
 8005854:	4628      	mov	r0, r5
 8005856:	f000 f859 	bl	800590c <memchr>
 800585a:	b108      	cbz	r0, 8005860 <_printf_i+0x1e8>
 800585c:	1b40      	subs	r0, r0, r5
 800585e:	6060      	str	r0, [r4, #4]
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	2300      	movs	r3, #0
 8005866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586a:	e7ab      	b.n	80057c4 <_printf_i+0x14c>
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	462a      	mov	r2, r5
 8005870:	4649      	mov	r1, r9
 8005872:	4640      	mov	r0, r8
 8005874:	47d0      	blx	sl
 8005876:	3001      	adds	r0, #1
 8005878:	d0ae      	beq.n	80057d8 <_printf_i+0x160>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	079b      	lsls	r3, r3, #30
 800587e:	d413      	bmi.n	80058a8 <_printf_i+0x230>
 8005880:	68e0      	ldr	r0, [r4, #12]
 8005882:	9b03      	ldr	r3, [sp, #12]
 8005884:	4298      	cmp	r0, r3
 8005886:	bfb8      	it	lt
 8005888:	4618      	movlt	r0, r3
 800588a:	e7a7      	b.n	80057dc <_printf_i+0x164>
 800588c:	2301      	movs	r3, #1
 800588e:	4632      	mov	r2, r6
 8005890:	4649      	mov	r1, r9
 8005892:	4640      	mov	r0, r8
 8005894:	47d0      	blx	sl
 8005896:	3001      	adds	r0, #1
 8005898:	d09e      	beq.n	80057d8 <_printf_i+0x160>
 800589a:	3501      	adds	r5, #1
 800589c:	68e3      	ldr	r3, [r4, #12]
 800589e:	9903      	ldr	r1, [sp, #12]
 80058a0:	1a5b      	subs	r3, r3, r1
 80058a2:	42ab      	cmp	r3, r5
 80058a4:	dcf2      	bgt.n	800588c <_printf_i+0x214>
 80058a6:	e7eb      	b.n	8005880 <_printf_i+0x208>
 80058a8:	2500      	movs	r5, #0
 80058aa:	f104 0619 	add.w	r6, r4, #25
 80058ae:	e7f5      	b.n	800589c <_printf_i+0x224>
 80058b0:	08005a99 	.word	0x08005a99
 80058b4:	08005aaa 	.word	0x08005aaa

080058b8 <memmove>:
 80058b8:	4288      	cmp	r0, r1
 80058ba:	b510      	push	{r4, lr}
 80058bc:	eb01 0402 	add.w	r4, r1, r2
 80058c0:	d902      	bls.n	80058c8 <memmove+0x10>
 80058c2:	4284      	cmp	r4, r0
 80058c4:	4623      	mov	r3, r4
 80058c6:	d807      	bhi.n	80058d8 <memmove+0x20>
 80058c8:	1e43      	subs	r3, r0, #1
 80058ca:	42a1      	cmp	r1, r4
 80058cc:	d008      	beq.n	80058e0 <memmove+0x28>
 80058ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058d6:	e7f8      	b.n	80058ca <memmove+0x12>
 80058d8:	4402      	add	r2, r0
 80058da:	4601      	mov	r1, r0
 80058dc:	428a      	cmp	r2, r1
 80058de:	d100      	bne.n	80058e2 <memmove+0x2a>
 80058e0:	bd10      	pop	{r4, pc}
 80058e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ea:	e7f7      	b.n	80058dc <memmove+0x24>

080058ec <_sbrk_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	2300      	movs	r3, #0
 80058f0:	4d05      	ldr	r5, [pc, #20]	; (8005908 <_sbrk_r+0x1c>)
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fb fd08 	bl	800130c <_sbrk>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_sbrk_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_sbrk_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	200003f0 	.word	0x200003f0

0800590c <memchr>:
 800590c:	b2c9      	uxtb	r1, r1
 800590e:	4402      	add	r2, r0
 8005910:	b510      	push	{r4, lr}
 8005912:	4290      	cmp	r0, r2
 8005914:	4603      	mov	r3, r0
 8005916:	d101      	bne.n	800591c <memchr+0x10>
 8005918:	2300      	movs	r3, #0
 800591a:	e003      	b.n	8005924 <memchr+0x18>
 800591c:	781c      	ldrb	r4, [r3, #0]
 800591e:	3001      	adds	r0, #1
 8005920:	428c      	cmp	r4, r1
 8005922:	d1f6      	bne.n	8005912 <memchr+0x6>
 8005924:	4618      	mov	r0, r3
 8005926:	bd10      	pop	{r4, pc}

08005928 <memcpy>:
 8005928:	440a      	add	r2, r1
 800592a:	1e43      	subs	r3, r0, #1
 800592c:	4291      	cmp	r1, r2
 800592e:	d100      	bne.n	8005932 <memcpy+0xa>
 8005930:	4770      	bx	lr
 8005932:	b510      	push	{r4, lr}
 8005934:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005938:	4291      	cmp	r1, r2
 800593a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800593e:	d1f9      	bne.n	8005934 <memcpy+0xc>
 8005940:	bd10      	pop	{r4, pc}

08005942 <_realloc_r>:
 8005942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005946:	4680      	mov	r8, r0
 8005948:	4614      	mov	r4, r2
 800594a:	460e      	mov	r6, r1
 800594c:	b921      	cbnz	r1, 8005958 <_realloc_r+0x16>
 800594e:	4611      	mov	r1, r2
 8005950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005954:	f7ff bc3a 	b.w	80051cc <_malloc_r>
 8005958:	b92a      	cbnz	r2, 8005966 <_realloc_r+0x24>
 800595a:	4625      	mov	r5, r4
 800595c:	f7ff fbca 	bl	80050f4 <_free_r>
 8005960:	4628      	mov	r0, r5
 8005962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005966:	f000 f81b 	bl	80059a0 <_malloc_usable_size_r>
 800596a:	4284      	cmp	r4, r0
 800596c:	4607      	mov	r7, r0
 800596e:	d802      	bhi.n	8005976 <_realloc_r+0x34>
 8005970:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005974:	d812      	bhi.n	800599c <_realloc_r+0x5a>
 8005976:	4621      	mov	r1, r4
 8005978:	4640      	mov	r0, r8
 800597a:	f7ff fc27 	bl	80051cc <_malloc_r>
 800597e:	4605      	mov	r5, r0
 8005980:	2800      	cmp	r0, #0
 8005982:	d0ed      	beq.n	8005960 <_realloc_r+0x1e>
 8005984:	42bc      	cmp	r4, r7
 8005986:	4622      	mov	r2, r4
 8005988:	4631      	mov	r1, r6
 800598a:	bf28      	it	cs
 800598c:	463a      	movcs	r2, r7
 800598e:	f7ff ffcb 	bl	8005928 <memcpy>
 8005992:	4631      	mov	r1, r6
 8005994:	4640      	mov	r0, r8
 8005996:	f7ff fbad 	bl	80050f4 <_free_r>
 800599a:	e7e1      	b.n	8005960 <_realloc_r+0x1e>
 800599c:	4635      	mov	r5, r6
 800599e:	e7df      	b.n	8005960 <_realloc_r+0x1e>

080059a0 <_malloc_usable_size_r>:
 80059a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a4:	1f18      	subs	r0, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bfbc      	itt	lt
 80059aa:	580b      	ldrlt	r3, [r1, r0]
 80059ac:	18c0      	addlt	r0, r0, r3
 80059ae:	4770      	bx	lr

080059b0 <_init>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	bf00      	nop
 80059b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b6:	bc08      	pop	{r3}
 80059b8:	469e      	mov	lr, r3
 80059ba:	4770      	bx	lr

080059bc <_fini>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr
