
PortableGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000454c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e0  080047e0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e8  080047e8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000001c  0800480c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  0800480c  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002737d  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035a6  00000000  00000000  00047412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013435  00000000  00000000  0004a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001780  00000000  00000000  0005ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013d7  00000000  00000000  0005f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c7db  00000000  00000000  00060947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028ac8  00000000  00000000  0008d122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123e17  00000000  00000000  000b5bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004210  00000000  00000000  001d9a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001ddc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000001c 	.word	0x2000001c
 8000210:	00000000 	.word	0x00000000
 8000214:	08004728 	.word	0x08004728

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000020 	.word	0x20000020
 8000230:	08004728 	.word	0x08004728

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <DelayInit>:
  DelayUS(20);
}

static void DelayInit(void)
{
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <DelayInit+0x3c>)
 8000556:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800055a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800055e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000562:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8000566:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800056a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800056e:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	f022 0201 	bic.w	r2, r2, #1
 8000578:	601a      	str	r2, [r3, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	f042 0201 	orr.w	r2, r2, #1
 8000580:	601a      	str	r2, [r3, #0]

  DWT->CYCCNT = 0;
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000586:	bf00      	nop
  __ASM volatile ("NOP");
 8000588:	bf00      	nop
  __ASM volatile ("NOP");
 800058a:	bf00      	nop
}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000594:	b082      	sub	sp, #8
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <DelayUS+0x28>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <DelayUS+0x2c>)
 800059c:	fba2 2303 	umull	r2, r3, r2, r3
 80005a0:	0c9b      	lsrs	r3, r3, #18
 80005a2:	fb03 f000 	mul.w	r0, r3, r0
  uint32_t start = DWT->CYCCNT;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <DelayUS+0x30>)
 80005a8:	685a      	ldr	r2, [r3, #4]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <DelayUS+0x30>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
  } while(cnt < cycles);
 80005b2:	9b01      	ldr	r3, [sp, #4]
 80005b4:	4283      	cmp	r3, r0
 80005b6:	d3f8      	bcc.n	80005aa <DelayUS+0x16>
}
 80005b8:	b002      	add	sp, #8
 80005ba:	4770      	bx	lr
 80005bc:	20000010 	.word	0x20000010
 80005c0:	431bde83 	.word	0x431bde83
 80005c4:	e0001000 	.word	0xe0001000

080005c8 <ExpanderWrite>:
{
 80005c8:	b500      	push	{lr}
 80005ca:	b085      	sub	sp, #20
  uint8_t data = _data | dpBacklight;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <ExpanderWrite+0x28>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4318      	orrs	r0, r3
 80005d2:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80005d6:	230a      	movs	r3, #10
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	f10d 020f 	add.w	r2, sp, #15
 80005e0:	214e      	movs	r1, #78	; 0x4e
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <ExpanderWrite+0x2c>)
 80005e4:	f001 ff68 	bl	80024b8 <HAL_I2C_Master_Transmit>
}
 80005e8:	b005      	add	sp, #20
 80005ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80005ee:	bf00      	nop
 80005f0:	20000038 	.word	0x20000038
 80005f4:	200000ac 	.word	0x200000ac

080005f8 <PulseEnable>:
{
 80005f8:	b510      	push	{r4, lr}
 80005fa:	4604      	mov	r4, r0
  ExpanderWrite(_data | ENABLE);
 80005fc:	f040 0004 	orr.w	r0, r0, #4
 8000600:	f7ff ffe2 	bl	80005c8 <ExpanderWrite>
  DelayUS(20);
 8000604:	2014      	movs	r0, #20
 8000606:	f7ff ffc5 	bl	8000594 <DelayUS>
  ExpanderWrite(_data & ~ENABLE);
 800060a:	f004 00fb 	and.w	r0, r4, #251	; 0xfb
 800060e:	f7ff ffdb 	bl	80005c8 <ExpanderWrite>
  DelayUS(20);
 8000612:	2014      	movs	r0, #20
 8000614:	f7ff ffbe 	bl	8000594 <DelayUS>
}
 8000618:	bd10      	pop	{r4, pc}

0800061a <Write4Bits>:
{
 800061a:	b510      	push	{r4, lr}
 800061c:	4604      	mov	r4, r0
  ExpanderWrite(value);
 800061e:	f7ff ffd3 	bl	80005c8 <ExpanderWrite>
  PulseEnable(value);
 8000622:	4620      	mov	r0, r4
 8000624:	f7ff ffe8 	bl	80005f8 <PulseEnable>
}
 8000628:	bd10      	pop	{r4, pc}

0800062a <Send>:
{
 800062a:	b538      	push	{r3, r4, r5, lr}
 800062c:	460d      	mov	r5, r1
  uint8_t highnib = value & 0xF0;
 800062e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
  uint8_t lownib = (value<<4) & 0xF0;
 8000632:	0104      	lsls	r4, r0, #4
 8000634:	b2e4      	uxtb	r4, r4
  Write4Bits((highnib)|mode);
 8000636:	ea43 0001 	orr.w	r0, r3, r1
 800063a:	f7ff ffee 	bl	800061a <Write4Bits>
  Write4Bits((lownib)|mode);
 800063e:	ea44 0005 	orr.w	r0, r4, r5
 8000642:	f7ff ffea 	bl	800061a <Write4Bits>
}
 8000646:	bd38      	pop	{r3, r4, r5, pc}

08000648 <SendCommand>:
{
 8000648:	b508      	push	{r3, lr}
  Send(cmd, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	f7ff ffed 	bl	800062a <Send>
}
 8000650:	bd08      	pop	{r3, pc}

08000652 <SendChar>:
{
 8000652:	b508      	push	{r3, lr}
  Send(ch, RS);
 8000654:	2101      	movs	r1, #1
 8000656:	f7ff ffe8 	bl	800062a <Send>
}
 800065a:	bd08      	pop	{r3, pc}

0800065c <HD44780_Clear>:
{
 800065c:	b508      	push	{r3, lr}
  SendCommand(LCD_CLEARDISPLAY);
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff fff2 	bl	8000648 <SendCommand>
  DelayUS(2000);
 8000664:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000668:	f7ff ff94 	bl	8000594 <DelayUS>
}
 800066c:	bd08      	pop	{r3, pc}

0800066e <HD44780_Home>:
{
 800066e:	b508      	push	{r3, lr}
  SendCommand(LCD_RETURNHOME);
 8000670:	2002      	movs	r0, #2
 8000672:	f7ff ffe9 	bl	8000648 <SendCommand>
  DelayUS(2000);
 8000676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800067a:	f7ff ff8b 	bl	8000594 <DelayUS>
}
 800067e:	bd08      	pop	{r3, pc}

08000680 <HD44780_SetCursor>:
{
 8000680:	b510      	push	{r4, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	4684      	mov	ip, r0
 8000686:	468e      	mov	lr, r1
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HD44780_SetCursor+0x3c>)
 800068a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800068c:	ac04      	add	r4, sp, #16
 800068e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <HD44780_SetCursor+0x40>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	4573      	cmp	r3, lr
 8000698:	d802      	bhi.n	80006a0 <HD44780_SetCursor+0x20>
    row = dpRows-1;
 800069a:	3b01      	subs	r3, #1
 800069c:	fa5f fe83 	uxtb.w	lr, r3
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006a0:	ab04      	add	r3, sp, #16
 80006a2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80006a6:	f85e 0c10 	ldr.w	r0, [lr, #-16]
 80006aa:	4460      	add	r0, ip
 80006ac:	b240      	sxtb	r0, r0
 80006ae:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80006b2:	b2c0      	uxtb	r0, r0
 80006b4:	f7ff ffc8 	bl	8000648 <SendCommand>
}
 80006b8:	b004      	add	sp, #16
 80006ba:	bd10      	pop	{r4, pc}
 80006bc:	08004740 	.word	0x08004740
 80006c0:	2000003c 	.word	0x2000003c

080006c4 <HD44780_Display>:
{
 80006c4:	b508      	push	{r3, lr}
  dpControl |= LCD_DISPLAYON;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HD44780_Display+0x18>)
 80006c8:	7818      	ldrb	r0, [r3, #0]
 80006ca:	f040 0004 	orr.w	r0, r0, #4
 80006ce:	7018      	strb	r0, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006d0:	f040 0008 	orr.w	r0, r0, #8
 80006d4:	f7ff ffb8 	bl	8000648 <SendCommand>
}
 80006d8:	bd08      	pop	{r3, pc}
 80006da:	bf00      	nop
 80006dc:	20000039 	.word	0x20000039

080006e0 <HD44780_CreateSpecialChar>:
{
 80006e0:	b538      	push	{r3, r4, r5, lr}
 80006e2:	460d      	mov	r5, r1
  location &= 0x7;
 80006e4:	f000 0007 	and.w	r0, r0, #7
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006e8:	00c0      	lsls	r0, r0, #3
 80006ea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80006ee:	f7ff ffab 	bl	8000648 <SendCommand>
  for (int i=0; i<8; i++)
 80006f2:	2400      	movs	r4, #0
 80006f4:	e003      	b.n	80006fe <HD44780_CreateSpecialChar+0x1e>
    SendChar(charmap[i]);
 80006f6:	5d28      	ldrb	r0, [r5, r4]
 80006f8:	f7ff ffab 	bl	8000652 <SendChar>
  for (int i=0; i<8; i++)
 80006fc:	3401      	adds	r4, #1
 80006fe:	2c07      	cmp	r4, #7
 8000700:	ddf9      	ble.n	80006f6 <HD44780_CreateSpecialChar+0x16>
}
 8000702:	bd38      	pop	{r3, r4, r5, pc}

08000704 <HD44780_Init>:
{
 8000704:	b508      	push	{r3, lr}
  dpRows = rows;
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <HD44780_Init+0xb8>)
 8000708:	7018      	strb	r0, [r3, #0]
  dpBacklight = LCD_BACKLIGHT;
 800070a:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <HD44780_Init+0xbc>)
 800070c:	2208      	movs	r2, #8
 800070e:	701a      	strb	r2, [r3, #0]
  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <HD44780_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
  if (dpRows > 1)
 8000716:	2801      	cmp	r0, #1
 8000718:	d94b      	bls.n	80007b2 <HD44780_Init+0xae>
    dpFunction |= LCD_2LINE;
 800071a:	2208      	movs	r2, #8
 800071c:	701a      	strb	r2, [r3, #0]
  DelayInit();
 800071e:	f7ff ff19 	bl	8000554 <DelayInit>
  HAL_Delay(50);
 8000722:	2032      	movs	r0, #50	; 0x32
 8000724:	f000 fce6 	bl	80010f4 <HAL_Delay>
  ExpanderWrite(dpBacklight);
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <HD44780_Init+0xbc>)
 800072a:	7818      	ldrb	r0, [r3, #0]
 800072c:	f7ff ff4c 	bl	80005c8 <ExpanderWrite>
  HAL_Delay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f000 fcde 	bl	80010f4 <HAL_Delay>
  Write4Bits(0x03 << 4);
 8000738:	2030      	movs	r0, #48	; 0x30
 800073a:	f7ff ff6e 	bl	800061a <Write4Bits>
  DelayUS(4500);
 800073e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000742:	f7ff ff27 	bl	8000594 <DelayUS>
  Write4Bits(0x03 << 4);
 8000746:	2030      	movs	r0, #48	; 0x30
 8000748:	f7ff ff67 	bl	800061a <Write4Bits>
  DelayUS(4500);
 800074c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000750:	f7ff ff20 	bl	8000594 <DelayUS>
  Write4Bits(0x03 << 4);
 8000754:	2030      	movs	r0, #48	; 0x30
 8000756:	f7ff ff60 	bl	800061a <Write4Bits>
  DelayUS(4500);
 800075a:	f241 1094 	movw	r0, #4500	; 0x1194
 800075e:	f7ff ff19 	bl	8000594 <DelayUS>
  Write4Bits(0x02 << 4);
 8000762:	2020      	movs	r0, #32
 8000764:	f7ff ff59 	bl	800061a <Write4Bits>
  DelayUS(100);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f7ff ff13 	bl	8000594 <DelayUS>
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HD44780_Init+0xc0>)
 8000770:	7818      	ldrb	r0, [r3, #0]
 8000772:	f040 0020 	orr.w	r0, r0, #32
 8000776:	f7ff ff67 	bl	8000648 <SendCommand>
  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <HD44780_Init+0xc4>)
 800077c:	2204      	movs	r2, #4
 800077e:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000780:	f7ff ffa0 	bl	80006c4 <HD44780_Display>
  HD44780_Clear();
 8000784:	f7ff ff6a 	bl	800065c <HD44780_Clear>
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HD44780_Init+0xc8>)
 800078a:	2202      	movs	r2, #2
 800078c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800078e:	2006      	movs	r0, #6
 8000790:	f7ff ff5a 	bl	8000648 <SendCommand>
  DelayUS(4500);
 8000794:	f241 1094 	movw	r0, #4500	; 0x1194
 8000798:	f7ff fefc 	bl	8000594 <DelayUS>
  HD44780_CreateSpecialChar(0, special1);
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <HD44780_Init+0xcc>)
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff9e 	bl	80006e0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80007a4:	490b      	ldr	r1, [pc, #44]	; (80007d4 <HD44780_Init+0xd0>)
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff ff9a 	bl	80006e0 <HD44780_CreateSpecialChar>
  HD44780_Home();
 80007ac:	f7ff ff5f 	bl	800066e <HD44780_Home>
}
 80007b0:	bd08      	pop	{r3, pc}
    dpFunction |= LCD_5x10DOTS;
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HD44780_Init+0xc0>)
 80007b4:	2204      	movs	r2, #4
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e7b1      	b.n	800071e <HD44780_Init+0x1a>
 80007ba:	bf00      	nop
 80007bc:	2000003c 	.word	0x2000003c
 80007c0:	20000038 	.word	0x20000038
 80007c4:	2000003a 	.word	0x2000003a
 80007c8:	20000039 	.word	0x20000039
 80007cc:	2000003b 	.word	0x2000003b
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008

080007d8 <HD44780_PrintStr>:
{
 80007d8:	b510      	push	{r4, lr}
 80007da:	4604      	mov	r4, r0
  while(*c) SendChar(*c++);
 80007dc:	e002      	b.n	80007e4 <HD44780_PrintStr+0xc>
 80007de:	3401      	adds	r4, #1
 80007e0:	f7ff ff37 	bl	8000652 <SendChar>
 80007e4:	7820      	ldrb	r0, [r4, #0]
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d1f9      	bne.n	80007de <HD44780_PrintStr+0x6>
}
 80007ea:	bd10      	pop	{r4, pc}

080007ec <ToggleState.0>:
  /* USER CODE BEGIN 1 */

					//Impedance Switch toggle state function
	void ToggleState(void)
	{
		currentstate=1-currentstate;
 80007ec:	4a02      	ldr	r2, [pc, #8]	; (80007f8 <ToggleState.0+0xc>)
 80007ee:	7813      	ldrb	r3, [r2, #0]
 80007f0:	f1c3 0301 	rsb	r3, r3, #1
 80007f4:	7013      	strb	r3, [r2, #0]
	}
 80007f6:	4770      	bx	lr
 80007f8:	20000041 	.word	0x20000041

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	2400      	movs	r4, #0
 8000802:	9403      	str	r4, [sp, #12]
 8000804:	9404      	str	r4, [sp, #16]
 8000806:	9405      	str	r4, [sp, #20]
 8000808:	9406      	str	r4, [sp, #24]
 800080a:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_GPIO_Init+0xa0>)
 800080e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000810:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000814:	64da      	str	r2, [r3, #76]	; 0x4c
 8000816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000818:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800081c:	9200      	str	r2, [sp, #0]
 800081e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	64da      	str	r2, [r3, #76]	; 0x4c
 8000828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800082a:	f002 0201 	and.w	r2, r2, #1
 800082e:	9201      	str	r2, [sp, #4]
 8000830:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000834:	f042 0202 	orr.w	r2, r2, #2
 8000838:	64da      	str	r2, [r3, #76]	; 0x4c
 800083a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	9302      	str	r3, [sp, #8]
 8000842:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000844:	4f16      	ldr	r7, [pc, #88]	; (80008a0 <MX_GPIO_Init+0xa4>)
 8000846:	4622      	mov	r2, r4
 8000848:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084c:	4638      	mov	r0, r7
 800084e:	f001 fc7a 	bl	8002146 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000852:	4d14      	ldr	r5, [pc, #80]	; (80008a4 <MX_GPIO_Init+0xa8>)
 8000854:	4622      	mov	r2, r4
 8000856:	2110      	movs	r1, #16
 8000858:	4628      	mov	r0, r5
 800085a:	f001 fc74 	bl	8002146 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_1_Pin button_2_Pin button_3_Pin button_4_Pin
                           Encoder_SW_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin|button_3_Pin|button_4_Pin
 800085e:	f648 4306 	movw	r3, #35846	; 0x8c06
 8000862:	9303      	str	r3, [sp, #12]
                          |Encoder_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	a903      	add	r1, sp, #12
 800086a:	4628      	mov	r0, r5
 800086c:	f001 fb80 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 8000870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000874:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2601      	movs	r6, #1
 8000878:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 800087e:	a903      	add	r1, sp, #12
 8000880:	4638      	mov	r0, r7
 8000882:	f001 fb75 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000886:	2310      	movs	r3, #16
 8000888:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	a903      	add	r1, sp, #12
 8000892:	4628      	mov	r0, r5
 8000894:	f001 fb6c 	bl	8001f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000898:	b009      	add	sp, #36	; 0x24
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	42020000 	.word	0x42020000
 80008a4:	42020400 	.word	0x42020400

080008a8 <adc_voltage>:
		float adc_voltage=(adc_value/4095)*reference;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <adc_voltage+0x20>)
 80008aa:	fb83 2300 	smull	r2, r3, r3, r0
 80008ae:	4403      	add	r3, r0
 80008b0:	17c0      	asrs	r0, r0, #31
 80008b2:	ebc0 20e3 	rsb	r0, r0, r3, asr #11
 80008b6:	ee07 0a90 	vmov	s15, r0
 80008ba:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
 80008be:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80008c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80008c6:	4770      	bx	lr
 80008c8:	80080081 	.word	0x80080081

080008cc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008ce:	e7fe      	b.n	80008ce <Error_Handler+0x2>

080008d0 <MX_TIM1_Init>:
{
 80008d0:	b500      	push	{lr}
 80008d2:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 80008d4:	2224      	movs	r2, #36	; 0x24
 80008d6:	2100      	movs	r1, #0
 80008d8:	a803      	add	r0, sp, #12
 80008da:	f003 fef8 	bl	80046ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008de:	2300      	movs	r3, #0
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	9302      	str	r3, [sp, #8]
  htim1.Instance = TIM1;
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_TIM1_Init+0x64>)
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_TIM1_Init+0x68>)
 80008ea:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 80008ec:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80008f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f4:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f6:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f8:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008fc:	2303      	movs	r3, #3
 80008fe:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000900:	2202      	movs	r2, #2
 8000902:	9204      	str	r2, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000904:	2301      	movs	r3, #1
 8000906:	9305      	str	r3, [sp, #20]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000908:	9208      	str	r2, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800090a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800090c:	a903      	add	r1, sp, #12
 800090e:	f003 f9e7 	bl	8003ce0 <HAL_TIM_Encoder_Init>
 8000912:	b958      	cbnz	r0, 800092c <MX_TIM1_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000918:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800091c:	4669      	mov	r1, sp
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_TIM1_Init+0x64>)
 8000920:	f003 fac0 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	b920      	cbnz	r0, 8000930 <MX_TIM1_Init+0x60>
}
 8000926:	b00d      	add	sp, #52	; 0x34
 8000928:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800092c:	f7ff ffce 	bl	80008cc <Error_Handler>
    Error_Handler();
 8000930:	f7ff ffcc 	bl	80008cc <Error_Handler>
 8000934:	20000164 	.word	0x20000164
 8000938:	40012c00 	.word	0x40012c00

0800093c <MX_I2C1_Init>:
{
 800093c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <MX_I2C1_Init+0x48>)
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_I2C1_Init+0x4c>)
 8000942:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000944:	f640 6314 	movw	r3, #3604	; 0xe14
 8000948:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094e:	2201      	movs	r2, #1
 8000950:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000952:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000954:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000956:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095c:	f001 fd4e 	bl	80023fc <HAL_I2C_Init>
 8000960:	b950      	cbnz	r0, 8000978 <MX_I2C1_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <MX_I2C1_Init+0x48>)
 8000966:	f001 fe65 	bl	8002634 <HAL_I2CEx_ConfigAnalogFilter>
 800096a:	b938      	cbnz	r0, 800097c <MX_I2C1_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_I2C1_Init+0x48>)
 8000970:	f001 fe8e 	bl	8002690 <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	b920      	cbnz	r0, 8000980 <MX_I2C1_Init+0x44>
}
 8000976:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000978:	f7ff ffa8 	bl	80008cc <Error_Handler>
    Error_Handler();
 800097c:	f7ff ffa6 	bl	80008cc <Error_Handler>
    Error_Handler();
 8000980:	f7ff ffa4 	bl	80008cc <Error_Handler>
 8000984:	200000ac 	.word	0x200000ac
 8000988:	40005400 	.word	0x40005400

0800098c <MX_UART4_Init>:
{
 800098c:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 800098e:	4815      	ldr	r0, [pc, #84]	; (80009e4 <MX_UART4_Init+0x58>)
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_UART4_Init+0x5c>)
 8000992:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8000994:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000998:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	2300      	movs	r3, #0
 800099c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800099e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009a0:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009a2:	220c      	movs	r2, #12
 80009a4:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ac:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009b0:	f003 fdcb 	bl	800454a <HAL_UART_Init>
 80009b4:	b970      	cbnz	r0, 80009d4 <MX_UART4_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480a      	ldr	r0, [pc, #40]	; (80009e4 <MX_UART4_Init+0x58>)
 80009ba:	f003 fe3e 	bl	800463a <HAL_UARTEx_SetTxFifoThreshold>
 80009be:	b958      	cbnz	r0, 80009d8 <MX_UART4_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <MX_UART4_Init+0x58>)
 80009c4:	f003 fe5e 	bl	8004684 <HAL_UARTEx_SetRxFifoThreshold>
 80009c8:	b940      	cbnz	r0, 80009dc <MX_UART4_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_UART4_Init+0x58>)
 80009cc:	f003 fe16 	bl	80045fc <HAL_UARTEx_DisableFifoMode>
 80009d0:	b930      	cbnz	r0, 80009e0 <MX_UART4_Init+0x54>
}
 80009d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009d4:	f7ff ff7a 	bl	80008cc <Error_Handler>
    Error_Handler();
 80009d8:	f7ff ff78 	bl	80008cc <Error_Handler>
    Error_Handler();
 80009dc:	f7ff ff76 	bl	80008cc <Error_Handler>
    Error_Handler();
 80009e0:	f7ff ff74 	bl	80008cc <Error_Handler>
 80009e4:	200001b0 	.word	0x200001b0
 80009e8:	40004c00 	.word	0x40004c00

080009ec <MX_SPI1_Init>:
{
 80009ec:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_SPI1_Init+0x40>)
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI1_Init+0x44>)
 80009f2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009f8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fa:	2300      	movs	r3, #0
 80009fc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a02:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a06:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a0c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a10:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a12:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a14:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a16:	2207      	movs	r2, #7
 8000a18:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a20:	f003 f88a 	bl	8003b38 <HAL_SPI_Init>
 8000a24:	b900      	cbnz	r0, 8000a28 <MX_SPI1_Init+0x3c>
}
 8000a26:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a28:	f7ff ff50 	bl	80008cc <Error_Handler>
 8000a2c:	20000100 	.word	0x20000100
 8000a30:	40013000 	.word	0x40013000

08000a34 <MX_ADC1_Init>:
{
 8000a34:	b500      	push	{lr}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9307      	str	r3, [sp, #28]
 8000a3c:	9308      	str	r3, [sp, #32]
 8000a3e:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	9302      	str	r3, [sp, #8]
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	9304      	str	r3, [sp, #16]
 8000a48:	9305      	str	r3, [sp, #20]
 8000a4a:	9306      	str	r3, [sp, #24]
  hadc1.Instance = ADC1;
 8000a4c:	481d      	ldr	r0, [pc, #116]	; (8000ac4 <MX_ADC1_Init+0x90>)
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <MX_ADC1_Init+0x94>)
 8000a50:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a52:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a54:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a56:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a58:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a5e:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a60:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a62:	2201      	movs	r2, #1
 8000a64:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a66:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a6c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a76:	6342      	str	r2, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7c:	f000 fb4e 	bl	800111c <HAL_ADC_Init>
 8000a80:	b9d0      	cbnz	r0, 8000ab8 <MX_ADC1_Init+0x84>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a86:	a907      	add	r1, sp, #28
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <MX_ADC1_Init+0x90>)
 8000a8a:	f001 f979 	bl	8001d80 <HAL_ADCEx_MultiModeConfigChannel>
 8000a8e:	b9a8      	cbnz	r0, 8000abc <MX_ADC1_Init+0x88>
  sConfig.Channel = ADC_CHANNEL_7;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_ADC1_Init+0x98>)
 8000a92:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a94:	2306      	movs	r3, #6
 8000a96:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9c:	227f      	movs	r2, #127	; 0x7f
 8000a9e:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8000aa4:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa6:	eb0d 0102 	add.w	r1, sp, r2
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_ADC1_Init+0x90>)
 8000aac:	f000 fe0c 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000ab0:	b930      	cbnz	r0, 8000ac0 <MX_ADC1_Init+0x8c>
}
 8000ab2:	b00b      	add	sp, #44	; 0x2c
 8000ab4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ab8:	f7ff ff08 	bl	80008cc <Error_Handler>
    Error_Handler();
 8000abc:	f7ff ff06 	bl	80008cc <Error_Handler>
    Error_Handler();
 8000ac0:	f7ff ff04 	bl	80008cc <Error_Handler>
 8000ac4:	20000044 	.word	0x20000044
 8000ac8:	42028000 	.word	0x42028000
 8000acc:	1d500080 	.word	0x1d500080

08000ad0 <SystemClock_Config>:
{
 8000ad0:	b500      	push	{lr}
 8000ad2:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad4:	2248      	movs	r2, #72	; 0x48
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	a806      	add	r0, sp, #24
 8000ada:	f003 fdf8 	bl	80046ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ade:	2300      	movs	r3, #0
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	9303      	str	r3, [sp, #12]
 8000ae6:	9304      	str	r3, [sp, #16]
 8000ae8:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000aea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000aee:	f001 fe15 	bl	800271c <HAL_PWREx_ControlVoltageScaling>
 8000af2:	b9d0      	cbnz	r0, 8000b2a <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000af4:	2310      	movs	r3, #16
 8000af6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b00:	2260      	movs	r2, #96	; 0x60
 8000b02:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b04:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	a806      	add	r0, sp, #24
 8000b08:	f001 ff5a 	bl	80029c0 <HAL_RCC_OscConfig>
 8000b0c:	b978      	cbnz	r0, 8000b2e <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b12:	2100      	movs	r1, #0
 8000b14:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b1c:	a801      	add	r0, sp, #4
 8000b1e:	f002 fb29 	bl	8003174 <HAL_RCC_ClockConfig>
 8000b22:	b930      	cbnz	r0, 8000b32 <SystemClock_Config+0x62>
}
 8000b24:	b019      	add	sp, #100	; 0x64
 8000b26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b2a:	f7ff fecf 	bl	80008cc <Error_Handler>
    Error_Handler();
 8000b2e:	f7ff fecd 	bl	80008cc <Error_Handler>
    Error_Handler();
 8000b32:	f7ff fecb 	bl	80008cc <Error_Handler>
	...

08000b38 <main>:
{
 8000b38:	b500      	push	{lr}
 8000b3a:	b083      	sub	sp, #12
  HAL_Init();
 8000b3c:	f000 fab6 	bl	80010ac <HAL_Init>
  SystemClock_Config();
 8000b40:	f7ff ffc6 	bl	8000ad0 <SystemClock_Config>
  MX_GPIO_Init();
 8000b44:	f7ff fe5a 	bl	80007fc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b48:	f7ff fec2 	bl	80008d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000b4c:	f7ff fef6 	bl	800093c <MX_I2C1_Init>
  MX_UART4_Init();
 8000b50:	f7ff ff1c 	bl	800098c <MX_UART4_Init>
  MX_SPI1_Init();
 8000b54:	f7ff ff4a 	bl	80009ec <MX_SPI1_Init>
  MX_ADC1_Init();
 8000b58:	f7ff ff6c 	bl	8000a34 <MX_ADC1_Init>
  HD44780_Init(2);
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff fdd1 	bl	8000704 <HD44780_Init>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000b62:	213c      	movs	r1, #60	; 0x3c
 8000b64:	482b      	ldr	r0, [pc, #172]	; (8000c14 <main+0xdc>)
 8000b66:	f003 f922 	bl	8003dae <HAL_TIM_Encoder_Start_IT>
 8000b6a:	e026      	b.n	8000bba <main+0x82>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b70:	4829      	ldr	r0, [pc, #164]	; (8000c18 <main+0xe0>)
 8000b72:	f001 faed 	bl	8002150 <HAL_GPIO_TogglePin>
		ToggleState();
 8000b76:	f7ff fe39 	bl	80007ec <ToggleState.0>
		HAL_Delay(500);
 8000b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7e:	f000 fab9 	bl	80010f4 <HAL_Delay>
		if (currentstate == 0)
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <main+0xe4>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b93b      	cbnz	r3, 8000b98 <main+0x60>
			HD44780_SetCursor(10,1);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	200a      	movs	r0, #10
 8000b8c:	f7ff fd78 	bl	8000680 <HD44780_SetCursor>
			HD44780_PrintStr("HighZ");
 8000b90:	4823      	ldr	r0, [pc, #140]	; (8000c20 <main+0xe8>)
 8000b92:	f7ff fe21 	bl	80007d8 <HD44780_PrintStr>
 8000b96:	e017      	b.n	8000bc8 <main+0x90>
			HD44780_SetCursor(12,1);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	200c      	movs	r0, #12
 8000b9c:	f7ff fd70 	bl	8000680 <HD44780_SetCursor>
			HD44780_PrintStr("50Ω");
 8000ba0:	4820      	ldr	r0, [pc, #128]	; (8000c24 <main+0xec>)
 8000ba2:	f7ff fe19 	bl	80007d8 <HD44780_PrintStr>
 8000ba6:	e00f      	b.n	8000bc8 <main+0x90>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2110      	movs	r1, #16
 8000bac:	481e      	ldr	r0, [pc, #120]	; (8000c28 <main+0xf0>)
 8000bae:	f001 faca 	bl	8002146 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb6:	f000 fa9d 	bl	80010f4 <HAL_Delay>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)==GPIO_PIN_RESET)
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	481a      	ldr	r0, [pc, #104]	; (8000c28 <main+0xf0>)
 8000bc0:	f001 faba 	bl	8002138 <HAL_GPIO_ReadPin>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d0d1      	beq.n	8000b6c <main+0x34>
	HAL_ADC_Start(&hadc1);
 8000bc8:	4c18      	ldr	r4, [pc, #96]	; (8000c2c <main+0xf4>)
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f001 f854 	bl	8001c78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f000 fb95 	bl	8001304 <HAL_ADC_PollForConversion>
	adc_value=HAL_ADC_GetValue(&hadc1);
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f000 fc20 	bl	8001420 <HAL_ADC_GetValue>
 8000be0:	b280      	uxth	r0, r0
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <main+0xf8>)
 8000be4:	8018      	strh	r0, [r3, #0]
	battery_voltage=adc_voltage(adc_value);
 8000be6:	f7ff fe5f 	bl	80008a8 <adc_voltage>
 8000bea:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8000bee:	edcd 7a01 	vstr	s15, [sp, #4]
 8000bf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <main+0xfc>)
 8000bf8:	7013      	strb	r3, [r2, #0]
	if (battery_voltage <= 3.5)
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d9d4      	bls.n	8000ba8 <main+0x70>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2110      	movs	r1, #16
 8000c02:	4809      	ldr	r0, [pc, #36]	; (8000c28 <main+0xf0>)
 8000c04:	f001 fa9f 	bl	8002146 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0c:	f000 fa72 	bl	80010f4 <HAL_Delay>
 8000c10:	e7d3      	b.n	8000bba <main+0x82>
 8000c12:	bf00      	nop
 8000c14:	20000164 	.word	0x20000164
 8000c18:	42020000 	.word	0x42020000
 8000c1c:	20000041 	.word	0x20000041
 8000c20:	08004750 	.word	0x08004750
 8000c24:	08004758 	.word	0x08004758
 8000c28:	42020400 	.word	0x42020400
 8000c2c:	20000044 	.word	0x20000044
 8000c30:	2000003e 	.word	0x2000003e
 8000c34:	20000040 	.word	0x20000040

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_MspInit+0x2c>)
 8000c3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c3e:	f042 0201 	orr.w	r2, r2, #1
 8000c42:	661a      	str	r2, [r3, #96]	; 0x60
 8000c44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c46:	f002 0201 	and.w	r2, r2, #1
 8000c4a:	9200      	str	r2, [sp, #0]
 8000c4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c54:	659a      	str	r2, [r3, #88]	; 0x58
 8000c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	b002      	add	sp, #8
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	b0ac      	sub	sp, #176	; 0xb0
 8000c6c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	2100      	movs	r1, #0
 8000c70:	9127      	str	r1, [sp, #156]	; 0x9c
 8000c72:	9128      	str	r1, [sp, #160]	; 0xa0
 8000c74:	9129      	str	r1, [sp, #164]	; 0xa4
 8000c76:	912a      	str	r1, [sp, #168]	; 0xa8
 8000c78:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7a:	2294      	movs	r2, #148	; 0x94
 8000c7c:	a802      	add	r0, sp, #8
 8000c7e:	f003 fd26 	bl	80046ce <memset>
  if(hadc->Instance==ADC1)
 8000c82:	6822      	ldr	r2, [r4, #0]
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_ADC_MspInit+0xa8>)
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d001      	beq.n	8000c8e <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c8a:	b02c      	add	sp, #176	; 0xb0
 8000c8c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c92:	9302      	str	r3, [sp, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c98:	9322      	str	r3, [sp, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	9303      	str	r3, [sp, #12]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c9e:	9304      	str	r3, [sp, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	9307      	str	r3, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cac:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cb2:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb4:	a802      	add	r0, sp, #8
 8000cb6:	f002 fc8b 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	bb28      	cbnz	r0, 8000d08 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_ADC_MspInit+0xac>)
 8000cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000cc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000ccc:	9200      	str	r2, [sp, #0]
 8000cce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2400      	movs	r4, #0
 8000cec:	9429      	str	r4, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	a927      	add	r1, sp, #156	; 0x9c
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <HAL_ADC_MspInit+0xb0>)
 8000cf2:	f001 f93d 	bl	8001f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000cf6:	4622      	mov	r2, r4
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	2025      	movs	r0, #37	; 0x25
 8000cfc:	f001 f8de 	bl	8001ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d00:	2025      	movs	r0, #37	; 0x25
 8000d02:	f001 f913 	bl	8001f2c <HAL_NVIC_EnableIRQ>
}
 8000d06:	e7c0      	b.n	8000c8a <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8000d08:	f7ff fde0 	bl	80008cc <Error_Handler>
 8000d0c:	e7d6      	b.n	8000cbc <HAL_ADC_MspInit+0x54>
 8000d0e:	bf00      	nop
 8000d10:	42028000 	.word	0x42028000
 8000d14:	40021000 	.word	0x40021000
 8000d18:	42020000 	.word	0x42020000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b510      	push	{r4, lr}
 8000d1e:	b0ac      	sub	sp, #176	; 0xb0
 8000d20:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	2100      	movs	r1, #0
 8000d24:	9127      	str	r1, [sp, #156]	; 0x9c
 8000d26:	9128      	str	r1, [sp, #160]	; 0xa0
 8000d28:	9129      	str	r1, [sp, #164]	; 0xa4
 8000d2a:	912a      	str	r1, [sp, #168]	; 0xa8
 8000d2c:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2e:	2294      	movs	r2, #148	; 0x94
 8000d30:	a802      	add	r0, sp, #8
 8000d32:	f003 fccc 	bl	80046ce <memset>
  if(hi2c->Instance==I2C1)
 8000d36:	6822      	ldr	r2, [r4, #0]
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_I2C_MspInit+0x7c>)
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d001      	beq.n	8000d42 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d3e:	b02c      	add	sp, #176	; 0xb0
 8000d40:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d42:	2340      	movs	r3, #64	; 0x40
 8000d44:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d46:	a802      	add	r0, sp, #8
 8000d48:	f002 fc42 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	bb08      	cbnz	r0, 8000d92 <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4c13      	ldr	r4, [pc, #76]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000d58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d66:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d68:	2312      	movs	r3, #18
 8000d6a:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d72:	2304      	movs	r3, #4
 8000d74:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	a927      	add	r1, sp, #156	; 0x9c
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d7a:	f001 f8f9 	bl	8001f70 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d84:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
}
 8000d90:	e7d5      	b.n	8000d3e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8000d92:	f7ff fd9b 	bl	80008cc <Error_Handler>
 8000d96:	e7da      	b.n	8000d4e <HAL_I2C_MspInit+0x32>
 8000d98:	40005400 	.word	0x40005400
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	42020400 	.word	0x42020400

08000da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da4:	b500      	push	{lr}
 8000da6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	2300      	movs	r3, #0
 8000daa:	9303      	str	r3, [sp, #12]
 8000dac:	9304      	str	r3, [sp, #16]
 8000dae:	9305      	str	r3, [sp, #20]
 8000db0:	9306      	str	r3, [sp, #24]
 8000db2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000db4:	6802      	ldr	r2, [r0, #0]
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_SPI_MspInit+0x5c>)
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d002      	beq.n	8000dc2 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dbc:	b009      	add	sp, #36	; 0x24
 8000dbe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc2:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000dc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dcc:	661a      	str	r2, [r3, #96]	; 0x60
 8000dce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000dd4:	9201      	str	r2, [sp, #4]
 8000dd6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dda:	f042 0201 	orr.w	r2, r2, #1
 8000dde:	64da      	str	r2, [r3, #76]	; 0x4c
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000dea:	23b0      	movs	r3, #176	; 0xb0
 8000dec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	a903      	add	r1, sp, #12
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <HAL_SPI_MspInit+0x60>)
 8000dfa:	f001 f8b9 	bl	8001f70 <HAL_GPIO_Init>
}
 8000dfe:	e7dd      	b.n	8000dbc <HAL_SPI_MspInit+0x18>
 8000e00:	40013000 	.word	0x40013000
 8000e04:	42020000 	.word	0x42020000

08000e08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e08:	b500      	push	{lr}
 8000e0a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9304      	str	r3, [sp, #16]
 8000e12:	9305      	str	r3, [sp, #20]
 8000e14:	9306      	str	r3, [sp, #24]
 8000e16:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM1)
 8000e18:	6802      	ldr	r2, [r0, #0]
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_TIM_Encoder_MspInit+0x60>)
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d002      	beq.n	8000e26 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e20:	b009      	add	sp, #36	; 0x24
 8000e22:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e26:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000e2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e30:	661a      	str	r2, [r3, #96]	; 0x60
 8000e32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000e38:	9201      	str	r2, [sp, #4]
 8000e3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e3e:	f042 0201 	orr.w	r2, r2, #1
 8000e42:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	a903      	add	r1, sp, #12
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x64>)
 8000e60:	f001 f886 	bl	8001f70 <HAL_GPIO_Init>
}
 8000e64:	e7dc      	b.n	8000e20 <HAL_TIM_Encoder_MspInit+0x18>
 8000e66:	bf00      	nop
 8000e68:	40012c00 	.word	0x40012c00
 8000e6c:	42020000 	.word	0x42020000

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b510      	push	{r4, lr}
 8000e72:	b0ac      	sub	sp, #176	; 0xb0
 8000e74:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	2100      	movs	r1, #0
 8000e78:	9127      	str	r1, [sp, #156]	; 0x9c
 8000e7a:	9128      	str	r1, [sp, #160]	; 0xa0
 8000e7c:	9129      	str	r1, [sp, #164]	; 0xa4
 8000e7e:	912a      	str	r1, [sp, #168]	; 0xa8
 8000e80:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e82:	2294      	movs	r2, #148	; 0x94
 8000e84:	a802      	add	r0, sp, #8
 8000e86:	f003 fc22 	bl	80046ce <memset>
  if(huart->Instance==UART4)
 8000e8a:	6822      	ldr	r2, [r4, #0]
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_UART_MspInit+0x7c>)
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d001      	beq.n	8000e96 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e92:	b02c      	add	sp, #176	; 0xb0
 8000e94:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e96:	2308      	movs	r3, #8
 8000e98:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9a:	eb0d 0003 	add.w	r0, sp, r3
 8000e9e:	f002 fb97 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	bb00      	cbnz	r0, 8000ee6 <HAL_UART_MspInit+0x76>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0x80>)
 8000ea6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ea8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000eac:	659a      	str	r2, [r3, #88]	; 0x58
 8000eae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000eb0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000eb4:	9200      	str	r2, [sp, #0]
 8000eb6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	a927      	add	r1, sp, #156	; 0x9c
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_UART_MspInit+0x84>)
 8000ee0:	f001 f846 	bl	8001f70 <HAL_GPIO_Init>
}
 8000ee4:	e7d5      	b.n	8000e92 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000ee6:	f7ff fcf1 	bl	80008cc <Error_Handler>
 8000eea:	e7db      	b.n	8000ea4 <HAL_UART_MspInit+0x34>
 8000eec:	40004c00 	.word	0x40004c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	42020000 	.word	0x42020000

08000ef8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler>

08000efa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler>

08000efc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler>

08000efe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler>

08000f00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler>

08000f02 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0a:	f000 f8e1 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0e:	bd08      	pop	{r3, pc}

08000f10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f12:	4802      	ldr	r0, [pc, #8]	; (8000f1c <ADC1_2_IRQHandler+0xc>)
 8000f14:	f000 fa8a 	bl	800142c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f18:	bd08      	pop	{r3, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000044 	.word	0x20000044

08000f20 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <SystemInit+0x10>)
 8000f22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000f26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <SystemCoreClockUpdate+0xc0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f013 0f08 	tst.w	r3, #8
 8000f3c:	d116      	bne.n	8000f6c <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <SystemCoreClockUpdate+0xc0>)
 8000f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f44:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000f48:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <SystemCoreClockUpdate+0xc4>)
 8000f4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <SystemCoreClockUpdate+0xc0>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b0c      	cmp	r3, #12
 8000f58:	d848      	bhi.n	8000fec <SystemCoreClockUpdate+0xb8>
 8000f5a:	e8df f003 	tbb	[pc, r3]
 8000f5e:	470c      	.short	0x470c
 8000f60:	470f4747 	.word	0x470f4747
 8000f64:	47134747 	.word	0x47134747
 8000f68:	4747      	.short	0x4747
 8000f6a:	17          	.byte	0x17
 8000f6b:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <SystemCoreClockUpdate+0xc0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f74:	e7e8      	b.n	8000f48 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <SystemCoreClockUpdate+0xc8>)
 8000f78:	601a      	str	r2, [r3, #0]
      break;
 8000f7a:	e028      	b.n	8000fce <SystemCoreClockUpdate+0x9a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SystemCoreClockUpdate+0xc8>)
 8000f7e:	4a20      	ldr	r2, [pc, #128]	; (8001000 <SystemCoreClockUpdate+0xcc>)
 8000f80:	601a      	str	r2, [r3, #0]
      break;
 8000f82:	e024      	b.n	8000fce <SystemCoreClockUpdate+0x9a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <SystemCoreClockUpdate+0xc8>)
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <SystemCoreClockUpdate+0xcc>)
 8000f88:	601a      	str	r2, [r3, #0]
      break;
 8000f8a:	e020      	b.n	8000fce <SystemCoreClockUpdate+0x9a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <SystemCoreClockUpdate+0xc0>)
 8000f8e:	68d9      	ldr	r1, [r3, #12]
 8000f90:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f9a:	3301      	adds	r3, #1

      switch (pllsource)
 8000f9c:	2902      	cmp	r1, #2
 8000f9e:	d004      	beq.n	8000faa <SystemCoreClockUpdate+0x76>
 8000fa0:	2903      	cmp	r1, #3
 8000fa2:	d01f      	beq.n	8000fe4 <SystemCoreClockUpdate+0xb0>
        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
          break;

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000fa4:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 8000fa8:	e002      	b.n	8000fb0 <SystemCoreClockUpdate+0x7c>
          pllvco = (HSI_VALUE / pllm);
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <SystemCoreClockUpdate+0xcc>)
 8000fac:	fbb2 f2f3 	udiv	r2, r2, r3
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000fb0:	4910      	ldr	r1, [pc, #64]	; (8000ff4 <SystemCoreClockUpdate+0xc0>)
 8000fb2:	68cb      	ldr	r3, [r1, #12]
 8000fb4:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000fbc:	68ca      	ldr	r2, [r1, #12]
 8000fbe:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8000fc2:	3201      	adds	r2, #1
 8000fc4:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8000fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <SystemCoreClockUpdate+0xc8>)
 8000fcc:	6013      	str	r3, [r2, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <SystemCoreClockUpdate+0xc0>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <SystemCoreClockUpdate+0xd0>)
 8000fd8:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <SystemCoreClockUpdate+0xc8>)
 8000fdc:	6813      	ldr	r3, [r2, #0]
 8000fde:	40cb      	lsrs	r3, r1
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	4770      	bx	lr
          pllvco = (HSE_VALUE / pllm);
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <SystemCoreClockUpdate+0xcc>)
 8000fe6:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 8000fea:	e7e1      	b.n	8000fb0 <SystemCoreClockUpdate+0x7c>
      SystemCoreClock = msirange;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <SystemCoreClockUpdate+0xc8>)
 8000fee:	601a      	str	r2, [r3, #0]
      break;
 8000ff0:	e7ed      	b.n	8000fce <SystemCoreClockUpdate+0x9a>
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	08004778 	.word	0x08004778
 8000ffc:	20000010 	.word	0x20000010
 8001000:	00f42400 	.word	0x00f42400
 8001004:	08004760 	.word	0x08004760

08001008 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800100c:	f7ff ff88 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001010:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001012:	e003      	b.n	800101c <LoopCopyDataInit>

08001014 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001016:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001018:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800101a:	3104      	adds	r1, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800101c:	480a      	ldr	r0, [pc, #40]	; (8001048 <LoopForever+0xa>)
	ldr	r3, =_edata
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001020:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001022:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001024:	d3f6      	bcc.n	8001014 <CopyDataInit>
	ldr	r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001028:	e002      	b.n	8001030 <LoopFillZerobss>

0800102a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800102a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800102c:	f842 3b04 	str.w	r3, [r2], #4

08001030 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <LoopForever+0x16>)
	cmp	r2, r3
 8001032:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001034:	d3f9      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001036:	f003 fb53 	bl	80046e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103a:	f7ff fd7d 	bl	8000b38 <main>

0800103e <LoopForever>:

LoopForever:
    b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001040:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001044:	080047f0 	.word	0x080047f0
	ldr	r0, =_sdata
 8001048:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800104c:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8001050:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8001054:	20000248 	.word	0x20000248

08001058 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <AES_IRQHandler>
	...

0800105c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_InitTick+0x44>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b90b      	cbnz	r3, 8001066 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001062:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001064:	4770      	bx	lr
{
 8001066:	b510      	push	{r4, lr}
 8001068:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800106a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <HAL_InitTick+0x48>)
 8001074:	6810      	ldr	r0, [r2, #0]
 8001076:	fbb0 f0f3 	udiv	r0, r0, r3
 800107a:	f000 ff65 	bl	8001f48 <HAL_SYSTICK_Config>
 800107e:	b968      	cbnz	r0, 800109c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	2c07      	cmp	r4, #7
 8001082:	d901      	bls.n	8001088 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001084:	2001      	movs	r0, #1
 8001086:	e00a      	b.n	800109e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	4621      	mov	r1, r4
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f000 ff14 	bl	8001ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_InitTick+0x4c>)
 8001096:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	2000      	movs	r0, #0
 800109a:	e000      	b.n	800109e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 800109c:	2001      	movs	r0, #1
}
 800109e:	bd10      	pop	{r4, pc}
 80010a0:	20000014 	.word	0x20000014
 80010a4:	20000010 	.word	0x20000010
 80010a8:	20000018 	.word	0x20000018

080010ac <HAL_Init>:
{
 80010ac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80010ae:	2004      	movs	r0, #4
 80010b0:	f000 fef2 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 80010b4:	f7ff ff3e 	bl	8000f34 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b8:	2007      	movs	r0, #7
 80010ba:	f7ff ffcf 	bl	800105c <HAL_InitTick>
 80010be:	b110      	cbz	r0, 80010c6 <HAL_Init+0x1a>
    status = HAL_ERROR;
 80010c0:	2401      	movs	r4, #1
}
 80010c2:	4620      	mov	r0, r4
 80010c4:	bd10      	pop	{r4, pc}
 80010c6:	4604      	mov	r4, r0
    HAL_MspInit();
 80010c8:	f7ff fdb6 	bl	8000c38 <HAL_MspInit>
 80010cc:	e7f9      	b.n	80010c2 <HAL_Init+0x16>
	...

080010d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_IncTick+0x10>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <HAL_IncTick+0x14>)
 80010d6:	6811      	ldr	r1, [r2, #0]
 80010d8:	440b      	add	r3, r1
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000014 	.word	0x20000014
 80010e4:	20000244 	.word	0x20000244

080010e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010e8:	4b01      	ldr	r3, [pc, #4]	; (80010f0 <HAL_GetTick+0x8>)
 80010ea:	6818      	ldr	r0, [r3, #0]
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000244 	.word	0x20000244

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff fff6 	bl	80010e8 <HAL_GetTick>
 80010fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001102:	d002      	beq.n	800110a <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_Delay+0x24>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110a:	f7ff ffed 	bl	80010e8 <HAL_GetTick>
 800110e:	1b40      	subs	r0, r0, r5
 8001110:	42a0      	cmp	r0, r4
 8001112:	d3fa      	bcc.n	800110a <HAL_Delay+0x16>
  {
  }
}
 8001114:	bd38      	pop	{r3, r4, r5, pc}
 8001116:	bf00      	nop
 8001118:	20000014 	.word	0x20000014

0800111c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800111c:	b530      	push	{r4, r5, lr}
 800111e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001120:	2300      	movs	r3, #0
 8001122:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001124:	2800      	cmp	r0, #0
 8001126:	f000 80df 	beq.w	80012e8 <HAL_ADC_Init+0x1cc>
 800112a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800112c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800112e:	b313      	cbz	r3, 8001176 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001130:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001138:	d005      	beq.n	8001146 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8001140:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001144:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001146:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001148:	6893      	ldr	r3, [r2, #8]
 800114a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800114e:	d11f      	bne.n	8001190 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8001150:	6893      	ldr	r3, [r2, #8]
 8001152:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001156:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <HAL_ADC_Init+0x1d0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	4a62      	ldr	r2, [pc, #392]	; (80012f0 <HAL_ADC_Init+0x1d4>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	099b      	lsrs	r3, r3, #6
 800116e:	3301      	adds	r3, #1
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001174:	e009      	b.n	800118a <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8001176:	f7ff fd77 	bl	8000c68 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800117a:	2300      	movs	r3, #0
 800117c:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800117e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8001182:	e7d5      	b.n	8001130 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8001184:	9b01      	ldr	r3, [sp, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800118a:	9b01      	ldr	r3, [sp, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f9      	bne.n	8001184 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001190:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001192:	6893      	ldr	r3, [r2, #8]
 8001194:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001198:	d17d      	bne.n	8001296 <HAL_ADC_Init+0x17a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ac:	6893      	ldr	r3, [r2, #8]
 80011ae:	f013 0304 	ands.w	r3, r3, #4
 80011b2:	d000      	beq.n	80011b6 <HAL_ADC_Init+0x9a>
 80011b4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80011b8:	f011 0f10 	tst.w	r1, #16
 80011bc:	f040 808d 	bne.w	80012da <HAL_ADC_Init+0x1be>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f040 808a 	bne.w	80012da <HAL_ADC_Init+0x1be>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d2:	6893      	ldr	r3, [r2, #8]
 80011d4:	f013 0f01 	tst.w	r3, #1
 80011d8:	d114      	bne.n	8001204 <HAL_ADC_Init+0xe8>
 80011da:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <HAL_ADC_Init+0x1d8>)
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	f012 0201 	ands.w	r2, r2, #1
 80011e2:	d000      	beq.n	80011e6 <HAL_ADC_Init+0xca>
 80011e4:	2201      	movs	r2, #1
 80011e6:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <HAL_ADC_Init+0x1dc>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f013 0301 	ands.w	r3, r3, #1
 80011ee:	d000      	beq.n	80011f2 <HAL_ADC_Init+0xd6>
 80011f0:	2301      	movs	r3, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	d106      	bne.n	8001204 <HAL_ADC_Init+0xe8>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011f6:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011f8:	4940      	ldr	r1, [pc, #256]	; (80012fc <HAL_ADC_Init+0x1e0>)
 80011fa:	688a      	ldr	r2, [r1, #8]
 80011fc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001204:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 8001206:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001208:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 800120c:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 800120e:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8001210:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 8001212:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001214:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800121c:	2a01      	cmp	r2, #1
 800121e:	d03c      	beq.n	800129a <HAL_ADC_Init+0x17e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001220:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001222:	b122      	cbz	r2, 800122e <HAL_ADC_Init+0x112>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001224:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001228:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800122a:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800122c:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800122e:	6821      	ldr	r1, [r4, #0]
 8001230:	68cd      	ldr	r5, [r1, #12]
 8001232:	4a33      	ldr	r2, [pc, #204]	; (8001300 <HAL_ADC_Init+0x1e4>)
 8001234:	402a      	ands	r2, r5
 8001236:	431a      	orrs	r2, r3
 8001238:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800123a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800123c:	6893      	ldr	r3, [r2, #8]
 800123e:	f013 0308 	ands.w	r3, r3, #8
 8001242:	d000      	beq.n	8001246 <HAL_ADC_Init+0x12a>
 8001244:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001246:	b9bb      	cbnz	r3, 8001278 <HAL_ADC_Init+0x15c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001248:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800124a:	7e21      	ldrb	r1, [r4, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800124c:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001250:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001254:	ea43 0141 	orr.w	r1, r3, r1, lsl #1

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001258:	68d3      	ldr	r3, [r2, #12]
 800125a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800125e:	f023 0306 	bic.w	r3, r3, #6
 8001262:	430b      	orrs	r3, r1
 8001264:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001266:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800126a:	2b01      	cmp	r3, #1
 800126c:	d01a      	beq.n	80012a4 <HAL_ADC_Init+0x188>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800126e:	6822      	ldr	r2, [r4, #0]
 8001270:	6913      	ldr	r3, [r2, #16]
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001278:	6923      	ldr	r3, [r4, #16]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d024      	beq.n	80012c8 <HAL_ADC_Init+0x1ac>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800127e:	6822      	ldr	r2, [r4, #0]
 8001280:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001288:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800128a:	f023 0303 	bic.w	r3, r3, #3
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	65a3      	str	r3, [r4, #88]	; 0x58
 8001294:	e026      	b.n	80012e4 <HAL_ADC_Init+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001296:	2000      	movs	r0, #0
 8001298:	e788      	b.n	80011ac <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800129a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800129c:	3a01      	subs	r2, #1
 800129e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80012a2:	e7bd      	b.n	8001220 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 80012a4:	6821      	ldr	r1, [r4, #0]
 80012a6:	690b      	ldr	r3, [r1, #16]
 80012a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012ac:	f023 0304 	bic.w	r3, r3, #4
 80012b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80012b2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80012b4:	432a      	orrs	r2, r5
 80012b6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80012b8:	432a      	orrs	r2, r5
 80012ba:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80012bc:	432a      	orrs	r2, r5
 80012be:	4313      	orrs	r3, r2
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	610b      	str	r3, [r1, #16]
 80012c6:	e7d7      	b.n	8001278 <HAL_ADC_Init+0x15c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012c8:	6821      	ldr	r1, [r4, #0]
 80012ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80012cc:	f023 030f 	bic.w	r3, r3, #15
 80012d0:	69e2      	ldr	r2, [r4, #28]
 80012d2:	3a01      	subs	r2, #1
 80012d4:	4313      	orrs	r3, r2
 80012d6:	630b      	str	r3, [r1, #48]	; 0x30
 80012d8:	e7d6      	b.n	8001288 <HAL_ADC_Init+0x16c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012e2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80012e4:	b003      	add	sp, #12
 80012e6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e7fb      	b.n	80012e4 <HAL_ADC_Init+0x1c8>
 80012ec:	20000010 	.word	0x20000010
 80012f0:	053e2d63 	.word	0x053e2d63
 80012f4:	42028000 	.word	0x42028000
 80012f8:	42028100 	.word	0x42028100
 80012fc:	42028300 	.word	0x42028300
 8001300:	fff0c007 	.word	0xfff0c007

08001304 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001308:	4604      	mov	r4, r0
 800130a:	460e      	mov	r6, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <HAL_ADC_PollForConversion+0x114>)
 800130e:	689f      	ldr	r7, [r3, #8]
 8001310:	f007 071f 	and.w	r7, r7, #31

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001314:	6945      	ldr	r5, [r0, #20]
 8001316:	2d08      	cmp	r5, #8
 8001318:	d014      	beq.n	8001344 <HAL_ADC_PollForConversion+0x40>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800131a:	2f09      	cmp	r7, #9
 800131c:	d805      	bhi.n	800132a <HAL_ADC_PollForConversion+0x26>
 800131e:	f240 2321 	movw	r3, #545	; 0x221
 8001322:	40fb      	lsrs	r3, r7
 8001324:	f013 0f01 	tst.w	r3, #1
 8001328:	d106      	bne.n	8001338 <HAL_ADC_PollForConversion+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_ADC_PollForConversion+0x114>)
 800132c:	689b      	ldr	r3, [r3, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800132e:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8001332:	d12c      	bne.n	800138e <HAL_ADC_PollForConversion+0x8a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001334:	2504      	movs	r5, #4
 8001336:	e005      	b.n	8001344 <HAL_ADC_PollForConversion+0x40>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001338:	6803      	ldr	r3, [r0, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f013 0f01 	tst.w	r3, #1
 8001340:	d11f      	bne.n	8001382 <HAL_ADC_PollForConversion+0x7e>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001342:	2504      	movs	r5, #4
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001344:	f7ff fed0 	bl	80010e8 <HAL_GetTick>
 8001348:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	422a      	tst	r2, r5
 8001350:	d123      	bne.n	800139a <HAL_ADC_PollForConversion+0x96>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001352:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001356:	d0f8      	beq.n	800134a <HAL_ADC_PollForConversion+0x46>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001358:	f7ff fec6 	bl	80010e8 <HAL_GetTick>
 800135c:	eba0 0008 	sub.w	r0, r0, r8
 8001360:	42b0      	cmp	r0, r6
 8001362:	d801      	bhi.n	8001368 <HAL_ADC_PollForConversion+0x64>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d1f0      	bne.n	800134a <HAL_ADC_PollForConversion+0x46>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	422b      	tst	r3, r5
 800136e:	d1ec      	bne.n	800134a <HAL_ADC_PollForConversion+0x46>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001378:	2300      	movs	r3, #0
 800137a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 800137e:	2003      	movs	r0, #3
 8001380:	e045      	b.n	800140e <HAL_ADC_PollForConversion+0x10a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001382:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	6583      	str	r3, [r0, #88]	; 0x58
        return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
 800138c:	e03f      	b.n	800140e <HAL_ADC_PollForConversion+0x10a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001390:	f043 0320 	orr.w	r3, r3, #32
 8001394:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001396:	2001      	movs	r0, #1
 8001398:	e039      	b.n	800140e <HAL_ADC_PollForConversion+0x10a>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800139a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800139c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a0:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80013a8:	d111      	bne.n	80013ce <HAL_ADC_PollForConversion+0xca>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80013aa:	7e62      	ldrb	r2, [r4, #25]
 80013ac:	b97a      	cbnz	r2, 80013ce <HAL_ADC_PollForConversion+0xca>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	f012 0f08 	tst.w	r2, #8
 80013b4:	d00b      	beq.n	80013ce <HAL_ADC_PollForConversion+0xca>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80013b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013bc:	65a2      	str	r2, [r4, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80013be:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80013c0:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80013c4:	d103      	bne.n	80013ce <HAL_ADC_PollForConversion+0xca>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80013c8:	f042 0201 	orr.w	r2, r2, #1
 80013cc:	65a2      	str	r2, [r4, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <HAL_ADC_PollForConversion+0x118>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d00c      	beq.n	80013ee <HAL_ADC_PollForConversion+0xea>
 80013d4:	461a      	mov	r2, r3
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00c      	beq.n	80013f4 <HAL_ADC_PollForConversion+0xf0>
 80013da:	2f09      	cmp	r7, #9
 80013dc:	d805      	bhi.n	80013ea <HAL_ADC_PollForConversion+0xe6>
 80013de:	f240 2121 	movw	r1, #545	; 0x221
 80013e2:	40f9      	lsrs	r1, r7
 80013e4:	f011 0f01 	tst.w	r1, #1
 80013e8:	d104      	bne.n	80013f4 <HAL_ADC_PollForConversion+0xf0>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80013ea:	68d2      	ldr	r2, [r2, #12]
 80013ec:	e003      	b.n	80013f6 <HAL_ADC_PollForConversion+0xf2>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013ee:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80013f2:	e7f0      	b.n	80013d6 <HAL_ADC_PollForConversion+0xd2>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80013f4:	68da      	ldr	r2, [r3, #12]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80013f6:	2d08      	cmp	r5, #8
 80013f8:	d006      	beq.n	8001408 <HAL_ADC_PollForConversion+0x104>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80013fa:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80013fe:	d108      	bne.n	8001412 <HAL_ADC_PollForConversion+0x10e>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001400:	220c      	movs	r2, #12
 8001402:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001404:	2000      	movs	r0, #0
 8001406:	e002      	b.n	800140e <HAL_ADC_PollForConversion+0x10a>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001408:	2208      	movs	r2, #8
 800140a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800140c:	2000      	movs	r0, #0
}
 800140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8001412:	2000      	movs	r0, #0
 8001414:	e7fb      	b.n	800140e <HAL_ADC_PollForConversion+0x10a>
 8001416:	bf00      	nop
 8001418:	42028300 	.word	0x42028300
 800141c:	42028100 	.word	0x42028100

08001420 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001420:	6803      	ldr	r3, [r0, #0]
 8001422:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001424:	4770      	bx	lr

08001426 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001426:	4770      	bx	lr

08001428 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001428:	4770      	bx	lr

0800142a <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800142a:	4770      	bx	lr

0800142c <HAL_ADC_IRQHandler>:
{
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001430:	6803      	ldr	r3, [r0, #0]
 8001432:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001434:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001436:	4b9a      	ldr	r3, [pc, #616]	; (80016a0 <HAL_ADC_IRQHandler+0x274>)
 8001438:	689e      	ldr	r6, [r3, #8]
 800143a:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800143e:	f017 0f02 	tst.w	r7, #2
 8001442:	d010      	beq.n	8001466 <HAL_ADC_IRQHandler+0x3a>
 8001444:	f015 0f02 	tst.w	r5, #2
 8001448:	d00d      	beq.n	8001466 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800144a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800144c:	f013 0f10 	tst.w	r3, #16
 8001450:	d103      	bne.n	800145a <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001452:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001458:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800145a:	4620      	mov	r0, r4
 800145c:	f000 fc8e 	bl	8001d7c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001466:	f017 0f04 	tst.w	r7, #4
 800146a:	d002      	beq.n	8001472 <HAL_ADC_IRQHandler+0x46>
 800146c:	f015 0f04 	tst.w	r5, #4
 8001470:	d105      	bne.n	800147e <HAL_ADC_IRQHandler+0x52>
 8001472:	f017 0f08 	tst.w	r7, #8
 8001476:	d04d      	beq.n	8001514 <HAL_ADC_IRQHandler+0xe8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001478:	f015 0f08 	tst.w	r5, #8
 800147c:	d04a      	beq.n	8001514 <HAL_ADC_IRQHandler+0xe8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800147e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001480:	f013 0f10 	tst.w	r3, #16
 8001484:	d103      	bne.n	800148e <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148c:	65a3      	str	r3, [r4, #88]	; 0x58
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800148e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001496:	d137      	bne.n	8001508 <HAL_ADC_IRQHandler+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001498:	4a82      	ldr	r2, [pc, #520]	; (80016a4 <HAL_ADC_IRQHandler+0x278>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00c      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x8c>
 800149e:	461a      	mov	r2, r3
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00c      	beq.n	80014be <HAL_ADC_IRQHandler+0x92>
 80014a4:	2e09      	cmp	r6, #9
 80014a6:	d805      	bhi.n	80014b4 <HAL_ADC_IRQHandler+0x88>
 80014a8:	f240 2121 	movw	r1, #545	; 0x221
 80014ac:	40f1      	lsrs	r1, r6
 80014ae:	f011 0f01 	tst.w	r1, #1
 80014b2:	d104      	bne.n	80014be <HAL_ADC_IRQHandler+0x92>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80014b4:	68d2      	ldr	r2, [r2, #12]
 80014b6:	e003      	b.n	80014c0 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014b8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80014bc:	e7f0      	b.n	80014a0 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014be:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80014c0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80014c4:	d120      	bne.n	8001508 <HAL_ADC_IRQHandler+0xdc>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f012 0f08 	tst.w	r2, #8
 80014cc:	d01c      	beq.n	8001508 <HAL_ADC_IRQHandler+0xdc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	f012 0f04 	tst.w	r2, #4
 80014d4:	d110      	bne.n	80014f8 <HAL_ADC_IRQHandler+0xcc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	f022 020c 	bic.w	r2, r2, #12
 80014dc:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014e4:	65a3      	str	r3, [r4, #88]	; 0x58
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014e8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80014ec:	d10c      	bne.n	8001508 <HAL_ADC_IRQHandler+0xdc>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80014f6:	e007      	b.n	8001508 <HAL_ADC_IRQHandler+0xdc>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff ff8c 	bl	8001426 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	220c      	movs	r2, #12
 8001512:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001514:	f017 0f20 	tst.w	r7, #32
 8001518:	d002      	beq.n	8001520 <HAL_ADC_IRQHandler+0xf4>
 800151a:	f015 0f20 	tst.w	r5, #32
 800151e:	d105      	bne.n	800152c <HAL_ADC_IRQHandler+0x100>
 8001520:	f017 0f40 	tst.w	r7, #64	; 0x40
 8001524:	d05c      	beq.n	80015e0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001526:	f015 0f40 	tst.w	r5, #64	; 0x40
 800152a:	d059      	beq.n	80015e0 <HAL_ADC_IRQHandler+0x1b4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800152c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800152e:	f013 0f10 	tst.w	r3, #16
 8001532:	d103      	bne.n	800153c <HAL_ADC_IRQHandler+0x110>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001536:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800153a:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800153c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800153e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001540:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8001544:	d112      	bne.n	800156c <HAL_ADC_IRQHandler+0x140>
 8001546:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800154e:	d10f      	bne.n	8001570 <HAL_ADC_IRQHandler+0x144>
 8001550:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001552:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_ADC_IRQHandler+0x278>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_ADC_IRQHandler+0x148>
 8001558:	461a      	mov	r2, r3
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800155e:	b166      	cbz	r6, 800157a <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001560:	2e06      	cmp	r6, #6
 8001562:	d00a      	beq.n	800157a <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001564:	2e07      	cmp	r6, #7
 8001566:	d008      	beq.n	800157a <HAL_ADC_IRQHandler+0x14e>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001568:	68d2      	ldr	r2, [r2, #12]
 800156a:	e007      	b.n	800157c <HAL_ADC_IRQHandler+0x150>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800156c:	2100      	movs	r1, #0
 800156e:	e7eb      	b.n	8001548 <HAL_ADC_IRQHandler+0x11c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001570:	2000      	movs	r0, #0
 8001572:	e7ee      	b.n	8001552 <HAL_ADC_IRQHandler+0x126>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001574:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001578:	e7ef      	b.n	800155a <HAL_ADC_IRQHandler+0x12e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800157a:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800157c:	b351      	cbz	r1, 80015d4 <HAL_ADC_IRQHandler+0x1a8>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800157e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001582:	d003      	beq.n	800158c <HAL_ADC_IRQHandler+0x160>
 8001584:	b330      	cbz	r0, 80015d4 <HAL_ADC_IRQHandler+0x1a8>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001586:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800158a:	d123      	bne.n	80015d4 <HAL_ADC_IRQHandler+0x1a8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001592:	d01f      	beq.n	80015d4 <HAL_ADC_IRQHandler+0x1a8>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001594:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001598:	d11c      	bne.n	80015d4 <HAL_ADC_IRQHandler+0x1a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	f012 0f08 	tst.w	r2, #8
 80015a0:	d110      	bne.n	80015c4 <HAL_ADC_IRQHandler+0x198>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80015a8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80015aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015b0:	65a3      	str	r3, [r4, #88]	; 0x58
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80015b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015b8:	d10c      	bne.n	80015d4 <HAL_ADC_IRQHandler+0x1a8>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80015c2:	e007      	b.n	80015d4 <HAL_ADC_IRQHandler+0x1a8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	65a3      	str	r3, [r4, #88]	; 0x58
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015d4:	4620      	mov	r0, r4
 80015d6:	f000 fbcd 	bl	8001d74 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	2260      	movs	r2, #96	; 0x60
 80015de:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80015e0:	f017 0f80 	tst.w	r7, #128	; 0x80
 80015e4:	d002      	beq.n	80015ec <HAL_ADC_IRQHandler+0x1c0>
 80015e6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80015ea:	d12f      	bne.n	800164c <HAL_ADC_IRQHandler+0x220>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80015ec:	f417 7f80 	tst.w	r7, #256	; 0x100
 80015f0:	d002      	beq.n	80015f8 <HAL_ADC_IRQHandler+0x1cc>
 80015f2:	f415 7f80 	tst.w	r5, #256	; 0x100
 80015f6:	d134      	bne.n	8001662 <HAL_ADC_IRQHandler+0x236>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80015f8:	f417 7f00 	tst.w	r7, #512	; 0x200
 80015fc:	d002      	beq.n	8001604 <HAL_ADC_IRQHandler+0x1d8>
 80015fe:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001602:	d13a      	bne.n	800167a <HAL_ADC_IRQHandler+0x24e>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001604:	f017 0f10 	tst.w	r7, #16
 8001608:	d019      	beq.n	800163e <HAL_ADC_IRQHandler+0x212>
 800160a:	f015 0f10 	tst.w	r5, #16
 800160e:	d016      	beq.n	800163e <HAL_ADC_IRQHandler+0x212>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001612:	b133      	cbz	r3, 8001622 <HAL_ADC_IRQHandler+0x1f6>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001614:	2e00      	cmp	r6, #0
 8001616:	d03c      	beq.n	8001692 <HAL_ADC_IRQHandler+0x266>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_ADC_IRQHandler+0x274>)
 800161a:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800161c:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8001620:	d00a      	beq.n	8001638 <HAL_ADC_IRQHandler+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001628:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800162a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff fef9 	bl	800142a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	2210      	movs	r2, #16
 800163c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800163e:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8001642:	d002      	beq.n	800164a <HAL_ADC_IRQHandler+0x21e>
 8001644:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8001648:	d12e      	bne.n	80016a8 <HAL_ADC_IRQHandler+0x27c>
}
 800164a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800164c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800164e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001652:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fee7 	bl	8001428 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e7c4      	b.n	80015ec <HAL_ADC_IRQHandler+0x1c0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800166a:	4620      	mov	r0, r4
 800166c:	f000 fb84 	bl	8001d78 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e7be      	b.n	80015f8 <HAL_ADC_IRQHandler+0x1cc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800167a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001682:	4620      	mov	r0, r4
 8001684:	f000 fb79 	bl	8001d7a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e7b8      	b.n	8001604 <HAL_ADC_IRQHandler+0x1d8>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f013 0f01 	tst.w	r3, #1
 800169a:	d0cd      	beq.n	8001638 <HAL_ADC_IRQHandler+0x20c>
 800169c:	e7c1      	b.n	8001622 <HAL_ADC_IRQHandler+0x1f6>
 800169e:	bf00      	nop
 80016a0:	42028300 	.word	0x42028300
 80016a4:	42028100 	.word	0x42028100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80016a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ae:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80016b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016be:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f000 fb58 	bl	8001d76 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80016c6:	e7c0      	b.n	800164a <HAL_ADC_IRQHandler+0x21e>

080016c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016cc:	2200      	movs	r2, #0
 80016ce:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d0:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80016d4:	2a01      	cmp	r2, #1
 80016d6:	f000 8257 	beq.w	8001b88 <HAL_ADC_ConfigChannel+0x4c0>
 80016da:	4603      	mov	r3, r0
 80016dc:	2201      	movs	r2, #1
 80016de:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016e2:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e4:	68a8      	ldr	r0, [r5, #8]
 80016e6:	f010 0f04 	tst.w	r0, #4
 80016ea:	d009      	beq.n	8001700 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ee:	f042 0220 	orr.w	r2, r2, #32
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016f4:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80016fc:	b003      	add	sp, #12
 80016fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001700:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001702:	3530      	adds	r5, #48	; 0x30
 8001704:	0a22      	lsrs	r2, r4, #8
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 800170c:	58a8      	ldr	r0, [r5, r2]
 800170e:	f004 0e1f 	and.w	lr, r4, #31
 8001712:	241f      	movs	r4, #31
 8001714:	fa04 f40e 	lsl.w	r4, r4, lr
 8001718:	ea20 0004 	bic.w	r0, r0, r4
 800171c:	680c      	ldr	r4, [r1, #0]
 800171e:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8001722:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001726:	ea40 000c 	orr.w	r0, r0, ip
 800172a:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800172c:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800172e:	68a2      	ldr	r2, [r4, #8]
 8001730:	f012 0204 	ands.w	r2, r2, #4
 8001734:	d000      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x70>
 8001736:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001738:	68a0      	ldr	r0, [r4, #8]
 800173a:	f010 0008 	ands.w	r0, r0, #8
 800173e:	d000      	beq.n	8001742 <HAL_ADC_ConfigChannel+0x7a>
 8001740:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001742:	2a00      	cmp	r2, #0
 8001744:	d134      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0xe8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001746:	2800      	cmp	r0, #0
 8001748:	d132      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0xe8>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800174a:	6888      	ldr	r0, [r1, #8]
 800174c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8001750:	d073      	beq.n	800183a <HAL_ADC_ConfigChannel+0x172>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001752:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001754:	3414      	adds	r4, #20
 8001756:	0e72      	lsrs	r2, r6, #25
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 800175e:	58a5      	ldr	r5, [r4, r2]
 8001760:	f3c6 5c04 	ubfx	ip, r6, #20, #5
 8001764:	2607      	movs	r6, #7
 8001766:	fa06 f60c 	lsl.w	r6, r6, ip
 800176a:	ea25 0506 	bic.w	r5, r5, r6
 800176e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001772:	4328      	orrs	r0, r5
 8001774:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001776:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001778:	6942      	ldr	r2, [r0, #20]
 800177a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800177e:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001780:	694c      	ldr	r4, [r1, #20]
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	68c2      	ldr	r2, [r0, #12]
 8001786:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800178a:	0052      	lsls	r2, r2, #1
 800178c:	4094      	lsls	r4, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800178e:	690d      	ldr	r5, [r1, #16]
 8001790:	2d04      	cmp	r5, #4
 8001792:	d067      	beq.n	8001864 <HAL_ADC_ConfigChannel+0x19c>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001794:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001796:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8001798:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800179c:	4aae      	ldr	r2, [pc, #696]	; (8001a58 <HAL_ADC_ConfigChannel+0x390>)
 800179e:	403a      	ands	r2, r7
 80017a0:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80017a4:	4334      	orrs	r4, r6
 80017a6:	4322      	orrs	r2, r4
 80017a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ac:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b0:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b2:	6882      	ldr	r2, [r0, #8]
 80017b4:	f012 0f01 	tst.w	r2, #1
 80017b8:	f040 81e0 	bne.w	8001b7c <HAL_ADC_ConfigChannel+0x4b4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80017bc:	680a      	ldr	r2, [r1, #0]
 80017be:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80017c0:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80017c4:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80017c8:	ea24 040c 	bic.w	r4, r4, ip
 80017cc:	f005 0c18 	and.w	ip, r5, #24
 80017d0:	4da2      	ldr	r5, [pc, #648]	; (8001a5c <HAL_ADC_ConfigChannel+0x394>)
 80017d2:	fa25 f50c 	lsr.w	r5, r5, ip
 80017d6:	402a      	ands	r2, r5
 80017d8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80017dc:	4322      	orrs	r2, r4
 80017de:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017e2:	68c8      	ldr	r0, [r1, #12]
 80017e4:	4a9e      	ldr	r2, [pc, #632]	; (8001a60 <HAL_ADC_ConfigChannel+0x398>)
 80017e6:	4290      	cmp	r0, r2
 80017e8:	f000 80a4 	beq.w	8001934 <HAL_ADC_ConfigChannel+0x26c>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017ec:	6808      	ldr	r0, [r1, #0]
 80017ee:	4a9d      	ldr	r2, [pc, #628]	; (8001a64 <HAL_ADC_ConfigChannel+0x39c>)
 80017f0:	4210      	tst	r0, r2
 80017f2:	f000 81c5 	beq.w	8001b80 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017f6:	4a9c      	ldr	r2, [pc, #624]	; (8001a68 <HAL_ADC_ConfigChannel+0x3a0>)
 80017f8:	6894      	ldr	r4, [r2, #8]
 80017fa:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017fe:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8001802:	6891      	ldr	r1, [r2, #8]
 8001804:	f011 0101 	ands.w	r1, r1, #1
 8001808:	d000      	beq.n	800180c <HAL_ADC_ConfigChannel+0x144>
 800180a:	2101      	movs	r1, #1
 800180c:	4a97      	ldr	r2, [pc, #604]	; (8001a6c <HAL_ADC_ConfigChannel+0x3a4>)
 800180e:	6892      	ldr	r2, [r2, #8]
 8001810:	f012 0201 	ands.w	r2, r2, #1
 8001814:	d000      	beq.n	8001818 <HAL_ADC_ConfigChannel+0x150>
 8001816:	2201      	movs	r2, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001818:	430a      	orrs	r2, r1
 800181a:	f040 81a9 	bne.w	8001b70 <HAL_ADC_ConfigChannel+0x4a8>
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181e:	4a94      	ldr	r2, [pc, #592]	; (8001a70 <HAL_ADC_ConfigChannel+0x3a8>)
 8001820:	4290      	cmp	r0, r2
 8001822:	f000 8157 	beq.w	8001ad4 <HAL_ADC_ConfigChannel+0x40c>
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001826:	4a93      	ldr	r2, [pc, #588]	; (8001a74 <HAL_ADC_ConfigChannel+0x3ac>)
 8001828:	4290      	cmp	r0, r2
 800182a:	f000 817a 	beq.w	8001b22 <HAL_ADC_ConfigChannel+0x45a>
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800182e:	4a92      	ldr	r2, [pc, #584]	; (8001a78 <HAL_ADC_ConfigChannel+0x3b0>)
 8001830:	4290      	cmp	r0, r2
 8001832:	f000 818a 	beq.w	8001b4a <HAL_ADC_ConfigChannel+0x482>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001836:	2000      	movs	r0, #0
 8001838:	e75d      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800183a:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800183c:	3414      	adds	r4, #20
 800183e:	0e42      	lsrs	r2, r0, #25
 8001840:	0092      	lsls	r2, r2, #2
 8001842:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8001846:	58a5      	ldr	r5, [r4, r2]
 8001848:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800184c:	2607      	movs	r6, #7
 800184e:	fa06 f000 	lsl.w	r0, r6, r0
 8001852:	ea25 0000 	bic.w	r0, r5, r0
 8001856:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001858:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800185a:	6942      	ldr	r2, [r0, #20]
 800185c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001860:	6142      	str	r2, [r0, #20]
}
 8001862:	e78d      	b.n	8001780 <HAL_ADC_ConfigChannel+0xb8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001864:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001866:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001868:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800186c:	680a      	ldr	r2, [r1, #0]
 800186e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001872:	bb85      	cbnz	r5, 80018d6 <HAL_ADC_ConfigChannel+0x20e>
 8001874:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001878:	4294      	cmp	r4, r2
 800187a:	d034      	beq.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800187c:	681c      	ldr	r4, [r3, #0]
 800187e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001880:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001882:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001886:	680a      	ldr	r2, [r1, #0]
 8001888:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800188c:	bb85      	cbnz	r5, 80018f0 <HAL_ADC_ConfigChannel+0x228>
 800188e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001892:	4290      	cmp	r0, r2
 8001894:	d034      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x238>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001896:	681c      	ldr	r4, [r3, #0]
 8001898:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800189a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800189c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018a0:	680a      	ldr	r2, [r1, #0]
 80018a2:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80018a6:	bb85      	cbnz	r5, 800190a <HAL_ADC_ConfigChannel+0x242>
 80018a8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018ac:	4290      	cmp	r0, r2
 80018ae:	d034      	beq.n	800191a <HAL_ADC_ConfigChannel+0x252>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018b0:	681c      	ldr	r4, [r3, #0]
 80018b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80018b4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80018b6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018ba:	680a      	ldr	r2, [r1, #0]
 80018bc:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80018c0:	bb85      	cbnz	r5, 8001924 <HAL_ADC_ConfigChannel+0x25c>
 80018c2:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018c6:	4290      	cmp	r0, r2
 80018c8:	f47f af72 	bne.w	80017b0 <HAL_ADC_ConfigChannel+0xe8>
  MODIFY_REG(*preg,
 80018cc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80018ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018d2:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 80018d4:	e76c      	b.n	80017b0 <HAL_ADC_ConfigChannel+0xe8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018da:	b112      	cbz	r2, 80018e2 <HAL_ADC_ConfigChannel+0x21a>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80018dc:	fab2 f282 	clz	r2, r2
 80018e0:	e7ca      	b.n	8001878 <HAL_ADC_ConfigChannel+0x1b0>
    return 32U;
 80018e2:	2220      	movs	r2, #32
 80018e4:	e7c8      	b.n	8001878 <HAL_ADC_ConfigChannel+0x1b0>
  MODIFY_REG(*preg,
 80018e6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80018e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ec:	6602      	str	r2, [r0, #96]	; 0x60
}
 80018ee:	e7c5      	b.n	800187c <HAL_ADC_ConfigChannel+0x1b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80018f4:	b112      	cbz	r2, 80018fc <HAL_ADC_ConfigChannel+0x234>
  return __builtin_clz(value);
 80018f6:	fab2 f282 	clz	r2, r2
 80018fa:	e7ca      	b.n	8001892 <HAL_ADC_ConfigChannel+0x1ca>
    return 32U;
 80018fc:	2220      	movs	r2, #32
 80018fe:	e7c8      	b.n	8001892 <HAL_ADC_ConfigChannel+0x1ca>
  MODIFY_REG(*preg,
 8001900:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001906:	6662      	str	r2, [r4, #100]	; 0x64
}
 8001908:	e7c5      	b.n	8001896 <HAL_ADC_ConfigChannel+0x1ce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800190e:	b112      	cbz	r2, 8001916 <HAL_ADC_ConfigChannel+0x24e>
  return __builtin_clz(value);
 8001910:	fab2 f282 	clz	r2, r2
 8001914:	e7ca      	b.n	80018ac <HAL_ADC_ConfigChannel+0x1e4>
    return 32U;
 8001916:	2220      	movs	r2, #32
 8001918:	e7c8      	b.n	80018ac <HAL_ADC_ConfigChannel+0x1e4>
  MODIFY_REG(*preg,
 800191a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800191c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001920:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8001922:	e7c5      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x1e8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001928:	b112      	cbz	r2, 8001930 <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 800192a:	fab2 f282 	clz	r2, r2
 800192e:	e7ca      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8001930:	2220      	movs	r2, #32
 8001932:	e7c8      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x1fe>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001934:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001936:	680a      	ldr	r2, [r1, #0]
 8001938:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800193c:	2d00      	cmp	r5, #0
 800193e:	d138      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x2ea>
 8001940:	0e90      	lsrs	r0, r2, #26
 8001942:	3001      	adds	r0, #1
 8001944:	f000 001f 	and.w	r0, r0, #31
 8001948:	2809      	cmp	r0, #9
 800194a:	bf8c      	ite	hi
 800194c:	2000      	movhi	r0, #0
 800194e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001950:	2800      	cmp	r0, #0
 8001952:	d066      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x35a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001954:	2d00      	cmp	r5, #0
 8001956:	d13b      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x308>
 8001958:	0e90      	lsrs	r0, r2, #26
 800195a:	3001      	adds	r0, #1
 800195c:	0680      	lsls	r0, r0, #26
 800195e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001962:	2d00      	cmp	r5, #0
 8001964:	d140      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x320>
 8001966:	0e97      	lsrs	r7, r2, #26
 8001968:	3701      	adds	r7, #1
 800196a:	f007 071f 	and.w	r7, r7, #31
 800196e:	2601      	movs	r6, #1
 8001970:	40be      	lsls	r6, r7
 8001972:	4330      	orrs	r0, r6
 8001974:	2d00      	cmp	r5, #0
 8001976:	d146      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x33e>
 8001978:	0e92      	lsrs	r2, r2, #26
 800197a:	3201      	adds	r2, #1
 800197c:	f002 021f 	and.w	r2, r2, #31
 8001980:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001984:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001986:	4310      	orrs	r0, r2
                                      pConfig->SamplingTime);
 8001988:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800198a:	f104 0e14 	add.w	lr, r4, #20
 800198e:	0e42      	lsrs	r2, r0, #25
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8001996:	f85e 4002 	ldr.w	r4, [lr, r2]
 800199a:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800199e:	2607      	movs	r6, #7
 80019a0:	4086      	lsls	r6, r0
 80019a2:	ea24 0c06 	bic.w	ip, r4, r6
 80019a6:	4085      	lsls	r5, r0
 80019a8:	ea4c 0505 	orr.w	r5, ip, r5
 80019ac:	f84e 5002 	str.w	r5, [lr, r2]
}
 80019b0:	e71c      	b.n	80017ec <HAL_ADC_ConfigChannel+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80019b6:	b148      	cbz	r0, 80019cc <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80019b8:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019bc:	3001      	adds	r0, #1
 80019be:	f000 001f 	and.w	r0, r0, #31
 80019c2:	2809      	cmp	r0, #9
 80019c4:	bf8c      	ite	hi
 80019c6:	2000      	movhi	r0, #0
 80019c8:	2001      	movls	r0, #1
 80019ca:	e7c1      	b.n	8001950 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80019cc:	2020      	movs	r0, #32
 80019ce:	e7f5      	b.n	80019bc <HAL_ADC_ConfigChannel+0x2f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80019d4:	b130      	cbz	r0, 80019e4 <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 80019d6:	fab0 f080 	clz	r0, r0
 80019da:	3001      	adds	r0, #1
 80019dc:	0680      	lsls	r0, r0, #26
 80019de:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80019e2:	e7be      	b.n	8001962 <HAL_ADC_ConfigChannel+0x29a>
    return 32U;
 80019e4:	2020      	movs	r0, #32
 80019e6:	e7f8      	b.n	80019da <HAL_ADC_ConfigChannel+0x312>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80019ec:	b14e      	cbz	r6, 8001a02 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80019ee:	fab6 f686 	clz	r6, r6
 80019f2:	3601      	adds	r6, #1
 80019f4:	f006 061f 	and.w	r6, r6, #31
 80019f8:	f04f 0c01 	mov.w	ip, #1
 80019fc:	fa0c f606 	lsl.w	r6, ip, r6
 8001a00:	e7b7      	b.n	8001972 <HAL_ADC_ConfigChannel+0x2aa>
    return 32U;
 8001a02:	2620      	movs	r6, #32
 8001a04:	e7f5      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x32a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001a0a:	b142      	cbz	r2, 8001a1e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001a0c:	fab2 f282 	clz	r2, r2
 8001a10:	3201      	adds	r2, #1
 8001a12:	f002 021f 	and.w	r2, r2, #31
 8001a16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a1a:	0512      	lsls	r2, r2, #20
 8001a1c:	e7b3      	b.n	8001986 <HAL_ADC_ConfigChannel+0x2be>
    return 32U;
 8001a1e:	2220      	movs	r2, #32
 8001a20:	e7f6      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x348>
 8001a22:	bb5d      	cbnz	r5, 8001a7c <HAL_ADC_ConfigChannel+0x3b4>
 8001a24:	0e90      	lsrs	r0, r2, #26
 8001a26:	3001      	adds	r0, #1
 8001a28:	0680      	lsls	r0, r0, #26
 8001a2a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001a2e:	bb8d      	cbnz	r5, 8001a94 <HAL_ADC_ConfigChannel+0x3cc>
 8001a30:	0e97      	lsrs	r7, r2, #26
 8001a32:	3701      	adds	r7, #1
 8001a34:	f007 071f 	and.w	r7, r7, #31
 8001a38:	2601      	movs	r6, #1
 8001a3a:	40be      	lsls	r6, r7
 8001a3c:	4330      	orrs	r0, r6
 8001a3e:	bbc5      	cbnz	r5, 8001ab2 <HAL_ADC_ConfigChannel+0x3ea>
 8001a40:	0e92      	lsrs	r2, r2, #26
 8001a42:	3201      	adds	r2, #1
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a4c:	3a1e      	subs	r2, #30
 8001a4e:	0512      	lsls	r2, r2, #20
 8001a50:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a54:	4310      	orrs	r0, r2
 8001a56:	e797      	b.n	8001988 <HAL_ADC_ConfigChannel+0x2c0>
 8001a58:	03fff000 	.word	0x03fff000
 8001a5c:	0007ffff 	.word	0x0007ffff
 8001a60:	407f0000 	.word	0x407f0000
 8001a64:	80080000 	.word	0x80080000
 8001a68:	42028300 	.word	0x42028300
 8001a6c:	42028100 	.word	0x42028100
 8001a70:	c7520000 	.word	0xc7520000
 8001a74:	cb840000 	.word	0xcb840000
 8001a78:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001a80:	b130      	cbz	r0, 8001a90 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8001a82:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a86:	3001      	adds	r0, #1
 8001a88:	0680      	lsls	r0, r0, #26
 8001a8a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001a8e:	e7ce      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x366>
    return 32U;
 8001a90:	2020      	movs	r0, #32
 8001a92:	e7f8      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x3be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8001a98:	b14e      	cbz	r6, 8001aae <HAL_ADC_ConfigChannel+0x3e6>
  return __builtin_clz(value);
 8001a9a:	fab6 f686 	clz	r6, r6
 8001a9e:	3601      	adds	r6, #1
 8001aa0:	f006 061f 	and.w	r6, r6, #31
 8001aa4:	f04f 0c01 	mov.w	ip, #1
 8001aa8:	fa0c f606 	lsl.w	r6, ip, r6
 8001aac:	e7c6      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x374>
    return 32U;
 8001aae:	2620      	movs	r6, #32
 8001ab0:	e7f5      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x3d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ab6:	b15a      	cbz	r2, 8001ad0 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8001ab8:	fab2 f282 	clz	r2, r2
 8001abc:	3201      	adds	r2, #1
 8001abe:	f002 021f 	and.w	r2, r2, #31
 8001ac2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ac6:	3a1e      	subs	r2, #30
 8001ac8:	0512      	lsls	r2, r2, #20
 8001aca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001ace:	e7c1      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x38c>
    return 32U;
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	e7f3      	b.n	8001abc <HAL_ADC_ConfigChannel+0x3f4>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ad4:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8001ad8:	f47f aea5 	bne.w	8001826 <HAL_ADC_ConfigChannel+0x15e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001adc:	6819      	ldr	r1, [r3, #0]
 8001ade:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <HAL_ADC_ConfigChannel+0x4c4>)
 8001ae0:	4291      	cmp	r1, r2
 8001ae2:	d001      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e606      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ae8:	f445 0200 	orr.w	r2, r5, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001aec:	4828      	ldr	r0, [pc, #160]	; (8001b90 <HAL_ADC_ConfigChannel+0x4c8>)
 8001aee:	6881      	ldr	r1, [r0, #8]
 8001af0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001af4:	430a      	orrs	r2, r1
 8001af6:	6082      	str	r2, [r0, #8]
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_ADC_ConfigChannel+0x4cc>)
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	0992      	lsrs	r2, r2, #6
 8001afe:	4926      	ldr	r1, [pc, #152]	; (8001b98 <HAL_ADC_ConfigChannel+0x4d0>)
 8001b00:	fba1 1202 	umull	r1, r2, r1, r2
 8001b04:	0992      	lsrs	r2, r2, #6
 8001b06:	3201      	adds	r2, #1
 8001b08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001b0c:	0092      	lsls	r2, r2, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8001b0e:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8001b10:	e002      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x450>
                wait_loop_index--;
 8001b12:	9a01      	ldr	r2, [sp, #4]
 8001b14:	3a01      	subs	r2, #1
 8001b16:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8001b18:	9a01      	ldr	r2, [sp, #4]
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d1f9      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x44a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1e:	2000      	movs	r0, #0
 8001b20:	e5e9      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b22:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8001b26:	f47f ae82 	bne.w	800182e <HAL_ADC_ConfigChannel+0x166>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_ADC_ConfigChannel+0x4c4>)
 8001b2e:	4291      	cmp	r1, r2
 8001b30:	d001      	beq.n	8001b36 <HAL_ADC_ConfigChannel+0x46e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b32:	2000      	movs	r0, #0
 8001b34:	e5df      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b36:	f045 7280 	orr.w	r2, r5, #16777216	; 0x1000000
 8001b3a:	4815      	ldr	r0, [pc, #84]	; (8001b90 <HAL_ADC_ConfigChannel+0x4c8>)
 8001b3c:	6881      	ldr	r1, [r0, #8]
 8001b3e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001b42:	430a      	orrs	r2, r1
 8001b44:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b46:	2000      	movs	r0, #0
}
 8001b48:	e5d5      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b4a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8001b4e:	d119      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x4bc>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_ADC_ConfigChannel+0x4c4>)
 8001b54:	4291      	cmp	r1, r2
 8001b56:	d001      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0x494>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b58:	2000      	movs	r0, #0
 8001b5a:	e5cc      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b5c:	f445 0280 	orr.w	r2, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <HAL_ADC_ConfigChannel+0x4c8>)
 8001b62:	6881      	ldr	r1, [r0, #8]
 8001b64:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2000      	movs	r0, #0
}
 8001b6e:	e5c2      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	659a      	str	r2, [r3, #88]	; 0x58
          tmp_hal_status = HAL_ERROR;
 8001b78:	2001      	movs	r0, #1
 8001b7a:	e5bc      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e5ba      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
 8001b80:	2000      	movs	r0, #0
 8001b82:	e5b8      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
 8001b84:	2000      	movs	r0, #0
 8001b86:	e5b6      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8001b88:	2002      	movs	r0, #2
 8001b8a:	e5b7      	b.n	80016fc <HAL_ADC_ConfigChannel+0x34>
 8001b8c:	42028000 	.word	0x42028000
 8001b90:	42028300 	.word	0x42028300
 8001b94:	20000010 	.word	0x20000010
 8001b98:	053e2d63 	.word	0x053e2d63

08001b9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b530      	push	{r4, r5, lr}
 8001b9e:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	f012 0f01 	tst.w	r2, #1
 8001bac:	d158      	bne.n	8001c60 <ADC_Enable+0xc4>
 8001bae:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001bb0:	6899      	ldr	r1, [r3, #8]
 8001bb2:	4a2d      	ldr	r2, [pc, #180]	; (8001c68 <ADC_Enable+0xcc>)
 8001bb4:	4211      	tst	r1, r2
 8001bb6:	d119      	bne.n	8001bec <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bbe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <ADC_Enable+0xd0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001bcc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001bd0:	d01c      	beq.n	8001c0c <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd2:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <ADC_Enable+0xd4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <ADC_Enable+0xd8>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	3301      	adds	r3, #1
 8001be2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001bea:	e00c      	b.n	8001c06 <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	e030      	b.n	8001c62 <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 8001c00:	9b01      	ldr	r3, [sp, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c0c:	f7ff fa6c 	bl	80010e8 <HAL_GetTick>
 8001c10:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f012 0f01 	tst.w	r2, #1
 8001c1a:	d11f      	bne.n	8001c5c <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	f012 0f01 	tst.w	r2, #1
 8001c22:	d107      	bne.n	8001c34 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c2a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c34:	f7ff fa58 	bl	80010e8 <HAL_GetTick>
 8001c38:	1b43      	subs	r3, r0, r5
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d9e9      	bls.n	8001c12 <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f013 0f01 	tst.w	r3, #1
 8001c46:	d1e4      	bne.n	8001c12 <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8001c58:	2001      	movs	r0, #1
 8001c5a:	e002      	b.n	8001c62 <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e000      	b.n	8001c62 <ADC_Enable+0xc6>
 8001c60:	2000      	movs	r0, #0
}
 8001c62:	b003      	add	sp, #12
 8001c64:	bd30      	pop	{r4, r5, pc}
 8001c66:	bf00      	nop
 8001c68:	8000003f 	.word	0x8000003f
 8001c6c:	42028300 	.word	0x42028300
 8001c70:	20000010 	.word	0x20000010
 8001c74:	053e2d63 	.word	0x053e2d63

08001c78 <HAL_ADC_Start>:
{
 8001c78:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_ADC_Start+0xf4>)
 8001c7c:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f013 0f04 	tst.w	r3, #4
 8001c86:	d16c      	bne.n	8001d62 <HAL_ADC_Start+0xea>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8001c8e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d067      	beq.n	8001d66 <HAL_ADC_Start+0xee>
 8001c96:	2301      	movs	r3, #1
 8001c98:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8001c9c:	f7ff ff7e 	bl	8001b9c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d15a      	bne.n	8001d5a <HAL_ADC_Start+0xe2>
      ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ca6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb2:	65a3      	str	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_ADC_Start+0xf8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d032      	beq.n	8001d22 <HAL_ADC_Start+0xaa>
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d000      	beq.n	8001cc4 <HAL_ADC_Start+0x4c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cc2:	b91d      	cbnz	r5, 8001ccc <HAL_ADC_Start+0x54>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001cc6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001cca:	65a2      	str	r2, [r4, #88]	; 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ccc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001cce:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001cd2:	d029      	beq.n	8001d28 <HAL_ADC_Start+0xb0>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cd4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cd6:	f022 0206 	bic.w	r2, r2, #6
 8001cda:	65e2      	str	r2, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cdc:	221c      	movs	r2, #28
 8001cde:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <HAL_ADC_Start+0xf8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01f      	beq.n	8001d2e <HAL_ADC_Start+0xb6>
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d01f      	beq.n	8001d34 <HAL_ADC_Start+0xbc>
 8001cf4:	2d09      	cmp	r5, #9
 8001cf6:	d805      	bhi.n	8001d04 <HAL_ADC_Start+0x8c>
 8001cf8:	f240 2121 	movw	r1, #545	; 0x221
 8001cfc:	40e9      	lsrs	r1, r5
 8001cfe:	f011 0f01 	tst.w	r1, #1
 8001d02:	d117      	bne.n	8001d34 <HAL_ADC_Start+0xbc>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d0a:	65a3      	str	r3, [r4, #88]	; 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d0c:	68d3      	ldr	r3, [r2, #12]
 8001d0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d12:	d027      	beq.n	8001d64 <HAL_ADC_Start+0xec>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d20:	e020      	b.n	8001d64 <HAL_ADC_Start+0xec>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d22:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001d26:	e7ca      	b.n	8001cbe <HAL_ADC_Start+0x46>
        ADC_CLEAR_ERRORCODE(hadc);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	65e2      	str	r2, [r4, #92]	; 0x5c
 8001d2c:	e7d6      	b.n	8001cdc <HAL_ADC_Start+0x64>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d2e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001d32:	e7dd      	b.n	8001cf0 <HAL_ADC_Start+0x78>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d3a:	d005      	beq.n	8001d48 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d3c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001d3e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d46:	65a2      	str	r2, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d4e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001d52:	f042 0204 	orr.w	r2, r2, #4
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	e004      	b.n	8001d64 <HAL_ADC_Start+0xec>
      __HAL_UNLOCK(hadc);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8001d60:	e000      	b.n	8001d64 <HAL_ADC_Start+0xec>
    tmp_hal_status = HAL_BUSY;
 8001d62:	2002      	movs	r0, #2
}
 8001d64:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8001d66:	2002      	movs	r0, #2
 8001d68:	e7fc      	b.n	8001d64 <HAL_ADC_Start+0xec>
 8001d6a:	bf00      	nop
 8001d6c:	42028300 	.word	0x42028300
 8001d70:	42028100 	.word	0x42028100

08001d74 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001d74:	4770      	bx	lr

08001d76 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001d76:	4770      	bx	lr

08001d78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d78:	4770      	bx	lr

08001d7a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d80:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8001d84:	2a01      	cmp	r2, #1
 8001d86:	d07e      	beq.n	8001e86 <HAL_ADCEx_MultiModeConfigChannel+0x106>
{
 8001d88:	b410      	push	{r4}
 8001d8a:	b09b      	sub	sp, #108	; 0x6c
 8001d8c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001d94:	2200      	movs	r2, #0
 8001d96:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001d98:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001d9a:	6800      	ldr	r0, [r0, #0]
 8001d9c:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8001d9e:	4290      	cmp	r0, r2
 8001da0:	d038      	beq.n	8001e14 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001da2:	2200      	movs	r2, #0
 8001da4:	9200      	str	r2, [sp, #0]

  if (tmp_hadc_slave.Instance == NULL)
 8001da6:	9a00      	ldr	r2, [sp, #0]
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d037      	beq.n	8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dac:	6892      	ldr	r2, [r2, #8]
 8001dae:	f012 0204 	ands.w	r2, r2, #4
 8001db2:	d000      	beq.n	8001db6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001db4:	2201      	movs	r2, #1
 8001db6:	6880      	ldr	r0, [r0, #8]
 8001db8:	f010 0f04 	tst.w	r0, #4
 8001dbc:	d153      	bne.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d151      	bne.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001dc2:	680a      	ldr	r2, [r1, #0]
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	d032      	beq.n	8001e2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001dc8:	4c31      	ldr	r4, [pc, #196]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8001dca:	68a2      	ldr	r2, [r4, #8]
 8001dcc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dd0:	6848      	ldr	r0, [r1, #4]
 8001dd2:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8001dd6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8001dda:	4302      	orrs	r2, r0
 8001ddc:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dde:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8001de0:	6890      	ldr	r0, [r2, #8]
 8001de2:	f010 0001 	ands.w	r0, r0, #1
 8001de6:	d000      	beq.n	8001dea <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8001de8:	2001      	movs	r0, #1
 8001dea:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8001dec:	6892      	ldr	r2, [r2, #8]
 8001dee:	f012 0201 	ands.w	r2, r2, #1
 8001df2:	d000      	beq.n	8001df6 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8001df4:	2201      	movs	r2, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001df6:	4302      	orrs	r2, r0
 8001df8:	d141      	bne.n	8001e7e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001dfa:	4c25      	ldr	r4, [pc, #148]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8001dfc:	68a2      	ldr	r2, [r4, #8]
 8001dfe:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001e02:	f022 020f 	bic.w	r2, r2, #15
 8001e06:	6808      	ldr	r0, [r1, #0]
 8001e08:	6889      	ldr	r1, [r1, #8]
 8001e0a:	4301      	orrs	r1, r0
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e10:	2000      	movs	r0, #0
 8001e12:	e02d      	b.n	8001e70 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001e14:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001e18:	9200      	str	r2, [sp, #0]
 8001e1a:	e7c4      	b.n	8001da6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e1e:	f042 0220 	orr.w	r2, r2, #32
 8001e22:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	e023      	b.n	8001e76 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e2e:	4918      	ldr	r1, [pc, #96]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8001e30:	688a      	ldr	r2, [r1, #8]
 8001e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e36:	608a      	str	r2, [r1, #8]
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8001e3a:	6891      	ldr	r1, [r2, #8]
 8001e3c:	f011 0101 	ands.w	r1, r1, #1
 8001e40:	d000      	beq.n	8001e44 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8001e42:	2101      	movs	r1, #1
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8001e46:	6892      	ldr	r2, [r2, #8]
 8001e48:	f012 0201 	ands.w	r2, r2, #1
 8001e4c:	d000      	beq.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8001e4e:	2201      	movs	r2, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	d116      	bne.n	8001e82 <HAL_ADCEx_MultiModeConfigChannel+0x102>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8001e56:	688a      	ldr	r2, [r1, #8]
 8001e58:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001e5c:	f022 020f 	bic.w	r2, r2, #15
 8001e60:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e62:	2000      	movs	r0, #0
 8001e64:	e004      	b.n	8001e70 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e6e:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8001e76:	b01b      	add	sp, #108	; 0x6c
 8001e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e7c:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7e:	2000      	movs	r0, #0
 8001e80:	e7f6      	b.n	8001e70 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 8001e82:	2000      	movs	r0, #0
 8001e84:	e7f4      	b.n	8001e70 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  __HAL_LOCK(hadc);
 8001e86:	2002      	movs	r0, #2
}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	42028000 	.word	0x42028000
 8001e90:	42028300 	.word	0x42028300
 8001e94:	42028100 	.word	0x42028100

08001e98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e9a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	0200      	lsls	r0, r0, #8
 8001ea6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eaa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001eb4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_NVIC_SetPriority+0x68>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec6:	f1c3 0c07 	rsb	ip, r3, #7
 8001eca:	f1bc 0f03 	cmp.w	ip, #3
 8001ece:	bf28      	it	cs
 8001ed0:	f04f 0c03 	movcs.w	ip, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed4:	f103 0e03 	add.w	lr, r3, #3
 8001ed8:	f1be 0f06 	cmp.w	lr, #6
 8001edc:	d918      	bls.n	8001f10 <HAL_NVIC_SetPriority+0x54>
 8001ede:	3b04      	subs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 3eff 	mov.w	lr, #4294967295
 8001ee4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001ee8:	ea21 010c 	bic.w	r1, r1, ip
 8001eec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eee:	fa0e fe03 	lsl.w	lr, lr, r3
 8001ef2:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef6:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	db0b      	blt.n	8001f14 <HAL_NVIC_SetPriority+0x58>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	0152      	lsls	r2, r2, #5
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f04:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f08:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f0c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f10:	2300      	movs	r3, #0
 8001f12:	e7e5      	b.n	8001ee0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	f000 000f 	and.w	r0, r0, #15
 8001f18:	0152      	lsls	r2, r2, #5
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	4b02      	ldr	r3, [pc, #8]	; (8001f28 <HAL_NVIC_SetPriority+0x6c>)
 8001f1e:	541a      	strb	r2, [r3, r0]
 8001f20:	e7f4      	b.n	8001f0c <HAL_NVIC_SetPriority+0x50>
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00
 8001f28:	e000ed14 	.word	0xe000ed14

08001f2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	db07      	blt.n	8001f40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f30:	f000 021f 	and.w	r2, r0, #31
 8001f34:	0940      	lsrs	r0, r0, #5
 8001f36:	2301      	movs	r3, #1
 8001f38:	4093      	lsls	r3, r2
 8001f3a:	4a02      	ldr	r2, [pc, #8]	; (8001f44 <HAL_NVIC_EnableIRQ+0x18>)
 8001f3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	3801      	subs	r0, #1
 8001f4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f4e:	d20b      	bcs.n	8001f68 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f54:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <HAL_SYSTICK_Config+0x24>)
 8001f58:	21e0      	movs	r1, #224	; 0xe0
 8001f5a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5e:	2000      	movs	r0, #0
 8001f60:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	2207      	movs	r2, #7
 8001f64:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f66:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f68:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0U;
 8001f72:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f74:	e065      	b.n	8002042 <HAL_GPIO_Init+0xd2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f76:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f78:	005e      	lsls	r6, r3, #1
 8001f7a:	2403      	movs	r4, #3
 8001f7c:	40b4      	lsls	r4, r6
 8001f7e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f82:	68cc      	ldr	r4, [r1, #12]
 8001f84:	40b4      	lsls	r4, r6
 8001f86:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f88:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f8c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f90:	684c      	ldr	r4, [r1, #4]
 8001f92:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001f96:	409c      	lsls	r4, r3
 8001f98:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001f9a:	6044      	str	r4, [r0, #4]
 8001f9c:	e062      	b.n	8002064 <HAL_GPIO_Init+0xf4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9e:	08dd      	lsrs	r5, r3, #3
 8001fa0:	3508      	adds	r5, #8
 8001fa2:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001fa6:	f003 0c07 	and.w	ip, r3, #7
 8001faa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001fae:	f04f 0e0f 	mov.w	lr, #15
 8001fb2:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001fb6:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fba:	690c      	ldr	r4, [r1, #16]
 8001fbc:	fa04 f40c 	lsl.w	r4, r4, ip
 8001fc0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001fc4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001fc8:	e063      	b.n	8002092 <HAL_GPIO_Init+0x122>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001fca:	2406      	movs	r4, #6
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x60>
 8001fce:	2400      	movs	r4, #0
 8001fd0:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fd4:	432c      	orrs	r4, r5
        EXTI->EXTICR[position >> 2U] = temp;
 8001fd6:	4d56      	ldr	r5, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x1c0>)
 8001fd8:	f10c 0c18 	add.w	ip, ip, #24
 8001fdc:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe0:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001fe2:	43d4      	mvns	r4, r2
 8001fe4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe8:	684f      	ldr	r7, [r1, #4]
 8001fea:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001fee:	d001      	beq.n	8001ff4 <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 8001ff0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001ff4:	4d4e      	ldr	r5, [pc, #312]	; (8002130 <HAL_GPIO_Init+0x1c0>)
 8001ff6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001ff8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001ffa:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ffe:	684f      	ldr	r7, [r1, #4]
 8002000:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002004:	d001      	beq.n	800200a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8002006:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800200a:	4d49      	ldr	r5, [pc, #292]	; (8002130 <HAL_GPIO_Init+0x1c0>)
 800200c:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800200e:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8002012:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002016:	684f      	ldr	r7, [r1, #4]
 8002018:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800201c:	d001      	beq.n	8002022 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800201e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002022:	4d43      	ldr	r5, [pc, #268]	; (8002130 <HAL_GPIO_Init+0x1c0>)
 8002024:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        temp = EXTI->IMR1;
 8002028:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 800202c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202e:	684e      	ldr	r6, [r1, #4]
 8002030:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002034:	d001      	beq.n	800203a <HAL_GPIO_Init+0xca>
        {
          temp |= iocurrent;
 8002036:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <HAL_GPIO_Init+0x1c0>)
 800203c:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8002040:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002042:	680a      	ldr	r2, [r1, #0]
 8002044:	fa32 f403 	lsrs.w	r4, r2, r3
 8002048:	d071      	beq.n	800212e <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800204a:	f04f 0c01 	mov.w	ip, #1
 800204e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0U)
 8002052:	ea1c 0202 	ands.w	r2, ip, r2
 8002056:	d0f3      	beq.n	8002040 <HAL_GPIO_Init+0xd0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002058:	684c      	ldr	r4, [r1, #4]
 800205a:	f004 0403 	and.w	r4, r4, #3
 800205e:	3c01      	subs	r4, #1
 8002060:	2c01      	cmp	r4, #1
 8002062:	d988      	bls.n	8001f76 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	684c      	ldr	r4, [r1, #4]
 8002066:	f004 0403 	and.w	r4, r4, #3
 800206a:	2c03      	cmp	r4, #3
 800206c:	d00c      	beq.n	8002088 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 800206e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002070:	005d      	lsls	r5, r3, #1
 8002072:	f04f 0c03 	mov.w	ip, #3
 8002076:	fa0c fc05 	lsl.w	ip, ip, r5
 800207a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207e:	688c      	ldr	r4, [r1, #8]
 8002080:	40ac      	lsls	r4, r5
 8002082:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002086:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002088:	684c      	ldr	r4, [r1, #4]
 800208a:	f004 0403 	and.w	r4, r4, #3
 800208e:	2c02      	cmp	r4, #2
 8002090:	d085      	beq.n	8001f9e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8002092:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002094:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002098:	f04f 0c03 	mov.w	ip, #3
 800209c:	fa0c fc0e 	lsl.w	ip, ip, lr
 80020a0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	684c      	ldr	r4, [r1, #4]
 80020a6:	f004 0403 	and.w	r4, r4, #3
 80020aa:	fa04 f40e 	lsl.w	r4, r4, lr
 80020ae:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80020b2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b4:	684c      	ldr	r4, [r1, #4]
 80020b6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80020ba:	d0c1      	beq.n	8002040 <HAL_GPIO_Init+0xd0>
        temp = EXTI->EXTICR[position >> 2U];
 80020bc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80020c0:	f10c 0518 	add.w	r5, ip, #24
 80020c4:	4c1a      	ldr	r4, [pc, #104]	; (8002130 <HAL_GPIO_Init+0x1c0>)
 80020c6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80020ca:	f003 0e03 	and.w	lr, r3, #3
 80020ce:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80020d2:	240f      	movs	r4, #15
 80020d4:	fa04 f40e 	lsl.w	r4, r4, lr
 80020d8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80020dc:	4c15      	ldr	r4, [pc, #84]	; (8002134 <HAL_GPIO_Init+0x1c4>)
 80020de:	42a0      	cmp	r0, r4
 80020e0:	f43f af75 	beq.w	8001fce <HAL_GPIO_Init+0x5e>
 80020e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020e8:	42a0      	cmp	r0, r4
 80020ea:	d016      	beq.n	800211a <HAL_GPIO_Init+0x1aa>
 80020ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020f0:	42a0      	cmp	r0, r4
 80020f2:	d014      	beq.n	800211e <HAL_GPIO_Init+0x1ae>
 80020f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020f8:	42a0      	cmp	r0, r4
 80020fa:	d012      	beq.n	8002122 <HAL_GPIO_Init+0x1b2>
 80020fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002100:	42a0      	cmp	r0, r4
 8002102:	d010      	beq.n	8002126 <HAL_GPIO_Init+0x1b6>
 8002104:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002108:	42a0      	cmp	r0, r4
 800210a:	d00e      	beq.n	800212a <HAL_GPIO_Init+0x1ba>
 800210c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002110:	42a0      	cmp	r0, r4
 8002112:	f43f af5a 	beq.w	8001fca <HAL_GPIO_Init+0x5a>
 8002116:	2407      	movs	r4, #7
 8002118:	e75a      	b.n	8001fd0 <HAL_GPIO_Init+0x60>
 800211a:	2401      	movs	r4, #1
 800211c:	e758      	b.n	8001fd0 <HAL_GPIO_Init+0x60>
 800211e:	2402      	movs	r4, #2
 8002120:	e756      	b.n	8001fd0 <HAL_GPIO_Init+0x60>
 8002122:	2403      	movs	r4, #3
 8002124:	e754      	b.n	8001fd0 <HAL_GPIO_Init+0x60>
 8002126:	2404      	movs	r4, #4
 8002128:	e752      	b.n	8001fd0 <HAL_GPIO_Init+0x60>
 800212a:	2405      	movs	r4, #5
 800212c:	e750      	b.n	8001fd0 <HAL_GPIO_Init+0x60>
  }
}
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002130:	4002f400 	.word	0x4002f400
 8002134:	42020000 	.word	0x42020000

08002138 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002138:	6903      	ldr	r3, [r0, #16]
 800213a:	4219      	tst	r1, r3
 800213c:	d001      	beq.n	8002142 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800213e:	2001      	movs	r0, #1
 8002140:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002142:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002144:	4770      	bx	lr

08002146 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002146:	b10a      	cbz	r2, 800214c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002148:	6181      	str	r1, [r0, #24]
 800214a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800214e:	4770      	bx	lr

08002150 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002150:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002152:	ea01 0203 	and.w	r2, r1, r3
 8002156:	ea21 0103 	bic.w	r1, r1, r3
 800215a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800215e:	6181      	str	r1, [r0, #24]
}
 8002160:	4770      	bx	lr

08002162 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002162:	6803      	ldr	r3, [r0, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	f012 0f02 	tst.w	r2, #2
 800216a:	d001      	beq.n	8002170 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800216c:	2200      	movs	r2, #0
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002170:	6803      	ldr	r3, [r0, #0]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	f012 0f01 	tst.w	r2, #1
 8002178:	d103      	bne.n	8002182 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	619a      	str	r2, [r3, #24]
  }
}
 8002182:	4770      	bx	lr

08002184 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002184:	b410      	push	{r4}
 8002186:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002188:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800218c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002190:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002192:	4321      	orrs	r1, r4
 8002194:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	6853      	ldr	r3, [r2, #4]
 800219c:	0d64      	lsrs	r4, r4, #21
 800219e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80021a2:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80021a6:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80021aa:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80021ae:	f044 0403 	orr.w	r4, r4, #3
 80021b2:	ea23 0304 	bic.w	r3, r3, r4
 80021b6:	430b      	orrs	r3, r1
 80021b8:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <I2C_IsErrorOccurred>:
{
 80021c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80021c6:	6803      	ldr	r3, [r0, #0]
 80021c8:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021ca:	f016 0610 	ands.w	r6, r6, #16
 80021ce:	d07c      	beq.n	80022ca <I2C_IsErrorOccurred+0x10a>
 80021d0:	460d      	mov	r5, r1
 80021d2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d4:	2210      	movs	r2, #16
 80021d6:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 80021d8:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	6998      	ldr	r0, [r3, #24]
 80021e0:	f010 0f20 	tst.w	r0, #32
 80021e4:	d130      	bne.n	8002248 <I2C_IsErrorOccurred+0x88>
 80021e6:	bb7f      	cbnz	r7, 8002248 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 80021e8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021ec:	d0f6      	beq.n	80021dc <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7fe ff7b 	bl	80010e8 <HAL_GetTick>
 80021f2:	eba0 0008 	sub.w	r0, r0, r8
 80021f6:	42a8      	cmp	r0, r5
 80021f8:	d801      	bhi.n	80021fe <I2C_IsErrorOccurred+0x3e>
 80021fa:	2d00      	cmp	r5, #0
 80021fc:	d1ee      	bne.n	80021dc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021fe:	6821      	ldr	r1, [r4, #0]
 8002200:	684b      	ldr	r3, [r1, #4]
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8002206:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800220a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800220c:	6988      	ldr	r0, [r1, #24]
 800220e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002212:	d002      	beq.n	800221a <I2C_IsErrorOccurred+0x5a>
 8002214:	b90b      	cbnz	r3, 800221a <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8002216:	2a20      	cmp	r2, #32
 8002218:	d10e      	bne.n	8002238 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f013 0f20 	tst.w	r3, #32
 8002222:	d1db      	bne.n	80021dc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002224:	f7fe ff60 	bl	80010e8 <HAL_GetTick>
 8002228:	eba0 0008 	sub.w	r0, r0, r8
 800222c:	2819      	cmp	r0, #25
 800222e:	d9f4      	bls.n	800221a <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002230:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8002234:	2701      	movs	r7, #1
              break;
 8002236:	e7d1      	b.n	80021dc <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002238:	684b      	ldr	r3, [r1, #4]
 800223a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8002240:	f7fe ff52 	bl	80010e8 <HAL_GetTick>
 8002244:	4680      	mov	r8, r0
 8002246:	e7e8      	b.n	800221a <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8002248:	b90f      	cbnz	r7, 800224e <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224a:	2220      	movs	r2, #32
 800224c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800224e:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8002252:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002258:	f413 7f80 	tst.w	r3, #256	; 0x100
 800225c:	d005      	beq.n	800226a <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800225e:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002266:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002268:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800226a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800226e:	d006      	beq.n	800227e <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8002270:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002274:	6822      	ldr	r2, [r4, #0]
 8002276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800227c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800227e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002282:	d024      	beq.n	80022ce <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002284:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228e:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8002290:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff ff65 	bl	8002162 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	6853      	ldr	r3, [r2, #4]
 800229c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80022a0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80022a4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80022ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022b0:	4333      	orrs	r3, r6
 80022b2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	2320      	movs	r3, #32
 80022b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80022c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80022c4:	4628      	mov	r0, r5
 80022c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80022ca:	2500      	movs	r5, #0
 80022cc:	e7c2      	b.n	8002254 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	d0f8      	beq.n	80022c4 <I2C_IsErrorOccurred+0x104>
 80022d2:	e7de      	b.n	8002292 <I2C_IsErrorOccurred+0xd2>

080022d4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	4604      	mov	r4, r0
 80022d8:	460d      	mov	r5, r1
 80022da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f013 0f02 	tst.w	r3, #2
 80022e4:	d122      	bne.n	800232c <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e6:	4632      	mov	r2, r6
 80022e8:	4629      	mov	r1, r5
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff ff68 	bl	80021c0 <I2C_IsErrorOccurred>
 80022f0:	b9f0      	cbnz	r0, 8002330 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80022f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022f6:	d0f1      	beq.n	80022dc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f8:	f7fe fef6 	bl	80010e8 <HAL_GetTick>
 80022fc:	1b80      	subs	r0, r0, r6
 80022fe:	42a8      	cmp	r0, r5
 8002300:	d801      	bhi.n	8002306 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002302:	2d00      	cmp	r5, #0
 8002304:	d1ea      	bne.n	80022dc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f013 0f02 	tst.w	r3, #2
 800230e:	d1e5      	bne.n	80022dc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002312:	f043 0320 	orr.w	r3, r3, #32
 8002316:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002318:	2320      	movs	r3, #32
 800231a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800231e:	2300      	movs	r3, #0
 8002320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002324:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002328:	2001      	movs	r0, #1
 800232a:	e000      	b.n	800232e <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 800232c:	2000      	movs	r0, #0
}
 800232e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002330:	2001      	movs	r0, #1
 8002332:	e7fc      	b.n	800232e <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08002334 <I2C_WaitOnFlagUntilTimeout>:
{
 8002334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002338:	4605      	mov	r5, r0
 800233a:	460f      	mov	r7, r1
 800233c:	4616      	mov	r6, r2
 800233e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002340:	682c      	ldr	r4, [r5, #0]
 8002342:	69a4      	ldr	r4, [r4, #24]
 8002344:	ea37 0404 	bics.w	r4, r7, r4
 8002348:	bf0c      	ite	eq
 800234a:	2401      	moveq	r4, #1
 800234c:	2400      	movne	r4, #0
 800234e:	42b4      	cmp	r4, r6
 8002350:	d122      	bne.n	8002398 <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002352:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002356:	d0f3      	beq.n	8002340 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002358:	f7fe fec6 	bl	80010e8 <HAL_GetTick>
 800235c:	9b06      	ldr	r3, [sp, #24]
 800235e:	1ac0      	subs	r0, r0, r3
 8002360:	4540      	cmp	r0, r8
 8002362:	d802      	bhi.n	800236a <I2C_WaitOnFlagUntilTimeout+0x36>
 8002364:	f1b8 0f00 	cmp.w	r8, #0
 8002368:	d1ea      	bne.n	8002340 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800236a:	682b      	ldr	r3, [r5, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	ea37 0303 	bics.w	r3, r7, r3
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	42b3      	cmp	r3, r6
 800237a:	d1e1      	bne.n	8002340 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800237e:	f043 0320 	orr.w	r3, r3, #32
 8002382:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002384:	2320      	movs	r3, #32
 8002386:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800238a:	2300      	movs	r3, #0
 800238c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002390:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
 8002396:	e000      	b.n	800239a <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8002398:	2000      	movs	r0, #0
}
 800239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800239e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800239e:	b570      	push	{r4, r5, r6, lr}
 80023a0:	4604      	mov	r4, r0
 80023a2:	460d      	mov	r5, r1
 80023a4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a6:	e004      	b.n	80023b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f013 0f20 	tst.w	r3, #32
 80023b0:	d012      	beq.n	80023d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f013 0f20 	tst.w	r3, #32
 80023ba:	d11b      	bne.n	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023bc:	4632      	mov	r2, r6
 80023be:	4629      	mov	r1, r5
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff fefd 	bl	80021c0 <I2C_IsErrorOccurred>
 80023c6:	b9b8      	cbnz	r0, 80023f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c8:	f7fe fe8e 	bl	80010e8 <HAL_GetTick>
 80023cc:	1b80      	subs	r0, r0, r6
 80023ce:	42a8      	cmp	r0, r5
 80023d0:	d8ea      	bhi.n	80023a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80023d2:	2d00      	cmp	r5, #0
 80023d4:	d1ed      	bne.n	80023b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 80023d6:	e7e7      	b.n	80023a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023da:	f043 0320 	orr.w	r3, r3, #32
 80023de:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	2320      	movs	r3, #32
 80023e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80023ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80023f0:	2001      	movs	r0, #1
 80023f2:	e000      	b.n	80023f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 80023f4:	2000      	movs	r0, #0
}
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
 80023fa:	e7fc      	b.n	80023f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

080023fc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d059      	beq.n	80024b4 <HAL_I2C_Init+0xb8>
{
 8002400:	b510      	push	{r4, lr}
 8002402:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002404:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002408:	2b00      	cmp	r3, #0
 800240a:	d043      	beq.n	8002494 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800240c:	2324      	movs	r3, #36	; 0x24
 800240e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	6813      	ldr	r3, [r2, #0]
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800241c:	6863      	ldr	r3, [r4, #4]
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002424:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	6893      	ldr	r3, [r2, #8]
 800242a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800242e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002430:	68e3      	ldr	r3, [r4, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d033      	beq.n	800249e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002436:	68a3      	ldr	r3, [r4, #8]
 8002438:	6822      	ldr	r2, [r4, #0]
 800243a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800243e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002440:	68e3      	ldr	r3, [r4, #12]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d031      	beq.n	80024aa <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002446:	6822      	ldr	r2, [r4, #0]
 8002448:	6853      	ldr	r3, [r2, #4]
 800244a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	68d3      	ldr	r3, [r2, #12]
 8002458:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800245c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800245e:	6923      	ldr	r3, [r4, #16]
 8002460:	6962      	ldr	r2, [r4, #20]
 8002462:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002464:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002466:	6822      	ldr	r2, [r4, #0]
 8002468:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800246c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800246e:	69e3      	ldr	r3, [r4, #28]
 8002470:	6a21      	ldr	r1, [r4, #32]
 8002472:	6822      	ldr	r2, [r4, #0]
 8002474:	430b      	orrs	r3, r1
 8002476:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002482:	2000      	movs	r0, #0
 8002484:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	2320      	movs	r3, #32
 8002488:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800248c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002492:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002494:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002498:	f7fe fc40 	bl	8000d1c <HAL_I2C_MspInit>
 800249c:	e7b6      	b.n	800240c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800249e:	68a3      	ldr	r3, [r4, #8]
 80024a0:	6822      	ldr	r2, [r4, #0]
 80024a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a6:	6093      	str	r3, [r2, #8]
 80024a8:	e7ca      	b.n	8002440 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e7c8      	b.n	8002446 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80024b4:	2001      	movs	r0, #1
}
 80024b6:	4770      	bx	lr

080024b8 <HAL_I2C_Master_Transmit>:
{
 80024b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	460f      	mov	r7, r1
 80024c0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80024c6:	b2c9      	uxtb	r1, r1
 80024c8:	2920      	cmp	r1, #32
 80024ca:	f040 80a3 	bne.w	8002614 <HAL_I2C_Master_Transmit+0x15c>
 80024ce:	4604      	mov	r4, r0
 80024d0:	4690      	mov	r8, r2
 80024d2:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80024d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80024d8:	2b01      	cmp	r3, #1
 80024da:	f000 809f 	beq.w	800261c <HAL_I2C_Master_Transmit+0x164>
 80024de:	f04f 0a01 	mov.w	sl, #1
 80024e2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80024e6:	f7fe fdff 	bl	80010e8 <HAL_GetTick>
 80024ea:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024ec:	9000      	str	r0, [sp, #0]
 80024ee:	2319      	movs	r3, #25
 80024f0:	4652      	mov	r2, sl
 80024f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f6:	4620      	mov	r0, r4
 80024f8:	f7ff ff1c 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	2800      	cmp	r0, #0
 80024fe:	f040 808f 	bne.w	8002620 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002502:	2321      	movs	r3, #33	; 0x21
 8002504:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002508:	2310      	movs	r3, #16
 800250a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250e:	2300      	movs	r3, #0
 8002510:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002512:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002516:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800251a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800251c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	2bff      	cmp	r3, #255	; 0xff
 8002522:	d90a      	bls.n	800253a <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002524:	22ff      	movs	r2, #255	; 0xff
 8002526:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002528:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_I2C_Master_Transmit+0x178>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002530:	4639      	mov	r1, r7
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff fe26 	bl	8002184 <I2C_TransferConfig>
 8002538:	e018      	b.n	800256c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800253a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800253c:	b292      	uxth	r2, r2
 800253e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_I2C_Master_Transmit+0x178>)
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	4639      	mov	r1, r7
 800254c:	4620      	mov	r0, r4
 800254e:	f7ff fe19 	bl	8002184 <I2C_TransferConfig>
 8002552:	e00b      	b.n	800256c <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002554:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002556:	b292      	uxth	r2, r2
 8002558:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800255a:	2300      	movs	r3, #0
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4639      	mov	r1, r7
 8002566:	4620      	mov	r0, r4
 8002568:	f7ff fe0c 	bl	8002184 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800256c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d033      	beq.n	80025dc <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	462a      	mov	r2, r5
 8002576:	4631      	mov	r1, r6
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff feab 	bl	80022d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800257e:	2800      	cmp	r0, #0
 8002580:	d150      	bne.n	8002624 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002582:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800258a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800258c:	3301      	adds	r3, #1
 800258e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002590:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29b      	uxth	r3, r3
 8002598:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800259a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29b      	uxth	r3, r3
 80025a0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025a4:	b292      	uxth	r2, r2
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d0e0      	beq.n	800256c <HAL_I2C_Master_Transmit+0xb4>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1de      	bne.n	800256c <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ae:	9500      	str	r5, [sp, #0]
 80025b0:	4633      	mov	r3, r6
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7ff febc 	bl	8002334 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	bba0      	cbnz	r0, 8002628 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2bff      	cmp	r3, #255	; 0xff
 80025c4:	d9c6      	bls.n	8002554 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c6:	22ff      	movs	r2, #255	; 0xff
 80025c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d2:	4639      	mov	r1, r7
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff fdd5 	bl	8002184 <I2C_TransferConfig>
 80025da:	e7c7      	b.n	800256c <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025dc:	462a      	mov	r2, r5
 80025de:	4631      	mov	r1, r6
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff fedc 	bl	800239e <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e6:	bb08      	cbnz	r0, 800262c <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	2220      	movs	r2, #32
 80025ec:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80025ee:	6821      	ldr	r1, [r4, #0]
 80025f0:	684b      	ldr	r3, [r1, #4]
 80025f2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80025f6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80025fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002604:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002608:	2300      	movs	r3, #0
 800260a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800260e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002612:	e000      	b.n	8002616 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8002614:	2002      	movs	r0, #2
}
 8002616:	b002      	add	sp, #8
 8002618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800261c:	2002      	movs	r0, #2
 800261e:	e7fa      	b.n	8002616 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
 8002622:	e7f8      	b.n	8002616 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
 8002626:	e7f6      	b.n	8002616 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8002628:	2001      	movs	r0, #1
 800262a:	e7f4      	b.n	8002616 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
 800262e:	e7f2      	b.n	8002616 <HAL_I2C_Master_Transmit+0x15e>
 8002630:	80002000 	.word	0x80002000

08002634 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002634:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	2a20      	cmp	r2, #32
 800263e:	d123      	bne.n	8002688 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002640:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002644:	2a01      	cmp	r2, #1
 8002646:	d021      	beq.n	800268c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002648:	2201      	movs	r2, #1
 800264a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002654:	6800      	ldr	r0, [r0, #0]
 8002656:	6802      	ldr	r2, [r0, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	6802      	ldr	r2, [r0, #0]
 8002662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002666:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	6802      	ldr	r2, [r0, #0]
 800266c:	4311      	orrs	r1, r2
 800266e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	680a      	ldr	r2, [r1, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002680:	2000      	movs	r0, #0
 8002682:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002686:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002688:	2002      	movs	r0, #2
 800268a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800268c:	2002      	movs	r0, #2
  }
}
 800268e:	4770      	bx	lr

08002690 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002690:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002692:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	2a20      	cmp	r2, #32
 800269a:	d121      	bne.n	80026e0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80026a0:	2a01      	cmp	r2, #1
 80026a2:	d01f      	beq.n	80026e4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80026a4:	2201      	movs	r2, #1
 80026a6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b0:	6800      	ldr	r0, [r0, #0]
 80026b2:	6802      	ldr	r2, [r0, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026be:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026c6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	680a      	ldr	r2, [r1, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d8:	2000      	movs	r0, #0
 80026da:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80026de:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2002      	movs	r0, #2
 80026e2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80026e4:	2002      	movs	r0, #2
  }
}
 80026e6:	4770      	bx	lr

080026e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <HAL_PWREx_GetVoltageRange+0xc>)
 80026ea:	6818      	ldr	r0, [r3, #0]
}
 80026ec:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_PWREx_SMPS_GetEffectiveMode>:
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <HAL_PWREx_SMPS_GetEffectiveMode+0x20>)
 80026fa:	691b      	ldr	r3, [r3, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80026fc:	f413 5080 	ands.w	r0, r3, #4096	; 0x1000
 8002700:	d106      	bne.n	8002710 <HAL_PWREx_SMPS_GetEffectiveMode+0x18>
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002702:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002706:	d000      	beq.n	800270a <HAL_PWREx_SMPS_GetEffectiveMode+0x12>
  {
    mode = PWR_SMPS_HIGH_POWER;
  }

  return mode;
}
 8002708:	4770      	bx	lr
    mode = PWR_SMPS_LOW_POWER;
 800270a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800270e:	4770      	bx	lr
    mode = PWR_SMPS_BYPASS;
 8002710:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  return mode;
 8002714:	e7f8      	b.n	8002708 <HAL_PWREx_SMPS_GetEffectiveMode+0x10>
 8002716:	bf00      	nop
 8002718:	40007000 	.word	0x40007000

0800271c <HAL_PWREx_ControlVoltageScaling>:
{
 800271c:	b538      	push	{r3, r4, r5, lr}
 800271e:	4605      	mov	r5, r0
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002722:	681c      	ldr	r4, [r3, #0]
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002724:	f7ff ffe8 	bl	80026f8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002728:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800272c:	d02d      	beq.n	800278a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800272e:	f404 64c0 	and.w	r4, r4, #1536	; 0x600
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800273a:	d128      	bne.n	800278e <HAL_PWREx_ControlVoltageScaling+0x72>
  if (vos_old == VoltageScaling)
 800273c:	42ac      	cmp	r4, r5
 800273e:	d028      	beq.n	8002792 <HAL_PWREx_ControlVoltageScaling+0x76>
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002740:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002748:	432b      	orrs	r3, r5
 800274a:	6013      	str	r3, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	09db      	lsrs	r3, r3, #7
 800275a:	2232      	movs	r2, #50	; 0x32
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	08db      	lsrs	r3, r3, #3
 8002768:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800276a:	e000      	b.n	800276e <HAL_PWREx_ControlVoltageScaling+0x52>
    wait_loop_index--;
 800276c:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002770:	6952      	ldr	r2, [r2, #20]
 8002772:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002776:	d001      	beq.n	800277c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f7      	bne.n	800276c <HAL_PWREx_ControlVoltageScaling+0x50>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_PWREx_ControlVoltageScaling+0x80>)
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002784:	d107      	bne.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8002786:	2000      	movs	r0, #0
}
 8002788:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e7fc      	b.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_ERROR;
 800278e:	2001      	movs	r0, #1
 8002790:	e7fa      	b.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_OK;
 8002792:	2000      	movs	r0, #0
 8002794:	e7f8      	b.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_TIMEOUT;
 8002796:	2003      	movs	r0, #3
 8002798:	e7f6      	b.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x6c>
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000
 80027a0:	20000010 	.word	0x20000010
 80027a4:	0a7c5ac5 	.word	0x0a7c5ac5
 80027a8:	cccccccd 	.word	0xcccccccd

080027ac <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ac:	4a1f      	ldr	r2, [pc, #124]	; (800282c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ae:	68d3      	ldr	r3, [r2, #12]
 80027b0:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80027ba:	3201      	adds	r2, #1

  switch (pllsource)
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d00d      	beq.n	80027dc <RCC_GetSysClockFreqFromPLLSource+0x30>
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d015      	beq.n	80027f0 <RCC_GetSysClockFreqFromPLLSource+0x44>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d01d      	beq.n	8002804 <RCC_GetSysClockFreqFromPLLSource+0x58>
 80027c8:	2000      	movs	r0, #0
      /* unexpected */
      pllvco = 0;
      break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 80027d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80027da:	4770      	bx	lr
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027dc:	4814      	ldr	r0, [pc, #80]	; (8002830 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027de:	fbb0 f0f2 	udiv	r0, r0, r2
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80027ea:	fb03 f000 	mul.w	r0, r3, r0
      break;
 80027ee:	e7ec      	b.n	80027ca <RCC_GetSysClockFreqFromPLLSource+0x1e>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027f0:	480f      	ldr	r0, [pc, #60]	; (8002830 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027f2:	fbb0 f0f2 	udiv	r0, r0, r2
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80027fe:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8002802:	e7e2      	b.n	80027ca <RCC_GetSysClockFreqFromPLLSource+0x1e>
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f013 0f08 	tst.w	r3, #8
 800280c:	d108      	bne.n	8002820 <RCC_GetSysClockFreqFromPLLSource+0x74>
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002814:	f3c3 2303 	ubfx	r3, r3, #8, #4
        pllvco = MSIRangeTable[msirange];
 8002818:	4a06      	ldr	r2, [pc, #24]	; (8002834 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800281a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 800281e:	e7d4      	b.n	80027ca <RCC_GetSysClockFreqFromPLLSource+0x1e>
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002820:	4b02      	ldr	r3, [pc, #8]	; (800282c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002828:	e7f6      	b.n	8002818 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	00f42400 	.word	0x00f42400
 8002834:	08004778 	.word	0x08004778

08002838 <RCC_SetFlashLatencyFromMSIRange>:
{
 8002838:	b530      	push	{r4, r5, lr}
 800283a:	b083      	sub	sp, #12
 800283c:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002846:	d00c      	beq.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x2a>
    vos = HAL_PWREx_GetVoltageRange();
 8002848:	f7ff ff4e 	bl	80026e8 <HAL_PWREx_GetVoltageRange>
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800284c:	b1d0      	cbz	r0, 8002884 <RCC_SetFlashLatencyFromMSIRange+0x4c>
 800284e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002852:	d017      	beq.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x4c>
    if (msirange > RCC_MSIRANGE_8)
 8002854:	2c80      	cmp	r4, #128	; 0x80
 8002856:	d82c      	bhi.n	80028b2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      if (msirange == RCC_MSIRANGE_8)
 8002858:	d02d      	beq.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      else if (msirange == RCC_MSIRANGE_7)
 800285a:	2c70      	cmp	r4, #112	; 0x70
 800285c:	d02d      	beq.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0x82>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800285e:	2100      	movs	r1, #0
 8002860:	e017      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4d18      	ldr	r5, [pc, #96]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002864:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	65ab      	str	r3, [r5, #88]	; 0x58
 800286c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002876:	f7ff ff37 	bl	80026e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002880:	65ab      	str	r3, [r5, #88]	; 0x58
 8002882:	e7e3      	b.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if (msirange > RCC_MSIRANGE_8)
 8002884:	2c80      	cmp	r4, #128	; 0x80
 8002886:	d903      	bls.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x58>
      if (msirange > RCC_MSIRANGE_10)
 8002888:	2ca0      	cmp	r4, #160	; 0xa0
 800288a:	d910      	bls.n	80028ae <RCC_SetFlashLatencyFromMSIRange+0x76>
        latency = FLASH_LATENCY_2; /* 2WS */
 800288c:	2102      	movs	r1, #2
 800288e:	e000      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x5a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002890:	2100      	movs	r1, #0
  __HAL_FLASH_SET_LATENCY(latency);
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0x90>)
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	f023 030f 	bic.w	r3, r3, #15
 800289a:	430b      	orrs	r3, r1
 800289c:	6013      	str	r3, [r2, #0]
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800289e:	6813      	ldr	r3, [r2, #0]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	428b      	cmp	r3, r1
 80028a6:	d10a      	bne.n	80028be <RCC_SetFlashLatencyFromMSIRange+0x86>
  return HAL_OK;
 80028a8:	2000      	movs	r0, #0
}
 80028aa:	b003      	add	sp, #12
 80028ac:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 80028ae:	2101      	movs	r1, #1
 80028b0:	e7ef      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x5a>
      latency = FLASH_LATENCY_3; /* 3WS */
 80028b2:	2103      	movs	r1, #3
 80028b4:	e7ed      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80028b6:	2102      	movs	r1, #2
 80028b8:	e7eb      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80028ba:	2101      	movs	r1, #1
 80028bc:	e7e9      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    return HAL_ERROR;
 80028be:	2001      	movs	r0, #1
 80028c0:	e7f3      	b.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x72>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40022000 	.word	0x40022000

080028cc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028cc:	4a31      	ldr	r2, [pc, #196]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028ce:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d0:	68d2      	ldr	r2, [r2, #12]
 80028d2:	f002 0203 	and.w	r2, r2, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028d6:	f013 030c 	ands.w	r3, r3, #12
 80028da:	d00a      	beq.n	80028f2 <HAL_RCC_GetSysClockFreq+0x26>
 80028dc:	2b0c      	cmp	r3, #12
 80028de:	d006      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x22>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d01f      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x58>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d020      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028e8:	2000      	movs	r0, #0
 80028ea:	4601      	mov	r1, r0
 80028ec:	e010      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x44>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ee:	2a01      	cmp	r2, #1
 80028f0:	d1f6      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0x14>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028f2:	4a28      	ldr	r2, [pc, #160]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	f012 0f08 	tst.w	r2, #8
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028fc:	4a25      	ldr	r2, [pc, #148]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028fe:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8002902:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002906:	4924      	ldr	r1, [pc, #144]	; (8002998 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002908:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800290c:	b143      	cbz	r3, 8002920 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800290e:	2000      	movs	r0, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	2b0c      	cmp	r3, #12
 8002912:	d00d      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x64>
}
 8002914:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800291e:	e7f2      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002920:	4608      	mov	r0, r1
 8002922:	e7f5      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002924:	481d      	ldr	r0, [pc, #116]	; (800299c <HAL_RCC_GetSysClockFreq+0xd0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002926:	2100      	movs	r1, #0
 8002928:	e7f2      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 800292a:	481c      	ldr	r0, [pc, #112]	; (800299c <HAL_RCC_GetSysClockFreq+0xd0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800292c:	2100      	movs	r1, #0
 800292e:	e7ef      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800293e:	3301      	adds	r3, #1
    switch (pllsource)
 8002940:	2a02      	cmp	r2, #2
 8002942:	d00a      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x8e>
 8002944:	2a03      	cmp	r2, #3
 8002946:	d01a      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0xb2>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002948:	fbb1 f1f3 	udiv	r1, r1, r3
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 800294e:	68d8      	ldr	r0, [r3, #12]
 8002950:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002954:	fb01 f000 	mul.w	r0, r1, r0
        break;
 8002958:	e008      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800295a:	4810      	ldr	r0, [pc, #64]	; (800299c <HAL_RCC_GetSysClockFreq+0xd0>)
 800295c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002968:	fb03 f000 	mul.w	r0, r3, r0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002974:	3301      	adds	r3, #1
 8002976:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8002978:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800297c:	e7ca      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x48>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800297e:	4807      	ldr	r0, [pc, #28]	; (800299c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002980:	fbb0 f0f3 	udiv	r0, r0, r3
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800298c:	fb03 f000 	mul.w	r0, r3, r0
        break;
 8002990:	e7ec      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xa0>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	08004778 	.word	0x08004778
 800299c:	00f42400 	.word	0x00f42400

080029a0 <HAL_RCC_GetHCLKFreq>:
{
 80029a0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80029a2:	f7ff ff93 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x18>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029ae:	4a03      	ldr	r2, [pc, #12]	; (80029bc <HAL_RCC_GetHCLKFreq+0x1c>)
 80029b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80029b2:	40d8      	lsrs	r0, r3
 80029b4:	bd08      	pop	{r3, pc}
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08004760 	.word	0x08004760

080029c0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80029c0:	2800      	cmp	r0, #0
 80029c2:	f000 83b6 	beq.w	8003132 <HAL_RCC_OscConfig+0x772>
{
 80029c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c8:	b083      	sub	sp, #12
 80029ca:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029cc:	4b9e      	ldr	r3, [pc, #632]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 80029ce:	689d      	ldr	r5, [r3, #8]
 80029d0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d4:	68de      	ldr	r6, [r3, #12]
 80029d6:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029da:	6803      	ldr	r3, [r0, #0]
 80029dc:	f013 0f10 	tst.w	r3, #16
 80029e0:	d056      	beq.n	8002a90 <HAL_RCC_OscConfig+0xd0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029e2:	b30d      	cbz	r5, 8002a28 <HAL_RCC_OscConfig+0x68>
 80029e4:	2d0c      	cmp	r5, #12
 80029e6:	d01d      	beq.n	8002a24 <HAL_RCC_OscConfig+0x64>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e8:	69e3      	ldr	r3, [r4, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80bc 	beq.w	8002b68 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 80029f0:	4a95      	ldr	r2, [pc, #596]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80029fa:	f7fe fb75 	bl	80010e8 <HAL_GetTick>
 80029fe:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a00:	4b91      	ldr	r3, [pc, #580]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f013 0f02 	tst.w	r3, #2
 8002a08:	f040 809b 	bne.w	8002b42 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fb6c 	bl	80010e8 <HAL_GetTick>
 8002a10:	1bc0      	subs	r0, r0, r7
 8002a12:	2802      	cmp	r0, #2
 8002a14:	d9f4      	bls.n	8002a00 <HAL_RCC_OscConfig+0x40>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a16:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f013 0f02 	tst.w	r3, #2
 8002a1e:	d1ef      	bne.n	8002a00 <HAL_RCC_OscConfig+0x40>
              return HAL_TIMEOUT;
 8002a20:	2003      	movs	r0, #3
 8002a22:	e391      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a24:	2e01      	cmp	r6, #1
 8002a26:	d1df      	bne.n	80029e8 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a28:	4b87      	ldr	r3, [pc, #540]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f013 0f02 	tst.w	r3, #2
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_OscConfig+0x7a>
 8002a32:	69e3      	ldr	r3, [r4, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 837e 	beq.w	8003136 <HAL_RCC_OscConfig+0x776>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a3c:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f013 0f08 	tst.w	r3, #8
 8002a44:	d057      	beq.n	8002af6 <HAL_RCC_OscConfig+0x136>
 8002a46:	4b80      	ldr	r3, [pc, #512]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4e:	4298      	cmp	r0, r3
 8002a50:	d858      	bhi.n	8002b04 <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f042 0208 	orr.w	r2, r2, #8
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a6e:	6a21      	ldr	r1, [r4, #32]
 8002a70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a74:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a76:	2d00      	cmp	r5, #0
 8002a78:	d05c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a7a:	f7ff ff91 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 8002a7e:	4b73      	ldr	r3, [pc, #460]	; (8002c4c <HAL_RCC_OscConfig+0x28c>)
 8002a80:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002a82:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x290>)
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	f7fe fae9 	bl	800105c <HAL_InitTick>
        if (status != HAL_OK)
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	f040 835c 	bne.w	8003148 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	f013 0f01 	tst.w	r3, #1
 8002a96:	f000 808b 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x1f0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a9a:	2d08      	cmp	r5, #8
 8002a9c:	d07f      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1de>
 8002a9e:	2d0c      	cmp	r5, #12
 8002aa0:	d07b      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	6863      	ldr	r3, [r4, #4]
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	f000 80a7 	beq.w	8002bfa <HAL_RCC_OscConfig+0x23a>
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	f000 80a9 	beq.w	8002c06 <HAL_RCC_OscConfig+0x246>
 8002ab4:	4b64      	ldr	r3, [pc, #400]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ac4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac6:	6863      	ldr	r3, [r4, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a9 	beq.w	8002c20 <HAL_RCC_OscConfig+0x260>
        tickstart = HAL_GetTick();
 8002ace:	f7fe fb0b 	bl	80010e8 <HAL_GetTick>
 8002ad2:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad4:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002adc:	d168      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ade:	f7fe fb03 	bl	80010e8 <HAL_GetTick>
 8002ae2:	1bc0      	subs	r0, r0, r7
 8002ae4:	2864      	cmp	r0, #100	; 0x64
 8002ae6:	d9f5      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x114>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae8:	4b57      	ldr	r3, [pc, #348]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x114>
              return HAL_TIMEOUT;
 8002af2:	2003      	movs	r0, #3
 8002af4:	e328      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b02:	e7a4      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b04:	f7ff fe98 	bl	8002838 <RCC_SetFlashLatencyFromMSIRange>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	f040 8316 	bne.w	800313a <HAL_RCC_OscConfig+0x77a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b2a:	6a21      	ldr	r1, [r4, #32]
 8002b2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e7a2      	b.n	8002a7a <HAL_RCC_OscConfig+0xba>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b34:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002b36:	f7ff fe7f 	bl	8002838 <RCC_SetFlashLatencyFromMSIRange>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d09d      	beq.n	8002a7a <HAL_RCC_OscConfig+0xba>
              return HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e302      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b5e:	6a21      	ldr	r1, [r4, #32]
 8002b60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	e793      	b.n	8002a90 <HAL_RCC_OscConfig+0xd0>
        __HAL_RCC_MSI_DISABLE();
 8002b68:	4a37      	ldr	r2, [pc, #220]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002b6a:	6813      	ldr	r3, [r2, #0]
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b72:	f7fe fab9 	bl	80010e8 <HAL_GetTick>
 8002b76:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f013 0f02 	tst.w	r3, #2
 8002b80:	d086      	beq.n	8002a90 <HAL_RCC_OscConfig+0xd0>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b82:	f7fe fab1 	bl	80010e8 <HAL_GetTick>
 8002b86:	1bc0      	subs	r0, r0, r7
 8002b88:	2802      	cmp	r0, #2
 8002b8a:	d9f5      	bls.n	8002b78 <HAL_RCC_OscConfig+0x1b8>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f013 0f02 	tst.w	r3, #2
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x1b8>
              return HAL_TIMEOUT;
 8002b96:	2003      	movs	r0, #3
 8002b98:	e2d6      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b9a:	2e03      	cmp	r6, #3
 8002b9c:	d181      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xe2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ba6:	d003      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1f0>
 8002ba8:	6863      	ldr	r3, [r4, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 82c7 	beq.w	800313e <HAL_RCC_OscConfig+0x77e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	f013 0f02 	tst.w	r3, #2
 8002bb6:	d060      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bb8:	2d04      	cmp	r5, #4
 8002bba:	d04d      	beq.n	8002c58 <HAL_RCC_OscConfig+0x298>
 8002bbc:	2d0c      	cmp	r5, #12
 8002bbe:	d049      	beq.n	8002c54 <HAL_RCC_OscConfig+0x294>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc0:	68e3      	ldr	r3, [r4, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8090 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_HSI_ENABLE();
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002bca:	6813      	ldr	r3, [r2, #0]
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fa89 	bl	80010e8 <HAL_GetTick>
 8002bd6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002be0:	d179      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x316>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe fa81 	bl	80010e8 <HAL_GetTick>
 8002be6:	1b40      	subs	r0, r0, r5
 8002be8:	2802      	cmp	r0, #2
 8002bea:	d9f5      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x218>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x218>
              return HAL_TIMEOUT;
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	e2a6      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfa:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	e75f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x106>
 8002c06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c0a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e752      	b.n	8002ac6 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002c20:	f7fe fa62 	bl	80010e8 <HAL_GetTick>
 8002c24:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c2e:	d0bf      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fe fa5a 	bl	80010e8 <HAL_GetTick>
 8002c34:	1bc0      	subs	r0, r0, r7
 8002c36:	2864      	cmp	r0, #100	; 0x64
 8002c38:	d9f5      	bls.n	8002c26 <HAL_RCC_OscConfig+0x266>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c3a:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x266>
              return HAL_TIMEOUT;
 8002c44:	2003      	movs	r0, #3
 8002c46:	e27f      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	20000010 	.word	0x20000010
 8002c50:	20000018 	.word	0x20000018
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c54:	2e02      	cmp	r6, #2
 8002c56:	d1b3      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x200>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c58:	4ba9      	ldr	r3, [pc, #676]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_OscConfig+0x2aa>
 8002c62:	68e3      	ldr	r3, [r4, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 826c 	beq.w	8003142 <HAL_RCC_OscConfig+0x782>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4aa5      	ldr	r2, [pc, #660]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002c6c:	6853      	ldr	r3, [r2, #4]
 8002c6e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c72:	6921      	ldr	r1, [r4, #16]
 8002c74:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c78:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	f013 0f08 	tst.w	r3, #8
 8002c80:	d070      	beq.n	8002d64 <HAL_RCC_OscConfig+0x3a4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c82:	6963      	ldr	r3, [r4, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d050      	beq.n	8002d2a <HAL_RCC_OscConfig+0x36a>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002c88:	69a3      	ldr	r3, [r4, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d145      	bne.n	8002d1a <HAL_RCC_OscConfig+0x35a>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002c8e:	4a9c      	ldr	r2, [pc, #624]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002c90:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c94:	f023 0310 	bic.w	r3, r3, #16
 8002c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8002c9c:	4a98      	ldr	r2, [pc, #608]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002c9e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002caa:	f7fe fa1d 	bl	80010e8 <HAL_GetTick>
 8002cae:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb0:	4b93      	ldr	r3, [pc, #588]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f013 0f02 	tst.w	r3, #2
 8002cba:	d153      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fa14 	bl	80010e8 <HAL_GetTick>
 8002cc0:	1b40      	subs	r0, r0, r5
 8002cc2:	2807      	cmp	r0, #7
 8002cc4:	d9f4      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc6:	4b8e      	ldr	r3, [pc, #568]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ccc:	f013 0f02 	tst.w	r3, #2
 8002cd0:	d1ee      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
            return HAL_TIMEOUT;
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	e238      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4a8a      	ldr	r2, [pc, #552]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002cd8:	6853      	ldr	r3, [r2, #4]
 8002cda:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cde:	6921      	ldr	r1, [r4, #16]
 8002ce0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002ce4:	6053      	str	r3, [r2, #4]
 8002ce6:	e7c8      	b.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
        __HAL_RCC_HSI_DISABLE();
 8002ce8:	4a85      	ldr	r2, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f9f9 	bl	80010e8 <HAL_GetTick>
 8002cf6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf8:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d00:	d0bb      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d02:	f7fe f9f1 	bl	80010e8 <HAL_GetTick>
 8002d06:	1b40      	subs	r0, r0, r5
 8002d08:	2802      	cmp	r0, #2
 8002d0a:	d9f5      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x338>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d0c:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x338>
              return HAL_TIMEOUT;
 8002d16:	2003      	movs	r0, #3
 8002d18:	e216      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002d1a:	4a79      	ldr	r2, [pc, #484]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002d1c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002d20:	f043 0310 	orr.w	r3, r3, #16
 8002d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002d28:	e7b8      	b.n	8002c9c <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_LSI_DISABLE();
 8002d2a:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002d2c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d38:	f7fe f9d6 	bl	80010e8 <HAL_GetTick>
 8002d3c:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d3e:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d44:	f013 0f02 	tst.w	r3, #2
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fe f9cd 	bl	80010e8 <HAL_GetTick>
 8002d4e:	1b40      	subs	r0, r0, r5
 8002d50:	2807      	cmp	r0, #7
 8002d52:	d9f4      	bls.n	8002d3e <HAL_RCC_OscConfig+0x37e>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	f013 0f02 	tst.w	r3, #2
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 8002d60:	2003      	movs	r0, #3
 8002d62:	e1f1      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f013 0f04 	tst.w	r3, #4
 8002d6a:	f000 80f0 	beq.w	8002f4e <HAL_RCC_OscConfig+0x58e>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d6e:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d76:	d124      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002d7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d8c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8e:	4b5d      	ldr	r3, [pc, #372]	; (8002f04 <HAL_RCC_OscConfig+0x544>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x406>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d98:	68a3      	ldr	r3, [r4, #8]
 8002d9a:	f013 0f01 	tst.w	r3, #1
 8002d9e:	d033      	beq.n	8002e08 <HAL_RCC_OscConfig+0x448>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002da0:	f013 0f04 	tst.w	r3, #4
 8002da4:	d028      	beq.n	8002df8 <HAL_RCC_OscConfig+0x438>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002da6:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002da8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002dac:	f042 0204 	orr.w	r2, r2, #4
 8002db0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002db4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002dc0:	e02f      	b.n	8002e22 <HAL_RCC_OscConfig+0x462>
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2500      	movs	r5, #0
 8002dc4:	e7e3      	b.n	8002d8e <HAL_RCC_OscConfig+0x3ce>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc6:	4a4f      	ldr	r2, [pc, #316]	; (8002f04 <HAL_RCC_OscConfig+0x544>)
 8002dc8:	6813      	ldr	r3, [r2, #0]
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002dd0:	f7fe f98a 	bl	80010e8 <HAL_GetTick>
 8002dd4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd6:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_RCC_OscConfig+0x544>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dde:	d1db      	bne.n	8002d98 <HAL_RCC_OscConfig+0x3d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fe f982 	bl	80010e8 <HAL_GetTick>
 8002de4:	1b80      	subs	r0, r0, r6
 8002de6:	2802      	cmp	r0, #2
 8002de8:	d9f5      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x416>
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dea:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_RCC_OscConfig+0x544>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 8002df4:	2003      	movs	r0, #3
 8002df6:	e1a7      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002df8:	4a41      	ldr	r2, [pc, #260]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002dfa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e06:	e00c      	b.n	8002e22 <HAL_RCC_OscConfig+0x462>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002e0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e22:	68a3      	ldr	r3, [r4, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d053      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8002e28:	f7fe f95e 	bl	80010e8 <HAL_GetTick>
 8002e2c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	f013 0f02 	tst.w	r3, #2
 8002e38:	d10e      	bne.n	8002e58 <HAL_RCC_OscConfig+0x498>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe f955 	bl	80010e8 <HAL_GetTick>
 8002e3e:	1b80      	subs	r0, r0, r6
 8002e40:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e44:	4298      	cmp	r0, r3
 8002e46:	d9f2      	bls.n	8002e2e <HAL_RCC_OscConfig+0x46e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f013 0f02 	tst.w	r3, #2
 8002e52:	d1ec      	bne.n	8002e2e <HAL_RCC_OscConfig+0x46e>
            return HAL_TIMEOUT;
 8002e54:	2003      	movs	r0, #3
 8002e56:	e177      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002e58:	68a3      	ldr	r3, [r4, #8]
 8002e5a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e5e:	d01b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4d8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e60:	4a27      	ldr	r2, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002e62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e78:	d168      	bne.n	8002f4c <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe f935 	bl	80010e8 <HAL_GetTick>
 8002e7e:	1b80      	subs	r0, r0, r6
 8002e80:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e84:	4298      	cmp	r0, r3
 8002e86:	d9f2      	bls.n	8002e6e <HAL_RCC_OscConfig+0x4ae>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e92:	d1ec      	bne.n	8002e6e <HAL_RCC_OscConfig+0x4ae>
              return HAL_TIMEOUT;
 8002e94:	2003      	movs	r0, #3
 8002e96:	e157      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002e9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002eb0:	d04c      	beq.n	8002f4c <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe f919 	bl	80010e8 <HAL_GetTick>
 8002eb6:	1b80      	subs	r0, r0, r6
 8002eb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ebc:	4298      	cmp	r0, r3
 8002ebe:	d9f2      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x4e6>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002eca:	d0ec      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4e6>
              return HAL_TIMEOUT;
 8002ecc:	2003      	movs	r0, #3
 8002ece:	e13b      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
      tickstart = HAL_GetTick();
 8002ed0:	f7fe f90a 	bl	80010e8 <HAL_GetTick>
 8002ed4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f013 0f02 	tst.w	r3, #2
 8002ee0:	d012      	beq.n	8002f08 <HAL_RCC_OscConfig+0x548>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe f901 	bl	80010e8 <HAL_GetTick>
 8002ee6:	1b80      	subs	r0, r0, r6
 8002ee8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eec:	4298      	cmp	r0, r3
 8002eee:	d9f2      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x516>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_RCC_OscConfig+0x540>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f013 0f02 	tst.w	r3, #2
 8002efa:	d0ec      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x516>
            return HAL_TIMEOUT;
 8002efc:	2003      	movs	r0, #3
 8002efe:	e123      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002f08:	4b97      	ldr	r3, [pc, #604]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f12:	d01b      	beq.n	8002f4c <HAL_RCC_OscConfig+0x58c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f14:	4a94      	ldr	r2, [pc, #592]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002f16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f22:	4b91      	ldr	r3, [pc, #580]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002f2c:	d00e      	beq.n	8002f4c <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe f8db 	bl	80010e8 <HAL_GetTick>
 8002f32:	1b80      	subs	r0, r0, r6
 8002f34:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f38:	4298      	cmp	r0, r3
 8002f3a:	d9f2      	bls.n	8002f22 <HAL_RCC_OscConfig+0x562>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002f46:	d0ec      	beq.n	8002f22 <HAL_RCC_OscConfig+0x562>
              return HAL_TIMEOUT;
 8002f48:	2003      	movs	r0, #3
 8002f4a:	e0fd      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
    if (pwrclkchanged == SET)
 8002f4c:	bb15      	cbnz	r5, 8002f94 <HAL_RCC_OscConfig+0x5d4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	f013 0f20 	tst.w	r3, #32
 8002f54:	d041      	beq.n	8002fda <HAL_RCC_OscConfig+0x61a>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f58:	b313      	cbz	r3, 8002fa0 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSI48_ENABLE();
 8002f5a:	4a83      	ldr	r2, [pc, #524]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002f5c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002f68:	f7fe f8be 	bl	80010e8 <HAL_GetTick>
 8002f6c:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f6e:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f74:	f013 0f02 	tst.w	r3, #2
 8002f78:	d12f      	bne.n	8002fda <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f7a:	f7fe f8b5 	bl	80010e8 <HAL_GetTick>
 8002f7e:	1b40      	subs	r0, r0, r5
 8002f80:	2802      	cmp	r0, #2
 8002f82:	d9f4      	bls.n	8002f6e <HAL_RCC_OscConfig+0x5ae>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f84:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f8a:	f013 0f02 	tst.w	r3, #2
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5ae>
            return HAL_TIMEOUT;
 8002f90:	2003      	movs	r0, #3
 8002f92:	e0d9      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f94:	4a74      	ldr	r2, [pc, #464]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002f96:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9e:	e7d6      	b.n	8002f4e <HAL_RCC_OscConfig+0x58e>
      __HAL_RCC_HSI48_DISABLE();
 8002fa0:	4a71      	ldr	r2, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002fa2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002fae:	f7fe f89b 	bl	80010e8 <HAL_GetTick>
 8002fb2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb4:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fba:	f013 0f02 	tst.w	r3, #2
 8002fbe:	d00c      	beq.n	8002fda <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc0:	f7fe f892 	bl	80010e8 <HAL_GetTick>
 8002fc4:	1b40      	subs	r0, r0, r5
 8002fc6:	2802      	cmp	r0, #2
 8002fc8:	d9f4      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x5f4>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fca:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd0:	f013 0f02 	tst.w	r3, #2
 8002fd4:	d0ee      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x5f4>
            return HAL_TIMEOUT;
 8002fd6:	2003      	movs	r0, #3
 8002fd8:	e0b6      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80b2 	beq.w	8003146 <HAL_RCC_OscConfig+0x786>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe2:	4a61      	ldr	r2, [pc, #388]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002fe4:	6892      	ldr	r2, [r2, #8]
 8002fe6:	f002 020c 	and.w	r2, r2, #12
 8002fea:	2a0c      	cmp	r2, #12
 8002fec:	d073      	beq.n	80030d6 <HAL_RCC_OscConfig+0x716>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d018      	beq.n	8003024 <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4a5d      	ldr	r2, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8002ff4:	6813      	ldr	r3, [r2, #0]
 8002ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f874 	bl	80010e8 <HAL_GetTick>
 8003000:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003002:	4b59      	ldr	r3, [pc, #356]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800300a:	d05d      	beq.n	80030c8 <HAL_RCC_OscConfig+0x708>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe f86c 	bl	80010e8 <HAL_GetTick>
 8003010:	1b00      	subs	r0, r0, r4
 8003012:	2802      	cmp	r0, #2
 8003014:	d9f5      	bls.n	8003002 <HAL_RCC_OscConfig+0x642>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003016:	4b54      	ldr	r3, [pc, #336]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x642>
              return HAL_TIMEOUT;
 8003020:	2003      	movs	r0, #3
 8003022:	e091      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_DISABLE();
 8003024:	4a50      	ldr	r2, [pc, #320]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8003026:	6813      	ldr	r3, [r2, #0]
 8003028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800302e:	f7fe f85b 	bl	80010e8 <HAL_GetTick>
 8003032:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800303c:	d00b      	beq.n	8003056 <HAL_RCC_OscConfig+0x696>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe f853 	bl	80010e8 <HAL_GetTick>
 8003042:	1b40      	subs	r0, r0, r5
 8003044:	2802      	cmp	r0, #2
 8003046:	d9f5      	bls.n	8003034 <HAL_RCC_OscConfig+0x674>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003048:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x674>
              return HAL_TIMEOUT;
 8003052:	2003      	movs	r0, #3
 8003054:	e078      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003056:	4a44      	ldr	r2, [pc, #272]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 8003058:	68d3      	ldr	r3, [r2, #12]
 800305a:	4944      	ldr	r1, [pc, #272]	; (800316c <HAL_RCC_OscConfig+0x7ac>)
 800305c:	4019      	ands	r1, r3
 800305e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003060:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003062:	3801      	subs	r0, #1
 8003064:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003068:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800306a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800306e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003070:	0840      	lsrs	r0, r0, #1
 8003072:	3801      	subs	r0, #1
 8003074:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003078:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800307a:	0840      	lsrs	r0, r0, #1
 800307c:	3801      	subs	r0, #1
 800307e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003082:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003084:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003088:	4319      	orrs	r1, r3
 800308a:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800308c:	6813      	ldr	r3, [r2, #0]
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003094:	68d3      	ldr	r3, [r2, #12]
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800309c:	f7fe f824 	bl	80010e8 <HAL_GetTick>
 80030a0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x704>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe f81c 	bl	80010e8 <HAL_GetTick>
 80030b0:	1b00      	subs	r0, r0, r4
 80030b2:	2802      	cmp	r0, #2
 80030b4:	d9f5      	bls.n	80030a2 <HAL_RCC_OscConfig+0x6e2>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x6e2>
              return HAL_TIMEOUT;
 80030c0:	2003      	movs	r0, #3
 80030c2:	e041      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 80030c4:	2000      	movs	r0, #0
 80030c6:	e03f      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030c8:	4a27      	ldr	r2, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 80030ca:	68d1      	ldr	r1, [r2, #12]
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <HAL_RCC_OscConfig+0x7b0>)
 80030ce:	400b      	ands	r3, r1
 80030d0:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80030d2:	2000      	movs	r0, #0
 80030d4:	e038      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d038      	beq.n	800314c <HAL_RCC_OscConfig+0x78c>
        pll_config = RCC->PLLCFGR;
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_RCC_OscConfig+0x7a8>)
 80030dc:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	f003 0103 	and.w	r1, r3, #3
 80030e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80030e4:	4291      	cmp	r1, r2
 80030e6:	d133      	bne.n	8003150 <HAL_RCC_OscConfig+0x790>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ee:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80030f4:	d12e      	bne.n	8003154 <HAL_RCC_OscConfig+0x794>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030fc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003100:	d12a      	bne.n	8003158 <HAL_RCC_OscConfig+0x798>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003102:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003106:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003108:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800310c:	d126      	bne.n	800315c <HAL_RCC_OscConfig+0x79c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003112:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003114:	0852      	lsrs	r2, r2, #1
 8003116:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003118:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800311c:	d120      	bne.n	8003160 <HAL_RCC_OscConfig+0x7a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800311e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003122:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003124:	0852      	lsrs	r2, r2, #1
 8003126:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003128:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800312c:	d11a      	bne.n	8003164 <HAL_RCC_OscConfig+0x7a4>
  return HAL_OK;
 800312e:	2000      	movs	r0, #0
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
    return HAL_ERROR;
 8003132:	2001      	movs	r0, #1
}
 8003134:	4770      	bx	lr
        return HAL_ERROR;
 8003136:	2001      	movs	r0, #1
 8003138:	e006      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
            return HAL_ERROR;
 800313a:	2001      	movs	r0, #1
 800313c:	e004      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 800313e:	2001      	movs	r0, #1
 8003140:	e002      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 8003142:	2001      	movs	r0, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 8003146:	2000      	movs	r0, #0
}
 8003148:	b003      	add	sp, #12
 800314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800314c:	2001      	movs	r0, #1
 800314e:	e7fb      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
          return HAL_ERROR;
 8003150:	2001      	movs	r0, #1
 8003152:	e7f9      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
 8003154:	2001      	movs	r0, #1
 8003156:	e7f7      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
 8003158:	2001      	movs	r0, #1
 800315a:	e7f5      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
 800315c:	2001      	movs	r0, #1
 800315e:	e7f3      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
 8003160:	2001      	movs	r0, #1
 8003162:	e7f1      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
 8003164:	2001      	movs	r0, #1
 8003166:	e7ef      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
 8003168:	40021000 	.word	0x40021000
 800316c:	019f800c 	.word	0x019f800c
 8003170:	feeefffc 	.word	0xfeeefffc

08003174 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003174:	2800      	cmp	r0, #0
 8003176:	f000 80e9 	beq.w	800334c <HAL_RCC_ClockConfig+0x1d8>
{
 800317a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317c:	460d      	mov	r5, r1
 800317e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b76      	ldr	r3, [pc, #472]	; (800335c <HAL_RCC_ClockConfig+0x1e8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	428b      	cmp	r3, r1
 800318a:	d20b      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318c:	4a73      	ldr	r2, [pc, #460]	; (800335c <HAL_RCC_ClockConfig+0x1e8>)
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	430b      	orrs	r3, r1
 8003196:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003198:	6813      	ldr	r3, [r2, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	428b      	cmp	r3, r1
 80031a0:	f040 80d6 	bne.w	8003350 <HAL_RCC_ClockConfig+0x1dc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	f013 0f02 	tst.w	r3, #2
 80031aa:	d00c      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ac:	68a2      	ldr	r2, [r4, #8]
 80031ae:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d905      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ba:	4969      	ldr	r1, [pc, #420]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 80031bc:	688b      	ldr	r3, [r1, #8]
 80031be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c2:	431a      	orrs	r2, r3
 80031c4:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	f013 0f01 	tst.w	r3, #1
 80031cc:	d076      	beq.n	80032bc <HAL_RCC_ClockConfig+0x148>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ce:	6863      	ldr	r3, [r4, #4]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d00d      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x7c>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d025      	beq.n	8003224 <HAL_RCC_ClockConfig+0xb0>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d13c      	bne.n	8003256 <HAL_RCC_ClockConfig+0xe2>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f013 0f02 	tst.w	r3, #2
 80031ea:	d121      	bne.n	8003230 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 80031ec:	2001      	movs	r0, #1
 80031ee:	e0a6      	b.n	800333e <HAL_RCC_ClockConfig+0x1ca>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f0:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 80031fa:	2001      	movs	r0, #1
 80031fc:	e09f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ca>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031fe:	f7ff fad5 	bl	80027ac <RCC_GetSysClockFreqFromPLLSource>
      if (pllfreq > 80000000U)
 8003202:	4b58      	ldr	r3, [pc, #352]	; (8003364 <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	4298      	cmp	r0, r3
 8003206:	d92d      	bls.n	8003264 <HAL_RCC_ClockConfig+0xf0>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003210:	d12a      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003212:	4a53      	ldr	r2, [pc, #332]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 8003214:	6893      	ldr	r3, [r2, #8]
 8003216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003220:	2780      	movs	r7, #128	; 0x80
 8003222:	e024      	b.n	800326e <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003224:	4b4e      	ldr	r3, [pc, #312]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800322c:	f000 8092 	beq.w	8003354 <HAL_RCC_ClockConfig+0x1e0>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003230:	f7ff fb4c 	bl	80028cc <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	4298      	cmp	r0, r3
 8003238:	d918      	bls.n	800326c <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800323a:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003242:	d137      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x140>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003244:	4a46      	ldr	r2, [pc, #280]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 8003246:	6893      	ldr	r3, [r2, #8]
 8003248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800324c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003250:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003252:	2780      	movs	r7, #128	; 0x80
 8003254:	e00b      	b.n	800326e <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003256:	4b42      	ldr	r3, [pc, #264]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800325e:	d1e7      	bne.n	8003230 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 8003260:	2001      	movs	r0, #1
 8003262:	e06c      	b.n	800333e <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003264:	2700      	movs	r7, #0
 8003266:	e002      	b.n	800326e <HAL_RCC_ClockConfig+0xfa>
 8003268:	2700      	movs	r7, #0
 800326a:	e000      	b.n	800326e <HAL_RCC_ClockConfig+0xfa>
 800326c:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 8003270:	6893      	ldr	r3, [r2, #8]
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	6861      	ldr	r1, [r4, #4]
 8003278:	430b      	orrs	r3, r1
 800327a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800327c:	f7fd ff34 	bl	80010e8 <HAL_GetTick>
 8003280:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	4b37      	ldr	r3, [pc, #220]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	6862      	ldr	r2, [r4, #4]
 800328c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003290:	d012      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x144>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003292:	f7fd ff29 	bl	80010e8 <HAL_GetTick>
 8003296:	1b80      	subs	r0, r0, r6
 8003298:	f241 3388 	movw	r3, #5000	; 0x1388
 800329c:	4298      	cmp	r0, r3
 800329e:	d9f0      	bls.n	8003282 <HAL_RCC_ClockConfig+0x10e>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	6862      	ldr	r2, [r4, #4]
 80032aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032ae:	d0e8      	beq.n	8003282 <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 80032b0:	2003      	movs	r0, #3
 80032b2:	e044      	b.n	800333e <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032b4:	2700      	movs	r7, #0
 80032b6:	e7da      	b.n	800326e <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 80032b8:	2f00      	cmp	r7, #0
 80032ba:	d141      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1cc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	f013 0f02 	tst.w	r3, #2
 80032c2:	d00c      	beq.n	80032de <HAL_RCC_ClockConfig+0x16a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c4:	68a2      	ldr	r2, [r4, #8]
 80032c6:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d205      	bcs.n	80032de <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d2:	4923      	ldr	r1, [pc, #140]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 80032d4:	688b      	ldr	r3, [r1, #8]
 80032d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032da:	431a      	orrs	r2, r3
 80032dc:	608a      	str	r2, [r1, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032de:	4b1f      	ldr	r3, [pc, #124]	; (800335c <HAL_RCC_ClockConfig+0x1e8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	42ab      	cmp	r3, r5
 80032e8:	d90a      	bls.n	8003300 <HAL_RCC_ClockConfig+0x18c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <HAL_RCC_ClockConfig+0x1e8>)
 80032ec:	6813      	ldr	r3, [r2, #0]
 80032ee:	f023 030f 	bic.w	r3, r3, #15
 80032f2:	432b      	orrs	r3, r5
 80032f4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	d12b      	bne.n	8003358 <HAL_RCC_ClockConfig+0x1e4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	f013 0f04 	tst.w	r3, #4
 8003306:	d006      	beq.n	8003316 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4a15      	ldr	r2, [pc, #84]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 800330a:	6893      	ldr	r3, [r2, #8]
 800330c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003310:	68e1      	ldr	r1, [r4, #12]
 8003312:	430b      	orrs	r3, r1
 8003314:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	f013 0f08 	tst.w	r3, #8
 800331c:	d007      	beq.n	800332e <HAL_RCC_ClockConfig+0x1ba>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4a10      	ldr	r2, [pc, #64]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 8003320:	6893      	ldr	r3, [r2, #8]
 8003322:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003326:	6921      	ldr	r1, [r4, #16]
 8003328:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800332c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800332e:	f7ff fb37 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_ClockConfig+0x1f4>)
 8003334:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_RCC_ClockConfig+0x1f8>)
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	f7fd fe8f 	bl	800105c <HAL_InitTick>
}
 800333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_RCC_ClockConfig+0x1ec>)
 8003342:	6893      	ldr	r3, [r2, #8]
 8003344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003348:	6093      	str	r3, [r2, #8]
 800334a:	e7b7      	b.n	80032bc <HAL_RCC_ClockConfig+0x148>
    return HAL_ERROR;
 800334c:	2001      	movs	r0, #1
}
 800334e:	4770      	bx	lr
      return HAL_ERROR;
 8003350:	2001      	movs	r0, #1
 8003352:	e7f4      	b.n	800333e <HAL_RCC_ClockConfig+0x1ca>
          return HAL_ERROR;
 8003354:	2001      	movs	r0, #1
 8003356:	e7f2      	b.n	800333e <HAL_RCC_ClockConfig+0x1ca>
      return HAL_ERROR;
 8003358:	2001      	movs	r0, #1
 800335a:	e7f0      	b.n	800333e <HAL_RCC_ClockConfig+0x1ca>
 800335c:	40022000 	.word	0x40022000
 8003360:	40021000 	.word	0x40021000
 8003364:	04c4b400 	.word	0x04c4b400
 8003368:	20000010 	.word	0x20000010
 800336c:	20000018 	.word	0x20000018

08003370 <HAL_RCC_GetPCLK1Freq>:
{
 8003370:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003372:	f7ff fb15 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800337e:	4a03      	ldr	r2, [pc, #12]	; (800338c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
}
 8003382:	40d8      	lsrs	r0, r3
 8003384:	bd08      	pop	{r3, pc}
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	08004770 	.word	0x08004770

08003390 <HAL_RCC_GetPCLK2Freq>:
{
 8003390:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003392:	f7ff fb05 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800339e:	4a03      	ldr	r2, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80033a2:	40d8      	lsrs	r0, r3
 80033a4:	bd08      	pop	{r3, pc}
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	08004770 	.word	0x08004770

080033b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4604      	mov	r4, r0
 80033b4:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80033b6:	6803      	ldr	r3, [r0, #0]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d051      	beq.n	8003460 <RCCEx_PLLSAI2_Config+0xb0>
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d056      	beq.n	800346e <RCCEx_PLLSAI2_Config+0xbe>
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d001      	beq.n	80033c8 <RCCEx_PLLSAI2_Config+0x18>
 80033c4:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f013 0f02 	tst.w	r3, #2
 80033d0:	d054      	beq.n	800347c <RCCEx_PLLSAI2_Config+0xcc>
    __HAL_RCC_PLLSAI2_DISABLE();
 80033d2:	4a2d      	ldr	r2, [pc, #180]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033da:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80033dc:	f7fd fe84 	bl	80010e8 <HAL_GetTick>
 80033e0:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80033ea:	d009      	beq.n	8003400 <RCCEx_PLLSAI2_Config+0x50>
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033ec:	f7fd fe7c 	bl	80010e8 <HAL_GetTick>
 80033f0:	1b43      	subs	r3, r0, r5
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d9f5      	bls.n	80033e2 <RCCEx_PLLSAI2_Config+0x32>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80033fe:	d13f      	bne.n	8003480 <RCCEx_PLLSAI2_Config+0xd0>
      if (Divider == DIVIDER_P_UPDATE)
 8003400:	b986      	cbnz	r6, 8003424 <RCCEx_PLLSAI2_Config+0x74>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003402:	4821      	ldr	r0, [pc, #132]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 8003404:	6943      	ldr	r3, [r0, #20]
 8003406:	4a21      	ldr	r2, [pc, #132]	; (800348c <RCCEx_PLLSAI2_Config+0xdc>)
 8003408:	401a      	ands	r2, r3
 800340a:	68a1      	ldr	r1, [r4, #8]
 800340c:	68e3      	ldr	r3, [r4, #12]
 800340e:	06db      	lsls	r3, r3, #27
 8003410:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003414:	6861      	ldr	r1, [r4, #4]
 8003416:	3901      	subs	r1, #1
 8003418:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800341c:	6821      	ldr	r1, [r4, #0]
 800341e:	430b      	orrs	r3, r1
 8003420:	431a      	orrs	r2, r3
 8003422:	6142      	str	r2, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800342e:	f7fd fe5b 	bl	80010e8 <HAL_GetTick>
 8003432:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800343c:	d109      	bne.n	8003452 <RCCEx_PLLSAI2_Config+0xa2>
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800343e:	f7fd fe53 	bl	80010e8 <HAL_GetTick>
 8003442:	1b43      	subs	r3, r0, r5
 8003444:	2b02      	cmp	r3, #2
 8003446:	d9f5      	bls.n	8003434 <RCCEx_PLLSAI2_Config+0x84>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003450:	d018      	beq.n	8003484 <RCCEx_PLLSAI2_Config+0xd4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8003452:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 8003454:	6953      	ldr	r3, [r2, #20]
 8003456:	6921      	ldr	r1, [r4, #16]
 8003458:	430b      	orrs	r3, r1
 800345a:	6153      	str	r3, [r2, #20]
 800345c:	2000      	movs	r0, #0
 800345e:	e7b2      	b.n	80033c6 <RCCEx_PLLSAI2_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003468:	d1b3      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0x22>
        status = HAL_ERROR;
 800346a:	2001      	movs	r0, #1
 800346c:	e7ab      	b.n	80033c6 <RCCEx_PLLSAI2_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <RCCEx_PLLSAI2_Config+0xd8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8003476:	d1ac      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0x22>
        status = HAL_ERROR;
 8003478:	2001      	movs	r0, #1
 800347a:	e7a4      	b.n	80033c6 <RCCEx_PLLSAI2_Config+0x16>
        status = HAL_ERROR;
 800347c:	2001      	movs	r0, #1
 800347e:	e7a2      	b.n	80033c6 <RCCEx_PLLSAI2_Config+0x16>
          status = HAL_TIMEOUT;
 8003480:	2003      	movs	r0, #3
 8003482:	e7a0      	b.n	80033c6 <RCCEx_PLLSAI2_Config+0x16>
            status = HAL_TIMEOUT;
 8003484:	2003      	movs	r0, #3
 8003486:	e79e      	b.n	80033c6 <RCCEx_PLLSAI2_Config+0x16>
 8003488:	40021000 	.word	0x40021000
 800348c:	07ff800c 	.word	0x07ff800c

08003490 <RCCEx_PLLSAI1_Config>:
{
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4604      	mov	r4, r0
 8003494:	460e      	mov	r6, r1
  switch (pPllSai1->PLLSAI1Source)
 8003496:	6803      	ldr	r3, [r0, #0]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d052      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0xb2>
 800349c:	2b03      	cmp	r3, #3
 800349e:	d057      	beq.n	8003550 <RCCEx_PLLSAI1_Config+0xc0>
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d001      	beq.n	80034a8 <RCCEx_PLLSAI1_Config+0x18>
 80034a4:	2001      	movs	r0, #1
}
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034a8:	4b45      	ldr	r3, [pc, #276]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f013 0f02 	tst.w	r3, #2
 80034b0:	d07f      	beq.n	80035b2 <RCCEx_PLLSAI1_Config+0x122>
    __HAL_RCC_PLLSAI1_DISABLE();
 80034b2:	4a43      	ldr	r2, [pc, #268]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 80034b4:	6813      	ldr	r3, [r2, #0]
 80034b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80034bc:	f7fd fe14 	bl	80010e8 <HAL_GetTick>
 80034c0:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80034ca:	d009      	beq.n	80034e0 <RCCEx_PLLSAI1_Config+0x50>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034cc:	f7fd fe0c 	bl	80010e8 <HAL_GetTick>
 80034d0:	1b43      	subs	r3, r0, r5
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d9f5      	bls.n	80034c2 <RCCEx_PLLSAI1_Config+0x32>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d6:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80034de:	d16a      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0x126>
      if (Divider == DIVIDER_P_UPDATE)
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	d13c      	bne.n	800355e <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e4:	4836      	ldr	r0, [pc, #216]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 80034e6:	6903      	ldr	r3, [r0, #16]
 80034e8:	4a36      	ldr	r2, [pc, #216]	; (80035c4 <RCCEx_PLLSAI1_Config+0x134>)
 80034ea:	401a      	ands	r2, r3
 80034ec:	68a1      	ldr	r1, [r4, #8]
 80034ee:	68e3      	ldr	r3, [r4, #12]
 80034f0:	06db      	lsls	r3, r3, #27
 80034f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80034f6:	6861      	ldr	r1, [r4, #4]
 80034f8:	3901      	subs	r1, #1
 80034fa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80034fe:	6821      	ldr	r1, [r4, #0]
 8003500:	430b      	orrs	r3, r1
 8003502:	431a      	orrs	r2, r3
 8003504:	6102      	str	r2, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003506:	4a2e      	ldr	r2, [pc, #184]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 8003508:	6813      	ldr	r3, [r2, #0]
 800350a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800350e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003510:	f7fd fdea 	bl	80010e8 <HAL_GetTick>
 8003514:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800351e:	d109      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0xa4>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003520:	f7fd fde2 	bl	80010e8 <HAL_GetTick>
 8003524:	1b43      	subs	r3, r0, r5
 8003526:	2b02      	cmp	r3, #2
 8003528:	d9f5      	bls.n	8003516 <RCCEx_PLLSAI1_Config+0x86>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003532:	d042      	beq.n	80035ba <RCCEx_PLLSAI1_Config+0x12a>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8003534:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 8003536:	6913      	ldr	r3, [r2, #16]
 8003538:	69a1      	ldr	r1, [r4, #24]
 800353a:	430b      	orrs	r3, r1
 800353c:	6113      	str	r3, [r2, #16]
 800353e:	2000      	movs	r0, #0
 8003540:	e7b1      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003542:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800354a:	d1b2      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 800354c:	2001      	movs	r0, #1
 800354e:	e7aa      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8003558:	d1ab      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 800355a:	2001      	movs	r0, #1
 800355c:	e7a3      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x16>
      else if (Divider == DIVIDER_Q_UPDATE)
 800355e:	2e01      	cmp	r6, #1
 8003560:	d013      	beq.n	800358a <RCCEx_PLLSAI1_Config+0xfa>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003562:	4817      	ldr	r0, [pc, #92]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 8003564:	6903      	ldr	r3, [r0, #16]
 8003566:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <RCCEx_PLLSAI1_Config+0x138>)
 8003568:	401a      	ands	r2, r3
 800356a:	68a1      	ldr	r1, [r4, #8]
 800356c:	6963      	ldr	r3, [r4, #20]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	065b      	lsls	r3, r3, #25
 8003574:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003578:	6861      	ldr	r1, [r4, #4]
 800357a:	3901      	subs	r1, #1
 800357c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	430b      	orrs	r3, r1
 8003584:	431a      	orrs	r2, r3
 8003586:	6102      	str	r2, [r0, #16]
 8003588:	e7bd      	b.n	8003506 <RCCEx_PLLSAI1_Config+0x76>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800358a:	480d      	ldr	r0, [pc, #52]	; (80035c0 <RCCEx_PLLSAI1_Config+0x130>)
 800358c:	6903      	ldr	r3, [r0, #16]
 800358e:	4a0f      	ldr	r2, [pc, #60]	; (80035cc <RCCEx_PLLSAI1_Config+0x13c>)
 8003590:	401a      	ands	r2, r3
 8003592:	68a1      	ldr	r1, [r4, #8]
 8003594:	6923      	ldr	r3, [r4, #16]
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	3b01      	subs	r3, #1
 800359a:	055b      	lsls	r3, r3, #21
 800359c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035a0:	6861      	ldr	r1, [r4, #4]
 80035a2:	3901      	subs	r1, #1
 80035a4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80035a8:	6821      	ldr	r1, [r4, #0]
 80035aa:	430b      	orrs	r3, r1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	6102      	str	r2, [r0, #16]
 80035b0:	e7a9      	b.n	8003506 <RCCEx_PLLSAI1_Config+0x76>
        status = HAL_ERROR;
 80035b2:	2001      	movs	r0, #1
 80035b4:	e777      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x16>
          status = HAL_TIMEOUT;
 80035b6:	2003      	movs	r0, #3
 80035b8:	e775      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x16>
            status = HAL_TIMEOUT;
 80035ba:	2003      	movs	r0, #3
 80035bc:	e773      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x16>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	07ff800c 	.word	0x07ff800c
 80035c8:	f9ff800c 	.word	0xf9ff800c
 80035cc:	ff9f800c 	.word	0xff9f800c

080035d0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80035d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035d8:	6803      	ldr	r3, [r0, #0]
 80035da:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80035de:	d034      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 80035e0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d01f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035e6:	d80b      	bhi.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x30>
 80035e8:	b323      	cbz	r3, 8003634 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d105      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ee:	2100      	movs	r1, #0
 80035f0:	3020      	adds	r0, #32
 80035f2:	f7ff fedd 	bl	80033b0 <RCCEx_PLLSAI2_Config>
 80035f6:	4606      	mov	r6, r0
        break;
 80035f8:	e021      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->Sai1ClockSelection)
 80035fa:	2701      	movs	r7, #1
 80035fc:	463e      	mov	r6, r7
 80035fe:	e026      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003600:	2b60      	cmp	r3, #96	; 0x60
 8003602:	d020      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d10b      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003608:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800360a:	4a69      	ldr	r2, [pc, #420]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800360c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003610:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003614:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003616:	430b      	orrs	r3, r1
 8003618:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800361c:	2700      	movs	r7, #0
 800361e:	e016      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003620:	2701      	movs	r7, #1
 8003622:	463e      	mov	r6, r7
 8003624:	e013      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003626:	4a62      	ldr	r2, [pc, #392]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003628:	68d3      	ldr	r3, [r2, #12]
 800362a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362e:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003630:	2600      	movs	r6, #0
 8003632:	e7ea      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003634:	2100      	movs	r1, #0
 8003636:	3004      	adds	r0, #4
 8003638:	f7ff ff2a 	bl	8003490 <RCCEx_PLLSAI1_Config>
 800363c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800363e:	2e00      	cmp	r6, #0
 8003640:	d0e3      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003642:	4637      	mov	r7, r6
 8003644:	e003      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003646:	2600      	movs	r6, #0
 8003648:	e7df      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800364a:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800364c:	463e      	mov	r6, r7
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003654:	d033      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch (PeriphClkInit->Sai2ClockSelection)
 8003656:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d022      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800365e:	d80d      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003660:	b333      	cbz	r3, 80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8003662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003666:	d106      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003668:	2100      	movs	r1, #0
 800366a:	f104 0020 	add.w	r0, r4, #32
 800366e:	f7ff fe9f 	bl	80033b0 <RCCEx_PLLSAI2_Config>
 8003672:	4606      	mov	r6, r0
        break;
 8003674:	e008      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai2ClockSelection)
 8003676:	2701      	movs	r7, #1
 8003678:	463e      	mov	r6, r7
 800367a:	e020      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xee>
 800367c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003680:	d002      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003686:	d10a      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xce>
    if (ret == HAL_OK)
 8003688:	b9c6      	cbnz	r6, 80036bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800368a:	4a49      	ldr	r2, [pc, #292]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800368c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003690:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003694:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003696:	430b      	orrs	r3, r1
 8003698:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800369c:	e00f      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch (PeriphClkInit->Sai2ClockSelection)
 800369e:	2701      	movs	r7, #1
 80036a0:	463e      	mov	r6, r7
 80036a2:	e00c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036a4:	4a42      	ldr	r2, [pc, #264]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036a6:	68d3      	ldr	r3, [r2, #12]
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	60d3      	str	r3, [r2, #12]
        break;
 80036ae:	e7eb      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036b0:	2100      	movs	r1, #0
 80036b2:	1d20      	adds	r0, r4, #4
 80036b4:	f7ff feec 	bl	8003490 <RCCEx_PLLSAI1_Config>
 80036b8:	4606      	mov	r6, r0
        break;
 80036ba:	e7e5      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80036bc:	4637      	mov	r7, r6
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80036c4:	d07d      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80036ce:	d14f      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d0:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036d8:	659a      	str	r2, [r3, #88]	; 0x58
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036e4:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e8:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80036f2:	f7fd fcf9 	bl	80010e8 <HAL_GetTick>
 80036f6:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003700:	d109      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x146>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003702:	f7fd fcf1 	bl	80010e8 <HAL_GetTick>
 8003706:	1b40      	subs	r0, r0, r5
 8003708:	2802      	cmp	r0, #2
 800370a:	d9f5      	bls.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370c:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003714:	d048      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    if (ret == HAL_OK)
 8003716:	2e00      	cmp	r6, #0
 8003718:	d14e      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003720:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003724:	d016      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003726:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800372a:	429a      	cmp	r2, r3
 800372c:	d012      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x184>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800372e:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003730:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003738:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800373c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003740:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003744:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003748:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800374c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003754:	f013 0f01 	tst.w	r3, #1
 8003758:	d10d      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800375c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003768:	430b      	orrs	r3, r1
 800376a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800376e:	e024      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    FlagStatus       pwrclkchanged = RESET;
 8003770:	f04f 0800 	mov.w	r8, #0
 8003774:	e7b8      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        tickstart = HAL_GetTick();
 8003776:	f7fd fcb7 	bl	80010e8 <HAL_GetTick>
 800377a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f013 0f02 	tst.w	r3, #2
 8003786:	d1e8      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fd fcae 	bl	80010e8 <HAL_GetTick>
 800378c:	1b40      	subs	r0, r0, r5
 800378e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003792:	4298      	cmp	r0, r3
 8003794:	d9f2      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	f013 0f02 	tst.w	r3, #2
 80037a0:	d1db      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x18a>
              ret = HAL_TIMEOUT;
 80037a2:	2703      	movs	r7, #3
 80037a4:	463e      	mov	r6, r7
 80037a6:	e008      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
          ret = HAL_TIMEOUT;
 80037a8:	2703      	movs	r7, #3
 80037aa:	463e      	mov	r6, r7
 80037ac:	e005      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40007000 	.word	0x40007000
 80037b8:	4637      	mov	r7, r6
    if (pwrclkchanged == SET)
 80037ba:	f1b8 0f00 	cmp.w	r8, #0
 80037be:	f040 8151 	bne.w	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	f013 0f01 	tst.w	r3, #1
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ca:	4ab8      	ldr	r2, [pc, #736]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80037cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037d0:	f023 0303 	bic.w	r3, r3, #3
 80037d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d6:	430b      	orrs	r3, r1
 80037d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f013 0f02 	tst.w	r3, #2
 80037e2:	d008      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e4:	4ab1      	ldr	r2, [pc, #708]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80037e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037ea:	f023 030c 	bic.w	r3, r3, #12
 80037ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80037f0:	430b      	orrs	r3, r1
 80037f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	f013 0f04 	tst.w	r3, #4
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x240>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037fe:	4aab      	ldr	r2, [pc, #684]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003800:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003804:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003808:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800380a:	430b      	orrs	r3, r1
 800380c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	f013 0f08 	tst.w	r3, #8
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003818:	4aa4      	ldr	r2, [pc, #656]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800381a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800381e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003822:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003824:	430b      	orrs	r3, r1
 8003826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	f013 0f10 	tst.w	r3, #16
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x274>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003832:	4a9e      	ldr	r2, [pc, #632]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003834:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800383e:	430b      	orrs	r3, r1
 8003840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	f013 0f20 	tst.w	r3, #32
 800384a:	d008      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384c:	4a97      	ldr	r2, [pc, #604]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800384e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003852:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003856:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003858:	430b      	orrs	r3, r1
 800385a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003866:	4a91      	ldr	r2, [pc, #580]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003868:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800386c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003870:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003872:	430b      	orrs	r3, r1
 8003874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800387e:	d008      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003880:	4a8a      	ldr	r2, [pc, #552]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003882:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003886:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800388a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800388c:	430b      	orrs	r3, r1
 800388e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003898:	d008      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800389a:	4a84      	ldr	r2, [pc, #528]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800389c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80038a6:	430b      	orrs	r3, r1
 80038a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038b2:	d00c      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    switch (PeriphClkInit->FdcanClockSelection)
 80038b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80038b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ba:	f000 80d9 	beq.w	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80038be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c2:	f000 80e5 	beq.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80d7 	beq.w	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80038cc:	2701      	movs	r7, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038d4:	d008      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d6:	4a75      	ldr	r2, [pc, #468]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80038d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80038e2:	430b      	orrs	r3, r1
 80038e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x332>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f0:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80038f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80038fc:	430b      	orrs	r3, r1
 80038fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003908:	d008      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800390a:	4a68      	ldr	r2, [pc, #416]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800390c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003910:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003914:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003916:	430b      	orrs	r3, r1
 8003918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003922:	d008      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x366>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003924:	4a61      	ldr	r2, [pc, #388]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003926:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003930:	430b      	orrs	r3, r1
 8003932:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800393c:	d011      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x392>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800393e:	4a5b      	ldr	r2, [pc, #364]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003940:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003944:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003948:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800394a:	430b      	orrs	r3, r1
 800394c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003950:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003956:	f000 80a3 	beq.w	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800395a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800395e:	f000 80a7 	beq.w	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003968:	d01f      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800396a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800396c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003970:	f000 80a7 	beq.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003974:	4a4d      	ldr	r2, [pc, #308]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003976:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800397a:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800397e:	430b      	orrs	r3, r1
 8003980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003984:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800398c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003990:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003996:	f000 809c 	beq.w	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800399a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800399e:	f000 80a1 	beq.w	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80039a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a6:	f000 80a3 	beq.w	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x520>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80039b0:	d011      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039b2:	4a3e      	ldr	r2, [pc, #248]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80039b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039b8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80039bc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80039be:	430b      	orrs	r3, r1
 80039c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039c4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80039c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ca:	f000 8097 	beq.w	8003afc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039d2:	f000 8098 	beq.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x536>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80039dc:	d00f      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039de:	4a33      	ldr	r2, [pc, #204]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80039e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039e4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80039e8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80039ec:	430b      	orrs	r3, r1
 80039ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039f2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fa:	f000 808d 	beq.w	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x548>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a04:	d009      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003a08:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003a0c:	f023 0304 	bic.w	r3, r3, #4
 8003a10:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003a14:	430b      	orrs	r3, r1
 8003a16:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003a20:	d009      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x466>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a22:	4a22      	ldr	r2, [pc, #136]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003a24:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003a28:	f023 0318 	bic.w	r3, r3, #24
 8003a2c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003a30:	430b      	orrs	r3, r1
 8003a32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003a3c:	d00e      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003a40:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003a44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a48:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003a52:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003a56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a5a:	d066      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x55a>
}
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4a11      	ldr	r2, [pc, #68]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003a66:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6e:	e6a8      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a70:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003a72:	68d3      	ldr	r3, [r2, #12]
 8003a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a78:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8003a7a:	b97e      	cbnz	r6, 8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003a7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a82:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003a86:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003a8e:	e71e      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a90:	2100      	movs	r1, #0
 8003a92:	1d20      	adds	r0, r4, #4
 8003a94:	f7ff fcfc 	bl	8003490 <RCCEx_PLLSAI1_Config>
 8003a98:	4606      	mov	r6, r0
        break;
 8003a9a:	e7ee      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003a9c:	4637      	mov	r7, r6
 8003a9e:	e716      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa0:	68d3      	ldr	r3, [r2, #12]
 8003aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa6:	60d3      	str	r3, [r2, #12]
 8003aa8:	e75b      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	1d20      	adds	r0, r4, #4
 8003ab4:	f7ff fcec 	bl	8003490 <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	f43f af52 	beq.w	8003962 <HAL_RCCEx_PeriphCLKConfig+0x392>
          status = ret;
 8003abe:	4607      	mov	r7, r0
 8003ac0:	e74f      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x392>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003ac4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003acc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003ad0:	e75e      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	1d20      	adds	r0, r4, #4
 8003ad6:	f7ff fcdb 	bl	8003490 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8003ada:	2800      	cmp	r0, #0
 8003adc:	f43f af65 	beq.w	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
        status = ret;
 8003ae0:	4607      	mov	r7, r0
 8003ae2:	e762      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae4:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003ae6:	68d3      	ldr	r3, [r2, #12]
 8003ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aec:	60d3      	str	r3, [r2, #12]
 8003aee:	e75c      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003af0:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003af2:	68d3      	ldr	r3, [r2, #12]
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	60d3      	str	r3, [r2, #12]
 8003afa:	e756      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003afc:	68d3      	ldr	r3, [r2, #12]
 8003afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b02:	60d3      	str	r3, [r2, #12]
 8003b04:	e767      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b06:	2101      	movs	r1, #1
 8003b08:	1d20      	adds	r0, r4, #4
 8003b0a:	f7ff fcc1 	bl	8003490 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	f43f af61 	beq.w	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
        status = ret;
 8003b14:	4607      	mov	r7, r0
 8003b16:	e75e      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b18:	2102      	movs	r1, #2
 8003b1a:	1d20      	adds	r0, r4, #4
 8003b1c:	f7ff fcb8 	bl	8003490 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f43f af6c 	beq.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
        status = ret;
 8003b26:	4607      	mov	r7, r0
 8003b28:	e769      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2a:	68d3      	ldr	r3, [r2, #12]
 8003b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b30:	60d3      	str	r3, [r2, #12]
 8003b32:	e793      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d06a      	beq.n	8003c12 <HAL_SPI_Init+0xda>
{
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b42:	b933      	cbnz	r3, 8003b52 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b44:	6843      	ldr	r3, [r0, #4]
 8003b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4a:	d005      	beq.n	8003b58 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61c3      	str	r3, [r0, #28]
 8003b50:	e002      	b.n	8003b58 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b52:	2300      	movs	r3, #0
 8003b54:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b56:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d04d      	beq.n	8003c00 <HAL_SPI_Init+0xc8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b64:	2302      	movs	r3, #2
 8003b66:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	6813      	ldr	r3, [r2, #0]
 8003b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b72:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b74:	68e3      	ldr	r3, [r4, #12]
 8003b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b7a:	d947      	bls.n	8003c0c <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b7c:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b82:	d004      	beq.n	8003b8e <HAL_SPI_Init+0x56>
 8003b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b88:	d001      	beq.n	8003b8e <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003b94:	68a1      	ldr	r1, [r4, #8]
 8003b96:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6921      	ldr	r1, [r4, #16]
 8003b9e:	f001 0102 	and.w	r1, r1, #2
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	6961      	ldr	r1, [r4, #20]
 8003ba6:	f001 0101 	and.w	r1, r1, #1
 8003baa:	430b      	orrs	r3, r1
 8003bac:	69a1      	ldr	r1, [r4, #24]
 8003bae:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	69e1      	ldr	r1, [r4, #28]
 8003bb6:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6a21      	ldr	r1, [r4, #32]
 8003bbe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003bc6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bd0:	8b63      	ldrh	r3, [r4, #26]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003bd8:	f001 0110 	and.w	r1, r1, #16
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003be0:	f001 0108 	and.w	r1, r1, #8
 8003be4:	430b      	orrs	r3, r1
 8003be6:	68e1      	ldr	r1, [r4, #12]
 8003be8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6821      	ldr	r1, [r4, #0]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	604a      	str	r2, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8003bfe:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003c00:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003c04:	4620      	mov	r0, r4
 8003c06:	f7fd f8cd 	bl	8000da4 <HAL_SPI_MspInit>
 8003c0a:	e7ab      	b.n	8003b64 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c10:	e7b5      	b.n	8003b7e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003c12:	2001      	movs	r0, #1
}
 8003c14:	4770      	bx	lr
	...

08003c18 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c18:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1a:	4a30      	ldr	r2, [pc, #192]	; (8003cdc <TIM_Base_SetConfig+0xc4>)
 8003c1c:	4290      	cmp	r0, r2
 8003c1e:	d012      	beq.n	8003c46 <TIM_Base_SetConfig+0x2e>
 8003c20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0x2e>
 8003c26:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003c2a:	4290      	cmp	r0, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0x2e>
 8003c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c32:	4290      	cmp	r0, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0x2e>
 8003c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c3a:	4290      	cmp	r0, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0x2e>
 8003c3e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003c42:	4290      	cmp	r0, r2
 8003c44:	d103      	bne.n	8003c4e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c4a:	684a      	ldr	r2, [r1, #4]
 8003c4c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4e:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <TIM_Base_SetConfig+0xc4>)
 8003c50:	4290      	cmp	r0, r2
 8003c52:	d01e      	beq.n	8003c92 <TIM_Base_SetConfig+0x7a>
 8003c54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c58:	d01b      	beq.n	8003c92 <TIM_Base_SetConfig+0x7a>
 8003c5a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003c5e:	4290      	cmp	r0, r2
 8003c60:	d017      	beq.n	8003c92 <TIM_Base_SetConfig+0x7a>
 8003c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c66:	4290      	cmp	r0, r2
 8003c68:	d013      	beq.n	8003c92 <TIM_Base_SetConfig+0x7a>
 8003c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c6e:	4290      	cmp	r0, r2
 8003c70:	d00f      	beq.n	8003c92 <TIM_Base_SetConfig+0x7a>
 8003c72:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003c76:	4290      	cmp	r0, r2
 8003c78:	d00b      	beq.n	8003c92 <TIM_Base_SetConfig+0x7a>
 8003c7a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003c7e:	4290      	cmp	r0, r2
 8003c80:	d007      	beq.n	8003c92 <TIM_Base_SetConfig+0x7a>
 8003c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c86:	4290      	cmp	r0, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_Base_SetConfig+0x7a>
 8003c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c8e:	4290      	cmp	r0, r2
 8003c90:	d103      	bne.n	8003c9a <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c96:	68ca      	ldr	r2, [r1, #12]
 8003c98:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9e:	694a      	ldr	r2, [r1, #20]
 8003ca0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003ca2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	688b      	ldr	r3, [r1, #8]
 8003ca6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca8:	680b      	ldr	r3, [r1, #0]
 8003caa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <TIM_Base_SetConfig+0xc4>)
 8003cae:	4298      	cmp	r0, r3
 8003cb0:	d00f      	beq.n	8003cd2 <TIM_Base_SetConfig+0xba>
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb6:	4298      	cmp	r0, r3
 8003cb8:	d00b      	beq.n	8003cd2 <TIM_Base_SetConfig+0xba>
 8003cba:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003cbe:	4298      	cmp	r0, r3
 8003cc0:	d007      	beq.n	8003cd2 <TIM_Base_SetConfig+0xba>
 8003cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cc6:	4298      	cmp	r0, r3
 8003cc8:	d003      	beq.n	8003cd2 <TIM_Base_SetConfig+0xba>
 8003cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cce:	4298      	cmp	r0, r3
 8003cd0:	d101      	bne.n	8003cd6 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd2:	690b      	ldr	r3, [r1, #16]
 8003cd4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	6143      	str	r3, [r0, #20]
}
 8003cda:	4770      	bx	lr
 8003cdc:	40012c00 	.word	0x40012c00

08003ce0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d053      	beq.n	8003d8c <HAL_TIM_Encoder_Init+0xac>
{
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	460d      	mov	r5, r1
 8003ce8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d047      	beq.n	8003d82 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	6893      	ldr	r3, [r2, #8]
 8003cfc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003d00:	f023 0307 	bic.w	r3, r3, #7
 8003d04:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d06:	4621      	mov	r1, r4
 8003d08:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d0c:	f7ff ff84 	bl	8003c18 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003d10:	6821      	ldr	r1, [r4, #0]
 8003d12:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003d14:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8003d16:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003d18:	6828      	ldr	r0, [r5, #0]
 8003d1a:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d20:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d24:	68ab      	ldr	r3, [r5, #8]
 8003d26:	69af      	ldr	r7, [r5, #24]
 8003d28:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8003d2c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d2e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8003d32:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d36:	68ea      	ldr	r2, [r5, #12]
 8003d38:	69ef      	ldr	r7, [r5, #28]
 8003d3a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8003d3e:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d40:	6a2b      	ldr	r3, [r5, #32]
 8003d42:	031b      	lsls	r3, r3, #12
 8003d44:	692f      	ldr	r7, [r5, #16]
 8003d46:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8003d4a:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d4c:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d50:	686a      	ldr	r2, [r5, #4]
 8003d52:	696d      	ldr	r5, [r5, #20]
 8003d54:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003d58:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8003d5a:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003d5c:	6821      	ldr	r1, [r4, #0]
 8003d5e:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003d7e:	2000      	movs	r0, #0
}
 8003d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003d86:	f7fd f83f 	bl	8000e08 <HAL_TIM_Encoder_MspInit>
 8003d8a:	e7b2      	b.n	8003cf2 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8003d8c:	2001      	movs	r0, #1
}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d90:	f001 011f 	and.w	r1, r1, #31
 8003d94:	f04f 0c01 	mov.w	ip, #1
 8003d98:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d9c:	6a03      	ldr	r3, [r0, #32]
 8003d9e:	ea23 030c 	bic.w	r3, r3, ip
 8003da2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003da4:	6a03      	ldr	r3, [r0, #32]
 8003da6:	408a      	lsls	r2, r1
 8003da8:	4313      	orrs	r3, r2
 8003daa:	6203      	str	r3, [r0, #32]
}
 8003dac:	4770      	bx	lr

08003dae <HAL_TIM_Encoder_Start_IT>:
{
 8003dae:	b538      	push	{r3, r4, r5, lr}
 8003db0:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003db2:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8003db6:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003db8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003dbc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8003dc0:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dc2:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
  if (Channel == TIM_CHANNEL_1)
 8003dc6:	460d      	mov	r5, r1
 8003dc8:	bb09      	cbnz	r1, 8003e0e <HAL_TIM_Encoder_Start_IT+0x60>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dca:	2801      	cmp	r0, #1
 8003dcc:	d15e      	bne.n	8003e8c <HAL_TIM_Encoder_Start_IT+0xde>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dce:	2a01      	cmp	r2, #1
 8003dd0:	d15d      	bne.n	8003e8e <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  switch (Channel)
 8003ddc:	2d00      	cmp	r5, #0
 8003dde:	d039      	beq.n	8003e54 <HAL_TIM_Encoder_Start_IT+0xa6>
 8003de0:	2d04      	cmp	r5, #4
 8003de2:	d048      	beq.n	8003e76 <HAL_TIM_Encoder_Start_IT+0xc8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003de4:	2201      	movs	r2, #1
 8003de6:	2100      	movs	r1, #0
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	f7ff ffd1 	bl	8003d90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dee:	2201      	movs	r2, #1
 8003df0:	2104      	movs	r1, #4
 8003df2:	6820      	ldr	r0, [r4, #0]
 8003df4:	f7ff ffcc 	bl	8003d90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003df8:	6822      	ldr	r2, [r4, #0]
 8003dfa:	68d3      	ldr	r3, [r2, #12]
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	68d3      	ldr	r3, [r2, #12]
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	60d3      	str	r3, [r2, #12]
      break;
 8003e0c:	e02c      	b.n	8003e68 <HAL_TIM_Encoder_Start_IT+0xba>
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 8003e14:	2904      	cmp	r1, #4
 8003e16:	d012      	beq.n	8003e3e <HAL_TIM_Encoder_Start_IT+0x90>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e18:	2801      	cmp	r0, #1
 8003e1a:	d13d      	bne.n	8003e98 <HAL_TIM_Encoder_Start_IT+0xea>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d136      	bne.n	8003e8e <HAL_TIM_Encoder_Start_IT+0xe0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e20:	2a01      	cmp	r2, #1
 8003e22:	d13b      	bne.n	8003e9c <HAL_TIM_Encoder_Start_IT+0xee>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e24:	f1bc 0f01 	cmp.w	ip, #1
 8003e28:	d13a      	bne.n	8003ea0 <HAL_TIM_Encoder_Start_IT+0xf2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e30:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e3c:	e7ce      	b.n	8003ddc <HAL_TIM_Encoder_Start_IT+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d126      	bne.n	8003e90 <HAL_TIM_Encoder_Start_IT+0xe2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e42:	f1bc 0f01 	cmp.w	ip, #1
 8003e46:	d125      	bne.n	8003e94 <HAL_TIM_Encoder_Start_IT+0xe6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e52:	e7c3      	b.n	8003ddc <HAL_TIM_Encoder_Start_IT+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e54:	2201      	movs	r2, #1
 8003e56:	2100      	movs	r1, #0
 8003e58:	6820      	ldr	r0, [r4, #0]
 8003e5a:	f7ff ff99 	bl	8003d90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	68d3      	ldr	r3, [r2, #12]
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8003e68:	6822      	ldr	r2, [r4, #0]
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003e72:	2000      	movs	r0, #0
 8003e74:	e00b      	b.n	8003e8e <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e76:	2201      	movs	r2, #1
 8003e78:	2104      	movs	r1, #4
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	f7ff ff88 	bl	8003d90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	68d3      	ldr	r3, [r2, #12]
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	60d3      	str	r3, [r2, #12]
      break;
 8003e8a:	e7ed      	b.n	8003e68 <HAL_TIM_Encoder_Start_IT+0xba>
      return HAL_ERROR;
 8003e8c:	2001      	movs	r0, #1
}
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003e90:	2001      	movs	r0, #1
 8003e92:	e7fc      	b.n	8003e8e <HAL_TIM_Encoder_Start_IT+0xe0>
 8003e94:	4618      	mov	r0, r3
 8003e96:	e7fa      	b.n	8003e8e <HAL_TIM_Encoder_Start_IT+0xe0>
      return HAL_ERROR;
 8003e98:	2001      	movs	r0, #1
 8003e9a:	e7f8      	b.n	8003e8e <HAL_TIM_Encoder_Start_IT+0xe0>
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	e7f6      	b.n	8003e8e <HAL_TIM_Encoder_Start_IT+0xe0>
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	e7f4      	b.n	8003e8e <HAL_TIM_Encoder_Start_IT+0xe0>

08003ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003ea8:	2a01      	cmp	r2, #1
 8003eaa:	d042      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8003eac:	b430      	push	{r4, r5}
 8003eae:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ebc:	6800      	ldr	r0, [r0, #0]
 8003ebe:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ec2:	4d1d      	ldr	r5, [pc, #116]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8003ec4:	42a8      	cmp	r0, r5
 8003ec6:	d003      	beq.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8003ec8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ecc:	42a8      	cmp	r0, r5
 8003ece:	d103      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ed0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ed4:	684d      	ldr	r5, [r1, #4]
 8003ed6:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003edc:	680d      	ldr	r5, [r1, #0]
 8003ede:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee0:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4814      	ldr	r0, [pc, #80]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8003ee6:	4282      	cmp	r2, r0
 8003ee8:	d016      	beq.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003eea:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003eee:	d013      	beq.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003ef0:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8003ef4:	4282      	cmp	r2, r0
 8003ef6:	d00f      	beq.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003ef8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003efc:	4282      	cmp	r2, r0
 8003efe:	d00b      	beq.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003f00:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003f04:	4282      	cmp	r2, r0
 8003f06:	d007      	beq.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003f08:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 8003f0c:	4282      	cmp	r2, r0
 8003f0e:	d003      	beq.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003f10:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8003f14:	4282      	cmp	r2, r0
 8003f16:	d104      	bne.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f18:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1c:	6889      	ldr	r1, [r1, #8]
 8003f1e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f20:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8003f2e:	bc30      	pop	{r4, r5}
 8003f30:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f32:	2002      	movs	r0, #2
}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00

08003f3c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f3c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	e852 3f00 	ldrex	r3, [r2]
 8003f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	e842 3100 	strex	r1, r3, [r2]
 8003f4a:	2900      	cmp	r1, #0
 8003f4c:	d1f6      	bne.n	8003f3c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	f102 0308 	add.w	r3, r2, #8
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	3208      	adds	r2, #8
 8003f62:	e842 3100 	strex	r1, r3, [r2]
 8003f66:	2900      	cmp	r1, #0
 8003f68:	d1f1      	bne.n	8003f4e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d006      	beq.n	8003f7e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f70:	2320      	movs	r3, #32
 8003f72:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	2300      	movs	r3, #0
 8003f78:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f7a:	6743      	str	r3, [r0, #116]	; 0x74
}
 8003f7c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	e852 3f00 	ldrex	r3, [r2]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	e842 3100 	strex	r1, r3, [r2]
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	d1f6      	bne.n	8003f7e <UART_EndRxTransfer+0x42>
 8003f90:	e7ee      	b.n	8003f70 <UART_EndRxTransfer+0x34>
	...

08003f94 <UART_SetConfig>:
{
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f98:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f9a:	6883      	ldr	r3, [r0, #8]
 8003f9c:	6902      	ldr	r2, [r0, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	6942      	ldr	r2, [r0, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	69c2      	ldr	r2, [r0, #28]
 8003fa6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa8:	6808      	ldr	r0, [r1, #0]
 8003faa:	4a97      	ldr	r2, [pc, #604]	; (8004208 <UART_SetConfig+0x274>)
 8003fac:	4002      	ands	r2, r0
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	6853      	ldr	r3, [r2, #4]
 8003fb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fba:	68e1      	ldr	r1, [r4, #12]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fc0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	4b91      	ldr	r3, [pc, #580]	; (800420c <UART_SetConfig+0x278>)
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8003fca:	6a23      	ldr	r3, [r4, #32]
 8003fcc:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fce:	6893      	ldr	r3, [r2, #8]
 8003fd0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fd4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fe0:	f023 030f 	bic.w	r3, r3, #15
 8003fe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	4a88      	ldr	r2, [pc, #544]	; (8004210 <UART_SetConfig+0x27c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d010      	beq.n	8004014 <UART_SetConfig+0x80>
 8003ff2:	4a88      	ldr	r2, [pc, #544]	; (8004214 <UART_SetConfig+0x280>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d021      	beq.n	800403c <UART_SetConfig+0xa8>
 8003ff8:	4a87      	ldr	r2, [pc, #540]	; (8004218 <UART_SetConfig+0x284>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d037      	beq.n	800406e <UART_SetConfig+0xda>
 8003ffe:	4a87      	ldr	r2, [pc, #540]	; (800421c <UART_SetConfig+0x288>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d05c      	beq.n	80040be <UART_SetConfig+0x12a>
 8004004:	4a86      	ldr	r2, [pc, #536]	; (8004220 <UART_SetConfig+0x28c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d06b      	beq.n	80040e2 <UART_SetConfig+0x14e>
 800400a:	4a80      	ldr	r2, [pc, #512]	; (800420c <UART_SetConfig+0x278>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d07d      	beq.n	800410c <UART_SetConfig+0x178>
 8004010:	2210      	movs	r2, #16
 8004012:	e03a      	b.n	800408a <UART_SetConfig+0xf6>
 8004014:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8004018:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800401c:	f002 0203 	and.w	r2, r2, #3
 8004020:	2a03      	cmp	r2, #3
 8004022:	d809      	bhi.n	8004038 <UART_SetConfig+0xa4>
 8004024:	e8df f002 	tbb	[pc, r2]
 8004028:	06870402 	.word	0x06870402
 800402c:	2201      	movs	r2, #1
 800402e:	e02c      	b.n	800408a <UART_SetConfig+0xf6>
 8004030:	2204      	movs	r2, #4
 8004032:	e02a      	b.n	800408a <UART_SetConfig+0xf6>
 8004034:	2208      	movs	r2, #8
 8004036:	e028      	b.n	800408a <UART_SetConfig+0xf6>
 8004038:	2210      	movs	r2, #16
 800403a:	e026      	b.n	800408a <UART_SetConfig+0xf6>
 800403c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8004040:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004044:	f002 020c 	and.w	r2, r2, #12
 8004048:	2a0c      	cmp	r2, #12
 800404a:	d80e      	bhi.n	800406a <UART_SetConfig+0xd6>
 800404c:	e8df f002 	tbb	[pc, r2]
 8004050:	0d0d0d07 	.word	0x0d0d0d07
 8004054:	0d0d0d09 	.word	0x0d0d0d09
 8004058:	0d0d0d75 	.word	0x0d0d0d75
 800405c:	0b          	.byte	0x0b
 800405d:	00          	.byte	0x00
 800405e:	2200      	movs	r2, #0
 8004060:	e013      	b.n	800408a <UART_SetConfig+0xf6>
 8004062:	2204      	movs	r2, #4
 8004064:	e011      	b.n	800408a <UART_SetConfig+0xf6>
 8004066:	2208      	movs	r2, #8
 8004068:	e00f      	b.n	800408a <UART_SetConfig+0xf6>
 800406a:	2210      	movs	r2, #16
 800406c:	e00d      	b.n	800408a <UART_SetConfig+0xf6>
 800406e:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8004072:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004076:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800407a:	2a20      	cmp	r2, #32
 800407c:	d05f      	beq.n	800413e <UART_SetConfig+0x1aa>
 800407e:	d81a      	bhi.n	80040b6 <UART_SetConfig+0x122>
 8004080:	2a00      	cmp	r2, #0
 8004082:	d05e      	beq.n	8004142 <UART_SetConfig+0x1ae>
 8004084:	2a10      	cmp	r2, #16
 8004086:	d15e      	bne.n	8004146 <UART_SetConfig+0x1b2>
 8004088:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 800408a:	4960      	ldr	r1, [pc, #384]	; (800420c <UART_SetConfig+0x278>)
 800408c:	428b      	cmp	r3, r1
 800408e:	d076      	beq.n	800417e <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004090:	69e0      	ldr	r0, [r4, #28]
 8004092:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004096:	f000 80cb 	beq.w	8004230 <UART_SetConfig+0x29c>
    switch (clocksource)
 800409a:	2a08      	cmp	r2, #8
 800409c:	f200 8136 	bhi.w	800430c <UART_SetConfig+0x378>
 80040a0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80040a4:	011b00f9 	.word	0x011b00f9
 80040a8:	013400f7 	.word	0x013400f7
 80040ac:	0134011e 	.word	0x0134011e
 80040b0:	01340134 	.word	0x01340134
 80040b4:	0121      	.short	0x0121
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040b6:	2a30      	cmp	r2, #48	; 0x30
 80040b8:	d147      	bne.n	800414a <UART_SetConfig+0x1b6>
 80040ba:	2208      	movs	r2, #8
 80040bc:	e7e5      	b.n	800408a <UART_SetConfig+0xf6>
 80040be:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80040c2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80040c6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80040ca:	2a80      	cmp	r2, #128	; 0x80
 80040cc:	d03f      	beq.n	800414e <UART_SetConfig+0x1ba>
 80040ce:	d804      	bhi.n	80040da <UART_SetConfig+0x146>
 80040d0:	b3fa      	cbz	r2, 8004152 <UART_SetConfig+0x1be>
 80040d2:	2a40      	cmp	r2, #64	; 0x40
 80040d4:	d13f      	bne.n	8004156 <UART_SetConfig+0x1c2>
 80040d6:	2204      	movs	r2, #4
 80040d8:	e7d7      	b.n	800408a <UART_SetConfig+0xf6>
 80040da:	2ac0      	cmp	r2, #192	; 0xc0
 80040dc:	d13d      	bne.n	800415a <UART_SetConfig+0x1c6>
 80040de:	2208      	movs	r2, #8
 80040e0:	e7d3      	b.n	800408a <UART_SetConfig+0xf6>
 80040e2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80040e6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80040ea:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80040ee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80040f2:	d034      	beq.n	800415e <UART_SetConfig+0x1ca>
 80040f4:	d805      	bhi.n	8004102 <UART_SetConfig+0x16e>
 80040f6:	b3a2      	cbz	r2, 8004162 <UART_SetConfig+0x1ce>
 80040f8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80040fc:	d133      	bne.n	8004166 <UART_SetConfig+0x1d2>
 80040fe:	2204      	movs	r2, #4
 8004100:	e7c3      	b.n	800408a <UART_SetConfig+0xf6>
 8004102:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004106:	d130      	bne.n	800416a <UART_SetConfig+0x1d6>
 8004108:	2208      	movs	r2, #8
 800410a:	e7be      	b.n	800408a <UART_SetConfig+0xf6>
 800410c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8004110:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004114:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004118:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800411c:	d027      	beq.n	800416e <UART_SetConfig+0x1da>
 800411e:	d805      	bhi.n	800412c <UART_SetConfig+0x198>
 8004120:	b33a      	cbz	r2, 8004172 <UART_SetConfig+0x1de>
 8004122:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004126:	d126      	bne.n	8004176 <UART_SetConfig+0x1e2>
 8004128:	2204      	movs	r2, #4
 800412a:	e7ae      	b.n	800408a <UART_SetConfig+0xf6>
 800412c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004130:	d123      	bne.n	800417a <UART_SetConfig+0x1e6>
 8004132:	2208      	movs	r2, #8
 8004134:	e7a9      	b.n	800408a <UART_SetConfig+0xf6>
 8004136:	2202      	movs	r2, #2
 8004138:	e7a7      	b.n	800408a <UART_SetConfig+0xf6>
 800413a:	2202      	movs	r2, #2
 800413c:	e7a5      	b.n	800408a <UART_SetConfig+0xf6>
 800413e:	2202      	movs	r2, #2
 8004140:	e7a3      	b.n	800408a <UART_SetConfig+0xf6>
 8004142:	2200      	movs	r2, #0
 8004144:	e7a1      	b.n	800408a <UART_SetConfig+0xf6>
 8004146:	2210      	movs	r2, #16
 8004148:	e79f      	b.n	800408a <UART_SetConfig+0xf6>
 800414a:	2210      	movs	r2, #16
 800414c:	e79d      	b.n	800408a <UART_SetConfig+0xf6>
 800414e:	2202      	movs	r2, #2
 8004150:	e79b      	b.n	800408a <UART_SetConfig+0xf6>
 8004152:	2200      	movs	r2, #0
 8004154:	e799      	b.n	800408a <UART_SetConfig+0xf6>
 8004156:	2210      	movs	r2, #16
 8004158:	e797      	b.n	800408a <UART_SetConfig+0xf6>
 800415a:	2210      	movs	r2, #16
 800415c:	e795      	b.n	800408a <UART_SetConfig+0xf6>
 800415e:	2202      	movs	r2, #2
 8004160:	e793      	b.n	800408a <UART_SetConfig+0xf6>
 8004162:	2200      	movs	r2, #0
 8004164:	e791      	b.n	800408a <UART_SetConfig+0xf6>
 8004166:	2210      	movs	r2, #16
 8004168:	e78f      	b.n	800408a <UART_SetConfig+0xf6>
 800416a:	2210      	movs	r2, #16
 800416c:	e78d      	b.n	800408a <UART_SetConfig+0xf6>
 800416e:	2202      	movs	r2, #2
 8004170:	e78b      	b.n	800408a <UART_SetConfig+0xf6>
 8004172:	2200      	movs	r2, #0
 8004174:	e789      	b.n	800408a <UART_SetConfig+0xf6>
 8004176:	2210      	movs	r2, #16
 8004178:	e787      	b.n	800408a <UART_SetConfig+0xf6>
 800417a:	2210      	movs	r2, #16
 800417c:	e785      	b.n	800408a <UART_SetConfig+0xf6>
    switch (clocksource)
 800417e:	2a08      	cmp	r2, #8
 8004180:	f200 80b4 	bhi.w	80042ec <UART_SetConfig+0x358>
 8004184:	e8df f002 	tbb	[pc, r2]
 8004188:	b23e3808 	.word	0xb23e3808
 800418c:	b2b2b23b 	.word	0xb2b2b23b
 8004190:	05          	.byte	0x05
 8004191:	00          	.byte	0x00
 8004192:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004196:	e004      	b.n	80041a2 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004198:	f7ff f8ea 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800419c:	2800      	cmp	r0, #0
 800419e:	f000 80a7 	beq.w	80042f0 <UART_SetConfig+0x35c>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041a4:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <UART_SetConfig+0x290>)
 80041a6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80041aa:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041ae:	6865      	ldr	r5, [r4, #4]
 80041b0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80041b4:	4299      	cmp	r1, r3
 80041b6:	f200 809d 	bhi.w	80042f4 <UART_SetConfig+0x360>
 80041ba:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80041be:	f200 809b 	bhi.w	80042f8 <UART_SetConfig+0x364>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041c2:	2600      	movs	r6, #0
 80041c4:	4633      	mov	r3, r6
 80041c6:	4631      	mov	r1, r6
 80041c8:	f7fc f834 	bl	8000234 <__aeabi_uldivmod>
 80041cc:	0209      	lsls	r1, r1, #8
 80041ce:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80041d2:	0200      	lsls	r0, r0, #8
 80041d4:	086b      	lsrs	r3, r5, #1
 80041d6:	18c0      	adds	r0, r0, r3
 80041d8:	462a      	mov	r2, r5
 80041da:	4633      	mov	r3, r6
 80041dc:	f141 0100 	adc.w	r1, r1, #0
 80041e0:	f7fc f828 	bl	8000234 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041e4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <UART_SetConfig+0x294>)
 80041ea:	429a      	cmp	r2, r3
 80041ec:	f200 8086 	bhi.w	80042fc <UART_SetConfig+0x368>
          huart->Instance->BRR = usartdiv;
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	60d8      	str	r0, [r3, #12]
 80041f4:	4630      	mov	r0, r6
 80041f6:	e067      	b.n	80042c8 <UART_SetConfig+0x334>
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7ff f8ca 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
        break;
 80041fc:	e7ce      	b.n	800419c <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetSysClockFreq();
 80041fe:	f7fe fb65 	bl	80028cc <HAL_RCC_GetSysClockFreq>
        break;
 8004202:	e7cb      	b.n	800419c <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8004204:	4809      	ldr	r0, [pc, #36]	; (800422c <UART_SetConfig+0x298>)
 8004206:	e7cc      	b.n	80041a2 <UART_SetConfig+0x20e>
 8004208:	cfff69f3 	.word	0xcfff69f3
 800420c:	40008000 	.word	0x40008000
 8004210:	40013800 	.word	0x40013800
 8004214:	40004400 	.word	0x40004400
 8004218:	40004800 	.word	0x40004800
 800421c:	40004c00 	.word	0x40004c00
 8004220:	40005000 	.word	0x40005000
 8004224:	080047b8 	.word	0x080047b8
 8004228:	000ffcff 	.word	0x000ffcff
 800422c:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8004230:	2a08      	cmp	r2, #8
 8004232:	d865      	bhi.n	8004300 <UART_SetConfig+0x36c>
 8004234:	e8df f002 	tbb	[pc, r2]
 8004238:	64052707 	.word	0x64052707
 800423c:	6464642a 	.word	0x6464642a
 8004240:	0b          	.byte	0x0b
 8004241:	00          	.byte	0x00
 8004242:	4835      	ldr	r0, [pc, #212]	; (8004318 <UART_SetConfig+0x384>)
 8004244:	e003      	b.n	800424e <UART_SetConfig+0x2ba>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004246:	f7ff f893 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800424a:	2800      	cmp	r0, #0
 800424c:	d05a      	beq.n	8004304 <UART_SetConfig+0x370>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004250:	4b32      	ldr	r3, [pc, #200]	; (800431c <UART_SetConfig+0x388>)
 8004252:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004256:	fbb0 f0f3 	udiv	r0, r0, r3
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	0853      	lsrs	r3, r2, #1
 800425e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004262:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004266:	f1a3 0110 	sub.w	r1, r3, #16
 800426a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800426e:	4291      	cmp	r1, r2
 8004270:	d84a      	bhi.n	8004308 <UART_SetConfig+0x374>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004272:	b29a      	uxth	r2, r3
 8004274:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004278:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800427c:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	60d3      	str	r3, [r2, #12]
 8004282:	2000      	movs	r0, #0
 8004284:	e020      	b.n	80042c8 <UART_SetConfig+0x334>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004286:	f7ff f883 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
        break;
 800428a:	e7de      	b.n	800424a <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetSysClockFreq();
 800428c:	f7fe fb1e 	bl	80028cc <HAL_RCC_GetSysClockFreq>
        break;
 8004290:	e7db      	b.n	800424a <UART_SetConfig+0x2b6>
    switch (clocksource)
 8004292:	4821      	ldr	r0, [pc, #132]	; (8004318 <UART_SetConfig+0x384>)
 8004294:	e003      	b.n	800429e <UART_SetConfig+0x30a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004296:	f7ff f86b 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800429a:	2800      	cmp	r0, #0
 800429c:	d038      	beq.n	8004310 <UART_SetConfig+0x37c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800429e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042a0:	4b1e      	ldr	r3, [pc, #120]	; (800431c <UART_SetConfig+0x388>)
 80042a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80042a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80042aa:	6863      	ldr	r3, [r4, #4]
 80042ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80042b0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b4:	f1a0 0210 	sub.w	r2, r0, #16
 80042b8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80042bc:	429a      	cmp	r2, r3
 80042be:	d829      	bhi.n	8004314 <UART_SetConfig+0x380>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	b280      	uxth	r0, r0
 80042c4:	60d8      	str	r0, [r3, #12]
 80042c6:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042ce:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80042d6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80042da:	f7ff f859 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
        break;
 80042de:	e7dc      	b.n	800429a <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetSysClockFreq();
 80042e0:	f7fe faf4 	bl	80028cc <HAL_RCC_GetSysClockFreq>
        break;
 80042e4:	e7d9      	b.n	800429a <UART_SetConfig+0x306>
        pclk = (uint32_t) LSE_VALUE;
 80042e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042ea:	e7d8      	b.n	800429e <UART_SetConfig+0x30a>
    switch (clocksource)
 80042ec:	2001      	movs	r0, #1
 80042ee:	e7eb      	b.n	80042c8 <UART_SetConfig+0x334>
 80042f0:	2000      	movs	r0, #0
 80042f2:	e7e9      	b.n	80042c8 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 80042f4:	2001      	movs	r0, #1
 80042f6:	e7e7      	b.n	80042c8 <UART_SetConfig+0x334>
 80042f8:	2001      	movs	r0, #1
 80042fa:	e7e5      	b.n	80042c8 <UART_SetConfig+0x334>
          ret = HAL_ERROR;
 80042fc:	2001      	movs	r0, #1
 80042fe:	e7e3      	b.n	80042c8 <UART_SetConfig+0x334>
    switch (clocksource)
 8004300:	2001      	movs	r0, #1
 8004302:	e7e1      	b.n	80042c8 <UART_SetConfig+0x334>
 8004304:	2000      	movs	r0, #0
 8004306:	e7df      	b.n	80042c8 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 8004308:	2001      	movs	r0, #1
 800430a:	e7dd      	b.n	80042c8 <UART_SetConfig+0x334>
    switch (clocksource)
 800430c:	2001      	movs	r0, #1
 800430e:	e7db      	b.n	80042c8 <UART_SetConfig+0x334>
 8004310:	2000      	movs	r0, #0
 8004312:	e7d9      	b.n	80042c8 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 8004314:	2001      	movs	r0, #1
 8004316:	e7d7      	b.n	80042c8 <UART_SetConfig+0x334>
 8004318:	00f42400 	.word	0x00f42400
 800431c:	080047b8 	.word	0x080047b8

08004320 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004320:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004322:	f013 0f01 	tst.w	r3, #1
 8004326:	d006      	beq.n	8004336 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004328:	6802      	ldr	r2, [r0, #0]
 800432a:	6853      	ldr	r3, [r2, #4]
 800432c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004330:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004332:	430b      	orrs	r3, r1
 8004334:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004336:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004338:	f013 0f02 	tst.w	r3, #2
 800433c:	d006      	beq.n	800434c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800433e:	6802      	ldr	r2, [r0, #0]
 8004340:	6853      	ldr	r3, [r2, #4]
 8004342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004346:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004348:	430b      	orrs	r3, r1
 800434a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800434c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800434e:	f013 0f04 	tst.w	r3, #4
 8004352:	d006      	beq.n	8004362 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004354:	6802      	ldr	r2, [r0, #0]
 8004356:	6853      	ldr	r3, [r2, #4]
 8004358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800435e:	430b      	orrs	r3, r1
 8004360:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004362:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004364:	f013 0f08 	tst.w	r3, #8
 8004368:	d006      	beq.n	8004378 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800436a:	6802      	ldr	r2, [r0, #0]
 800436c:	6853      	ldr	r3, [r2, #4]
 800436e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004372:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004374:	430b      	orrs	r3, r1
 8004376:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004378:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800437a:	f013 0f10 	tst.w	r3, #16
 800437e:	d006      	beq.n	800438e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004380:	6802      	ldr	r2, [r0, #0]
 8004382:	6893      	ldr	r3, [r2, #8]
 8004384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004388:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800438a:	430b      	orrs	r3, r1
 800438c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800438e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004390:	f013 0f20 	tst.w	r3, #32
 8004394:	d006      	beq.n	80043a4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004396:	6802      	ldr	r2, [r0, #0]
 8004398:	6893      	ldr	r3, [r2, #8]
 800439a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800439e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043aa:	d00a      	beq.n	80043c2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ac:	6802      	ldr	r2, [r0, #0]
 80043ae:	6853      	ldr	r3, [r2, #4]
 80043b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043b4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80043bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c0:	d00b      	beq.n	80043da <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043c8:	d006      	beq.n	80043d8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ca:	6802      	ldr	r2, [r0, #0]
 80043cc:	6853      	ldr	r3, [r2, #4]
 80043ce:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80043d2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6053      	str	r3, [r2, #4]
}
 80043d8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043da:	6802      	ldr	r2, [r0, #0]
 80043dc:	6853      	ldr	r3, [r2, #4]
 80043de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6053      	str	r3, [r2, #4]
 80043e8:	e7eb      	b.n	80043c2 <UART_AdvFeatureConfig+0xa2>

080043ea <UART_WaitOnFlagUntilTimeout>:
{
 80043ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ee:	4605      	mov	r5, r0
 80043f0:	460f      	mov	r7, r1
 80043f2:	4616      	mov	r6, r2
 80043f4:	4699      	mov	r9, r3
 80043f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	682b      	ldr	r3, [r5, #0]
 80043fc:	69dc      	ldr	r4, [r3, #28]
 80043fe:	ea37 0404 	bics.w	r4, r7, r4
 8004402:	bf0c      	ite	eq
 8004404:	2401      	moveq	r4, #1
 8004406:	2400      	movne	r4, #0
 8004408:	42b4      	cmp	r4, r6
 800440a:	d132      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0x88>
    if (Timeout != HAL_MAX_DELAY)
 800440c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004410:	d0f3      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004412:	f7fc fe69 	bl	80010e8 <HAL_GetTick>
 8004416:	eba0 0009 	sub.w	r0, r0, r9
 800441a:	4540      	cmp	r0, r8
 800441c:	d82c      	bhi.n	8004478 <UART_WaitOnFlagUntilTimeout+0x8e>
 800441e:	f1b8 0f00 	cmp.w	r8, #0
 8004422:	d02b      	beq.n	800447c <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	f012 0f04 	tst.w	r2, #4
 800442c:	d0e5      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	f012 0f08 	tst.w	r2, #8
 8004434:	d111      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800443c:	d0dd      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800443e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004442:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004444:	4628      	mov	r0, r5
 8004446:	f7ff fd79 	bl	8003f3c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800444a:	2320      	movs	r3, #32
 800444c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8004450:	2300      	movs	r3, #0
 8004452:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 8004456:	2003      	movs	r0, #3
 8004458:	e00c      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800445a:	2408      	movs	r4, #8
 800445c:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 800445e:	4628      	mov	r0, r5
 8004460:	f7ff fd6c 	bl	8003f3c <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004464:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
           __HAL_UNLOCK(huart);
 8004468:	2300      	movs	r3, #0
 800446a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
           return HAL_ERROR;
 800446e:	2001      	movs	r0, #1
 8004470:	e000      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
  return HAL_OK;
 8004472:	2000      	movs	r0, #0
}
 8004474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004478:	2003      	movs	r0, #3
 800447a:	e7fb      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
 800447c:	2003      	movs	r0, #3
 800447e:	e7f9      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>

08004480 <UART_CheckIdleState>:
{
 8004480:	b530      	push	{r4, r5, lr}
 8004482:	b083      	sub	sp, #12
 8004484:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	2300      	movs	r3, #0
 8004488:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800448c:	f7fc fe2c 	bl	80010e8 <HAL_GetTick>
 8004490:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	f012 0f08 	tst.w	r2, #8
 800449a:	d110      	bne.n	80044be <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f013 0f04 	tst.w	r3, #4
 80044a4:	d128      	bne.n	80044f8 <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 80044a6:	2320      	movs	r3, #32
 80044a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80044ac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	2000      	movs	r0, #0
 80044b2:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b4:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80044b6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80044ba:	b003      	add	sp, #12
 80044bc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4603      	mov	r3, r0
 80044c6:	2200      	movs	r2, #0
 80044c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7ff ff8c 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d0e2      	beq.n	800449c <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80044d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	e852 3f00 	ldrex	r3, [r2]
 80044dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	e842 3100 	strex	r1, r3, [r2]
 80044e4:	2900      	cmp	r1, #0
 80044e6:	d1f6      	bne.n	80044d6 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 80044e8:	2320      	movs	r3, #32
 80044ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      __HAL_UNLOCK(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 80044f4:	2003      	movs	r0, #3
 80044f6:	e7e0      	b.n	80044ba <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	462b      	mov	r3, r5
 8004500:	2200      	movs	r2, #0
 8004502:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004506:	4620      	mov	r0, r4
 8004508:	f7ff ff6f 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 800450c:	2800      	cmp	r0, #0
 800450e:	d0ca      	beq.n	80044a6 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004510:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	e852 3f00 	ldrex	r3, [r2]
 8004516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	e842 3100 	strex	r1, r3, [r2]
 800451e:	2900      	cmp	r1, #0
 8004520:	d1f6      	bne.n	8004510 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	f102 0308 	add.w	r3, r2, #8
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	3208      	adds	r2, #8
 8004532:	e842 3100 	strex	r1, r3, [r2]
 8004536:	2900      	cmp	r1, #0
 8004538:	d1f3      	bne.n	8004522 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 800453a:	2320      	movs	r3, #32
 800453c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8004540:	2300      	movs	r3, #0
 8004542:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8004546:	2003      	movs	r0, #3
 8004548:	e7b7      	b.n	80044ba <UART_CheckIdleState+0x3a>

0800454a <HAL_UART_Init>:
  if (huart == NULL)
 800454a:	b378      	cbz	r0, 80045ac <HAL_UART_Init+0x62>
{
 800454c:	b510      	push	{r4, lr}
 800454e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004550:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004554:	b30b      	cbz	r3, 800459a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004556:	2324      	movs	r3, #36	; 0x24
 8004558:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004566:	4620      	mov	r0, r4
 8004568:	f7ff fd14 	bl	8003f94 <UART_SetConfig>
 800456c:	2801      	cmp	r0, #1
 800456e:	d013      	beq.n	8004598 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004570:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004572:	b9bb      	cbnz	r3, 80045a4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	6853      	ldr	r3, [r2, #4]
 8004578:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800457c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	6893      	ldr	r3, [r2, #8]
 8004582:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004586:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	6813      	ldr	r3, [r2, #0]
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004592:	4620      	mov	r0, r4
 8004594:	f7ff ff74 	bl	8004480 <UART_CheckIdleState>
}
 8004598:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800459a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800459e:	f7fc fc67 	bl	8000e70 <HAL_UART_MspInit>
 80045a2:	e7d8      	b.n	8004556 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7ff febb 	bl	8004320 <UART_AdvFeatureConfig>
 80045aa:	e7e3      	b.n	8004574 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80045ac:	2001      	movs	r0, #1
}
 80045ae:	4770      	bx	lr

080045b0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045b0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80045b2:	b92b      	cbnz	r3, 80045c0 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045ba:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80045be:	4770      	bx	lr
{
 80045c0:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045c2:	6803      	ldr	r3, [r0, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045ca:	6899      	ldr	r1, [r3, #8]
 80045cc:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045ce:	4d09      	ldr	r5, [pc, #36]	; (80045f4 <UARTEx_SetNbDataToProcess+0x44>)
 80045d0:	5c6b      	ldrb	r3, [r5, r1]
 80045d2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045d4:	4c08      	ldr	r4, [pc, #32]	; (80045f8 <UARTEx_SetNbDataToProcess+0x48>)
 80045d6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045d8:	fb93 f3f1 	sdiv	r3, r3, r1
 80045dc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045e0:	5cab      	ldrb	r3, [r5, r2]
 80045e2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045e4:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80045ea:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80045ee:	bc30      	pop	{r4, r5}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	080047d8 	.word	0x080047d8
 80045f8:	080047d0 	.word	0x080047d0

080045fc <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80045fc:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004600:	2b01      	cmp	r3, #1
 8004602:	d018      	beq.n	8004636 <HAL_UARTEx_DisableFifoMode+0x3a>
 8004604:	2301      	movs	r3, #1
 8004606:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800460a:	2324      	movs	r3, #36	; 0x24
 800460c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004610:	6803      	ldr	r3, [r0, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004614:	6819      	ldr	r1, [r3, #0]
 8004616:	f021 0101 	bic.w	r1, r1, #1
 800461a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800461c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004620:	2300      	movs	r3, #0
 8004622:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004624:	6801      	ldr	r1, [r0, #0]
 8004626:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004628:	2220      	movs	r2, #32
 800462a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800462e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8004632:	4618      	mov	r0, r3
 8004634:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004636:	2002      	movs	r0, #2
}
 8004638:	4770      	bx	lr

0800463a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800463a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800463c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004640:	2b01      	cmp	r3, #1
 8004642:	d01d      	beq.n	8004680 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004644:	4604      	mov	r4, r0
 8004646:	2301      	movs	r3, #1
 8004648:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	2324      	movs	r3, #36	; 0x24
 800464e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004652:	6803      	ldr	r3, [r0, #0]
 8004654:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800465e:	6802      	ldr	r2, [r0, #0]
 8004660:	6893      	ldr	r3, [r2, #8]
 8004662:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004666:	4319      	orrs	r1, r3
 8004668:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800466a:	f7ff ffa1 	bl	80045b0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004672:	2320      	movs	r3, #32
 8004674:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8004678:	2000      	movs	r0, #0
 800467a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800467e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004680:	2002      	movs	r0, #2
 8004682:	e7fc      	b.n	800467e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08004684 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004684:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004686:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800468a:	2b01      	cmp	r3, #1
 800468c:	d01d      	beq.n	80046ca <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800468e:	4604      	mov	r4, r0
 8004690:	2301      	movs	r3, #1
 8004692:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004696:	2324      	movs	r3, #36	; 0x24
 8004698:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800469c:	6803      	ldr	r3, [r0, #0]
 800469e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046a8:	6802      	ldr	r2, [r0, #0]
 80046aa:	6893      	ldr	r3, [r2, #8]
 80046ac:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80046b0:	4319      	orrs	r1, r3
 80046b2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80046b4:	f7ff ff7c 	bl	80045b0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80046bc:	2320      	movs	r3, #32
 80046be:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80046c2:	2000      	movs	r0, #0
 80046c4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80046c8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80046ca:	2002      	movs	r0, #2
 80046cc:	e7fc      	b.n	80046c8 <HAL_UARTEx_SetRxFifoThreshold+0x44>

080046ce <memset>:
 80046ce:	4402      	add	r2, r0
 80046d0:	4603      	mov	r3, r0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d100      	bne.n	80046d8 <memset+0xa>
 80046d6:	4770      	bx	lr
 80046d8:	f803 1b01 	strb.w	r1, [r3], #1
 80046dc:	e7f9      	b.n	80046d2 <memset+0x4>
	...

080046e0 <__libc_init_array>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4d0d      	ldr	r5, [pc, #52]	; (8004718 <__libc_init_array+0x38>)
 80046e4:	2600      	movs	r6, #0
 80046e6:	4c0d      	ldr	r4, [pc, #52]	; (800471c <__libc_init_array+0x3c>)
 80046e8:	1b64      	subs	r4, r4, r5
 80046ea:	10a4      	asrs	r4, r4, #2
 80046ec:	42a6      	cmp	r6, r4
 80046ee:	d109      	bne.n	8004704 <__libc_init_array+0x24>
 80046f0:	4d0b      	ldr	r5, [pc, #44]	; (8004720 <__libc_init_array+0x40>)
 80046f2:	2600      	movs	r6, #0
 80046f4:	4c0b      	ldr	r4, [pc, #44]	; (8004724 <__libc_init_array+0x44>)
 80046f6:	f000 f817 	bl	8004728 <_init>
 80046fa:	1b64      	subs	r4, r4, r5
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	42a6      	cmp	r6, r4
 8004700:	d105      	bne.n	800470e <__libc_init_array+0x2e>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	f855 3b04 	ldr.w	r3, [r5], #4
 8004708:	3601      	adds	r6, #1
 800470a:	4798      	blx	r3
 800470c:	e7ee      	b.n	80046ec <__libc_init_array+0xc>
 800470e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004712:	3601      	adds	r6, #1
 8004714:	4798      	blx	r3
 8004716:	e7f2      	b.n	80046fe <__libc_init_array+0x1e>
 8004718:	080047e8 	.word	0x080047e8
 800471c:	080047e8 	.word	0x080047e8
 8004720:	080047e8 	.word	0x080047e8
 8004724:	080047ec 	.word	0x080047ec

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
