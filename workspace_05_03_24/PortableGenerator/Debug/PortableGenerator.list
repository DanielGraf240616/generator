
PortableGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008940  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008b38  08008b38  00018b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f94  08008f94  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f9c  08008f9c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f9c  08008f9c  00018f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fa0  08008fa0  00018fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08008fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200001f8  0800919c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800919c  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029ba5  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd5  00000000  00000000  00049e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013a40  00000000  00000000  0004daeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001910  00000000  00000000  00061530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000150d  00000000  00000000  00062e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002de8a  00000000  00000000  0006434d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002afd4  00000000  00000000  000921d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00126be9  00000000  00000000  000bd1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000057a0  00000000  00000000  001e3d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001e9534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001f8 	.word	0x200001f8
 8000214:	00000000 	.word	0x00000000
 8000218:	08008b20 	.word	0x08008b20

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001fc 	.word	0x200001fc
 8000234:	08008b20 	.word	0x08008b20

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b982 	b.w	8000f2c <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c46:	460d      	mov	r5, r1
 8000c48:	4604      	mov	r4, r0
 8000c4a:	460f      	mov	r7, r1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d146      	bne.n	8000cde <__udivmoddi4+0x9e>
 8000c50:	428a      	cmp	r2, r1
 8000c52:	4694      	mov	ip, r2
 8000c54:	d95e      	bls.n	8000d14 <__udivmoddi4+0xd4>
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	b143      	cbz	r3, 8000c6e <__udivmoddi4+0x2e>
 8000c5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c60:	f1c3 0220 	rsb	r2, r3, #32
 8000c64:	409f      	lsls	r7, r3
 8000c66:	409c      	lsls	r4, r3
 8000c68:	fa20 f202 	lsr.w	r2, r0, r2
 8000c6c:	4317      	orrs	r7, r2
 8000c6e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c72:	fa1f f58c 	uxth.w	r5, ip
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c7c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c80:	fb01 f005 	mul.w	r0, r1, r5
 8000c84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x5e>
 8000c8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c90:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x5c>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f200 8134 	bhi.w	8000f04 <__udivmoddi4+0x2c4>
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	1a12      	subs	r2, r2, r0
 8000ca0:	b2a4      	uxth	r4, r4
 8000ca2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x88>
 8000cb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x86>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f200 8119 	bhi.w	8000ef8 <__udivmoddi4+0x2b8>
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0x9a>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xb4>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80fc 	beq.w	8000ee0 <__udivmoddi4+0x2a0>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d14c      	bne.n	8000d96 <__udivmoddi4+0x156>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f0c0 80f2 	bcc.w	8000ee6 <__udivmoddi4+0x2a6>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f240 80ef 	bls.w	8000ee6 <__udivmoddi4+0x2a6>
 8000d08:	4608      	mov	r0, r1
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d0e5      	beq.n	8000cda <__udivmoddi4+0x9a>
 8000d0e:	e9c6 4700 	strd	r4, r7, [r6]
 8000d12:	e7e2      	b.n	8000cda <__udivmoddi4+0x9a>
 8000d14:	b902      	cbnz	r2, 8000d18 <__udivmoddi4+0xd8>
 8000d16:	deff      	udf	#255	; 0xff
 8000d18:	fab2 f382 	clz	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f040 809f 	bne.w	8000e60 <__udivmoddi4+0x220>
 8000d22:	1a8a      	subs	r2, r1, r2
 8000d24:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d32:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d36:	0c22      	lsrs	r2, r4, #16
 8000d38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d3c:	fb07 f005 	mul.w	r0, r7, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90f      	bls.n	8000d64 <__udivmoddi4+0x124>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d4c:	bf2c      	ite	cs
 8000d4e:	f04f 0901 	movcs.w	r9, #1
 8000d52:	f04f 0900 	movcc.w	r9, #0
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d903      	bls.n	8000d62 <__udivmoddi4+0x122>
 8000d5a:	f1b9 0f00 	cmp.w	r9, #0
 8000d5e:	f000 80ce 	beq.w	8000efe <__udivmoddi4+0x2be>
 8000d62:	4645      	mov	r5, r8
 8000d64:	1a12      	subs	r2, r2, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d70:	fb00 f707 	mul.w	r7, r0, r7
 8000d74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d78:	42a7      	cmp	r7, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x14e>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x14c>
 8000d86:	42a7      	cmp	r7, r4
 8000d88:	f200 80b3 	bhi.w	8000ef2 <__udivmoddi4+0x2b2>
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d94:	e79c      	b.n	8000cd0 <__udivmoddi4+0x90>
 8000d96:	f1c1 0420 	rsb	r4, r1, #32
 8000d9a:	408b      	lsls	r3, r1
 8000d9c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000da0:	fa22 f704 	lsr.w	r7, r2, r4
 8000da4:	40e5      	lsrs	r5, r4
 8000da6:	408a      	lsls	r2, r1
 8000da8:	431f      	orrs	r7, r3
 8000daa:	fa20 f304 	lsr.w	r3, r0, r4
 8000dae:	4088      	lsls	r0, r1
 8000db0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc0:	fbb5 fef8 	udiv	lr, r5, r8
 8000dc4:	fb08 551e 	mls	r5, r8, lr, r5
 8000dc8:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a9      	cmp	r9, r5
 8000dd2:	d90e      	bls.n	8000df2 <__udivmoddi4+0x1b2>
 8000dd4:	197d      	adds	r5, r7, r5
 8000dd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dda:	bf2c      	ite	cs
 8000ddc:	f04f 0b01 	movcs.w	fp, #1
 8000de0:	f04f 0b00 	movcc.w	fp, #0
 8000de4:	45a9      	cmp	r9, r5
 8000de6:	d903      	bls.n	8000df0 <__udivmoddi4+0x1b0>
 8000de8:	f1bb 0f00 	cmp.w	fp, #0
 8000dec:	f000 808d 	beq.w	8000f0a <__udivmoddi4+0x2ca>
 8000df0:	46d6      	mov	lr, sl
 8000df2:	eba5 0509 	sub.w	r5, r5, r9
 8000df6:	fa1f f983 	uxth.w	r9, r3
 8000dfa:	fbb5 f3f8 	udiv	r3, r5, r8
 8000dfe:	fb08 5513 	mls	r5, r8, r3, r5
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e0a:	45ac      	cmp	ip, r5
 8000e0c:	d906      	bls.n	8000e1c <__udivmoddi4+0x1dc>
 8000e0e:	197d      	adds	r5, r7, r5
 8000e10:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e14:	d201      	bcs.n	8000e1a <__udivmoddi4+0x1da>
 8000e16:	45ac      	cmp	ip, r5
 8000e18:	d87e      	bhi.n	8000f18 <__udivmoddi4+0x2d8>
 8000e1a:	4643      	mov	r3, r8
 8000e1c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e20:	eba5 050c 	sub.w	r5, r5, ip
 8000e24:	fba3 9802 	umull	r9, r8, r3, r2
 8000e28:	4545      	cmp	r5, r8
 8000e2a:	46ce      	mov	lr, r9
 8000e2c:	46c4      	mov	ip, r8
 8000e2e:	d302      	bcc.n	8000e36 <__udivmoddi4+0x1f6>
 8000e30:	d106      	bne.n	8000e40 <__udivmoddi4+0x200>
 8000e32:	4548      	cmp	r0, r9
 8000e34:	d204      	bcs.n	8000e40 <__udivmoddi4+0x200>
 8000e36:	3b01      	subs	r3, #1
 8000e38:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3c:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d06f      	beq.n	8000f24 <__udivmoddi4+0x2e4>
 8000e44:	ebb0 020e 	subs.w	r2, r0, lr
 8000e48:	eb65 050c 	sbc.w	r5, r5, ip
 8000e4c:	40ca      	lsrs	r2, r1
 8000e4e:	fa05 f404 	lsl.w	r4, r5, r4
 8000e52:	40cd      	lsrs	r5, r1
 8000e54:	4618      	mov	r0, r3
 8000e56:	4314      	orrs	r4, r2
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e9c6 4500 	strd	r4, r5, [r6]
 8000e5e:	e73c      	b.n	8000cda <__udivmoddi4+0x9a>
 8000e60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e64:	f1c3 0220 	rsb	r2, r3, #32
 8000e68:	4099      	lsls	r1, r3
 8000e6a:	409c      	lsls	r4, r3
 8000e6c:	40d5      	lsrs	r5, r2
 8000e6e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e72:	fa20 f202 	lsr.w	r2, r0, r2
 8000e76:	fa1f f78c 	uxth.w	r7, ip
 8000e7a:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e84:	0c11      	lsrs	r1, r2, #16
 8000e86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e8a:	fb00 f507 	mul.w	r5, r0, r7
 8000e8e:	428d      	cmp	r5, r1
 8000e90:	d90e      	bls.n	8000eb0 <__udivmoddi4+0x270>
 8000e92:	eb1c 0101 	adds.w	r1, ip, r1
 8000e96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9a:	bf2c      	ite	cs
 8000e9c:	f04f 0901 	movcs.w	r9, #1
 8000ea0:	f04f 0900 	movcc.w	r9, #0
 8000ea4:	428d      	cmp	r5, r1
 8000ea6:	d902      	bls.n	8000eae <__udivmoddi4+0x26e>
 8000ea8:	f1b9 0f00 	cmp.w	r9, #0
 8000eac:	d031      	beq.n	8000f12 <__udivmoddi4+0x2d2>
 8000eae:	4640      	mov	r0, r8
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5fe 	udiv	r5, r1, lr
 8000eb8:	fb0e 1115 	mls	r1, lr, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f107 	mul.w	r1, r5, r7
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x298>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed0:	d201      	bcs.n	8000ed6 <__udivmoddi4+0x296>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d823      	bhi.n	8000f1e <__udivmoddi4+0x2de>
 8000ed6:	4645      	mov	r5, r8
 8000ed8:	1a52      	subs	r2, r2, r1
 8000eda:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ede:	e726      	b.n	8000d2e <__udivmoddi4+0xee>
 8000ee0:	4631      	mov	r1, r6
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	e6f9      	b.n	8000cda <__udivmoddi4+0x9a>
 8000ee6:	1a84      	subs	r4, r0, r2
 8000ee8:	eb65 0203 	sbc.w	r2, r5, r3
 8000eec:	2001      	movs	r0, #1
 8000eee:	4617      	mov	r7, r2
 8000ef0:	e70b      	b.n	8000d0a <__udivmoddi4+0xca>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e74a      	b.n	8000d8e <__udivmoddi4+0x14e>
 8000ef8:	4464      	add	r4, ip
 8000efa:	3802      	subs	r0, #2
 8000efc:	e6e4      	b.n	8000cc8 <__udivmoddi4+0x88>
 8000efe:	3d02      	subs	r5, #2
 8000f00:	4462      	add	r2, ip
 8000f02:	e72f      	b.n	8000d64 <__udivmoddi4+0x124>
 8000f04:	3902      	subs	r1, #2
 8000f06:	4462      	add	r2, ip
 8000f08:	e6c9      	b.n	8000c9e <__udivmoddi4+0x5e>
 8000f0a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f0e:	443d      	add	r5, r7
 8000f10:	e76f      	b.n	8000df2 <__udivmoddi4+0x1b2>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	e7cb      	b.n	8000eb0 <__udivmoddi4+0x270>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	443d      	add	r5, r7
 8000f1c:	e77e      	b.n	8000e1c <__udivmoddi4+0x1dc>
 8000f1e:	3d02      	subs	r5, #2
 8000f20:	4462      	add	r2, ip
 8000f22:	e7d9      	b.n	8000ed8 <__udivmoddi4+0x298>
 8000f24:	4618      	mov	r0, r3
 8000f26:	4631      	mov	r1, r6
 8000f28:	e6d7      	b.n	8000cda <__udivmoddi4+0x9a>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <AD9833_Init>:


extern SPI_HandleTypeDef hspi1;

	void AD9833_Init(void)
	{
 8000f30:	b508      	push	{r3, lr}
    // Reset the AD9833 module
    HAL_SPI_Transmit(&hspi1, (uint8_t*)AD9833_REG_CMD, 1, HAL_MAX_DELAY);
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3c:	4801      	ldr	r0, [pc, #4]	; (8000f44 <AD9833_Init+0x14>)
 8000f3e:	f004 f81d 	bl	8004f7c <HAL_SPI_Transmit>
	}
 8000f42:	bd08      	pop	{r3, pc}
 8000f44:	200002fc 	.word	0x200002fc

08000f48 <AD9833_SetFrequency>:

	void AD9833_SetFrequency(uint32_t frequency)
	{
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	b082      	sub	sp, #8
	    uint16_t freq_reg = (frequency * 268435456) / 25000000;
 8000f4c:	0703      	lsls	r3, r0, #28
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <AD9833_SetFrequency+0x44>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	0ddb      	lsrs	r3, r3, #23
	    uint16_t upper = (uint16_t)((freq_reg >> 14) & 0x3FFF);

	    lower <<= 2;
	    upper <<= 2;

	    uint16_t lower_data = AD9833_REG_FREQ0 | lower;
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	f8ad 3006 	strh.w	r3, [sp, #6]
	    uint16_t upper_data = AD9833_REG_FREQ0 | upper;
 8000f60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f64:	f8ad 3004 	strh.w	r3, [sp, #4]

	    HAL_SPI_Transmit(&hspi1, (uint8_t*)&lower_data, 1, HAL_MAX_DELAY);
 8000f68:	4c09      	ldr	r4, [pc, #36]	; (8000f90 <AD9833_SetFrequency+0x48>)
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f10d 0106 	add.w	r1, sp, #6
 8000f74:	4620      	mov	r0, r4
 8000f76:	f004 f801 	bl	8004f7c <HAL_SPI_Transmit>
	    HAL_SPI_Transmit(&hspi1, (uint8_t*)&upper_data, 1, HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	2201      	movs	r2, #1
 8000f80:	a901      	add	r1, sp, #4
 8000f82:	4620      	mov	r0, r4
 8000f84:	f003 fffa 	bl	8004f7c <HAL_SPI_Transmit>
	}
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd10      	pop	{r4, pc}
 8000f8c:	55e63b89 	.word	0x55e63b89
 8000f90:	200002fc 	.word	0x200002fc

08000f94 <AD9833_SetWaveform>:
	void AD9833_SetWaveform(uint16_t waveform)
	{
 8000f94:	b508      	push	{r3, lr}
	    HAL_SPI_Transmit(&hspi1, (uint8_t*)(AD9833_REG_CMD | waveform), 1, HAL_MAX_DELAY);
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
 8000fa0:	4801      	ldr	r0, [pc, #4]	; (8000fa8 <AD9833_SetWaveform+0x14>)
 8000fa2:	f003 ffeb 	bl	8004f7c <HAL_SPI_Transmit>
	}
 8000fa6:	bd08      	pop	{r3, pc}
 8000fa8:	200002fc 	.word	0x200002fc

08000fac <TPL0102_Write>:
    // Set digipot to 50k ohm value at the start ==> offset 0V
    TPL0102_Write(hi2c, CHANNEL_0, 128);
    TPL0102_Write(hi2c, CHANNEL_1, 128);
}

void TPL0102_Write(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t value) {
 8000fac:	b500      	push	{lr}
 8000fae:	b085      	sub	sp, #20
    uint8_t data[2] = {channel, value};
 8000fb0:	f88d 100c 	strb.w	r1, [sp, #12]
 8000fb4:	f88d 200d 	strb.w	r2, [sp, #13]
    HAL_I2C_Master_Transmit(hi2c, (uint16_t)(TPL0102_ADDR<<1), data, 2, HAL_MAX_DELAY);
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	aa03      	add	r2, sp, #12
 8000fc2:	21a0      	movs	r1, #160	; 0xa0
 8000fc4:	f002 fb10 	bl	80035e8 <HAL_I2C_Master_Transmit>
}
 8000fc8:	b005      	add	sp, #20
 8000fca:	f85d fb04 	ldr.w	pc, [sp], #4

08000fce <TPL0102_Init>:
void TPL0102_Init(I2C_HandleTypeDef *hi2c) {
 8000fce:	b510      	push	{r4, lr}
 8000fd0:	4604      	mov	r4, r0
    TPL0102_Write(hi2c, CHANNEL_0, 128);
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f7ff ffe9 	bl	8000fac <TPL0102_Write>
    TPL0102_Write(hi2c, CHANNEL_1, 128);
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f7ff ffe4 	bl	8000fac <TPL0102_Write>
}
 8000fe4:	bd10      	pop	{r4, pc}
	...

08000fe8 <DelayInit>:
  DelayUS(20);
}

static void DelayInit(void)
{
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <DelayInit+0x3c>)
 8000fea:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8000fee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000ff2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000ff6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8000ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ffe:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001002:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	f022 0201 	bic.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

  DWT->CYCCNT = 0;
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800101a:	bf00      	nop
  __ASM volatile ("NOP");
 800101c:	bf00      	nop
  __ASM volatile ("NOP");
 800101e:	bf00      	nop
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001028:	b082      	sub	sp, #8
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <DelayUS+0x28>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <DelayUS+0x2c>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0c9b      	lsrs	r3, r3, #18
 8001036:	fb03 f000 	mul.w	r0, r3, r0
  uint32_t start = DWT->CYCCNT;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <DelayUS+0x30>)
 800103c:	685a      	ldr	r2, [r3, #4]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <DelayUS+0x30>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	9301      	str	r3, [sp, #4]
  } while(cnt < cycles);
 8001046:	9b01      	ldr	r3, [sp, #4]
 8001048:	4283      	cmp	r3, r0
 800104a:	d3f8      	bcc.n	800103e <DelayUS+0x16>
}
 800104c:	b002      	add	sp, #8
 800104e:	4770      	bx	lr
 8001050:	20000024 	.word	0x20000024
 8001054:	431bde83 	.word	0x431bde83
 8001058:	e0001000 	.word	0xe0001000

0800105c <ExpanderWrite>:
{
 800105c:	b500      	push	{lr}
 800105e:	b085      	sub	sp, #20
  uint8_t data = _data | dpBacklight;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <ExpanderWrite+0x28>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4318      	orrs	r0, r3
 8001066:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800106a:	230a      	movs	r3, #10
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	f10d 020f 	add.w	r2, sp, #15
 8001074:	214e      	movs	r1, #78	; 0x4e
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <ExpanderWrite+0x2c>)
 8001078:	f002 fab6 	bl	80035e8 <HAL_I2C_Master_Transmit>
}
 800107c:	b005      	add	sp, #20
 800107e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001082:	bf00      	nop
 8001084:	20000214 	.word	0x20000214
 8001088:	200002a8 	.word	0x200002a8

0800108c <PulseEnable>:
{
 800108c:	b510      	push	{r4, lr}
 800108e:	4604      	mov	r4, r0
  ExpanderWrite(_data | ENABLE);
 8001090:	f040 0004 	orr.w	r0, r0, #4
 8001094:	f7ff ffe2 	bl	800105c <ExpanderWrite>
  DelayUS(20);
 8001098:	2014      	movs	r0, #20
 800109a:	f7ff ffc5 	bl	8001028 <DelayUS>
  ExpanderWrite(_data & ~ENABLE);
 800109e:	f004 00fb 	and.w	r0, r4, #251	; 0xfb
 80010a2:	f7ff ffdb 	bl	800105c <ExpanderWrite>
  DelayUS(20);
 80010a6:	2014      	movs	r0, #20
 80010a8:	f7ff ffbe 	bl	8001028 <DelayUS>
}
 80010ac:	bd10      	pop	{r4, pc}

080010ae <Write4Bits>:
{
 80010ae:	b510      	push	{r4, lr}
 80010b0:	4604      	mov	r4, r0
  ExpanderWrite(value);
 80010b2:	f7ff ffd3 	bl	800105c <ExpanderWrite>
  PulseEnable(value);
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff ffe8 	bl	800108c <PulseEnable>
}
 80010bc:	bd10      	pop	{r4, pc}

080010be <Send>:
{
 80010be:	b538      	push	{r3, r4, r5, lr}
 80010c0:	460d      	mov	r5, r1
  uint8_t highnib = value & 0xF0;
 80010c2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
  uint8_t lownib = (value<<4) & 0xF0;
 80010c6:	0104      	lsls	r4, r0, #4
 80010c8:	b2e4      	uxtb	r4, r4
  Write4Bits((highnib)|mode);
 80010ca:	ea43 0001 	orr.w	r0, r3, r1
 80010ce:	f7ff ffee 	bl	80010ae <Write4Bits>
  Write4Bits((lownib)|mode);
 80010d2:	ea44 0005 	orr.w	r0, r4, r5
 80010d6:	f7ff ffea 	bl	80010ae <Write4Bits>
}
 80010da:	bd38      	pop	{r3, r4, r5, pc}

080010dc <SendCommand>:
{
 80010dc:	b508      	push	{r3, lr}
  Send(cmd, 0);
 80010de:	2100      	movs	r1, #0
 80010e0:	f7ff ffed 	bl	80010be <Send>
}
 80010e4:	bd08      	pop	{r3, pc}

080010e6 <SendChar>:
{
 80010e6:	b508      	push	{r3, lr}
  Send(ch, RS);
 80010e8:	2101      	movs	r1, #1
 80010ea:	f7ff ffe8 	bl	80010be <Send>
}
 80010ee:	bd08      	pop	{r3, pc}

080010f0 <HD44780_Clear>:
{
 80010f0:	b508      	push	{r3, lr}
  SendCommand(LCD_CLEARDISPLAY);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff fff2 	bl	80010dc <SendCommand>
  DelayUS(2000);
 80010f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010fc:	f7ff ff94 	bl	8001028 <DelayUS>
}
 8001100:	bd08      	pop	{r3, pc}

08001102 <HD44780_Home>:
{
 8001102:	b508      	push	{r3, lr}
  SendCommand(LCD_RETURNHOME);
 8001104:	2002      	movs	r0, #2
 8001106:	f7ff ffe9 	bl	80010dc <SendCommand>
  DelayUS(2000);
 800110a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800110e:	f7ff ff8b 	bl	8001028 <DelayUS>
}
 8001112:	bd08      	pop	{r3, pc}

08001114 <HD44780_SetCursor>:
{
 8001114:	b510      	push	{r4, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	4684      	mov	ip, r0
 800111a:	468e      	mov	lr, r1
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HD44780_SetCursor+0x3c>)
 800111e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001120:	ac04      	add	r4, sp, #16
 8001122:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HD44780_SetCursor+0x40>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4573      	cmp	r3, lr
 800112c:	d802      	bhi.n	8001134 <HD44780_SetCursor+0x20>
    row = dpRows-1;
 800112e:	3b01      	subs	r3, #1
 8001130:	fa5f fe83 	uxtb.w	lr, r3
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001134:	ab04      	add	r3, sp, #16
 8001136:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800113a:	f85e 0c10 	ldr.w	r0, [lr, #-16]
 800113e:	4460      	add	r0, ip
 8001140:	b240      	sxtb	r0, r0
 8001142:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8001146:	b2c0      	uxtb	r0, r0
 8001148:	f7ff ffc8 	bl	80010dc <SendCommand>
}
 800114c:	b004      	add	sp, #16
 800114e:	bd10      	pop	{r4, pc}
 8001150:	08008b38 	.word	0x08008b38
 8001154:	20000218 	.word	0x20000218

08001158 <HD44780_Display>:
{
 8001158:	b508      	push	{r3, lr}
  dpControl |= LCD_DISPLAYON;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HD44780_Display+0x18>)
 800115c:	7818      	ldrb	r0, [r3, #0]
 800115e:	f040 0004 	orr.w	r0, r0, #4
 8001162:	7018      	strb	r0, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001164:	f040 0008 	orr.w	r0, r0, #8
 8001168:	f7ff ffb8 	bl	80010dc <SendCommand>
}
 800116c:	bd08      	pop	{r3, pc}
 800116e:	bf00      	nop
 8001170:	20000215 	.word	0x20000215

08001174 <HD44780_Blink>:
{
 8001174:	b508      	push	{r3, lr}
  dpControl |= LCD_BLINKON;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <HD44780_Blink+0x18>)
 8001178:	7818      	ldrb	r0, [r3, #0]
 800117a:	f040 0001 	orr.w	r0, r0, #1
 800117e:	7018      	strb	r0, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001180:	f040 0008 	orr.w	r0, r0, #8
 8001184:	f7ff ffaa 	bl	80010dc <SendCommand>
}
 8001188:	bd08      	pop	{r3, pc}
 800118a:	bf00      	nop
 800118c:	20000215 	.word	0x20000215

08001190 <HD44780_CreateSpecialChar>:
{
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	460d      	mov	r5, r1
  location &= 0x7;
 8001194:	f000 0007 	and.w	r0, r0, #7
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001198:	00c0      	lsls	r0, r0, #3
 800119a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800119e:	f7ff ff9d 	bl	80010dc <SendCommand>
  for (int i=0; i<8; i++)
 80011a2:	2400      	movs	r4, #0
 80011a4:	e003      	b.n	80011ae <HD44780_CreateSpecialChar+0x1e>
    SendChar(charmap[i]);
 80011a6:	5d28      	ldrb	r0, [r5, r4]
 80011a8:	f7ff ff9d 	bl	80010e6 <SendChar>
  for (int i=0; i<8; i++)
 80011ac:	3401      	adds	r4, #1
 80011ae:	2c07      	cmp	r4, #7
 80011b0:	ddf9      	ble.n	80011a6 <HD44780_CreateSpecialChar+0x16>
}
 80011b2:	bd38      	pop	{r3, r4, r5, pc}

080011b4 <HD44780_Init>:
{
 80011b4:	b508      	push	{r3, lr}
  dpRows = rows;
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <HD44780_Init+0xb8>)
 80011b8:	7018      	strb	r0, [r3, #0]
  dpBacklight = LCD_BACKLIGHT;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HD44780_Init+0xbc>)
 80011bc:	2208      	movs	r2, #8
 80011be:	701a      	strb	r2, [r3, #0]
  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HD44780_Init+0xc0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
  if (dpRows > 1)
 80011c6:	2801      	cmp	r0, #1
 80011c8:	d94b      	bls.n	8001262 <HD44780_Init+0xae>
    dpFunction |= LCD_2LINE;
 80011ca:	2208      	movs	r2, #8
 80011cc:	701a      	strb	r2, [r3, #0]
  DelayInit();
 80011ce:	f7ff ff0b 	bl	8000fe8 <DelayInit>
  HAL_Delay(50);
 80011d2:	2032      	movs	r0, #50	; 0x32
 80011d4:	f001 f86a 	bl	80022ac <HAL_Delay>
  ExpanderWrite(dpBacklight);
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HD44780_Init+0xbc>)
 80011da:	7818      	ldrb	r0, [r3, #0]
 80011dc:	f7ff ff3e 	bl	800105c <ExpanderWrite>
  HAL_Delay(1000);
 80011e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e4:	f001 f862 	bl	80022ac <HAL_Delay>
  Write4Bits(0x03 << 4);
 80011e8:	2030      	movs	r0, #48	; 0x30
 80011ea:	f7ff ff60 	bl	80010ae <Write4Bits>
  DelayUS(4500);
 80011ee:	f241 1094 	movw	r0, #4500	; 0x1194
 80011f2:	f7ff ff19 	bl	8001028 <DelayUS>
  Write4Bits(0x03 << 4);
 80011f6:	2030      	movs	r0, #48	; 0x30
 80011f8:	f7ff ff59 	bl	80010ae <Write4Bits>
  DelayUS(4500);
 80011fc:	f241 1094 	movw	r0, #4500	; 0x1194
 8001200:	f7ff ff12 	bl	8001028 <DelayUS>
  Write4Bits(0x03 << 4);
 8001204:	2030      	movs	r0, #48	; 0x30
 8001206:	f7ff ff52 	bl	80010ae <Write4Bits>
  DelayUS(4500);
 800120a:	f241 1094 	movw	r0, #4500	; 0x1194
 800120e:	f7ff ff0b 	bl	8001028 <DelayUS>
  Write4Bits(0x02 << 4);
 8001212:	2020      	movs	r0, #32
 8001214:	f7ff ff4b 	bl	80010ae <Write4Bits>
  DelayUS(100);
 8001218:	2064      	movs	r0, #100	; 0x64
 800121a:	f7ff ff05 	bl	8001028 <DelayUS>
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HD44780_Init+0xc0>)
 8001220:	7818      	ldrb	r0, [r3, #0]
 8001222:	f040 0020 	orr.w	r0, r0, #32
 8001226:	f7ff ff59 	bl	80010dc <SendCommand>
  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HD44780_Init+0xc4>)
 800122c:	2204      	movs	r2, #4
 800122e:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001230:	f7ff ff92 	bl	8001158 <HD44780_Display>
  HD44780_Clear();
 8001234:	f7ff ff5c 	bl	80010f0 <HD44780_Clear>
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HD44780_Init+0xc8>)
 800123a:	2202      	movs	r2, #2
 800123c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800123e:	2006      	movs	r0, #6
 8001240:	f7ff ff4c 	bl	80010dc <SendCommand>
  DelayUS(4500);
 8001244:	f241 1094 	movw	r0, #4500	; 0x1194
 8001248:	f7ff feee 	bl	8001028 <DelayUS>
  HD44780_CreateSpecialChar(0, special1);
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <HD44780_Init+0xcc>)
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff ff9e 	bl	8001190 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001254:	490b      	ldr	r1, [pc, #44]	; (8001284 <HD44780_Init+0xd0>)
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff ff9a 	bl	8001190 <HD44780_CreateSpecialChar>
  HD44780_Home();
 800125c:	f7ff ff51 	bl	8001102 <HD44780_Home>
}
 8001260:	bd08      	pop	{r3, pc}
    dpFunction |= LCD_5x10DOTS;
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HD44780_Init+0xc0>)
 8001264:	2204      	movs	r2, #4
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e7b1      	b.n	80011ce <HD44780_Init+0x1a>
 800126a:	bf00      	nop
 800126c:	20000218 	.word	0x20000218
 8001270:	20000214 	.word	0x20000214
 8001274:	20000216 	.word	0x20000216
 8001278:	20000215 	.word	0x20000215
 800127c:	20000217 	.word	0x20000217
 8001280:	20000000 	.word	0x20000000
 8001284:	20000008 	.word	0x20000008

08001288 <HD44780_PrintStr>:
{
 8001288:	b510      	push	{r4, lr}
 800128a:	4604      	mov	r4, r0
  while(*c) SendChar(*c++);
 800128c:	e002      	b.n	8001294 <HD44780_PrintStr+0xc>
 800128e:	3401      	adds	r4, #1
 8001290:	f7ff ff29 	bl	80010e6 <SendChar>
 8001294:	7820      	ldrb	r0, [r4, #0]
 8001296:	2800      	cmp	r0, #0
 8001298:	d1f9      	bne.n	800128e <HD44780_PrintStr+0x6>
}
 800129a:	bd10      	pop	{r4, pc}

0800129c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	2400      	movs	r4, #0
 80012a2:	9403      	str	r4, [sp, #12]
 80012a4:	9404      	str	r4, [sp, #16]
 80012a6:	9405      	str	r4, [sp, #20]
 80012a8:	9406      	str	r4, [sp, #24]
 80012aa:	9407      	str	r4, [sp, #28]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <MX_GPIO_Init+0x90>)
 80012ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b0:	f042 0201 	orr.w	r2, r2, #1
 80012b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80012b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b8:	f002 0201 	and.w	r2, r2, #1
 80012bc:	9201      	str	r2, [sp, #4]
 80012be:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c2:	f042 0202 	orr.w	r2, r2, #2
 80012c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80012d2:	4f17      	ldr	r7, [pc, #92]	; (8001330 <MX_GPIO_Init+0x94>)
 80012d4:	4622      	mov	r2, r4
 80012d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012da:	4638      	mov	r0, r7
 80012dc:	f001 ffcb 	bl	8003276 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80012e0:	4d14      	ldr	r5, [pc, #80]	; (8001334 <MX_GPIO_Init+0x98>)
 80012e2:	4622      	mov	r2, r4
 80012e4:	2110      	movs	r1, #16
 80012e6:	4628      	mov	r0, r5
 80012e8:	f001 ffc5 	bl	8003276 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : button_1_Pin button_2_Pin button_3_Pin button_4_Pin
                           Encoder_SW_Pin */
	GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin|button_3_Pin|button_4_Pin
 80012ec:	f648 4306 	movw	r3, #35846	; 0x8c06
 80012f0:	9303      	str	r3, [sp, #12]
			|Encoder_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f2:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	a903      	add	r1, sp, #12
 80012f8:	4628      	mov	r0, r5
 80012fa:	f001 fed1 	bl	80030a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Relay_Pin */
	GPIO_InitStruct.Pin = Relay_Pin;
 80012fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001302:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2601      	movs	r6, #1
 8001306:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 800130c:	a903      	add	r1, sp, #12
 800130e:	4638      	mov	r0, r7
 8001310:	f001 fec6 	bl	80030a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001314:	2310      	movs	r3, #16
 8001316:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	a903      	add	r1, sp, #12
 8001320:	4628      	mov	r0, r5
 8001322:	f001 febd 	bl	80030a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001326:	b009      	add	sp, #36	; 0x24
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	42020000 	.word	0x42020000
 8001334:	42020400 	.word	0x42020400

08001338 <HAL_ADC_ConvCpltCallback>:
{
 8001338:	b508      	push	{r3, lr}
	adc_value = HAL_ADC_GetValue(&hadc1);
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <HAL_ADC_ConvCpltCallback+0x10>)
 800133c:	f001 f8be 	bl	80024bc <HAL_ADC_GetValue>
 8001340:	b280      	uxth	r0, r0
 8001342:	4b02      	ldr	r3, [pc, #8]	; (800134c <HAL_ADC_ConvCpltCallback+0x14>)
 8001344:	8018      	strh	r0, [r3, #0]
}
 8001346:	bd08      	pop	{r3, pc}
 8001348:	20000240 	.word	0x20000240
 800134c:	20000224 	.word	0x20000224

08001350 <adc_voltage>:
	float adc_voltage = (adc_value/4095)*reference;
 8001350:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001364 <adc_voltage+0x14>
 8001354:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
 8001358:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800135c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	457ff000 	.word	0x457ff000

08001368 <RotaryEncoderUpdate>:
	encoderValue=TIM1->CNT;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <RotaryEncoderUpdate+0x28>)
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	4a09      	ldr	r2, [pc, #36]	; (8001394 <RotaryEncoderUpdate+0x2c>)
 800136e:	6013      	str	r3, [r2, #0]
	if(encoderValue != encoderValueOld)
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <RotaryEncoderUpdate+0x30>)
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	4293      	cmp	r3, r2
 8001376:	d005      	beq.n	8001384 <RotaryEncoderUpdate+0x1c>
		if(encoderValue > encoderValueOld)
 8001378:	d905      	bls.n	8001386 <RotaryEncoderUpdate+0x1e>
			direction = 1;
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <RotaryEncoderUpdate+0x34>)
 800137c:	2101      	movs	r1, #1
 800137e:	7011      	strb	r1, [r2, #0]
		encoderValueOld=encoderValue;
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <RotaryEncoderUpdate+0x30>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	4770      	bx	lr
			direction = -1;
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <RotaryEncoderUpdate+0x34>)
 8001388:	21ff      	movs	r1, #255	; 0xff
 800138a:	7011      	strb	r1, [r2, #0]
 800138c:	e7f8      	b.n	8001380 <RotaryEncoderUpdate+0x18>
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00
 8001394:	20000234 	.word	0x20000234
 8001398:	20000238 	.word	0x20000238
 800139c:	20000230 	.word	0x20000230

080013a0 <CalcAmplitude>:
{
 80013a0:	b508      	push	{r3, lr}
	wiperres2 = wiperpos2 * STEPRES;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <CalcAmplitude+0x50>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013f4 <CalcAmplitude+0x54>
 80013ac:	ee67 7a87 	vmul.f32	s15, s15, s14
	digipotpos2 = wiperres2 / MAXRES;
 80013b0:	eddf 6a11 	vldr	s13, [pc, #68]	; 80013f8 <CalcAmplitude+0x58>
 80013b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <CalcAmplitude+0x5c>)
 80013ba:	ed83 7a00 	vstr	s14, [r3]
	Vout = VIN * digipotpos2 * GAIN;
 80013be:	ee17 0a10 	vmov	r0, s14
 80013c2:	f7ff f8a5 	bl	8000510 <__aeabi_f2d>
 80013c6:	a308      	add	r3, pc, #32	; (adr r3, 80013e8 <CalcAmplitude+0x48>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff f8f8 	bl	80005c0 <__aeabi_dmul>
 80013d0:	2200      	movs	r2, #0
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <CalcAmplitude+0x60>)
 80013d4:	f7ff f8f4 	bl	80005c0 <__aeabi_dmul>
 80013d8:	f7ff fbca 	bl	8000b70 <__aeabi_d2f>
 80013dc:	ee00 0a10 	vmov	s0, r0
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <CalcAmplitude+0x64>)
 80013e2:	6018      	str	r0, [r3, #0]
}
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop
 80013e8:	cccccccd 	.word	0xcccccccd
 80013ec:	3fe4cccc 	.word	0x3fe4cccc
 80013f0:	20000020 	.word	0x20000020
 80013f4:	43c35000 	.word	0x43c35000
 80013f8:	47c28d00 	.word	0x47c28d00
 80013fc:	2000022c 	.word	0x2000022c
 8001400:	40478000 	.word	0x40478000
 8001404:	20000220 	.word	0x20000220

08001408 <CalcOffset>:
  wiperres1 = wiperpos1 * STEPRES;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <CalcOffset+0x34>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001440 <CalcOffset+0x38>
 8001412:	ee67 7a87 	vmul.f32	s15, s15, s14
  float RH = MAXRES - wiperres1;
 8001416:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001444 <CalcOffset+0x3c>
 800141a:	ee37 7a67 	vsub.f32	s14, s14, s15
  float RlMinusRh = RL - RH;
 800141e:	ee77 6ac7 	vsub.f32	s13, s15, s14
  float RlPlusRh = RL + RH;
 8001422:	ee77 7a87 	vadd.f32	s15, s15, s14
  float fraction = RlMinusRh / RlPlusRh;
 8001426:	ee86 0aa7 	vdiv.f32	s0, s13, s15
  Voff = VH * fraction;
 800142a:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800142e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <CalcOffset+0x40>)
 8001434:	ed83 0a00 	vstr	s0, [r3]
}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000001c 	.word	0x2000001c
 8001440:	43c35000 	.word	0x43c35000
 8001444:	47c28d00 	.word	0x47c28d00
 8001448:	2000021c 	.word	0x2000021c

0800144c <ImpChangeState>:
{
 800144c:	b508      	push	{r3, lr}
	imp_currentstate = 1-imp_currentstate;
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <ImpChangeState+0x3c>)
 8001450:	7813      	ldrb	r3, [r2, #0]
 8001452:	f1c3 0301 	rsb	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	7013      	strb	r3, [r2, #0]
	if (imp_currentstate == 0)
 800145a:	b963      	cbnz	r3, 8001476 <ImpChangeState+0x2a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 800145c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001460:	480a      	ldr	r0, [pc, #40]	; (800148c <ImpChangeState+0x40>)
 8001462:	f001 ff0d 	bl	8003280 <HAL_GPIO_TogglePin>
		HD44780_SetCursor(11,1);
 8001466:	2101      	movs	r1, #1
 8001468:	200b      	movs	r0, #11
 800146a:	f7ff fe53 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("M:HighZ");
 800146e:	4808      	ldr	r0, [pc, #32]	; (8001490 <ImpChangeState+0x44>)
 8001470:	f7ff ff0a 	bl	8001288 <HD44780_PrintStr>
}
 8001474:	bd08      	pop	{r3, pc}
		HD44780_SetCursor(13,1);
 8001476:	2101      	movs	r1, #1
 8001478:	200d      	movs	r0, #13
 800147a:	f7ff fe4b 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("M:50Ω");
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <ImpChangeState+0x48>)
 8001480:	f7ff ff02 	bl	8001288 <HD44780_PrintStr>
}
 8001484:	e7f6      	b.n	8001474 <ImpChangeState+0x28>
 8001486:	bf00      	nop
 8001488:	20000440 	.word	0x20000440
 800148c:	42020000 	.word	0x42020000
 8001490:	08008b48 	.word	0x08008b48
 8001494:	08008b50 	.word	0x08008b50

08001498 <WaveformChangeState>:
{
 8001498:	b508      	push	{r3, lr}
	wv_currentstate = (wv_currentstate+1)% 3;
 800149a:	491a      	ldr	r1, [pc, #104]	; (8001504 <WaveformChangeState+0x6c>)
 800149c:	780a      	ldrb	r2, [r1, #0]
 800149e:	3201      	adds	r2, #1
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <WaveformChangeState+0x70>)
 80014a2:	fb83 0302 	smull	r0, r3, r3, r2
 80014a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	700b      	strb	r3, [r1, #0]
	switch(wv_currentstate)
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d00f      	beq.n	80014d4 <WaveformChangeState+0x3c>
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d019      	beq.n	80014ec <WaveformChangeState+0x54>
 80014b8:	b103      	cbz	r3, 80014bc <WaveformChangeState+0x24>
}
 80014ba:	bd08      	pop	{r3, pc}
		AD9833_SetWaveform(AD9833_WAVEFORM_SINE);
 80014bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014c0:	f7ff fd68 	bl	8000f94 <AD9833_SetWaveform>
		HD44780_SetCursor(0,1);
 80014c4:	2101      	movs	r1, #1
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff fe24 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("SINE");
 80014cc:	480f      	ldr	r0, [pc, #60]	; (800150c <WaveformChangeState+0x74>)
 80014ce:	f7ff fedb 	bl	8001288 <HD44780_PrintStr>
		break;
 80014d2:	e7f2      	b.n	80014ba <WaveformChangeState+0x22>
		AD9833_SetWaveform(AD9833_WAVEFORM_TRIANGLE);
 80014d4:	f242 0002 	movw	r0, #8194	; 0x2002
 80014d8:	f7ff fd5c 	bl	8000f94 <AD9833_SetWaveform>
		HD44780_SetCursor(0,1);
 80014dc:	2101      	movs	r1, #1
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff fe18 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("TRIANGLE");
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <WaveformChangeState+0x78>)
 80014e6:	f7ff fecf 	bl	8001288 <HD44780_PrintStr>
		break;
 80014ea:	e7e6      	b.n	80014ba <WaveformChangeState+0x22>
		AD9833_SetWaveform(AD9833_WAVEFORM_SQUARE);
 80014ec:	f242 0028 	movw	r0, #8232	; 0x2028
 80014f0:	f7ff fd50 	bl	8000f94 <AD9833_SetWaveform>
		HD44780_SetCursor(0,1);
 80014f4:	2101      	movs	r1, #1
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fe0c 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("SQUARE");
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <WaveformChangeState+0x7c>)
 80014fe:	f7ff fec3 	bl	8001288 <HD44780_PrintStr>
}
 8001502:	e7da      	b.n	80014ba <WaveformChangeState+0x22>
 8001504:	20000460 	.word	0x20000460
 8001508:	55555556 	.word	0x55555556
 800150c:	08008b58 	.word	0x08008b58
 8001510:	08008b60 	.word	0x08008b60
 8001514:	08008b6c 	.word	0x08008b6c

08001518 <REChangeState>:
{
 8001518:	b500      	push	{lr}
 800151a:	b087      	sub	sp, #28
	re_currentstate = (re_currentstate+1)% 3;
 800151c:	498d      	ldr	r1, [pc, #564]	; (8001754 <REChangeState+0x23c>)
 800151e:	780a      	ldrb	r2, [r1, #0]
 8001520:	3201      	adds	r2, #1
 8001522:	4b8d      	ldr	r3, [pc, #564]	; (8001758 <REChangeState+0x240>)
 8001524:	fb83 0302 	smull	r0, r3, r3, r2
 8001528:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	700b      	strb	r3, [r1, #0]
	switch(re_currentstate)
 8001532:	2b01      	cmp	r3, #1
 8001534:	d04f      	beq.n	80015d6 <REChangeState+0xbe>
 8001536:	2b02      	cmp	r3, #2
 8001538:	f000 80a8 	beq.w	800168c <REChangeState+0x174>
 800153c:	b113      	cbz	r3, 8001544 <REChangeState+0x2c>
}
 800153e:	b007      	add	sp, #28
 8001540:	f85d fb04 	ldr.w	pc, [sp], #4
		if (frequency<1 || frequency>12500000)
 8001544:	4b85      	ldr	r3, [pc, #532]	; (800175c <REChangeState+0x244>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1e59      	subs	r1, r3, #1
 800154a:	4a85      	ldr	r2, [pc, #532]	; (8001760 <REChangeState+0x248>)
 800154c:	4291      	cmp	r1, r2
 800154e:	d92b      	bls.n	80015a8 <REChangeState+0x90>
			frequency=1;
 8001550:	4b82      	ldr	r3, [pc, #520]	; (800175c <REChangeState+0x244>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
		sprintf(frequencyStr, "%lu", frequency);
 8001556:	4b81      	ldr	r3, [pc, #516]	; (800175c <REChangeState+0x244>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4982      	ldr	r1, [pc, #520]	; (8001764 <REChangeState+0x24c>)
 800155c:	a801      	add	r0, sp, #4
 800155e:	f005 f967 	bl	8006830 <siprintf>
		HD44780_SetCursor(0,0);
 8001562:	2100      	movs	r1, #0
 8001564:	4608      	mov	r0, r1
 8001566:	f7ff fdd5 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("FRQ:");
 800156a:	487f      	ldr	r0, [pc, #508]	; (8001768 <REChangeState+0x250>)
 800156c:	f7ff fe8c 	bl	8001288 <HD44780_PrintStr>
		HD44780_SetCursor(4,0);
 8001570:	2100      	movs	r1, #0
 8001572:	2004      	movs	r0, #4
 8001574:	f7ff fdce 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr(frequencyStr);
 8001578:	a801      	add	r0, sp, #4
 800157a:	f7ff fe85 	bl	8001288 <HD44780_PrintStr>
		HD44780_SetCursor(strlen(frequencyStr)+5,0);
 800157e:	a801      	add	r0, sp, #4
 8001580:	f7fe fe5a 	bl	8000238 <strlen>
 8001584:	3005      	adds	r0, #5
 8001586:	2100      	movs	r1, #0
 8001588:	b2c0      	uxtb	r0, r0
 800158a:	f7ff fdc3 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("Hz");
 800158e:	4877      	ldr	r0, [pc, #476]	; (800176c <REChangeState+0x254>)
 8001590:	f7ff fe7a 	bl	8001288 <HD44780_PrintStr>
		HD44780_SetCursor(pos+5, 0);
 8001594:	4b76      	ldr	r3, [pc, #472]	; (8001770 <REChangeState+0x258>)
 8001596:	8818      	ldrh	r0, [r3, #0]
 8001598:	3005      	adds	r0, #5
 800159a:	2100      	movs	r1, #0
 800159c:	b2c0      	uxtb	r0, r0
 800159e:	f7ff fdb9 	bl	8001114 <HD44780_SetCursor>
		HD44780_Blink();
 80015a2:	f7ff fde7 	bl	8001174 <HD44780_Blink>
		break;
 80015a6:	e7ca      	b.n	800153e <REChangeState+0x26>
		else if(direction==1)
 80015a8:	4a72      	ldr	r2, [pc, #456]	; (8001774 <REChangeState+0x25c>)
 80015aa:	f992 2000 	ldrsb.w	r2, [r2]
 80015ae:	2a01      	cmp	r2, #1
 80015b0:	d008      	beq.n	80015c4 <REChangeState+0xac>
			frequency-= 10^pos;
 80015b2:	4a6f      	ldr	r2, [pc, #444]	; (8001770 <REChangeState+0x258>)
 80015b4:	8812      	ldrh	r2, [r2, #0]
 80015b6:	f082 020a 	eor.w	r2, r2, #10
 80015ba:	b292      	uxth	r2, r2
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	4a67      	ldr	r2, [pc, #412]	; (800175c <REChangeState+0x244>)
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e7c8      	b.n	8001556 <REChangeState+0x3e>
			frequency+= 10^pos;
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <REChangeState+0x258>)
 80015c6:	8812      	ldrh	r2, [r2, #0]
 80015c8:	f082 020a 	eor.w	r2, r2, #10
 80015cc:	fa13 f382 	uxtah	r3, r3, r2
 80015d0:	4a62      	ldr	r2, [pc, #392]	; (800175c <REChangeState+0x244>)
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e7bf      	b.n	8001556 <REChangeState+0x3e>
		if(direction == 1)
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <REChangeState+0x25c>)
 80015d8:	f993 3000 	ldrsb.w	r3, [r3]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d038      	beq.n	8001652 <REChangeState+0x13a>
			wiperpos2--;
 80015e0:	4b65      	ldr	r3, [pc, #404]	; (8001778 <REChangeState+0x260>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ee:	edc3 7a00 	vstr	s15, [r3]
			if(wiperpos2 < 1)
 80015f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	d444      	bmi.n	8001686 <REChangeState+0x16e>
			Vout = CalcAmplitude(wiperres2);
 80015fc:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800177c <REChangeState+0x264>
 8001600:	f7ff fece 	bl	80013a0 <CalcAmplitude>
 8001604:	4b5e      	ldr	r3, [pc, #376]	; (8001780 <REChangeState+0x268>)
 8001606:	ed83 0a00 	vstr	s0, [r3]
		sprintf(amplitudeStr,"%f", Vout);
 800160a:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <REChangeState+0x268>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	f7fe ff7f 	bl	8000510 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	495b      	ldr	r1, [pc, #364]	; (8001784 <REChangeState+0x26c>)
 8001618:	a801      	add	r0, sp, #4
 800161a:	f005 f909 	bl	8006830 <siprintf>
		HD44780_SetCursor(0,0);
 800161e:	2100      	movs	r1, #0
 8001620:	4608      	mov	r0, r1
 8001622:	f7ff fd77 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("AMP:");
 8001626:	4858      	ldr	r0, [pc, #352]	; (8001788 <REChangeState+0x270>)
 8001628:	f7ff fe2e 	bl	8001288 <HD44780_PrintStr>
		HD44780_SetCursor(4,0);
 800162c:	2100      	movs	r1, #0
 800162e:	2004      	movs	r0, #4
 8001630:	f7ff fd70 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr(amplitudeStr);
 8001634:	a801      	add	r0, sp, #4
 8001636:	f7ff fe27 	bl	8001288 <HD44780_PrintStr>
		HD44780_SetCursor(strlen(amplitudeStr)+5,0);
 800163a:	a801      	add	r0, sp, #4
 800163c:	f7fe fdfc 	bl	8000238 <strlen>
 8001640:	3005      	adds	r0, #5
 8001642:	2100      	movs	r1, #0
 8001644:	b2c0      	uxtb	r0, r0
 8001646:	f7ff fd65 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("Vpp");
 800164a:	4850      	ldr	r0, [pc, #320]	; (800178c <REChangeState+0x274>)
 800164c:	f7ff fe1c 	bl	8001288 <HD44780_PrintStr>
		break;
 8001650:	e775      	b.n	800153e <REChangeState+0x26>
			wiperpos2++;
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <REChangeState+0x260>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800165c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001660:	edc3 7a00 	vstr	s15, [r3]
			if(wiperpos2 > 100)
 8001664:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001790 <REChangeState+0x278>
 8001668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	dd01      	ble.n	8001676 <REChangeState+0x15e>
				wiperpos2 = 100;
 8001672:	ed83 7a00 	vstr	s14, [r3]
			Vout = CalcAmplitude(wiperres2);
 8001676:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800177c <REChangeState+0x264>
 800167a:	f7ff fe91 	bl	80013a0 <CalcAmplitude>
 800167e:	4b40      	ldr	r3, [pc, #256]	; (8001780 <REChangeState+0x268>)
 8001680:	ed83 0a00 	vstr	s0, [r3]
 8001684:	e7c1      	b.n	800160a <REChangeState+0xf2>
				wiperpos2 = 0;
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e7b7      	b.n	80015fc <REChangeState+0xe4>
		if(direction == 1)
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <REChangeState+0x25c>)
 800168e:	f993 3000 	ldrsb.w	r3, [r3]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d03c      	beq.n	8001710 <REChangeState+0x1f8>
			wiperpos1--;
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <REChangeState+0x27c>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016a4:	edc3 7a00 	vstr	s15, [r3]
			if(wiperpos2 < 1)
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <REChangeState+0x260>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d449      	bmi.n	800174c <REChangeState+0x234>
			Voff = CalcOffset(wiperres1);
 80016b8:	4b37      	ldr	r3, [pc, #220]	; (8001798 <REChangeState+0x280>)
 80016ba:	ed93 0a00 	vldr	s0, [r3]
 80016be:	f7ff fea3 	bl	8001408 <CalcOffset>
 80016c2:	4b36      	ldr	r3, [pc, #216]	; (800179c <REChangeState+0x284>)
 80016c4:	ed83 0a00 	vstr	s0, [r3]
		sprintf(offsetStr,"%f", Vout);
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <REChangeState+0x268>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	f7fe ff20 	bl	8000510 <__aeabi_f2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	492b      	ldr	r1, [pc, #172]	; (8001784 <REChangeState+0x26c>)
 80016d6:	a801      	add	r0, sp, #4
 80016d8:	f005 f8aa 	bl	8006830 <siprintf>
		HD44780_SetCursor(0,0);
 80016dc:	2100      	movs	r1, #0
 80016de:	4608      	mov	r0, r1
 80016e0:	f7ff fd18 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("OFF:");
 80016e4:	482e      	ldr	r0, [pc, #184]	; (80017a0 <REChangeState+0x288>)
 80016e6:	f7ff fdcf 	bl	8001288 <HD44780_PrintStr>
		HD44780_SetCursor(4,0);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2004      	movs	r0, #4
 80016ee:	f7ff fd11 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr(offsetStr);
 80016f2:	a801      	add	r0, sp, #4
 80016f4:	f7ff fdc8 	bl	8001288 <HD44780_PrintStr>
		HD44780_SetCursor(strlen(offsetStr)+5,0);
 80016f8:	a801      	add	r0, sp, #4
 80016fa:	f7fe fd9d 	bl	8000238 <strlen>
 80016fe:	3005      	adds	r0, #5
 8001700:	2100      	movs	r1, #0
 8001702:	b2c0      	uxtb	r0, r0
 8001704:	f7ff fd06 	bl	8001114 <HD44780_SetCursor>
		HD44780_PrintStr("V");
 8001708:	4826      	ldr	r0, [pc, #152]	; (80017a4 <REChangeState+0x28c>)
 800170a:	f7ff fdbd 	bl	8001288 <HD44780_PrintStr>
}
 800170e:	e716      	b.n	800153e <REChangeState+0x26>
			wiperpos1++;
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <REChangeState+0x27c>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800171a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800171e:	edc3 7a00 	vstr	s15, [r3]
			if(wiperpos2 > 255)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <REChangeState+0x260>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80017a8 <REChangeState+0x290>
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	dd01      	ble.n	800173a <REChangeState+0x222>
				wiperpos2 = 255;
 8001736:	edc3 7a00 	vstr	s15, [r3]
			Voff = CalcOffset(wiperres1);
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <REChangeState+0x280>)
 800173c:	ed93 0a00 	vldr	s0, [r3]
 8001740:	f7ff fe62 	bl	8001408 <CalcOffset>
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <REChangeState+0x284>)
 8001746:	ed83 0a00 	vstr	s0, [r3]
 800174a:	e7bd      	b.n	80016c8 <REChangeState+0x1b0>
				wiperpos2 = 0;
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e7b2      	b.n	80016b8 <REChangeState+0x1a0>
 8001752:	bf00      	nop
 8001754:	2000045a 	.word	0x2000045a
 8001758:	55555556 	.word	0x55555556
 800175c:	2000023c 	.word	0x2000023c
 8001760:	00bebc1f 	.word	0x00bebc1f
 8001764:	08008b74 	.word	0x08008b74
 8001768:	08008b78 	.word	0x08008b78
 800176c:	08008b80 	.word	0x08008b80
 8001770:	20000458 	.word	0x20000458
 8001774:	20000230 	.word	0x20000230
 8001778:	20000020 	.word	0x20000020
 800177c:	00000000 	.word	0x00000000
 8001780:	20000220 	.word	0x20000220
 8001784:	08008b84 	.word	0x08008b84
 8001788:	08008b88 	.word	0x08008b88
 800178c:	08008b90 	.word	0x08008b90
 8001790:	42c80000 	.word	0x42c80000
 8001794:	2000001c 	.word	0x2000001c
 8001798:	2000045c 	.word	0x2000045c
 800179c:	2000021c 	.word	0x2000021c
 80017a0:	08008b94 	.word	0x08008b94
 80017a4:	08008b9c 	.word	0x08008b9c
 80017a8:	437f0000 	.word	0x437f0000

080017ac <DebounceImpSwitch>:
{
 80017ac:	b510      	push	{r4, lr}
	uint32_t currentTimeImp = HAL_GetTick();
 80017ae:	f000 fd77 	bl	80022a0 <HAL_GetTick>
	if ((currentTimeImp - lastUpdateImp) >= DEBOUNCE_TIME)
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <DebounceImpSwitch+0x48>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1ac3      	subs	r3, r0, r3
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d800      	bhi.n	80017be <DebounceImpSwitch+0x12>
}
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	4604      	mov	r4, r0
		debounceImp <<= 1;
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <DebounceImpSwitch+0x4c>)
 80017c2:	8813      	ldrh	r3, [r2, #0]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	8013      	strh	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11) == GPIO_PIN_RESET)
 80017c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017cc:	480b      	ldr	r0, [pc, #44]	; (80017fc <DebounceImpSwitch+0x50>)
 80017ce:	f001 fd4b 	bl	8003268 <HAL_GPIO_ReadPin>
 80017d2:	b920      	cbnz	r0, 80017de <DebounceImpSwitch+0x32>
			debounceImp |= 0x0001;
 80017d4:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <DebounceImpSwitch+0x4c>)
 80017d6:	8813      	ldrh	r3, [r2, #0]
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	8013      	strh	r3, [r2, #0]
		lastUpdateImp = currentTimeImp;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <DebounceImpSwitch+0x48>)
 80017e0:	601c      	str	r4, [r3, #0]
		if (debounceImp == 0x8000)
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <DebounceImpSwitch+0x4c>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ea:	d1e7      	bne.n	80017bc <DebounceImpSwitch+0x10>
			ImpChangeState();
 80017ec:	f7ff fe2e 	bl	800144c <ImpChangeState>
}
 80017f0:	e7e4      	b.n	80017bc <DebounceImpSwitch+0x10>
 80017f2:	bf00      	nop
 80017f4:	20000444 	.word	0x20000444
 80017f8:	20000010 	.word	0x20000010
 80017fc:	42020400 	.word	0x42020400

08001800 <DebounceRotaryEcoderSwitch>:
{
 8001800:	b510      	push	{r4, lr}
	uint32_t currentTimeRE = HAL_GetTick();
 8001802:	f000 fd4d 	bl	80022a0 <HAL_GetTick>
	if ((currentTimeRE - lastUpdateRE) >= DEBOUNCE_TIME)
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <DebounceRotaryEcoderSwitch+0x48>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1ac3      	subs	r3, r0, r3
 800180c:	2b04      	cmp	r3, #4
 800180e:	d800      	bhi.n	8001812 <DebounceRotaryEcoderSwitch+0x12>
}
 8001810:	bd10      	pop	{r4, pc}
 8001812:	4604      	mov	r4, r0
		debounceRE <<= 1;
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <DebounceRotaryEcoderSwitch+0x4c>)
 8001816:	8813      	ldrh	r3, [r2, #0]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	8013      	strh	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET)
 800181c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <DebounceRotaryEcoderSwitch+0x50>)
 8001822:	f001 fd21 	bl	8003268 <HAL_GPIO_ReadPin>
 8001826:	b920      	cbnz	r0, 8001832 <DebounceRotaryEcoderSwitch+0x32>
			debounceRE |= 0x0001;
 8001828:	4a08      	ldr	r2, [pc, #32]	; (800184c <DebounceRotaryEcoderSwitch+0x4c>)
 800182a:	8813      	ldrh	r3, [r2, #0]
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	8013      	strh	r3, [r2, #0]
		lastUpdateRE = currentTimeRE;
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <DebounceRotaryEcoderSwitch+0x48>)
 8001834:	601c      	str	r4, [r3, #0]
		if (debounceRE == 0x8000)
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <DebounceRotaryEcoderSwitch+0x4c>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800183e:	d1e7      	bne.n	8001810 <DebounceRotaryEcoderSwitch+0x10>
			REChangeState();
 8001840:	f7ff fe6a 	bl	8001518 <REChangeState>
}
 8001844:	e7e4      	b.n	8001810 <DebounceRotaryEcoderSwitch+0x10>
 8001846:	bf00      	nop
 8001848:	20000450 	.word	0x20000450
 800184c:	20000016 	.word	0x20000016
 8001850:	42020400 	.word	0x42020400

08001854 <DebounceLeftSwitch>:
{
 8001854:	b510      	push	{r4, lr}
	uint32_t currentTimeL = HAL_GetTick();
 8001856:	f000 fd23 	bl	80022a0 <HAL_GetTick>
	if ((currentTimeL - lastUpdateL) >= DEBOUNCE_TIME)
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <DebounceLeftSwitch+0x54>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	1ac3      	subs	r3, r0, r3
 8001860:	2b04      	cmp	r3, #4
 8001862:	d800      	bhi.n	8001866 <DebounceLeftSwitch+0x12>
}
 8001864:	bd10      	pop	{r4, pc}
 8001866:	4604      	mov	r4, r0
		debounceL <<= 1;
 8001868:	4a10      	ldr	r2, [pc, #64]	; (80018ac <DebounceLeftSwitch+0x58>)
 800186a:	8813      	ldrh	r3, [r2, #0]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	8013      	strh	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==GPIO_PIN_RESET)
 8001870:	2102      	movs	r1, #2
 8001872:	480f      	ldr	r0, [pc, #60]	; (80018b0 <DebounceLeftSwitch+0x5c>)
 8001874:	f001 fcf8 	bl	8003268 <HAL_GPIO_ReadPin>
 8001878:	b920      	cbnz	r0, 8001884 <DebounceLeftSwitch+0x30>
			debounceL |= 0x0001;
 800187a:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <DebounceLeftSwitch+0x58>)
 800187c:	8813      	ldrh	r3, [r2, #0]
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	8013      	strh	r3, [r2, #0]
		lastUpdateL = currentTimeL;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <DebounceLeftSwitch+0x54>)
 8001886:	601c      	str	r4, [r3, #0]
		if (debounceL == 0x8000)
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <DebounceLeftSwitch+0x58>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001890:	d1e8      	bne.n	8001864 <DebounceLeftSwitch+0x10>
			pos++;
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <DebounceLeftSwitch+0x60>)
 8001894:	8813      	ldrh	r3, [r2, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	8013      	strh	r3, [r2, #0]
			if (pos > 6)
 800189c:	2b06      	cmp	r3, #6
 800189e:	d9e1      	bls.n	8001864 <DebounceLeftSwitch+0x10>
				pos=0;
 80018a0:	4613      	mov	r3, r2
 80018a2:	2200      	movs	r2, #0
 80018a4:	801a      	strh	r2, [r3, #0]
}
 80018a6:	e7dd      	b.n	8001864 <DebounceLeftSwitch+0x10>
 80018a8:	20000448 	.word	0x20000448
 80018ac:	20000012 	.word	0x20000012
 80018b0:	42020400 	.word	0x42020400
 80018b4:	20000458 	.word	0x20000458

080018b8 <DebounceRightSwitch>:
{
 80018b8:	b510      	push	{r4, lr}
	uint32_t currentTimeR = HAL_GetTick();
 80018ba:	f000 fcf1 	bl	80022a0 <HAL_GetTick>
	if ((currentTimeR - lastUpdateR) >= DEBOUNCE_TIME)
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <DebounceRightSwitch+0x48>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	1ac3      	subs	r3, r0, r3
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d800      	bhi.n	80018ca <DebounceRightSwitch+0x12>
}
 80018c8:	bd10      	pop	{r4, pc}
 80018ca:	4604      	mov	r4, r0
		debounceR <<= 1;
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <DebounceRightSwitch+0x4c>)
 80018ce:	8813      	ldrh	r3, [r2, #0]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	8013      	strh	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET)
 80018d4:	2104      	movs	r1, #4
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <DebounceRightSwitch+0x50>)
 80018d8:	f001 fcc6 	bl	8003268 <HAL_GPIO_ReadPin>
 80018dc:	b920      	cbnz	r0, 80018e8 <DebounceRightSwitch+0x30>
			debounceR |= 0x0001;
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <DebounceRightSwitch+0x4c>)
 80018e0:	8813      	ldrh	r3, [r2, #0]
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	8013      	strh	r3, [r2, #0]
		lastUpdateR = currentTimeR;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <DebounceRightSwitch+0x48>)
 80018ea:	601c      	str	r4, [r3, #0]
		if (debounceR == 0x8000)
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <DebounceRightSwitch+0x4c>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018f4:	d1e8      	bne.n	80018c8 <DebounceRightSwitch+0x10>
			pos--;
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <DebounceRightSwitch+0x54>)
 80018f8:	8813      	ldrh	r3, [r2, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	8013      	strh	r3, [r2, #0]
}
 80018fe:	e7e3      	b.n	80018c8 <DebounceRightSwitch+0x10>
 8001900:	2000044c 	.word	0x2000044c
 8001904:	20000014 	.word	0x20000014
 8001908:	42020400 	.word	0x42020400
 800190c:	20000458 	.word	0x20000458

08001910 <DebounceWVFSwitch>:
{
 8001910:	b510      	push	{r4, lr}
	uint32_t currentTimeWVF = HAL_GetTick();
 8001912:	f000 fcc5 	bl	80022a0 <HAL_GetTick>
	if ((currentTimeWVF - lastUpdateWVF) >= DEBOUNCE_TIME)
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <DebounceWVFSwitch+0x48>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ac3      	subs	r3, r0, r3
 800191c:	2b04      	cmp	r3, #4
 800191e:	d800      	bhi.n	8001922 <DebounceWVFSwitch+0x12>
}
 8001920:	bd10      	pop	{r4, pc}
 8001922:	4604      	mov	r4, r0
		debounceWVF <<= 1;
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <DebounceWVFSwitch+0x4c>)
 8001926:	8813      	ldrh	r3, [r2, #0]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	8013      	strh	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==GPIO_PIN_RESET)
 800192c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <DebounceWVFSwitch+0x50>)
 8001932:	f001 fc99 	bl	8003268 <HAL_GPIO_ReadPin>
 8001936:	b920      	cbnz	r0, 8001942 <DebounceWVFSwitch+0x32>
			debounceWVF |= 0x0001;
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <DebounceWVFSwitch+0x4c>)
 800193a:	8813      	ldrh	r3, [r2, #0]
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	8013      	strh	r3, [r2, #0]
		lastUpdateWVF = currentTimeWVF;
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <DebounceWVFSwitch+0x48>)
 8001944:	601c      	str	r4, [r3, #0]
		if (debounceWVF == 0x8000)
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <DebounceWVFSwitch+0x4c>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800194e:	d1e7      	bne.n	8001920 <DebounceWVFSwitch+0x10>
			WaveformChangeState();
 8001950:	f7ff fda2 	bl	8001498 <WaveformChangeState>
}
 8001954:	e7e4      	b.n	8001920 <DebounceWVFSwitch+0x10>
 8001956:	bf00      	nop
 8001958:	20000454 	.word	0x20000454
 800195c:	20000018 	.word	0x20000018
 8001960:	42020400 	.word	0x42020400

08001964 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001966:	e7fe      	b.n	8001966 <Error_Handler+0x2>

08001968 <MX_TIM1_Init>:
{
 8001968:	b500      	push	{lr}
 800196a:	b08d      	sub	sp, #52	; 0x34
	TIM_Encoder_InitTypeDef sConfig = {0};
 800196c:	2224      	movs	r2, #36	; 0x24
 800196e:	2100      	movs	r1, #0
 8001970:	a803      	add	r0, sp, #12
 8001972:	f004 ffc0 	bl	80068f6 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001976:	2300      	movs	r3, #0
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	9302      	str	r3, [sp, #8]
	htim1.Instance = TIM1;
 800197e:	4812      	ldr	r0, [pc, #72]	; (80019c8 <MX_TIM1_Init+0x60>)
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_TIM1_Init+0x64>)
 8001982:	6002      	str	r2, [r0, #0]
	htim1.Init.Prescaler = 0;
 8001984:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	6083      	str	r3, [r0, #8]
	htim1.Init.Period = 65535;
 8001988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198c:	60c2      	str	r2, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	6103      	str	r3, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8001990:	6143      	str	r3, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	6183      	str	r3, [r0, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001994:	2303      	movs	r3, #3
 8001996:	9303      	str	r3, [sp, #12]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001998:	2301      	movs	r3, #1
 800199a:	9305      	str	r3, [sp, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800199c:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800199e:	a903      	add	r1, sp, #12
 80019a0:	f003 fd24 	bl	80053ec <HAL_TIM_Encoder_Init>
 80019a4:	b958      	cbnz	r0, 80019be <MX_TIM1_Init+0x56>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019aa:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ae:	4669      	mov	r1, sp
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_TIM1_Init+0x60>)
 80019b2:	f003 fdfd 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	b920      	cbnz	r0, 80019c2 <MX_TIM1_Init+0x5a>
}
 80019b8:	b00d      	add	sp, #52	; 0x34
 80019ba:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80019be:	f7ff ffd1 	bl	8001964 <Error_Handler>
		Error_Handler();
 80019c2:	f7ff ffcf 	bl	8001964 <Error_Handler>
 80019c6:	bf00      	nop
 80019c8:	20000360 	.word	0x20000360
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <MX_I2C1_Init>:
{
 80019d0:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <MX_I2C1_Init+0x48>)
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_I2C1_Init+0x4c>)
 80019d6:	6003      	str	r3, [r0, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019da:	6043      	str	r3, [r0, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	6083      	str	r3, [r0, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e0:	2201      	movs	r2, #1
 80019e2:	60c2      	str	r2, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e4:	6103      	str	r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80019e6:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019e8:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ea:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ec:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ee:	f001 fd9d 	bl	800352c <HAL_I2C_Init>
 80019f2:	b950      	cbnz	r0, 8001a0a <MX_I2C1_Init+0x3a>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4808      	ldr	r0, [pc, #32]	; (8001a18 <MX_I2C1_Init+0x48>)
 80019f8:	f001 feb4 	bl	8003764 <HAL_I2CEx_ConfigAnalogFilter>
 80019fc:	b938      	cbnz	r0, 8001a0e <MX_I2C1_Init+0x3e>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019fe:	2100      	movs	r1, #0
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_I2C1_Init+0x48>)
 8001a02:	f001 fedd 	bl	80037c0 <HAL_I2CEx_ConfigDigitalFilter>
 8001a06:	b920      	cbnz	r0, 8001a12 <MX_I2C1_Init+0x42>
}
 8001a08:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001a0a:	f7ff ffab 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001a0e:	f7ff ffa9 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001a12:	f7ff ffa7 	bl	8001964 <Error_Handler>
 8001a16:	bf00      	nop
 8001a18:	200002a8 	.word	0x200002a8
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	00303d5b 	.word	0x00303d5b

08001a24 <MX_UART4_Init>:
{
 8001a24:	b508      	push	{r3, lr}
	huart4.Instance = UART4;
 8001a26:	4815      	ldr	r0, [pc, #84]	; (8001a7c <MX_UART4_Init+0x58>)
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_UART4_Init+0x5c>)
 8001a2a:	6003      	str	r3, [r0, #0]
	huart4.Init.BaudRate = 115200;
 8001a2c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a30:	6043      	str	r3, [r0, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	2300      	movs	r3, #0
 8001a34:	6083      	str	r3, [r0, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001a36:	60c3      	str	r3, [r0, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001a38:	6103      	str	r3, [r0, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	6142      	str	r2, [r0, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	6183      	str	r3, [r0, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	61c3      	str	r3, [r0, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a42:	6203      	str	r3, [r0, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a44:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a46:	6283      	str	r3, [r0, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a48:	f004 f907 	bl	8005c5a <HAL_UART_Init>
 8001a4c:	b970      	cbnz	r0, 8001a6c <MX_UART4_Init+0x48>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <MX_UART4_Init+0x58>)
 8001a52:	f004 f97a 	bl	8005d4a <HAL_UARTEx_SetTxFifoThreshold>
 8001a56:	b958      	cbnz	r0, 8001a70 <MX_UART4_Init+0x4c>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4808      	ldr	r0, [pc, #32]	; (8001a7c <MX_UART4_Init+0x58>)
 8001a5c:	f004 f99a 	bl	8005d94 <HAL_UARTEx_SetRxFifoThreshold>
 8001a60:	b940      	cbnz	r0, 8001a74 <MX_UART4_Init+0x50>
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_UART4_Init+0x58>)
 8001a64:	f004 f952 	bl	8005d0c <HAL_UARTEx_DisableFifoMode>
 8001a68:	b930      	cbnz	r0, 8001a78 <MX_UART4_Init+0x54>
}
 8001a6a:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001a6c:	f7ff ff7a 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001a70:	f7ff ff78 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001a74:	f7ff ff76 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001a78:	f7ff ff74 	bl	8001964 <Error_Handler>
 8001a7c:	200003ac 	.word	0x200003ac
 8001a80:	40004c00 	.word	0x40004c00

08001a84 <MX_SPI1_Init>:
{
 8001a84:	b508      	push	{r3, lr}
	hspi1.Instance = SPI1;
 8001a86:	4810      	ldr	r0, [pc, #64]	; (8001ac8 <MX_SPI1_Init+0x44>)
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_SPI1_Init+0x48>)
 8001a8a:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a90:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a92:	2300      	movs	r3, #0
 8001a94:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a96:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001a9a:	60c2      	str	r2, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	6102      	str	r2, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa0:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001aa2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001aa6:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aa8:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aaa:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aac:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aae:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ab4:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aba:	f003 f9f0 	bl	8004e9e <HAL_SPI_Init>
 8001abe:	b900      	cbnz	r0, 8001ac2 <MX_SPI1_Init+0x3e>
}
 8001ac0:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001ac2:	f7ff ff4f 	bl	8001964 <Error_Handler>
 8001ac6:	bf00      	nop
 8001ac8:	200002fc 	.word	0x200002fc
 8001acc:	40013000 	.word	0x40013000

08001ad0 <MX_ADC1_Init>:
{
 8001ad0:	b500      	push	{lr}
 8001ad2:	b08b      	sub	sp, #44	; 0x2c
	ADC_MultiModeTypeDef multimode = {0};
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9307      	str	r3, [sp, #28]
 8001ad8:	9308      	str	r3, [sp, #32]
 8001ada:	9309      	str	r3, [sp, #36]	; 0x24
	ADC_ChannelConfTypeDef sConfig = {0};
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	9303      	str	r3, [sp, #12]
 8001ae2:	9304      	str	r3, [sp, #16]
 8001ae4:	9305      	str	r3, [sp, #20]
 8001ae6:	9306      	str	r3, [sp, #24]
	hadc1.Instance = ADC1;
 8001ae8:	481d      	ldr	r0, [pc, #116]	; (8001b60 <MX_ADC1_Init+0x90>)
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <MX_ADC1_Init+0x94>)
 8001aec:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001aee:	6043      	str	r3, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af0:	6083      	str	r3, [r0, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af2:	60c3      	str	r3, [r0, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001af4:	6103      	str	r3, [r0, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001af6:	2204      	movs	r2, #4
 8001af8:	6142      	str	r2, [r0, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001afa:	7603      	strb	r3, [r0, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001afc:	7642      	strb	r2, [r0, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001afe:	2201      	movs	r2, #1
 8001b00:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b02:	f880 3020 	strb.w	r3, [r0, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b06:	6283      	str	r3, [r0, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b08:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b0a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b12:	6342      	str	r2, [r0, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001b14:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b18:	f000 fbdc 	bl	80022d4 <HAL_ADC_Init>
 8001b1c:	b9d0      	cbnz	r0, 8001b54 <MX_ADC1_Init+0x84>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9307      	str	r3, [sp, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b22:	a907      	add	r1, sp, #28
 8001b24:	480e      	ldr	r0, [pc, #56]	; (8001b60 <MX_ADC1_Init+0x90>)
 8001b26:	f001 f9c3 	bl	8002eb0 <HAL_ADCEx_MultiModeConfigChannel>
 8001b2a:	b9a8      	cbnz	r0, 8001b58 <MX_ADC1_Init+0x88>
	sConfig.Channel = ADC_CHANNEL_7;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b2e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b30:	2306      	movs	r3, #6
 8001b32:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b34:	2300      	movs	r3, #0
 8001b36:	9303      	str	r3, [sp, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b38:	227f      	movs	r2, #127	; 0x7f
 8001b3a:	9204      	str	r2, [sp, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	9205      	str	r2, [sp, #20]
	sConfig.Offset = 0;
 8001b40:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b42:	eb0d 0102 	add.w	r1, sp, r2
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_ADC1_Init+0x90>)
 8001b48:	f000 fe0c 	bl	8002764 <HAL_ADC_ConfigChannel>
 8001b4c:	b930      	cbnz	r0, 8001b5c <MX_ADC1_Init+0x8c>
}
 8001b4e:	b00b      	add	sp, #44	; 0x2c
 8001b50:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001b54:	f7ff ff06 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001b58:	f7ff ff04 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001b5c:	f7ff ff02 	bl	8001964 <Error_Handler>
 8001b60:	20000240 	.word	0x20000240
 8001b64:	42028000 	.word	0x42028000
 8001b68:	1d500080 	.word	0x1d500080

08001b6c <SystemClock_Config>:
{
 8001b6c:	b500      	push	{lr}
 8001b6e:	b099      	sub	sp, #100	; 0x64
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b70:	2248      	movs	r2, #72	; 0x48
 8001b72:	2100      	movs	r1, #0
 8001b74:	a806      	add	r0, sp, #24
 8001b76:	f004 febe 	bl	80068f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	9302      	str	r3, [sp, #8]
 8001b80:	9303      	str	r3, [sp, #12]
 8001b82:	9304      	str	r3, [sp, #16]
 8001b84:	9305      	str	r3, [sp, #20]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001b86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b8a:	f001 fe67 	bl	800385c <HAL_PWREx_ControlVoltageScaling>
 8001b8e:	bb00      	cbnz	r0, 8001bd2 <SystemClock_Config+0x66>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001b90:	2312      	movs	r3, #18
 8001b92:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b98:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ba6:	2260      	movs	r2, #96	; 0x60
 8001ba8:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001baa:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	a806      	add	r0, sp, #24
 8001bae:	f001 ffa7 	bl	8003b00 <HAL_RCC_OscConfig>
 8001bb2:	b980      	cbnz	r0, 8001bd6 <SystemClock_Config+0x6a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bb8:	2101      	movs	r1, #1
 8001bba:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc0:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc2:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bc4:	a801      	add	r0, sp, #4
 8001bc6:	f002 fb75 	bl	80042b4 <HAL_RCC_ClockConfig>
 8001bca:	b930      	cbnz	r0, 8001bda <SystemClock_Config+0x6e>
}
 8001bcc:	b019      	add	sp, #100	; 0x64
 8001bce:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001bd2:	f7ff fec7 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001bd6:	f7ff fec5 	bl	8001964 <Error_Handler>
		Error_Handler();
 8001bda:	f7ff fec3 	bl	8001964 <Error_Handler>
	...

08001be0 <main>:
{
 8001be0:	b500      	push	{lr}
 8001be2:	b083      	sub	sp, #12
	HAL_Init();
 8001be4:	f000 fb3e 	bl	8002264 <HAL_Init>
	SystemClock_Config();
 8001be8:	f7ff ffc0 	bl	8001b6c <SystemClock_Config>
	MX_GPIO_Init();
 8001bec:	f7ff fb56 	bl	800129c <MX_GPIO_Init>
	MX_TIM1_Init();
 8001bf0:	f7ff feba 	bl	8001968 <MX_TIM1_Init>
	MX_I2C1_Init();
 8001bf4:	f7ff feec 	bl	80019d0 <MX_I2C1_Init>
	MX_UART4_Init();
 8001bf8:	f7ff ff14 	bl	8001a24 <MX_UART4_Init>
	MX_SPI1_Init();
 8001bfc:	f7ff ff42 	bl	8001a84 <MX_SPI1_Init>
	MX_ADC1_Init();
 8001c00:	f7ff ff66 	bl	8001ad0 <MX_ADC1_Init>
	HD44780_Init(2);
 8001c04:	2002      	movs	r0, #2
 8001c06:	f7ff fad5 	bl	80011b4 <HD44780_Init>
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001c0a:	213c      	movs	r1, #60	; 0x3c
 8001c0c:	482e      	ldr	r0, [pc, #184]	; (8001cc8 <main+0xe8>)
 8001c0e:	f003 fc54 	bl	80054ba <HAL_TIM_Encoder_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 8001c12:	482e      	ldr	r0, [pc, #184]	; (8001ccc <main+0xec>)
 8001c14:	f001 f87e 	bl	8002d14 <HAL_ADC_Start_IT>
	AD9833_Init();
 8001c18:	f7ff f98a 	bl	8000f30 <AD9833_Init>
	TPL0102_Init(&hi2c1);
 8001c1c:	482c      	ldr	r0, [pc, #176]	; (8001cd0 <main+0xf0>)
 8001c1e:	f7ff f9d6 	bl	8000fce <TPL0102_Init>
 8001c22:	e033      	b.n	8001c8c <main+0xac>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	2110      	movs	r1, #16
 8001c28:	482a      	ldr	r0, [pc, #168]	; (8001cd4 <main+0xf4>)
 8001c2a:	f001 fb24 	bl	8003276 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c32:	f000 fb3b 	bl	80022ac <HAL_Delay>
		AD9833_SetFrequency(frequency);
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <main+0xf8>)
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	f7ff f985 	bl	8000f48 <AD9833_SetFrequency>
		TPL0102_Write(&hi2c1, CHANNEL_0, wiperpos1);
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <main+0xfc>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	edcd 7a01 	vstr	s15, [sp, #4]
 8001c4c:	4c20      	ldr	r4, [pc, #128]	; (8001cd0 <main+0xf0>)
 8001c4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001c52:	2100      	movs	r1, #0
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff f9a9 	bl	8000fac <TPL0102_Write>
		TPL0102_Write(&hi2c1, CHANNEL_1, wiperpos2);
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <main+0x100>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c64:	edcd 7a01 	vstr	s15, [sp, #4]
 8001c68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff f99c 	bl	8000fac <TPL0102_Write>
		DebounceWVFSwitch();
 8001c74:	f7ff fe4c 	bl	8001910 <DebounceWVFSwitch>
		DebounceImpSwitch();
 8001c78:	f7ff fd98 	bl	80017ac <DebounceImpSwitch>
		DebounceLeftSwitch();
 8001c7c:	f7ff fdea 	bl	8001854 <DebounceLeftSwitch>
		DebounceRightSwitch();
 8001c80:	f7ff fe1a 	bl	80018b8 <DebounceRightSwitch>
		DebounceRotaryEcoderSwitch();
 8001c84:	f7ff fdbc 	bl	8001800 <DebounceRotaryEcoderSwitch>
		RotaryEncoderUpdate();
 8001c88:	f7ff fb6e 	bl	8001368 <RotaryEncoderUpdate>
		battery_voltage = adc_voltage(adc_value);
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <main+0x104>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	ee00 3a10 	vmov	s0, r3
 8001c96:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001c9a:	f7ff fb59 	bl	8001350 <adc_voltage>
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <main+0x108>)
 8001ca0:	ed83 0a00 	vstr	s0, [r3]
		if (battery_voltage <= 3.5)
 8001ca4:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8001ca8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	d9b8      	bls.n	8001c24 <main+0x44>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <main+0xf4>)
 8001cb8:	f001 fadd 	bl	8003276 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc0:	f000 faf4 	bl	80022ac <HAL_Delay>
 8001cc4:	e7b7      	b.n	8001c36 <main+0x56>
 8001cc6:	bf00      	nop
 8001cc8:	20000360 	.word	0x20000360
 8001ccc:	20000240 	.word	0x20000240
 8001cd0:	200002a8 	.word	0x200002a8
 8001cd4:	42020400 	.word	0x42020400
 8001cd8:	2000023c 	.word	0x2000023c
 8001cdc:	2000001c 	.word	0x2000001c
 8001ce0:	20000020 	.word	0x20000020
 8001ce4:	20000224 	.word	0x20000224
 8001ce8:	20000228 	.word	0x20000228

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b500      	push	{lr}
 8001cee:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_MspInit+0x34>)
 8001cf2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	661a      	str	r2, [r3, #96]	; 0x60
 8001cfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cfc:	f002 0201 	and.w	r2, r2, #1
 8001d00:	9200      	str	r2, [sp, #0]
 8001d02:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d16:	f001 fd87 	bl	8003828 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	b003      	add	sp, #12
 8001d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d24:	b510      	push	{r4, lr}
 8001d26:	b0ac      	sub	sp, #176	; 0xb0
 8001d28:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	9127      	str	r1, [sp, #156]	; 0x9c
 8001d2e:	9128      	str	r1, [sp, #160]	; 0xa0
 8001d30:	9129      	str	r1, [sp, #164]	; 0xa4
 8001d32:	912a      	str	r1, [sp, #168]	; 0xa8
 8001d34:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d36:	2294      	movs	r2, #148	; 0x94
 8001d38:	a802      	add	r0, sp, #8
 8001d3a:	f004 fddc 	bl	80068f6 <memset>
  if(hadc->Instance==ADC1)
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_ADC_MspInit+0xa8>)
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d46:	b02c      	add	sp, #176	; 0xb0
 8001d48:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d4e:	9302      	str	r3, [sp, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d54:	9322      	str	r3, [sp, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8001d56:	2301      	movs	r3, #1
 8001d58:	9303      	str	r3, [sp, #12]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d5a:	9304      	str	r3, [sp, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d60:	2307      	movs	r3, #7
 8001d62:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	9307      	str	r3, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d68:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d6e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d70:	a802      	add	r0, sp, #8
 8001d72:	f002 fccd 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	bb28      	cbnz	r0, 8001dc4 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_ADC_MspInit+0xac>)
 8001d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d88:	9200      	str	r2, [sp, #0]
 8001d8a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da2:	2303      	movs	r3, #3
 8001da4:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2400      	movs	r4, #0
 8001da8:	9429      	str	r4, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	a927      	add	r1, sp, #156	; 0x9c
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <HAL_ADC_MspInit+0xb0>)
 8001dae:	f001 f977 	bl	80030a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001db2:	4622      	mov	r2, r4
 8001db4:	4621      	mov	r1, r4
 8001db6:	2025      	movs	r0, #37	; 0x25
 8001db8:	f001 f918 	bl	8002fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001dbc:	2025      	movs	r0, #37	; 0x25
 8001dbe:	f001 f94d 	bl	800305c <HAL_NVIC_EnableIRQ>
}
 8001dc2:	e7c0      	b.n	8001d46 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8001dc4:	f7ff fdce 	bl	8001964 <Error_Handler>
 8001dc8:	e7d6      	b.n	8001d78 <HAL_ADC_MspInit+0x54>
 8001dca:	bf00      	nop
 8001dcc:	42028000 	.word	0x42028000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	42020000 	.word	0x42020000

08001dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	b0ac      	sub	sp, #176	; 0xb0
 8001ddc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	2100      	movs	r1, #0
 8001de0:	9127      	str	r1, [sp, #156]	; 0x9c
 8001de2:	9128      	str	r1, [sp, #160]	; 0xa0
 8001de4:	9129      	str	r1, [sp, #164]	; 0xa4
 8001de6:	912a      	str	r1, [sp, #168]	; 0xa8
 8001de8:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dea:	2294      	movs	r2, #148	; 0x94
 8001dec:	a802      	add	r0, sp, #8
 8001dee:	f004 fd82 	bl	80068f6 <memset>
  if(hi2c->Instance==I2C1)
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_I2C_MspInit+0x7c>)
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dfa:	b02c      	add	sp, #176	; 0xb0
 8001dfc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dfe:	2340      	movs	r3, #64	; 0x40
 8001e00:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e02:	a802      	add	r0, sp, #8
 8001e04:	f002 fc84 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	bb08      	cbnz	r0, 8001e4e <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	4c13      	ldr	r4, [pc, #76]	; (8001e58 <HAL_I2C_MspInit+0x80>)
 8001e0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001e14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e22:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e24:	2312      	movs	r3, #18
 8001e26:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	a927      	add	r1, sp, #156	; 0x9c
 8001e34:	4809      	ldr	r0, [pc, #36]	; (8001e5c <HAL_I2C_MspInit+0x84>)
 8001e36:	f001 f933 	bl	80030a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e40:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	9b01      	ldr	r3, [sp, #4]
}
 8001e4c:	e7d5      	b.n	8001dfa <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001e4e:	f7ff fd89 	bl	8001964 <Error_Handler>
 8001e52:	e7da      	b.n	8001e0a <HAL_I2C_MspInit+0x32>
 8001e54:	40005400 	.word	0x40005400
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	42020400 	.word	0x42020400

08001e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e60:	b500      	push	{lr}
 8001e62:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	2300      	movs	r3, #0
 8001e66:	9303      	str	r3, [sp, #12]
 8001e68:	9304      	str	r3, [sp, #16]
 8001e6a:	9305      	str	r3, [sp, #20]
 8001e6c:	9306      	str	r3, [sp, #24]
 8001e6e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001e70:	6802      	ldr	r2, [r0, #0]
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_SPI_MspInit+0x5c>)
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e78:	b009      	add	sp, #36	; 0x24
 8001e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e7e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001e82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e88:	661a      	str	r2, [r3, #96]	; 0x60
 8001e8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001ea6:	23b0      	movs	r3, #176	; 0xb0
 8001ea8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eae:	2305      	movs	r3, #5
 8001eb0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	a903      	add	r1, sp, #12
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <HAL_SPI_MspInit+0x60>)
 8001eb6:	f001 f8f3 	bl	80030a0 <HAL_GPIO_Init>
}
 8001eba:	e7dd      	b.n	8001e78 <HAL_SPI_MspInit+0x18>
 8001ebc:	40013000 	.word	0x40013000
 8001ec0:	42020000 	.word	0x42020000

08001ec4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ec4:	b500      	push	{lr}
 8001ec6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9303      	str	r3, [sp, #12]
 8001ecc:	9304      	str	r3, [sp, #16]
 8001ece:	9305      	str	r3, [sp, #20]
 8001ed0:	9306      	str	r3, [sp, #24]
 8001ed2:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM1)
 8001ed4:	6802      	ldr	r2, [r0, #0]
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d002      	beq.n	8001ee2 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001edc:	b009      	add	sp, #36	; 0x24
 8001ede:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001ee6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eec:	661a      	str	r2, [r3, #96]	; 0x60
 8001eee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ef0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ef4:	9201      	str	r2, [sp, #4]
 8001ef6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	9302      	str	r3, [sp, #8]
 8001f08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f14:	2301      	movs	r3, #1
 8001f16:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	a903      	add	r1, sp, #12
 8001f1a:	480b      	ldr	r0, [pc, #44]	; (8001f48 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f1c:	f001 f8c0 	bl	80030a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	4611      	mov	r1, r2
 8001f24:	202a      	movs	r0, #42	; 0x2a
 8001f26:	f001 f861 	bl	8002fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f2a:	202a      	movs	r0, #42	; 0x2a
 8001f2c:	f001 f896 	bl	800305c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	4611      	mov	r1, r2
 8001f34:	202c      	movs	r0, #44	; 0x2c
 8001f36:	f001 f859 	bl	8002fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f3a:	202c      	movs	r0, #44	; 0x2c
 8001f3c:	f001 f88e 	bl	800305c <HAL_NVIC_EnableIRQ>
}
 8001f40:	e7cc      	b.n	8001edc <HAL_TIM_Encoder_MspInit+0x18>
 8001f42:	bf00      	nop
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	42020000 	.word	0x42020000

08001f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f4c:	b510      	push	{r4, lr}
 8001f4e:	b0ac      	sub	sp, #176	; 0xb0
 8001f50:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	2100      	movs	r1, #0
 8001f54:	9127      	str	r1, [sp, #156]	; 0x9c
 8001f56:	9128      	str	r1, [sp, #160]	; 0xa0
 8001f58:	9129      	str	r1, [sp, #164]	; 0xa4
 8001f5a:	912a      	str	r1, [sp, #168]	; 0xa8
 8001f5c:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5e:	2294      	movs	r2, #148	; 0x94
 8001f60:	a802      	add	r0, sp, #8
 8001f62:	f004 fcc8 	bl	80068f6 <memset>
  if(huart->Instance==UART4)
 8001f66:	6822      	ldr	r2, [r4, #0]
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_UART_MspInit+0x7c>)
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001f6e:	b02c      	add	sp, #176	; 0xb0
 8001f70:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f72:	2308      	movs	r3, #8
 8001f74:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f76:	eb0d 0003 	add.w	r0, sp, r3
 8001f7a:	f002 fbc9 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8001f7e:	bb00      	cbnz	r0, 8001fc2 <HAL_UART_MspInit+0x76>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_UART_MspInit+0x80>)
 8001f82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f84:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f88:	659a      	str	r2, [r3, #88]	; 0x58
 8001f8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f8c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001f90:	9200      	str	r2, [sp, #0]
 8001f92:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	a927      	add	r1, sp, #156	; 0x9c
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <HAL_UART_MspInit+0x84>)
 8001fbc:	f001 f870 	bl	80030a0 <HAL_GPIO_Init>
}
 8001fc0:	e7d5      	b.n	8001f6e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001fc2:	f7ff fccf 	bl	8001964 <Error_Handler>
 8001fc6:	e7db      	b.n	8001f80 <HAL_UART_MspInit+0x34>
 8001fc8:	40004c00 	.word	0x40004c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	42020000 	.word	0x42020000

08001fd4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <NMI_Handler>

08001fd6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <HardFault_Handler>

08001fd8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <MemManage_Handler>

08001fda <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <BusFault_Handler>

08001fdc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler>

08001fde <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe0:	4770      	bx	lr

08001fe2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe6:	f000 f94f 	bl	8002288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fea:	bd08      	pop	{r3, pc}

08001fec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001fec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fee:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <ADC1_2_IRQHandler+0xc>)
 8001ff0:	f000 fa6a 	bl	80024c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ff4:	bd08      	pop	{r3, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000240 	.word	0x20000240

08001ffc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ffc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ffe:	4802      	ldr	r0, [pc, #8]	; (8002008 <TIM1_UP_IRQHandler+0xc>)
 8002000:	f003 f8c2 	bl	8005188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002004:	bd08      	pop	{r3, pc}
 8002006:	bf00      	nop
 8002008:	20000360 	.word	0x20000360

0800200c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800200c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800200e:	4802      	ldr	r0, [pc, #8]	; (8002018 <TIM1_CC_IRQHandler+0xc>)
 8002010:	f003 f8ba 	bl	8005188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002014:	bd08      	pop	{r3, pc}
 8002016:	bf00      	nop
 8002018:	20000360 	.word	0x20000360

0800201c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800201c:	2001      	movs	r0, #1
 800201e:	4770      	bx	lr

08002020 <_kill>:

int _kill(int pid, int sig)
{
 8002020:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002022:	f004 fcbb 	bl	800699c <__errno>
 8002026:	2316      	movs	r3, #22
 8002028:	6003      	str	r3, [r0, #0]
  return -1;
}
 800202a:	f04f 30ff 	mov.w	r0, #4294967295
 800202e:	bd08      	pop	{r3, pc}

08002030 <_exit>:

void _exit (int status)
{
 8002030:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002032:	f04f 31ff 	mov.w	r1, #4294967295
 8002036:	f7ff fff3 	bl	8002020 <_kill>
  while (1) {}    /* Make sure we hang here */
 800203a:	e7fe      	b.n	800203a <_exit+0xa>

0800203c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	460c      	mov	r4, r1
 8002040:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	2500      	movs	r5, #0
 8002044:	e006      	b.n	8002054 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002046:	f3af 8000 	nop.w
 800204a:	4621      	mov	r1, r4
 800204c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002052:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	42b5      	cmp	r5, r6
 8002056:	dbf6      	blt.n	8002046 <_read+0xa>
  }

  return len;
}
 8002058:	4630      	mov	r0, r6
 800205a:	bd70      	pop	{r4, r5, r6, pc}

0800205c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	460c      	mov	r4, r1
 8002060:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	2500      	movs	r5, #0
 8002064:	e004      	b.n	8002070 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002066:	f814 0b01 	ldrb.w	r0, [r4], #1
 800206a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	3501      	adds	r5, #1
 8002070:	42b5      	cmp	r5, r6
 8002072:	dbf8      	blt.n	8002066 <_write+0xa>
  }
  return len;
}
 8002074:	4630      	mov	r0, r6
 8002076:	bd70      	pop	{r4, r5, r6, pc}

08002078 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	4770      	bx	lr

0800207e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800207e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002082:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002084:	2000      	movs	r0, #0
 8002086:	4770      	bx	lr

08002088 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002088:	2001      	movs	r0, #1
 800208a:	4770      	bx	lr

0800208c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800208c:	2000      	movs	r0, #0
 800208e:	4770      	bx	lr

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b510      	push	{r4, lr}
 8002092:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <_sbrk+0x38>)
 8002096:	490d      	ldr	r1, [pc, #52]	; (80020cc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <_sbrk+0x40>)
 800209a:	6800      	ldr	r0, [r0, #0]
 800209c:	b140      	cbz	r0, 80020b0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	480c      	ldr	r0, [pc, #48]	; (80020d0 <_sbrk+0x40>)
 80020a0:	6800      	ldr	r0, [r0, #0]
 80020a2:	4403      	add	r3, r0
 80020a4:	1a52      	subs	r2, r2, r1
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d806      	bhi.n	80020b8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <_sbrk+0x40>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80020ae:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80020b0:	4807      	ldr	r0, [pc, #28]	; (80020d0 <_sbrk+0x40>)
 80020b2:	4c08      	ldr	r4, [pc, #32]	; (80020d4 <_sbrk+0x44>)
 80020b4:	6004      	str	r4, [r0, #0]
 80020b6:	e7f2      	b.n	800209e <_sbrk+0xe>
    errno = ENOMEM;
 80020b8:	f004 fc70 	bl	800699c <__errno>
 80020bc:	230c      	movs	r3, #12
 80020be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	e7f3      	b.n	80020ae <_sbrk+0x1e>
 80020c6:	bf00      	nop
 80020c8:	20030000 	.word	0x20030000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	20000464 	.word	0x20000464
 80020d4:	200005b8 	.word	0x200005b8

080020d8 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020d8:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <SystemInit+0x10>)
 80020da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <SystemCoreClockUpdate+0xc0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f013 0f08 	tst.w	r3, #8
 80020f4:	d116      	bne.n	8002124 <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <SystemCoreClockUpdate+0xc0>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fc:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8002100:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <SystemCoreClockUpdate+0xc4>)
 8002102:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <SystemCoreClockUpdate+0xc0>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d848      	bhi.n	80021a4 <SystemCoreClockUpdate+0xb8>
 8002112:	e8df f003 	tbb	[pc, r3]
 8002116:	470c      	.short	0x470c
 8002118:	470f4747 	.word	0x470f4747
 800211c:	47134747 	.word	0x47134747
 8002120:	4747      	.short	0x4747
 8002122:	17          	.byte	0x17
 8002123:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <SystemCoreClockUpdate+0xc0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800212c:	e7e8      	b.n	8002100 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <SystemCoreClockUpdate+0xc8>)
 8002130:	601a      	str	r2, [r3, #0]
      break;
 8002132:	e028      	b.n	8002186 <SystemCoreClockUpdate+0x9a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <SystemCoreClockUpdate+0xc8>)
 8002136:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <SystemCoreClockUpdate+0xcc>)
 8002138:	601a      	str	r2, [r3, #0]
      break;
 800213a:	e024      	b.n	8002186 <SystemCoreClockUpdate+0x9a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <SystemCoreClockUpdate+0xc8>)
 800213e:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <SystemCoreClockUpdate+0xcc>)
 8002140:	601a      	str	r2, [r3, #0]
      break;
 8002142:	e020      	b.n	8002186 <SystemCoreClockUpdate+0x9a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <SystemCoreClockUpdate+0xc0>)
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002152:	3301      	adds	r3, #1

      switch (pllsource)
 8002154:	2902      	cmp	r1, #2
 8002156:	d004      	beq.n	8002162 <SystemCoreClockUpdate+0x76>
 8002158:	2903      	cmp	r1, #3
 800215a:	d01f      	beq.n	800219c <SystemCoreClockUpdate+0xb0>
        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
          break;

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800215c:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 8002160:	e002      	b.n	8002168 <SystemCoreClockUpdate+0x7c>
          pllvco = (HSI_VALUE / pllm);
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <SystemCoreClockUpdate+0xcc>)
 8002164:	fbb2 f2f3 	udiv	r2, r2, r3
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002168:	4910      	ldr	r1, [pc, #64]	; (80021ac <SystemCoreClockUpdate+0xc0>)
 800216a:	68cb      	ldr	r3, [r1, #12]
 800216c:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002170:	fb02 f303 	mul.w	r3, r2, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002174:	68ca      	ldr	r2, [r1, #12]
 8002176:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800217a:	3201      	adds	r2, #1
 800217c:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 800217e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <SystemCoreClockUpdate+0xc8>)
 8002184:	6013      	str	r3, [r2, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <SystemCoreClockUpdate+0xc0>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <SystemCoreClockUpdate+0xd0>)
 8002190:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <SystemCoreClockUpdate+0xc8>)
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	40cb      	lsrs	r3, r1
 8002198:	6013      	str	r3, [r2, #0]
}
 800219a:	4770      	bx	lr
          pllvco = (HSE_VALUE / pllm);
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <SystemCoreClockUpdate+0xcc>)
 800219e:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 80021a2:	e7e1      	b.n	8002168 <SystemCoreClockUpdate+0x7c>
      SystemCoreClock = msirange;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <SystemCoreClockUpdate+0xc8>)
 80021a6:	601a      	str	r2, [r3, #0]
      break;
 80021a8:	e7ed      	b.n	8002186 <SystemCoreClockUpdate+0x9a>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08008bb8 	.word	0x08008bb8
 80021b4:	20000024 	.word	0x20000024
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	08008ba0 	.word	0x08008ba0

080021c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021c4:	f7ff ff88 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021ca:	e003      	b.n	80021d4 <LoopCopyDataInit>

080021cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021d2:	3104      	adds	r1, #4

080021d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <LoopForever+0xa>)
	ldr	r3, =_edata
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <LoopForever+0xe>)
	adds	r2, r0, r1
 80021d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021dc:	d3f6      	bcc.n	80021cc <CopyDataInit>
	ldr	r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <LoopForever+0x12>)
	b	LoopFillZerobss
 80021e0:	e002      	b.n	80021e8 <LoopFillZerobss>

080021e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80021e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80021e4:	f842 3b04 	str.w	r3, [r2], #4

080021e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <LoopForever+0x16>)
	cmp	r2, r3
 80021ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80021ec:	d3f9      	bcc.n	80021e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ee:	f004 fbdb 	bl	80069a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021f2:	f7ff fcf5 	bl	8001be0 <main>

080021f6 <LoopForever>:

LoopForever:
    b LoopForever
 80021f6:	e7fe      	b.n	80021f6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80021f8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80021fc:	08008fa4 	.word	0x08008fa4
	ldr	r0, =_sdata
 8002200:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002204:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8002208:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 800220c:	200005b8 	.word	0x200005b8

08002210 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <AES_IRQHandler>
	...

08002214 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_InitTick+0x44>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b90b      	cbnz	r3, 800221e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800221a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800221c:	4770      	bx	lr
{
 800221e:	b510      	push	{r4, lr}
 8002220:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_InitTick+0x48>)
 800222c:	6810      	ldr	r0, [r2, #0]
 800222e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002232:	f000 ff21 	bl	8003078 <HAL_SYSTICK_Config>
 8002236:	b968      	cbnz	r0, 8002254 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002238:	2c07      	cmp	r4, #7
 800223a:	d901      	bls.n	8002240 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	e00a      	b.n	8002256 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	4621      	mov	r1, r4
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 fed0 	bl	8002fec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_InitTick+0x4c>)
 800224e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002250:	2000      	movs	r0, #0
 8002252:	e000      	b.n	8002256 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002254:	2001      	movs	r0, #1
}
 8002256:	bd10      	pop	{r4, pc}
 8002258:	20000028 	.word	0x20000028
 800225c:	20000024 	.word	0x20000024
 8002260:	2000002c 	.word	0x2000002c

08002264 <HAL_Init>:
{
 8002264:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002266:	2004      	movs	r0, #4
 8002268:	f000 feae 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 800226c:	f7ff ff3e 	bl	80020ec <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002270:	2007      	movs	r0, #7
 8002272:	f7ff ffcf 	bl	8002214 <HAL_InitTick>
 8002276:	b110      	cbz	r0, 800227e <HAL_Init+0x1a>
    status = HAL_ERROR;
 8002278:	2401      	movs	r4, #1
}
 800227a:	4620      	mov	r0, r4
 800227c:	bd10      	pop	{r4, pc}
 800227e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002280:	f7ff fd34 	bl	8001cec <HAL_MspInit>
 8002284:	e7f9      	b.n	800227a <HAL_Init+0x16>
	...

08002288 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_IncTick+0x10>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4a03      	ldr	r2, [pc, #12]	; (800229c <HAL_IncTick+0x14>)
 800228e:	6811      	ldr	r1, [r2, #0]
 8002290:	440b      	add	r3, r1
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000028 	.word	0x20000028
 800229c:	20000468 	.word	0x20000468

080022a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022a0:	4b01      	ldr	r3, [pc, #4]	; (80022a8 <HAL_GetTick+0x8>)
 80022a2:	6818      	ldr	r0, [r3, #0]
}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000468 	.word	0x20000468

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff fff6 	bl	80022a0 <HAL_GetTick>
 80022b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80022ba:	d002      	beq.n	80022c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_Delay+0x24>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c2:	f7ff ffed 	bl	80022a0 <HAL_GetTick>
 80022c6:	1b40      	subs	r0, r0, r5
 80022c8:	42a0      	cmp	r0, r4
 80022ca:	d3fa      	bcc.n	80022c2 <HAL_Delay+0x16>
  {
  }
}
 80022cc:	bd38      	pop	{r3, r4, r5, pc}
 80022ce:	bf00      	nop
 80022d0:	20000028 	.word	0x20000028

080022d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d4:	b530      	push	{r4, r5, lr}
 80022d6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022d8:	2300      	movs	r3, #0
 80022da:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80022dc:	2800      	cmp	r0, #0
 80022de:	f000 80df 	beq.w	80024a0 <HAL_ADC_Init+0x1cc>
 80022e2:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80022e6:	b313      	cbz	r3, 800232e <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022e8:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80022f0:	d005      	beq.n	80022fe <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80022f8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80022fc:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022fe:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002300:	6893      	ldr	r3, [r2, #8]
 8002302:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002306:	d11f      	bne.n	8002348 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8002308:	6893      	ldr	r3, [r2, #8]
 800230a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800230e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002318:	4b62      	ldr	r3, [pc, #392]	; (80024a4 <HAL_ADC_Init+0x1d0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	4a62      	ldr	r2, [pc, #392]	; (80024a8 <HAL_ADC_Init+0x1d4>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800232c:	e009      	b.n	8002342 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800232e:	f7ff fcf9 	bl	8001d24 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002332:	2300      	movs	r3, #0
 8002334:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002336:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800233a:	e7d5      	b.n	80022e8 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800233c:	9b01      	ldr	r3, [sp, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002342:	9b01      	ldr	r3, [sp, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f9      	bne.n	800233c <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002348:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800234a:	6893      	ldr	r3, [r2, #8]
 800234c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002350:	d17d      	bne.n	800244e <HAL_ADC_Init+0x17a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002354:	f043 0310 	orr.w	r3, r3, #16
 8002358:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002362:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002364:	6893      	ldr	r3, [r2, #8]
 8002366:	f013 0304 	ands.w	r3, r3, #4
 800236a:	d000      	beq.n	800236e <HAL_ADC_Init+0x9a>
 800236c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800236e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002370:	f011 0f10 	tst.w	r1, #16
 8002374:	f040 808d 	bne.w	8002492 <HAL_ADC_Init+0x1be>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002378:	2b00      	cmp	r3, #0
 800237a:	f040 808a 	bne.w	8002492 <HAL_ADC_Init+0x1be>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002380:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800238a:	6893      	ldr	r3, [r2, #8]
 800238c:	f013 0f01 	tst.w	r3, #1
 8002390:	d114      	bne.n	80023bc <HAL_ADC_Init+0xe8>
 8002392:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HAL_ADC_Init+0x1d8>)
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	f012 0201 	ands.w	r2, r2, #1
 800239a:	d000      	beq.n	800239e <HAL_ADC_Init+0xca>
 800239c:	2201      	movs	r2, #1
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_ADC_Init+0x1dc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f013 0301 	ands.w	r3, r3, #1
 80023a6:	d000      	beq.n	80023aa <HAL_ADC_Init+0xd6>
 80023a8:	2301      	movs	r3, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	d106      	bne.n	80023bc <HAL_ADC_Init+0xe8>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023ae:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023b0:	4940      	ldr	r1, [pc, #256]	; (80024b4 <HAL_ADC_Init+0x1e0>)
 80023b2:	688a      	ldr	r2, [r1, #8]
 80023b4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023bc:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 80023be:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 80023c4:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 80023c6:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 80023c8:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 80023ca:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023cc:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d4:	2a01      	cmp	r2, #1
 80023d6:	d03c      	beq.n	8002452 <HAL_ADC_Init+0x17e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023da:	b122      	cbz	r2, 80023e6 <HAL_ADC_Init+0x112>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023dc:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80023e2:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023e4:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023e6:	6821      	ldr	r1, [r4, #0]
 80023e8:	68cd      	ldr	r5, [r1, #12]
 80023ea:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <HAL_ADC_Init+0x1e4>)
 80023ec:	402a      	ands	r2, r5
 80023ee:	431a      	orrs	r2, r3
 80023f0:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023f2:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023f4:	6893      	ldr	r3, [r2, #8]
 80023f6:	f013 0308 	ands.w	r3, r3, #8
 80023fa:	d000      	beq.n	80023fe <HAL_ADC_Init+0x12a>
 80023fc:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023fe:	b9bb      	cbnz	r3, 8002430 <HAL_ADC_Init+0x15c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002400:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002402:	7e21      	ldrb	r1, [r4, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002404:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002408:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800240c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002410:	68d3      	ldr	r3, [r2, #12]
 8002412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002416:	f023 0306 	bic.w	r3, r3, #6
 800241a:	430b      	orrs	r3, r1
 800241c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800241e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002422:	2b01      	cmp	r3, #1
 8002424:	d01a      	beq.n	800245c <HAL_ADC_Init+0x188>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	6913      	ldr	r3, [r2, #16]
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002430:	6923      	ldr	r3, [r4, #16]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d024      	beq.n	8002480 <HAL_ADC_Init+0x1ac>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002436:	6822      	ldr	r2, [r4, #0]
 8002438:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800243a:	f023 030f 	bic.w	r3, r3, #15
 800243e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	65a3      	str	r3, [r4, #88]	; 0x58
 800244c:	e026      	b.n	800249c <HAL_ADC_Init+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244e:	2000      	movs	r0, #0
 8002450:	e788      	b.n	8002364 <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002452:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002454:	3a01      	subs	r2, #1
 8002456:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800245a:	e7bd      	b.n	80023d8 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 800245c:	6821      	ldr	r1, [r4, #0]
 800245e:	690b      	ldr	r3, [r1, #16]
 8002460:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800246a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800246c:	432a      	orrs	r2, r5
 800246e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002470:	432a      	orrs	r2, r5
 8002472:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002474:	432a      	orrs	r2, r5
 8002476:	4313      	orrs	r3, r2
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	610b      	str	r3, [r1, #16]
 800247e:	e7d7      	b.n	8002430 <HAL_ADC_Init+0x15c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002480:	6821      	ldr	r1, [r4, #0]
 8002482:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002484:	f023 030f 	bic.w	r3, r3, #15
 8002488:	69e2      	ldr	r2, [r4, #28]
 800248a:	3a01      	subs	r2, #1
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	; 0x30
 8002490:	e7d6      	b.n	8002440 <HAL_ADC_Init+0x16c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002494:	f043 0310 	orr.w	r3, r3, #16
 8002498:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800249a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 800249c:	b003      	add	sp, #12
 800249e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80024a0:	2001      	movs	r0, #1
 80024a2:	e7fb      	b.n	800249c <HAL_ADC_Init+0x1c8>
 80024a4:	20000024 	.word	0x20000024
 80024a8:	053e2d63 	.word	0x053e2d63
 80024ac:	42028000 	.word	0x42028000
 80024b0:	42028100 	.word	0x42028100
 80024b4:	42028300 	.word	0x42028300
 80024b8:	fff0c007 	.word	0xfff0c007

080024bc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024bc:	6803      	ldr	r3, [r0, #0]
 80024be:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80024c0:	4770      	bx	lr

080024c2 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_ADC_IRQHandler>:
{
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024cc:	6803      	ldr	r3, [r0, #0]
 80024ce:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024d0:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024d2:	4b9a      	ldr	r3, [pc, #616]	; (800273c <HAL_ADC_IRQHandler+0x274>)
 80024d4:	689e      	ldr	r6, [r3, #8]
 80024d6:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024da:	f017 0f02 	tst.w	r7, #2
 80024de:	d010      	beq.n	8002502 <HAL_ADC_IRQHandler+0x3a>
 80024e0:	f015 0f02 	tst.w	r5, #2
 80024e4:	d00d      	beq.n	8002502 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024e6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80024e8:	f013 0f10 	tst.w	r3, #16
 80024ec:	d103      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024ee:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80024f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f4:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024f6:	4620      	mov	r0, r4
 80024f8:	f000 fcd8 	bl	8002eac <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002502:	f017 0f04 	tst.w	r7, #4
 8002506:	d002      	beq.n	800250e <HAL_ADC_IRQHandler+0x46>
 8002508:	f015 0f04 	tst.w	r5, #4
 800250c:	d105      	bne.n	800251a <HAL_ADC_IRQHandler+0x52>
 800250e:	f017 0f08 	tst.w	r7, #8
 8002512:	d04d      	beq.n	80025b0 <HAL_ADC_IRQHandler+0xe8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002514:	f015 0f08 	tst.w	r5, #8
 8002518:	d04a      	beq.n	80025b0 <HAL_ADC_IRQHandler+0xe8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800251a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800251c:	f013 0f10 	tst.w	r3, #16
 8002520:	d103      	bne.n	800252a <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002528:	65a3      	str	r3, [r4, #88]	; 0x58
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800252a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002532:	d137      	bne.n	80025a4 <HAL_ADC_IRQHandler+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002534:	4a82      	ldr	r2, [pc, #520]	; (8002740 <HAL_ADC_IRQHandler+0x278>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00c      	beq.n	8002554 <HAL_ADC_IRQHandler+0x8c>
 800253a:	461a      	mov	r2, r3
 800253c:	4293      	cmp	r3, r2
 800253e:	d00c      	beq.n	800255a <HAL_ADC_IRQHandler+0x92>
 8002540:	2e09      	cmp	r6, #9
 8002542:	d805      	bhi.n	8002550 <HAL_ADC_IRQHandler+0x88>
 8002544:	f240 2121 	movw	r1, #545	; 0x221
 8002548:	40f1      	lsrs	r1, r6
 800254a:	f011 0f01 	tst.w	r1, #1
 800254e:	d104      	bne.n	800255a <HAL_ADC_IRQHandler+0x92>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002550:	68d2      	ldr	r2, [r2, #12]
 8002552:	e003      	b.n	800255c <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002554:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002558:	e7f0      	b.n	800253c <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800255a:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800255c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002560:	d120      	bne.n	80025a4 <HAL_ADC_IRQHandler+0xdc>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	f012 0f08 	tst.w	r2, #8
 8002568:	d01c      	beq.n	80025a4 <HAL_ADC_IRQHandler+0xdc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	f012 0f04 	tst.w	r2, #4
 8002570:	d110      	bne.n	8002594 <HAL_ADC_IRQHandler+0xcc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	f022 020c 	bic.w	r2, r2, #12
 8002578:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800257a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800257c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002580:	65a3      	str	r3, [r4, #88]	; 0x58
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002584:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002588:	d10c      	bne.n	80025a4 <HAL_ADC_IRQHandler+0xdc>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	65a3      	str	r3, [r4, #88]	; 0x58
 8002592:	e007      	b.n	80025a4 <HAL_ADC_IRQHandler+0xdc>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002594:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002596:	f043 0310 	orr.w	r3, r3, #16
 800259a:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7fe fec7 	bl	8001338 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	220c      	movs	r2, #12
 80025ae:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025b0:	f017 0f20 	tst.w	r7, #32
 80025b4:	d002      	beq.n	80025bc <HAL_ADC_IRQHandler+0xf4>
 80025b6:	f015 0f20 	tst.w	r5, #32
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x100>
 80025bc:	f017 0f40 	tst.w	r7, #64	; 0x40
 80025c0:	d05c      	beq.n	800267c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80025c6:	d059      	beq.n	800267c <HAL_ADC_IRQHandler+0x1b4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025ca:	f013 0f10 	tst.w	r3, #16
 80025ce:	d103      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x110>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025d6:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025d8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80025da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025dc:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80025e0:	d112      	bne.n	8002608 <HAL_ADC_IRQHandler+0x140>
 80025e2:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80025ea:	d10f      	bne.n	800260c <HAL_ADC_IRQHandler+0x144>
 80025ec:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ee:	4a54      	ldr	r2, [pc, #336]	; (8002740 <HAL_ADC_IRQHandler+0x278>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00d      	beq.n	8002610 <HAL_ADC_IRQHandler+0x148>
 80025f4:	461a      	mov	r2, r3
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025fa:	b166      	cbz	r6, 8002616 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80025fc:	2e06      	cmp	r6, #6
 80025fe:	d00a      	beq.n	8002616 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002600:	2e07      	cmp	r6, #7
 8002602:	d008      	beq.n	8002616 <HAL_ADC_IRQHandler+0x14e>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	e007      	b.n	8002618 <HAL_ADC_IRQHandler+0x150>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002608:	2100      	movs	r1, #0
 800260a:	e7eb      	b.n	80025e4 <HAL_ADC_IRQHandler+0x11c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800260c:	2000      	movs	r0, #0
 800260e:	e7ee      	b.n	80025ee <HAL_ADC_IRQHandler+0x126>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002610:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002614:	e7ef      	b.n	80025f6 <HAL_ADC_IRQHandler+0x12e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002616:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002618:	b351      	cbz	r1, 8002670 <HAL_ADC_IRQHandler+0x1a8>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800261a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800261e:	d003      	beq.n	8002628 <HAL_ADC_IRQHandler+0x160>
 8002620:	b330      	cbz	r0, 8002670 <HAL_ADC_IRQHandler+0x1a8>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002622:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002626:	d123      	bne.n	8002670 <HAL_ADC_IRQHandler+0x1a8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800262e:	d01f      	beq.n	8002670 <HAL_ADC_IRQHandler+0x1a8>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002630:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002634:	d11c      	bne.n	8002670 <HAL_ADC_IRQHandler+0x1a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	f012 0f08 	tst.w	r2, #8
 800263c:	d110      	bne.n	8002660 <HAL_ADC_IRQHandler+0x198>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002644:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800264c:	65a3      	str	r3, [r4, #88]	; 0x58
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800264e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002650:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002654:	d10c      	bne.n	8002670 <HAL_ADC_IRQHandler+0x1a8>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	65a3      	str	r3, [r4, #88]	; 0x58
 800265e:	e007      	b.n	8002670 <HAL_ADC_IRQHandler+0x1a8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002662:	f043 0310 	orr.w	r3, r3, #16
 8002666:	65a3      	str	r3, [r4, #88]	; 0x58
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002668:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002670:	4620      	mov	r0, r4
 8002672:	f000 fc17 	bl	8002ea4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	2260      	movs	r2, #96	; 0x60
 800267a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800267c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002680:	d002      	beq.n	8002688 <HAL_ADC_IRQHandler+0x1c0>
 8002682:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002686:	d12f      	bne.n	80026e8 <HAL_ADC_IRQHandler+0x220>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002688:	f417 7f80 	tst.w	r7, #256	; 0x100
 800268c:	d002      	beq.n	8002694 <HAL_ADC_IRQHandler+0x1cc>
 800268e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002692:	d134      	bne.n	80026fe <HAL_ADC_IRQHandler+0x236>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002694:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002698:	d002      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x1d8>
 800269a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800269e:	d13a      	bne.n	8002716 <HAL_ADC_IRQHandler+0x24e>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026a0:	f017 0f10 	tst.w	r7, #16
 80026a4:	d019      	beq.n	80026da <HAL_ADC_IRQHandler+0x212>
 80026a6:	f015 0f10 	tst.w	r5, #16
 80026aa:	d016      	beq.n	80026da <HAL_ADC_IRQHandler+0x212>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026ae:	b133      	cbz	r3, 80026be <HAL_ADC_IRQHandler+0x1f6>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80026b0:	2e00      	cmp	r6, #0
 80026b2:	d03c      	beq.n	800272e <HAL_ADC_IRQHandler+0x266>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_ADC_IRQHandler+0x274>)
 80026b6:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026b8:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80026bc:	d00a      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80026be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c4:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7ff fef8 	bl	80024c4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	2210      	movs	r2, #16
 80026d8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026da:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80026de:	d002      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x21e>
 80026e0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80026e4:	d12e      	bne.n	8002744 <HAL_ADC_IRQHandler+0x27c>
}
 80026e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff fee6 	bl	80024c2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e7c4      	b.n	8002688 <HAL_ADC_IRQHandler+0x1c0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002704:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002706:	4620      	mov	r0, r4
 8002708:	f000 fbce 	bl	8002ea8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e7be      	b.n	8002694 <HAL_ADC_IRQHandler+0x1cc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800271e:	4620      	mov	r0, r4
 8002720:	f000 fbc3 	bl	8002eaa <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e7b8      	b.n	80026a0 <HAL_ADC_IRQHandler+0x1d8>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f013 0f01 	tst.w	r3, #1
 8002736:	d0cd      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x20c>
 8002738:	e7c1      	b.n	80026be <HAL_ADC_IRQHandler+0x1f6>
 800273a:	bf00      	nop
 800273c:	42028300 	.word	0x42028300
 8002740:	42028100 	.word	0x42028100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002744:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274a:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800274c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	65e3      	str	r3, [r4, #92]	; 0x5c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275a:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800275c:	4620      	mov	r0, r4
 800275e:	f000 fba2 	bl	8002ea6 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002762:	e7c0      	b.n	80026e6 <HAL_ADC_IRQHandler+0x21e>

08002764 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002766:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002768:	2200      	movs	r2, #0
 800276a:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800276c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002770:	2a01      	cmp	r2, #1
 8002772:	f000 8257 	beq.w	8002c24 <HAL_ADC_ConfigChannel+0x4c0>
 8002776:	4603      	mov	r3, r0
 8002778:	2201      	movs	r2, #1
 800277a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277e:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002780:	68a8      	ldr	r0, [r5, #8]
 8002782:	f010 0f04 	tst.w	r0, #4
 8002786:	d009      	beq.n	800279c <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800278a:	f042 0220 	orr.w	r2, r2, #32
 800278e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002790:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8002798:	b003      	add	sp, #12
 800279a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800279c:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800279e:	3530      	adds	r5, #48	; 0x30
 80027a0:	0a22      	lsrs	r2, r4, #8
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80027a8:	58a8      	ldr	r0, [r5, r2]
 80027aa:	f004 0e1f 	and.w	lr, r4, #31
 80027ae:	241f      	movs	r4, #31
 80027b0:	fa04 f40e 	lsl.w	r4, r4, lr
 80027b4:	ea20 0004 	bic.w	r0, r0, r4
 80027b8:	680c      	ldr	r4, [r1, #0]
 80027ba:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80027be:	fa0c fc0e 	lsl.w	ip, ip, lr
 80027c2:	ea40 000c 	orr.w	r0, r0, ip
 80027c6:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c8:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ca:	68a2      	ldr	r2, [r4, #8]
 80027cc:	f012 0204 	ands.w	r2, r2, #4
 80027d0:	d000      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0x70>
 80027d2:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027d4:	68a0      	ldr	r0, [r4, #8]
 80027d6:	f010 0008 	ands.w	r0, r0, #8
 80027da:	d000      	beq.n	80027de <HAL_ADC_ConfigChannel+0x7a>
 80027dc:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d134      	bne.n	800284c <HAL_ADC_ConfigChannel+0xe8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d132      	bne.n	800284c <HAL_ADC_ConfigChannel+0xe8>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027e6:	6888      	ldr	r0, [r1, #8]
 80027e8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80027ec:	d073      	beq.n	80028d6 <HAL_ADC_ConfigChannel+0x172>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027ee:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027f0:	3414      	adds	r4, #20
 80027f2:	0e72      	lsrs	r2, r6, #25
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80027fa:	58a5      	ldr	r5, [r4, r2]
 80027fc:	f3c6 5c04 	ubfx	ip, r6, #20, #5
 8002800:	2607      	movs	r6, #7
 8002802:	fa06 f60c 	lsl.w	r6, r6, ip
 8002806:	ea25 0506 	bic.w	r5, r5, r6
 800280a:	fa00 f00c 	lsl.w	r0, r0, ip
 800280e:	4328      	orrs	r0, r5
 8002810:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002812:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002814:	6942      	ldr	r2, [r0, #20]
 8002816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800281a:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800281c:	694c      	ldr	r4, [r1, #20]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	68c2      	ldr	r2, [r0, #12]
 8002822:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002826:	0052      	lsls	r2, r2, #1
 8002828:	4094      	lsls	r4, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800282a:	690d      	ldr	r5, [r1, #16]
 800282c:	2d04      	cmp	r5, #4
 800282e:	d067      	beq.n	8002900 <HAL_ADC_ConfigChannel+0x19c>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002830:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002832:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8002834:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8002838:	4aae      	ldr	r2, [pc, #696]	; (8002af4 <HAL_ADC_ConfigChannel+0x390>)
 800283a:	403a      	ands	r2, r7
 800283c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002840:	4334      	orrs	r4, r6
 8002842:	4322      	orrs	r2, r4
 8002844:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002848:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284c:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800284e:	6882      	ldr	r2, [r0, #8]
 8002850:	f012 0f01 	tst.w	r2, #1
 8002854:	f040 81e0 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0x4b4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002858:	680a      	ldr	r2, [r1, #0]
 800285a:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800285c:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8002860:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8002864:	ea24 040c 	bic.w	r4, r4, ip
 8002868:	f005 0c18 	and.w	ip, r5, #24
 800286c:	4da2      	ldr	r5, [pc, #648]	; (8002af8 <HAL_ADC_ConfigChannel+0x394>)
 800286e:	fa25 f50c 	lsr.w	r5, r5, ip
 8002872:	402a      	ands	r2, r5
 8002874:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002878:	4322      	orrs	r2, r4
 800287a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800287e:	68c8      	ldr	r0, [r1, #12]
 8002880:	4a9e      	ldr	r2, [pc, #632]	; (8002afc <HAL_ADC_ConfigChannel+0x398>)
 8002882:	4290      	cmp	r0, r2
 8002884:	f000 80a4 	beq.w	80029d0 <HAL_ADC_ConfigChannel+0x26c>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002888:	6808      	ldr	r0, [r1, #0]
 800288a:	4a9d      	ldr	r2, [pc, #628]	; (8002b00 <HAL_ADC_ConfigChannel+0x39c>)
 800288c:	4210      	tst	r0, r2
 800288e:	f000 81c5 	beq.w	8002c1c <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002892:	4a9c      	ldr	r2, [pc, #624]	; (8002b04 <HAL_ADC_ConfigChannel+0x3a0>)
 8002894:	6894      	ldr	r4, [r2, #8]
 8002896:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800289a:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 800289e:	6891      	ldr	r1, [r2, #8]
 80028a0:	f011 0101 	ands.w	r1, r1, #1
 80028a4:	d000      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0x144>
 80028a6:	2101      	movs	r1, #1
 80028a8:	4a97      	ldr	r2, [pc, #604]	; (8002b08 <HAL_ADC_ConfigChannel+0x3a4>)
 80028aa:	6892      	ldr	r2, [r2, #8]
 80028ac:	f012 0201 	ands.w	r2, r2, #1
 80028b0:	d000      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x150>
 80028b2:	2201      	movs	r2, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	f040 81a9 	bne.w	8002c0c <HAL_ADC_ConfigChannel+0x4a8>
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ba:	4a94      	ldr	r2, [pc, #592]	; (8002b0c <HAL_ADC_ConfigChannel+0x3a8>)
 80028bc:	4290      	cmp	r0, r2
 80028be:	f000 8157 	beq.w	8002b70 <HAL_ADC_ConfigChannel+0x40c>
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028c2:	4a93      	ldr	r2, [pc, #588]	; (8002b10 <HAL_ADC_ConfigChannel+0x3ac>)
 80028c4:	4290      	cmp	r0, r2
 80028c6:	f000 817a 	beq.w	8002bbe <HAL_ADC_ConfigChannel+0x45a>
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ca:	4a92      	ldr	r2, [pc, #584]	; (8002b14 <HAL_ADC_ConfigChannel+0x3b0>)
 80028cc:	4290      	cmp	r0, r2
 80028ce:	f000 818a 	beq.w	8002be6 <HAL_ADC_ConfigChannel+0x482>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d2:	2000      	movs	r0, #0
 80028d4:	e75d      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028d6:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028d8:	3414      	adds	r4, #20
 80028da:	0e42      	lsrs	r2, r0, #25
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80028e2:	58a5      	ldr	r5, [r4, r2]
 80028e4:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80028e8:	2607      	movs	r6, #7
 80028ea:	fa06 f000 	lsl.w	r0, r6, r0
 80028ee:	ea25 0000 	bic.w	r0, r5, r0
 80028f2:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028f4:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028f6:	6942      	ldr	r2, [r0, #20]
 80028f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028fc:	6142      	str	r2, [r0, #20]
}
 80028fe:	e78d      	b.n	800281c <HAL_ADC_ConfigChannel+0xb8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002900:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002902:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002904:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002908:	680a      	ldr	r2, [r1, #0]
 800290a:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800290e:	bb85      	cbnz	r5, 8002972 <HAL_ADC_ConfigChannel+0x20e>
 8002910:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002914:	4294      	cmp	r4, r2
 8002916:	d034      	beq.n	8002982 <HAL_ADC_ConfigChannel+0x21e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002918:	681c      	ldr	r4, [r3, #0]
 800291a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800291c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800291e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002922:	680a      	ldr	r2, [r1, #0]
 8002924:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002928:	bb85      	cbnz	r5, 800298c <HAL_ADC_ConfigChannel+0x228>
 800292a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800292e:	4290      	cmp	r0, r2
 8002930:	d034      	beq.n	800299c <HAL_ADC_ConfigChannel+0x238>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002932:	681c      	ldr	r4, [r3, #0]
 8002934:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002936:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002938:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800293c:	680a      	ldr	r2, [r1, #0]
 800293e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002942:	bb85      	cbnz	r5, 80029a6 <HAL_ADC_ConfigChannel+0x242>
 8002944:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002948:	4290      	cmp	r0, r2
 800294a:	d034      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x252>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800294c:	681c      	ldr	r4, [r3, #0]
 800294e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002950:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002952:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002956:	680a      	ldr	r2, [r1, #0]
 8002958:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800295c:	bb85      	cbnz	r5, 80029c0 <HAL_ADC_ConfigChannel+0x25c>
 800295e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002962:	4290      	cmp	r0, r2
 8002964:	f47f af72 	bne.w	800284c <HAL_ADC_ConfigChannel+0xe8>
  MODIFY_REG(*preg,
 8002968:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800296a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800296e:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8002970:	e76c      	b.n	800284c <HAL_ADC_ConfigChannel+0xe8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002976:	b112      	cbz	r2, 800297e <HAL_ADC_ConfigChannel+0x21a>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	e7ca      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1b0>
    return 32U;
 800297e:	2220      	movs	r2, #32
 8002980:	e7c8      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1b0>
  MODIFY_REG(*preg,
 8002982:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002984:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002988:	6602      	str	r2, [r0, #96]	; 0x60
}
 800298a:	e7c5      	b.n	8002918 <HAL_ADC_ConfigChannel+0x1b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002990:	b112      	cbz	r2, 8002998 <HAL_ADC_ConfigChannel+0x234>
  return __builtin_clz(value);
 8002992:	fab2 f282 	clz	r2, r2
 8002996:	e7ca      	b.n	800292e <HAL_ADC_ConfigChannel+0x1ca>
    return 32U;
 8002998:	2220      	movs	r2, #32
 800299a:	e7c8      	b.n	800292e <HAL_ADC_ConfigChannel+0x1ca>
  MODIFY_REG(*preg,
 800299c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800299e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029a2:	6662      	str	r2, [r4, #100]	; 0x64
}
 80029a4:	e7c5      	b.n	8002932 <HAL_ADC_ConfigChannel+0x1ce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80029aa:	b112      	cbz	r2, 80029b2 <HAL_ADC_ConfigChannel+0x24e>
  return __builtin_clz(value);
 80029ac:	fab2 f282 	clz	r2, r2
 80029b0:	e7ca      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1e4>
    return 32U;
 80029b2:	2220      	movs	r2, #32
 80029b4:	e7c8      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1e4>
  MODIFY_REG(*preg,
 80029b6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80029b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029bc:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80029be:	e7c5      	b.n	800294c <HAL_ADC_ConfigChannel+0x1e8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80029c4:	b112      	cbz	r2, 80029cc <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	e7ca      	b.n	8002962 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 80029cc:	2220      	movs	r2, #32
 80029ce:	e7c8      	b.n	8002962 <HAL_ADC_ConfigChannel+0x1fe>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d0:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d2:	680a      	ldr	r2, [r1, #0]
 80029d4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80029d8:	2d00      	cmp	r5, #0
 80029da:	d138      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2ea>
 80029dc:	0e90      	lsrs	r0, r2, #26
 80029de:	3001      	adds	r0, #1
 80029e0:	f000 001f 	and.w	r0, r0, #31
 80029e4:	2809      	cmp	r0, #9
 80029e6:	bf8c      	ite	hi
 80029e8:	2000      	movhi	r0, #0
 80029ea:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d066      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x35a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	d13b      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x308>
 80029f4:	0e90      	lsrs	r0, r2, #26
 80029f6:	3001      	adds	r0, #1
 80029f8:	0680      	lsls	r0, r0, #26
 80029fa:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80029fe:	2d00      	cmp	r5, #0
 8002a00:	d140      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x320>
 8002a02:	0e97      	lsrs	r7, r2, #26
 8002a04:	3701      	adds	r7, #1
 8002a06:	f007 071f 	and.w	r7, r7, #31
 8002a0a:	2601      	movs	r6, #1
 8002a0c:	40be      	lsls	r6, r7
 8002a0e:	4330      	orrs	r0, r6
 8002a10:	2d00      	cmp	r5, #0
 8002a12:	d146      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x33e>
 8002a14:	0e92      	lsrs	r2, r2, #26
 8002a16:	3201      	adds	r2, #1
 8002a18:	f002 021f 	and.w	r2, r2, #31
 8002a1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002a20:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a22:	4310      	orrs	r0, r2
                                      pConfig->SamplingTime);
 8002a24:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a26:	f104 0e14 	add.w	lr, r4, #20
 8002a2a:	0e42      	lsrs	r2, r0, #25
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002a32:	f85e 4002 	ldr.w	r4, [lr, r2]
 8002a36:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8002a3a:	2607      	movs	r6, #7
 8002a3c:	4086      	lsls	r6, r0
 8002a3e:	ea24 0c06 	bic.w	ip, r4, r6
 8002a42:	4085      	lsls	r5, r0
 8002a44:	ea4c 0505 	orr.w	r5, ip, r5
 8002a48:	f84e 5002 	str.w	r5, [lr, r2]
}
 8002a4c:	e71c      	b.n	8002888 <HAL_ADC_ConfigChannel+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002a52:	b148      	cbz	r0, 8002a68 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a54:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a58:	3001      	adds	r0, #1
 8002a5a:	f000 001f 	and.w	r0, r0, #31
 8002a5e:	2809      	cmp	r0, #9
 8002a60:	bf8c      	ite	hi
 8002a62:	2000      	movhi	r0, #0
 8002a64:	2001      	movls	r0, #1
 8002a66:	e7c1      	b.n	80029ec <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002a68:	2020      	movs	r0, #32
 8002a6a:	e7f5      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x2f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002a70:	b130      	cbz	r0, 8002a80 <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 8002a72:	fab0 f080 	clz	r0, r0
 8002a76:	3001      	adds	r0, #1
 8002a78:	0680      	lsls	r0, r0, #26
 8002a7a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002a7e:	e7be      	b.n	80029fe <HAL_ADC_ConfigChannel+0x29a>
    return 32U;
 8002a80:	2020      	movs	r0, #32
 8002a82:	e7f8      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x312>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002a88:	b14e      	cbz	r6, 8002a9e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002a8a:	fab6 f686 	clz	r6, r6
 8002a8e:	3601      	adds	r6, #1
 8002a90:	f006 061f 	and.w	r6, r6, #31
 8002a94:	f04f 0c01 	mov.w	ip, #1
 8002a98:	fa0c f606 	lsl.w	r6, ip, r6
 8002a9c:	e7b7      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x2aa>
    return 32U;
 8002a9e:	2620      	movs	r6, #32
 8002aa0:	e7f5      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x32a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002aa6:	b142      	cbz	r2, 8002aba <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	3201      	adds	r2, #1
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002ab6:	0512      	lsls	r2, r2, #20
 8002ab8:	e7b3      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x2be>
    return 32U;
 8002aba:	2220      	movs	r2, #32
 8002abc:	e7f6      	b.n	8002aac <HAL_ADC_ConfigChannel+0x348>
 8002abe:	bb5d      	cbnz	r5, 8002b18 <HAL_ADC_ConfigChannel+0x3b4>
 8002ac0:	0e90      	lsrs	r0, r2, #26
 8002ac2:	3001      	adds	r0, #1
 8002ac4:	0680      	lsls	r0, r0, #26
 8002ac6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002aca:	bb8d      	cbnz	r5, 8002b30 <HAL_ADC_ConfigChannel+0x3cc>
 8002acc:	0e97      	lsrs	r7, r2, #26
 8002ace:	3701      	adds	r7, #1
 8002ad0:	f007 071f 	and.w	r7, r7, #31
 8002ad4:	2601      	movs	r6, #1
 8002ad6:	40be      	lsls	r6, r7
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	bbc5      	cbnz	r5, 8002b4e <HAL_ADC_ConfigChannel+0x3ea>
 8002adc:	0e92      	lsrs	r2, r2, #26
 8002ade:	3201      	adds	r2, #1
 8002ae0:	f002 021f 	and.w	r2, r2, #31
 8002ae4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002ae8:	3a1e      	subs	r2, #30
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af0:	4310      	orrs	r0, r2
 8002af2:	e797      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x2c0>
 8002af4:	03fff000 	.word	0x03fff000
 8002af8:	0007ffff 	.word	0x0007ffff
 8002afc:	407f0000 	.word	0x407f0000
 8002b00:	80080000 	.word	0x80080000
 8002b04:	42028300 	.word	0x42028300
 8002b08:	42028100 	.word	0x42028100
 8002b0c:	c7520000 	.word	0xc7520000
 8002b10:	cb840000 	.word	0xcb840000
 8002b14:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002b1c:	b130      	cbz	r0, 8002b2c <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8002b1e:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b22:	3001      	adds	r0, #1
 8002b24:	0680      	lsls	r0, r0, #26
 8002b26:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002b2a:	e7ce      	b.n	8002aca <HAL_ADC_ConfigChannel+0x366>
    return 32U;
 8002b2c:	2020      	movs	r0, #32
 8002b2e:	e7f8      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x3be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002b34:	b14e      	cbz	r6, 8002b4a <HAL_ADC_ConfigChannel+0x3e6>
  return __builtin_clz(value);
 8002b36:	fab6 f686 	clz	r6, r6
 8002b3a:	3601      	adds	r6, #1
 8002b3c:	f006 061f 	and.w	r6, r6, #31
 8002b40:	f04f 0c01 	mov.w	ip, #1
 8002b44:	fa0c f606 	lsl.w	r6, ip, r6
 8002b48:	e7c6      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x374>
    return 32U;
 8002b4a:	2620      	movs	r6, #32
 8002b4c:	e7f5      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x3d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002b52:	b15a      	cbz	r2, 8002b6c <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	3201      	adds	r2, #1
 8002b5a:	f002 021f 	and.w	r2, r2, #31
 8002b5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002b62:	3a1e      	subs	r2, #30
 8002b64:	0512      	lsls	r2, r2, #20
 8002b66:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b6a:	e7c1      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x38c>
    return 32U;
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	e7f3      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x3f4>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b70:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8002b74:	f47f aea5 	bne.w	80028c2 <HAL_ADC_ConfigChannel+0x15e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	4a2b      	ldr	r2, [pc, #172]	; (8002c28 <HAL_ADC_ConfigChannel+0x4c4>)
 8002b7c:	4291      	cmp	r1, r2
 8002b7e:	d001      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b80:	2000      	movs	r0, #0
 8002b82:	e606      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b84:	f445 0200 	orr.w	r2, r5, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b88:	4828      	ldr	r0, [pc, #160]	; (8002c2c <HAL_ADC_ConfigChannel+0x4c8>)
 8002b8a:	6881      	ldr	r1, [r0, #8]
 8002b8c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002b90:	430a      	orrs	r2, r1
 8002b92:	6082      	str	r2, [r0, #8]
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_ADC_ConfigChannel+0x4cc>)
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	0992      	lsrs	r2, r2, #6
 8002b9a:	4926      	ldr	r1, [pc, #152]	; (8002c34 <HAL_ADC_ConfigChannel+0x4d0>)
 8002b9c:	fba1 1202 	umull	r1, r2, r1, r2
 8002ba0:	0992      	lsrs	r2, r2, #6
 8002ba2:	3201      	adds	r2, #1
 8002ba4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002ba8:	0092      	lsls	r2, r2, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002baa:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8002bac:	e002      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x450>
                wait_loop_index--;
 8002bae:	9a01      	ldr	r2, [sp, #4]
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8002bb4:	9a01      	ldr	r2, [sp, #4]
 8002bb6:	2a00      	cmp	r2, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x44a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bba:	2000      	movs	r0, #0
 8002bbc:	e5e9      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bbe:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8002bc2:	f47f ae82 	bne.w	80028ca <HAL_ADC_ConfigChannel+0x166>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_ADC_ConfigChannel+0x4c4>)
 8002bca:	4291      	cmp	r1, r2
 8002bcc:	d001      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x46e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bce:	2000      	movs	r0, #0
 8002bd0:	e5df      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd2:	f045 7280 	orr.w	r2, r5, #16777216	; 0x1000000
 8002bd6:	4815      	ldr	r0, [pc, #84]	; (8002c2c <HAL_ADC_ConfigChannel+0x4c8>)
 8002bd8:	6881      	ldr	r1, [r0, #8]
 8002bda:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002bde:	430a      	orrs	r2, r1
 8002be0:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be2:	2000      	movs	r0, #0
}
 8002be4:	e5d5      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002be6:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8002bea:	d119      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x4bc>
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_ADC_ConfigChannel+0x4c4>)
 8002bf0:	4291      	cmp	r1, r2
 8002bf2:	d001      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x494>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	e5cc      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf8:	f445 0280 	orr.w	r2, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bfc:	480b      	ldr	r0, [pc, #44]	; (8002c2c <HAL_ADC_ConfigChannel+0x4c8>)
 8002bfe:	6881      	ldr	r1, [r0, #8]
 8002c00:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002c04:	430a      	orrs	r2, r1
 8002c06:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c08:	2000      	movs	r0, #0
}
 8002c0a:	e5c2      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c0e:	f042 0220 	orr.w	r2, r2, #32
 8002c12:	659a      	str	r2, [r3, #88]	; 0x58
          tmp_hal_status = HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
 8002c16:	e5bc      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e5ba      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e5b8      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
 8002c20:	2000      	movs	r0, #0
 8002c22:	e5b6      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8002c24:	2002      	movs	r0, #2
 8002c26:	e5b7      	b.n	8002798 <HAL_ADC_ConfigChannel+0x34>
 8002c28:	42028000 	.word	0x42028000
 8002c2c:	42028300 	.word	0x42028300
 8002c30:	20000024 	.word	0x20000024
 8002c34:	053e2d63 	.word	0x053e2d63

08002c38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c38:	b530      	push	{r4, r5, lr}
 8002c3a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c40:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	f012 0f01 	tst.w	r2, #1
 8002c48:	d158      	bne.n	8002cfc <ADC_Enable+0xc4>
 8002c4a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c4c:	6899      	ldr	r1, [r3, #8]
 8002c4e:	4a2d      	ldr	r2, [pc, #180]	; (8002d04 <ADC_Enable+0xcc>)
 8002c50:	4211      	tst	r1, r2
 8002c52:	d119      	bne.n	8002c88 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c5a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <ADC_Enable+0xd0>)
 8002c66:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c68:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002c6c:	d01c      	beq.n	8002ca8 <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <ADC_Enable+0xd4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <ADC_Enable+0xd8>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	099b      	lsrs	r3, r3, #6
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002c86:	e00c      	b.n	8002ca2 <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c88:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002c8a:	f043 0310 	orr.w	r3, r3, #16
 8002c8e:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c90:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002c98:	2001      	movs	r0, #1
 8002c9a:	e030      	b.n	8002cfe <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 8002c9c:	9b01      	ldr	r3, [sp, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002ca2:	9b01      	ldr	r3, [sp, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ca8:	f7ff fafa 	bl	80022a0 <HAL_GetTick>
 8002cac:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	f012 0f01 	tst.w	r2, #1
 8002cb6:	d11f      	bne.n	8002cf8 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	f012 0f01 	tst.w	r2, #1
 8002cbe:	d107      	bne.n	8002cd0 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cc6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cd0:	f7ff fae6 	bl	80022a0 <HAL_GetTick>
 8002cd4:	1b43      	subs	r3, r0, r5
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d9e9      	bls.n	8002cae <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f013 0f01 	tst.w	r3, #1
 8002ce2:	d1e4      	bne.n	8002cae <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ce6:	f043 0310 	orr.w	r3, r3, #16
 8002cea:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	e002      	b.n	8002cfe <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e000      	b.n	8002cfe <ADC_Enable+0xc6>
 8002cfc:	2000      	movs	r0, #0
}
 8002cfe:	b003      	add	sp, #12
 8002d00:	bd30      	pop	{r4, r5, pc}
 8002d02:	bf00      	nop
 8002d04:	8000003f 	.word	0x8000003f
 8002d08:	42028300 	.word	0x42028300
 8002d0c:	20000024 	.word	0x20000024
 8002d10:	053e2d63 	.word	0x053e2d63

08002d14 <HAL_ADC_Start_IT>:
{
 8002d14:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d16:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <HAL_ADC_Start_IT+0x188>)
 8002d18:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d1a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f013 0f04 	tst.w	r3, #4
 8002d22:	f040 80b6 	bne.w	8002e92 <HAL_ADC_Start_IT+0x17e>
 8002d26:	4604      	mov	r4, r0
 8002d28:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8002d2c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	f000 80b0 	beq.w	8002e96 <HAL_ADC_Start_IT+0x182>
 8002d36:	2301      	movs	r3, #1
 8002d38:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002d3c:	f7ff ff7c 	bl	8002c38 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002d40:	2800      	cmp	r0, #0
 8002d42:	f040 80a2 	bne.w	8002e8a <HAL_ADC_Start_IT+0x176>
      ADC_STATE_CLR_SET(hadc->State,
 8002d46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d54:	65a3      	str	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <HAL_ADC_Start_IT+0x18c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d052      	beq.n	8002e04 <HAL_ADC_Start_IT+0xf0>
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d000      	beq.n	8002d66 <HAL_ADC_Start_IT+0x52>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d64:	b91d      	cbnz	r5, 8002d6e <HAL_ADC_Start_IT+0x5a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d66:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002d68:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002d6c:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d6e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002d70:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002d74:	d049      	beq.n	8002e0a <HAL_ADC_Start_IT+0xf6>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d78:	f022 0206 	bic.w	r2, r2, #6
 8002d7c:	65e2      	str	r2, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d7e:	221c      	movs	r2, #28
 8002d80:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8002d82:	2300      	movs	r3, #0
 8002d84:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d88:	6822      	ldr	r2, [r4, #0]
 8002d8a:	6853      	ldr	r3, [r2, #4]
 8002d8c:	f023 031c 	bic.w	r3, r3, #28
 8002d90:	6053      	str	r3, [r2, #4]
      switch (hadc->Init.EOCSelection)
 8002d92:	6963      	ldr	r3, [r4, #20]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d03b      	beq.n	8002e10 <HAL_ADC_Start_IT+0xfc>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d98:	6822      	ldr	r2, [r4, #0]
 8002d9a:	6853      	ldr	r3, [r2, #4]
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	6053      	str	r3, [r2, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002da4:	b923      	cbnz	r3, 8002db0 <HAL_ADC_Start_IT+0x9c>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	6853      	ldr	r3, [r2, #4]
 8002daa:	f043 0310 	orr.w	r3, r3, #16
 8002dae:	6053      	str	r3, [r2, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	4a3b      	ldr	r2, [pc, #236]	; (8002ea0 <HAL_ADC_Start_IT+0x18c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d031      	beq.n	8002e1c <HAL_ADC_Start_IT+0x108>
 8002db8:	461a      	mov	r2, r3
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d031      	beq.n	8002e22 <HAL_ADC_Start_IT+0x10e>
 8002dbe:	2d09      	cmp	r5, #9
 8002dc0:	d805      	bhi.n	8002dce <HAL_ADC_Start_IT+0xba>
 8002dc2:	f240 2121 	movw	r1, #545	; 0x221
 8002dc6:	40e9      	lsrs	r1, r5
 8002dc8:	f011 0f01 	tst.w	r1, #1
 8002dcc:	d129      	bne.n	8002e22 <HAL_ADC_Start_IT+0x10e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002dd4:	65a1      	str	r1, [r4, #88]	; 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002dd6:	68d2      	ldr	r2, [r2, #12]
 8002dd8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002ddc:	d05a      	beq.n	8002e94 <HAL_ADC_Start_IT+0x180>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dde:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002de0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002de8:	65a2      	str	r2, [r4, #88]	; 0x58
          switch (hadc->Init.EOCSelection)
 8002dea:	6962      	ldr	r2, [r4, #20]
 8002dec:	2a08      	cmp	r2, #8
 8002dee:	d042      	beq.n	8002e76 <HAL_ADC_Start_IT+0x162>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002df8:	6822      	ldr	r2, [r4, #0]
 8002dfa:	6853      	ldr	r3, [r2, #4]
 8002dfc:	f043 0320 	orr.w	r3, r3, #32
 8002e00:	6053      	str	r3, [r2, #4]
              break;
 8002e02:	e047      	b.n	8002e94 <HAL_ADC_Start_IT+0x180>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e04:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002e08:	e7aa      	b.n	8002d60 <HAL_ADC_Start_IT+0x4c>
        ADC_CLEAR_ERRORCODE(hadc);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002e0e:	e7b6      	b.n	8002d7e <HAL_ADC_Start_IT+0x6a>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	6853      	ldr	r3, [r2, #4]
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	6053      	str	r3, [r2, #4]
          break;
 8002e1a:	e7c2      	b.n	8002da2 <HAL_ADC_Start_IT+0x8e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e1c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002e20:	e7cb      	b.n	8002dba <HAL_ADC_Start_IT+0xa6>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002e28:	d011      	beq.n	8002e4e <HAL_ADC_Start_IT+0x13a>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e2a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002e2c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e34:	65a2      	str	r2, [r4, #88]	; 0x58
          switch (hadc->Init.EOCSelection)
 8002e36:	6962      	ldr	r2, [r4, #20]
 8002e38:	2a08      	cmp	r2, #8
 8002e3a:	d012      	beq.n	8002e62 <HAL_ADC_Start_IT+0x14e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e42:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	6853      	ldr	r3, [r2, #4]
 8002e48:	f043 0320 	orr.w	r3, r3, #32
 8002e4c:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e4e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002e50:	6893      	ldr	r3, [r2, #8]
 8002e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6093      	str	r3, [r2, #8]
}
 8002e60:	e018      	b.n	8002e94 <HAL_ADC_Start_IT+0x180>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	f022 0220 	bic.w	r2, r2, #32
 8002e68:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e6a:	6822      	ldr	r2, [r4, #0]
 8002e6c:	6853      	ldr	r3, [r2, #4]
 8002e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e72:	6053      	str	r3, [r2, #4]
              break;
 8002e74:	e7eb      	b.n	8002e4e <HAL_ADC_Start_IT+0x13a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	f022 0220 	bic.w	r2, r2, #32
 8002e7c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	6853      	ldr	r3, [r2, #4]
 8002e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e86:	6053      	str	r3, [r2, #4]
              break;
 8002e88:	e004      	b.n	8002e94 <HAL_ADC_Start_IT+0x180>
      __HAL_UNLOCK(hadc);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002e90:	e000      	b.n	8002e94 <HAL_ADC_Start_IT+0x180>
    tmp_hal_status = HAL_BUSY;
 8002e92:	2002      	movs	r0, #2
}
 8002e94:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8002e96:	2002      	movs	r0, #2
 8002e98:	e7fc      	b.n	8002e94 <HAL_ADC_Start_IT+0x180>
 8002e9a:	bf00      	nop
 8002e9c:	42028300 	.word	0x42028300
 8002ea0:	42028100 	.word	0x42028100

08002ea4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002eaa:	4770      	bx	lr

08002eac <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb0:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002eb4:	2a01      	cmp	r2, #1
 8002eb6:	d07e      	beq.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x106>
{
 8002eb8:	b410      	push	{r4}
 8002eba:	b09b      	sub	sp, #108	; 0x6c
 8002ebc:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ec8:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eca:	6800      	ldr	r0, [r0, #0]
 8002ecc:	4a3b      	ldr	r2, [pc, #236]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002ece:	4290      	cmp	r0, r2
 8002ed0:	d038      	beq.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	9200      	str	r2, [sp, #0]

  if (tmp_hadc_slave.Instance == NULL)
 8002ed6:	9a00      	ldr	r2, [sp, #0]
 8002ed8:	2a00      	cmp	r2, #0
 8002eda:	d037      	beq.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002edc:	6892      	ldr	r2, [r2, #8]
 8002ede:	f012 0204 	ands.w	r2, r2, #4
 8002ee2:	d000      	beq.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	6880      	ldr	r0, [r0, #8]
 8002ee8:	f010 0f04 	tst.w	r0, #4
 8002eec:	d153      	bne.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002eee:	2a00      	cmp	r2, #0
 8002ef0:	d151      	bne.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef2:	680a      	ldr	r2, [r1, #0]
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	d032      	beq.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0xae>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ef8:	4c31      	ldr	r4, [pc, #196]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002efa:	68a2      	ldr	r2, [r4, #8]
 8002efc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f00:	6848      	ldr	r0, [r1, #4]
 8002f02:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8002f06:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8002f0a:	4302      	orrs	r2, r0
 8002f0c:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f0e:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002f10:	6890      	ldr	r0, [r2, #8]
 8002f12:	f010 0001 	ands.w	r0, r0, #1
 8002f16:	d000      	beq.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8002f18:	2001      	movs	r0, #1
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	f012 0201 	ands.w	r2, r2, #1
 8002f22:	d000      	beq.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8002f24:	2201      	movs	r2, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f26:	4302      	orrs	r2, r0
 8002f28:	d141      	bne.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f2a:	4c25      	ldr	r4, [pc, #148]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002f2c:	68a2      	ldr	r2, [r4, #8]
 8002f2e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002f32:	f022 020f 	bic.w	r2, r2, #15
 8002f36:	6808      	ldr	r0, [r1, #0]
 8002f38:	6889      	ldr	r1, [r1, #8]
 8002f3a:	4301      	orrs	r1, r0
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2000      	movs	r0, #0
 8002f42:	e02d      	b.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f44:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	e7c4      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f4e:	f042 0220 	orr.w	r2, r2, #32
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	e023      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f5e:	4918      	ldr	r1, [pc, #96]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002f60:	688a      	ldr	r2, [r1, #8]
 8002f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f66:	608a      	str	r2, [r1, #8]
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002f6a:	6891      	ldr	r1, [r2, #8]
 8002f6c:	f011 0101 	ands.w	r1, r1, #1
 8002f70:	d000      	beq.n	8002f74 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8002f72:	2101      	movs	r1, #1
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	f012 0201 	ands.w	r2, r2, #1
 8002f7c:	d000      	beq.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002f7e:	2201      	movs	r2, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	d116      	bne.n	8002fb2 <HAL_ADCEx_MultiModeConfigChannel+0x102>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002f86:	688a      	ldr	r2, [r1, #8]
 8002f88:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002f8c:	f022 020f 	bic.w	r2, r2, #15
 8002f90:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f92:	2000      	movs	r0, #0
 8002f94:	e004      	b.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f98:	f042 0220 	orr.w	r2, r2, #32
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8002fa6:	b01b      	add	sp, #108	; 0x6c
 8002fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fac:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e7f6      	b.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e7f4      	b.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  __HAL_LOCK(hadc);
 8002fb6:	2002      	movs	r0, #2
}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	42028000 	.word	0x42028000
 8002fc0:	42028300 	.word	0x42028300
 8002fc4:	42028100 	.word	0x42028100

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002fca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	0200      	lsls	r0, r0, #8
 8002fd6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fda:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002fe4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fec:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_NVIC_SetPriority+0x68>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff6:	f1c3 0c07 	rsb	ip, r3, #7
 8002ffa:	f1bc 0f03 	cmp.w	ip, #3
 8002ffe:	bf28      	it	cs
 8003000:	f04f 0c03 	movcs.w	ip, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003004:	f103 0e03 	add.w	lr, r3, #3
 8003008:	f1be 0f06 	cmp.w	lr, #6
 800300c:	d918      	bls.n	8003040 <HAL_NVIC_SetPriority+0x54>
 800300e:	3b04      	subs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	f04f 3eff 	mov.w	lr, #4294967295
 8003014:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003018:	ea21 010c 	bic.w	r1, r1, ip
 800301c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301e:	fa0e fe03 	lsl.w	lr, lr, r3
 8003022:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003026:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003028:	2800      	cmp	r0, #0
 800302a:	db0b      	blt.n	8003044 <HAL_NVIC_SetPriority+0x58>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	0152      	lsls	r2, r2, #5
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003034:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003038:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800303c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003040:	2300      	movs	r3, #0
 8003042:	e7e5      	b.n	8003010 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003044:	f000 000f 	and.w	r0, r0, #15
 8003048:	0152      	lsls	r2, r2, #5
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <HAL_NVIC_SetPriority+0x6c>)
 800304e:	541a      	strb	r2, [r3, r0]
 8003050:	e7f4      	b.n	800303c <HAL_NVIC_SetPriority+0x50>
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	e000ed14 	.word	0xe000ed14

0800305c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800305c:	2800      	cmp	r0, #0
 800305e:	db07      	blt.n	8003070 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003060:	f000 021f 	and.w	r2, r0, #31
 8003064:	0940      	lsrs	r0, r0, #5
 8003066:	2301      	movs	r3, #1
 8003068:	4093      	lsls	r3, r2
 800306a:	4a02      	ldr	r2, [pc, #8]	; (8003074 <HAL_NVIC_EnableIRQ+0x18>)
 800306c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100

08003078 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003078:	3801      	subs	r0, #1
 800307a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800307e:	d20b      	bcs.n	8003098 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003080:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003084:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <HAL_SYSTICK_Config+0x24>)
 8003088:	21e0      	movs	r1, #224	; 0xe0
 800308a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800308e:	2000      	movs	r0, #0
 8003090:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003092:	2207      	movs	r2, #7
 8003094:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003096:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003098:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0U;
 80030a2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030a4:	e065      	b.n	8003172 <HAL_GPIO_Init+0xd2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030a6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030a8:	005e      	lsls	r6, r3, #1
 80030aa:	2403      	movs	r4, #3
 80030ac:	40b4      	lsls	r4, r6
 80030ae:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b2:	68cc      	ldr	r4, [r1, #12]
 80030b4:	40b4      	lsls	r4, r6
 80030b6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80030b8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ba:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030bc:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c0:	684c      	ldr	r4, [r1, #4]
 80030c2:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80030c6:	409c      	lsls	r4, r3
 80030c8:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80030ca:	6044      	str	r4, [r0, #4]
 80030cc:	e062      	b.n	8003194 <HAL_GPIO_Init+0xf4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ce:	08dd      	lsrs	r5, r3, #3
 80030d0:	3508      	adds	r5, #8
 80030d2:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80030d6:	f003 0c07 	and.w	ip, r3, #7
 80030da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80030de:	f04f 0e0f 	mov.w	lr, #15
 80030e2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80030e6:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ea:	690c      	ldr	r4, [r1, #16]
 80030ec:	fa04 f40c 	lsl.w	r4, r4, ip
 80030f0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80030f4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80030f8:	e063      	b.n	80031c2 <HAL_GPIO_Init+0x122>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80030fa:	2406      	movs	r4, #6
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x60>
 80030fe:	2400      	movs	r4, #0
 8003100:	fa04 f40e 	lsl.w	r4, r4, lr
 8003104:	432c      	orrs	r4, r5
        EXTI->EXTICR[position >> 2U] = temp;
 8003106:	4d56      	ldr	r5, [pc, #344]	; (8003260 <HAL_GPIO_Init+0x1c0>)
 8003108:	f10c 0c18 	add.w	ip, ip, #24
 800310c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003110:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003112:	43d4      	mvns	r4, r2
 8003114:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003118:	684f      	ldr	r7, [r1, #4]
 800311a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800311e:	d001      	beq.n	8003124 <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 8003120:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003124:	4d4e      	ldr	r5, [pc, #312]	; (8003260 <HAL_GPIO_Init+0x1c0>)
 8003126:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003128:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800312a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800312e:	684f      	ldr	r7, [r1, #4]
 8003130:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8003134:	d001      	beq.n	800313a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8003136:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800313a:	4d49      	ldr	r5, [pc, #292]	; (8003260 <HAL_GPIO_Init+0x1c0>)
 800313c:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800313e:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8003142:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003146:	684f      	ldr	r7, [r1, #4]
 8003148:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800314c:	d001      	beq.n	8003152 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800314e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003152:	4d43      	ldr	r5, [pc, #268]	; (8003260 <HAL_GPIO_Init+0x1c0>)
 8003154:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        temp = EXTI->IMR1;
 8003158:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 800315c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800315e:	684e      	ldr	r6, [r1, #4]
 8003160:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8003164:	d001      	beq.n	800316a <HAL_GPIO_Init+0xca>
        {
          temp |= iocurrent;
 8003166:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800316a:	4a3d      	ldr	r2, [pc, #244]	; (8003260 <HAL_GPIO_Init+0x1c0>)
 800316c:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8003170:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003172:	680a      	ldr	r2, [r1, #0]
 8003174:	fa32 f403 	lsrs.w	r4, r2, r3
 8003178:	d071      	beq.n	800325e <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800317a:	f04f 0c01 	mov.w	ip, #1
 800317e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0U)
 8003182:	ea1c 0202 	ands.w	r2, ip, r2
 8003186:	d0f3      	beq.n	8003170 <HAL_GPIO_Init+0xd0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003188:	684c      	ldr	r4, [r1, #4]
 800318a:	f004 0403 	and.w	r4, r4, #3
 800318e:	3c01      	subs	r4, #1
 8003190:	2c01      	cmp	r4, #1
 8003192:	d988      	bls.n	80030a6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003194:	684c      	ldr	r4, [r1, #4]
 8003196:	f004 0403 	and.w	r4, r4, #3
 800319a:	2c03      	cmp	r4, #3
 800319c:	d00c      	beq.n	80031b8 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 800319e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a0:	005d      	lsls	r5, r3, #1
 80031a2:	f04f 0c03 	mov.w	ip, #3
 80031a6:	fa0c fc05 	lsl.w	ip, ip, r5
 80031aa:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ae:	688c      	ldr	r4, [r1, #8]
 80031b0:	40ac      	lsls	r4, r5
 80031b2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80031b6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b8:	684c      	ldr	r4, [r1, #4]
 80031ba:	f004 0403 	and.w	r4, r4, #3
 80031be:	2c02      	cmp	r4, #2
 80031c0:	d085      	beq.n	80030ce <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 80031c2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031c4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80031c8:	f04f 0c03 	mov.w	ip, #3
 80031cc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80031d0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d4:	684c      	ldr	r4, [r1, #4]
 80031d6:	f004 0403 	and.w	r4, r4, #3
 80031da:	fa04 f40e 	lsl.w	r4, r4, lr
 80031de:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80031e2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e4:	684c      	ldr	r4, [r1, #4]
 80031e6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80031ea:	d0c1      	beq.n	8003170 <HAL_GPIO_Init+0xd0>
        temp = EXTI->EXTICR[position >> 2U];
 80031ec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80031f0:	f10c 0518 	add.w	r5, ip, #24
 80031f4:	4c1a      	ldr	r4, [pc, #104]	; (8003260 <HAL_GPIO_Init+0x1c0>)
 80031f6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80031fa:	f003 0e03 	and.w	lr, r3, #3
 80031fe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8003202:	240f      	movs	r4, #15
 8003204:	fa04 f40e 	lsl.w	r4, r4, lr
 8003208:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800320c:	4c15      	ldr	r4, [pc, #84]	; (8003264 <HAL_GPIO_Init+0x1c4>)
 800320e:	42a0      	cmp	r0, r4
 8003210:	f43f af75 	beq.w	80030fe <HAL_GPIO_Init+0x5e>
 8003214:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003218:	42a0      	cmp	r0, r4
 800321a:	d016      	beq.n	800324a <HAL_GPIO_Init+0x1aa>
 800321c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003220:	42a0      	cmp	r0, r4
 8003222:	d014      	beq.n	800324e <HAL_GPIO_Init+0x1ae>
 8003224:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003228:	42a0      	cmp	r0, r4
 800322a:	d012      	beq.n	8003252 <HAL_GPIO_Init+0x1b2>
 800322c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003230:	42a0      	cmp	r0, r4
 8003232:	d010      	beq.n	8003256 <HAL_GPIO_Init+0x1b6>
 8003234:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003238:	42a0      	cmp	r0, r4
 800323a:	d00e      	beq.n	800325a <HAL_GPIO_Init+0x1ba>
 800323c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003240:	42a0      	cmp	r0, r4
 8003242:	f43f af5a 	beq.w	80030fa <HAL_GPIO_Init+0x5a>
 8003246:	2407      	movs	r4, #7
 8003248:	e75a      	b.n	8003100 <HAL_GPIO_Init+0x60>
 800324a:	2401      	movs	r4, #1
 800324c:	e758      	b.n	8003100 <HAL_GPIO_Init+0x60>
 800324e:	2402      	movs	r4, #2
 8003250:	e756      	b.n	8003100 <HAL_GPIO_Init+0x60>
 8003252:	2403      	movs	r4, #3
 8003254:	e754      	b.n	8003100 <HAL_GPIO_Init+0x60>
 8003256:	2404      	movs	r4, #4
 8003258:	e752      	b.n	8003100 <HAL_GPIO_Init+0x60>
 800325a:	2405      	movs	r4, #5
 800325c:	e750      	b.n	8003100 <HAL_GPIO_Init+0x60>
  }
}
 800325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003260:	4002f400 	.word	0x4002f400
 8003264:	42020000 	.word	0x42020000

08003268 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003268:	6903      	ldr	r3, [r0, #16]
 800326a:	4219      	tst	r1, r3
 800326c:	d001      	beq.n	8003272 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800326e:	2001      	movs	r0, #1
 8003270:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003272:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003274:	4770      	bx	lr

08003276 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003276:	b10a      	cbz	r2, 800327c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003278:	6181      	str	r1, [r0, #24]
 800327a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800327c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800327e:	4770      	bx	lr

08003280 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003280:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003282:	ea01 0203 	and.w	r2, r1, r3
 8003286:	ea21 0103 	bic.w	r1, r1, r3
 800328a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800328e:	6181      	str	r1, [r0, #24]
}
 8003290:	4770      	bx	lr

08003292 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003292:	6803      	ldr	r3, [r0, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	f012 0f02 	tst.w	r2, #2
 800329a:	d001      	beq.n	80032a0 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800329c:	2200      	movs	r2, #0
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032a0:	6803      	ldr	r3, [r0, #0]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	f012 0f01 	tst.w	r2, #1
 80032a8:	d103      	bne.n	80032b2 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	619a      	str	r2, [r3, #24]
  }
}
 80032b2:	4770      	bx	lr

080032b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032b4:	b410      	push	{r4}
 80032b6:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80032bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032c0:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c2:	4321      	orrs	r1, r4
 80032c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032c8:	6802      	ldr	r2, [r0, #0]
 80032ca:	6853      	ldr	r3, [r2, #4]
 80032cc:	0d64      	lsrs	r4, r4, #21
 80032ce:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80032d2:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80032d6:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80032da:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80032de:	f044 0403 	orr.w	r4, r4, #3
 80032e2:	ea23 0304 	bic.w	r3, r3, r4
 80032e6:	430b      	orrs	r3, r1
 80032e8:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <I2C_IsErrorOccurred>:
{
 80032f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80032f6:	6803      	ldr	r3, [r0, #0]
 80032f8:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032fa:	f016 0610 	ands.w	r6, r6, #16
 80032fe:	d07c      	beq.n	80033fa <I2C_IsErrorOccurred+0x10a>
 8003300:	460d      	mov	r5, r1
 8003302:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	2210      	movs	r2, #16
 8003306:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8003308:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	6998      	ldr	r0, [r3, #24]
 8003310:	f010 0f20 	tst.w	r0, #32
 8003314:	d130      	bne.n	8003378 <I2C_IsErrorOccurred+0x88>
 8003316:	bb7f      	cbnz	r7, 8003378 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8003318:	f1b5 3fff 	cmp.w	r5, #4294967295
 800331c:	d0f6      	beq.n	800330c <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7fe ffbf 	bl	80022a0 <HAL_GetTick>
 8003322:	eba0 0008 	sub.w	r0, r0, r8
 8003326:	42a8      	cmp	r0, r5
 8003328:	d801      	bhi.n	800332e <I2C_IsErrorOccurred+0x3e>
 800332a:	2d00      	cmp	r5, #0
 800332c:	d1ee      	bne.n	800330c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800332e:	6821      	ldr	r1, [r4, #0]
 8003330:	684b      	ldr	r3, [r1, #4]
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8003336:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800333a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800333c:	6988      	ldr	r0, [r1, #24]
 800333e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003342:	d002      	beq.n	800334a <I2C_IsErrorOccurred+0x5a>
 8003344:	b90b      	cbnz	r3, 800334a <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8003346:	2a20      	cmp	r2, #32
 8003348:	d10e      	bne.n	8003368 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f013 0f20 	tst.w	r3, #32
 8003352:	d1db      	bne.n	800330c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003354:	f7fe ffa4 	bl	80022a0 <HAL_GetTick>
 8003358:	eba0 0008 	sub.w	r0, r0, r8
 800335c:	2819      	cmp	r0, #25
 800335e:	d9f4      	bls.n	800334a <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003360:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8003364:	2701      	movs	r7, #1
              break;
 8003366:	e7d1      	b.n	800330c <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003368:	684b      	ldr	r3, [r1, #4]
 800336a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8003370:	f7fe ff96 	bl	80022a0 <HAL_GetTick>
 8003374:	4680      	mov	r8, r0
 8003376:	e7e8      	b.n	800334a <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8003378:	b90f      	cbnz	r7, 800337e <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800337a:	2220      	movs	r2, #32
 800337c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800337e:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8003382:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003388:	f413 7f80 	tst.w	r3, #256	; 0x100
 800338c:	d005      	beq.n	800339a <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800338e:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003396:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8003398:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800339a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800339e:	d006      	beq.n	80033ae <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 80033a0:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033aa:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80033ac:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80033b2:	d024      	beq.n	80033fe <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 80033b4:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033be:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80033c0:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff ff65 	bl	8003292 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	6853      	ldr	r3, [r2, #4]
 80033cc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80033d0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80033d4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80033de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033e0:	4333      	orrs	r3, r6
 80033e2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	2320      	movs	r3, #32
 80033e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80033f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80033f4:	4628      	mov	r0, r5
 80033f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	2500      	movs	r5, #0
 80033fc:	e7c2      	b.n	8003384 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 80033fe:	2d00      	cmp	r5, #0
 8003400:	d0f8      	beq.n	80033f4 <I2C_IsErrorOccurred+0x104>
 8003402:	e7de      	b.n	80033c2 <I2C_IsErrorOccurred+0xd2>

08003404 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	4604      	mov	r4, r0
 8003408:	460d      	mov	r5, r1
 800340a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f013 0f02 	tst.w	r3, #2
 8003414:	d122      	bne.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	4632      	mov	r2, r6
 8003418:	4629      	mov	r1, r5
 800341a:	4620      	mov	r0, r4
 800341c:	f7ff ff68 	bl	80032f0 <I2C_IsErrorOccurred>
 8003420:	b9f0      	cbnz	r0, 8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003422:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003426:	d0f1      	beq.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003428:	f7fe ff3a 	bl	80022a0 <HAL_GetTick>
 800342c:	1b80      	subs	r0, r0, r6
 800342e:	42a8      	cmp	r0, r5
 8003430:	d801      	bhi.n	8003436 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003432:	2d00      	cmp	r5, #0
 8003434:	d1ea      	bne.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f013 0f02 	tst.w	r3, #2
 800343e:	d1e5      	bne.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003442:	f043 0320 	orr.w	r3, r3, #32
 8003446:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003448:	2320      	movs	r3, #32
 800344a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800344e:	2300      	movs	r3, #0
 8003450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003454:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8003458:	2001      	movs	r0, #1
 800345a:	e000      	b.n	800345e <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 800345c:	2000      	movs	r0, #0
}
 800345e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003460:	2001      	movs	r0, #1
 8003462:	e7fc      	b.n	800345e <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08003464 <I2C_WaitOnFlagUntilTimeout>:
{
 8003464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003468:	4605      	mov	r5, r0
 800346a:	460f      	mov	r7, r1
 800346c:	4616      	mov	r6, r2
 800346e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	682c      	ldr	r4, [r5, #0]
 8003472:	69a4      	ldr	r4, [r4, #24]
 8003474:	ea37 0404 	bics.w	r4, r7, r4
 8003478:	bf0c      	ite	eq
 800347a:	2401      	moveq	r4, #1
 800347c:	2400      	movne	r4, #0
 800347e:	42b4      	cmp	r4, r6
 8003480:	d122      	bne.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003482:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003486:	d0f3      	beq.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7fe ff0a 	bl	80022a0 <HAL_GetTick>
 800348c:	9b06      	ldr	r3, [sp, #24]
 800348e:	1ac0      	subs	r0, r0, r3
 8003490:	4540      	cmp	r0, r8
 8003492:	d802      	bhi.n	800349a <I2C_WaitOnFlagUntilTimeout+0x36>
 8003494:	f1b8 0f00 	cmp.w	r8, #0
 8003498:	d1ea      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800349a:	682b      	ldr	r3, [r5, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	ea37 0303 	bics.w	r3, r7, r3
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	42b3      	cmp	r3, r6
 80034aa:	d1e1      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034ae:	f043 0320 	orr.w	r3, r3, #32
 80034b2:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	2320      	movs	r3, #32
 80034b6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80034c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 80034c4:	2001      	movs	r0, #1
 80034c6:	e000      	b.n	80034ca <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 80034c8:	2000      	movs	r0, #0
}
 80034ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034ce <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80034ce:	b570      	push	{r4, r5, r6, lr}
 80034d0:	4604      	mov	r4, r0
 80034d2:	460d      	mov	r5, r1
 80034d4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d6:	e004      	b.n	80034e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f013 0f20 	tst.w	r3, #32
 80034e0:	d012      	beq.n	8003508 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f013 0f20 	tst.w	r3, #32
 80034ea:	d11b      	bne.n	8003524 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ec:	4632      	mov	r2, r6
 80034ee:	4629      	mov	r1, r5
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff fefd 	bl	80032f0 <I2C_IsErrorOccurred>
 80034f6:	b9b8      	cbnz	r0, 8003528 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fe fed2 	bl	80022a0 <HAL_GetTick>
 80034fc:	1b80      	subs	r0, r0, r6
 80034fe:	42a8      	cmp	r0, r5
 8003500:	d8ea      	bhi.n	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8003502:	2d00      	cmp	r5, #0
 8003504:	d1ed      	bne.n	80034e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8003506:	e7e7      	b.n	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800350a:	f043 0320 	orr.w	r3, r3, #32
 800350e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003510:	2320      	movs	r3, #32
 8003512:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	2300      	movs	r3, #0
 8003518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800351c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003520:	2001      	movs	r0, #1
 8003522:	e000      	b.n	8003526 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8003524:	2000      	movs	r0, #0
}
 8003526:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003528:	2001      	movs	r0, #1
 800352a:	e7fc      	b.n	8003526 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

0800352c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800352c:	2800      	cmp	r0, #0
 800352e:	d059      	beq.n	80035e4 <HAL_I2C_Init+0xb8>
{
 8003530:	b510      	push	{r4, lr}
 8003532:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003534:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003538:	2b00      	cmp	r3, #0
 800353a:	d043      	beq.n	80035c4 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800353c:	2324      	movs	r3, #36	; 0x24
 800353e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800354c:	6863      	ldr	r3, [r4, #4]
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003554:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	6893      	ldr	r3, [r2, #8]
 800355a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800355e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003560:	68e3      	ldr	r3, [r4, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d033      	beq.n	80035ce <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003566:	68a3      	ldr	r3, [r4, #8]
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800356e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003570:	68e3      	ldr	r3, [r4, #12]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d031      	beq.n	80035da <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	6853      	ldr	r3, [r2, #4]
 800357a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800357e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003582:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	68d3      	ldr	r3, [r2, #12]
 8003588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800358c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800358e:	6923      	ldr	r3, [r4, #16]
 8003590:	6962      	ldr	r2, [r4, #20]
 8003592:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003594:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800359c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800359e:	69e3      	ldr	r3, [r4, #28]
 80035a0:	6a21      	ldr	r1, [r4, #32]
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b2:	2000      	movs	r0, #0
 80035b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	2320      	movs	r3, #32
 80035b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035bc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80035c2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80035c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80035c8:	f7fe fc06 	bl	8001dd8 <HAL_I2C_MspInit>
 80035cc:	e7b6      	b.n	800353c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6822      	ldr	r2, [r4, #0]
 80035d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d6:	6093      	str	r3, [r2, #8]
 80035d8:	e7ca      	b.n	8003570 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	e7c8      	b.n	8003576 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80035e4:	2001      	movs	r0, #1
}
 80035e6:	4770      	bx	lr

080035e8 <HAL_I2C_Master_Transmit>:
{
 80035e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	460f      	mov	r7, r1
 80035f0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80035f6:	b2c9      	uxtb	r1, r1
 80035f8:	2920      	cmp	r1, #32
 80035fa:	f040 80a3 	bne.w	8003744 <HAL_I2C_Master_Transmit+0x15c>
 80035fe:	4604      	mov	r4, r0
 8003600:	4690      	mov	r8, r2
 8003602:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8003604:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003608:	2b01      	cmp	r3, #1
 800360a:	f000 809f 	beq.w	800374c <HAL_I2C_Master_Transmit+0x164>
 800360e:	f04f 0a01 	mov.w	sl, #1
 8003612:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003616:	f7fe fe43 	bl	80022a0 <HAL_GetTick>
 800361a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800361c:	9000      	str	r0, [sp, #0]
 800361e:	2319      	movs	r3, #25
 8003620:	4652      	mov	r2, sl
 8003622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003626:	4620      	mov	r0, r4
 8003628:	f7ff ff1c 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 800362c:	2800      	cmp	r0, #0
 800362e:	f040 808f 	bne.w	8003750 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003632:	2321      	movs	r3, #33	; 0x21
 8003634:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003638:	2310      	movs	r3, #16
 800363a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363e:	2300      	movs	r3, #0
 8003640:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003642:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003646:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800364a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800364c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	2bff      	cmp	r3, #255	; 0xff
 8003652:	d90a      	bls.n	800366a <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003654:	22ff      	movs	r2, #255	; 0xff
 8003656:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003658:	4b41      	ldr	r3, [pc, #260]	; (8003760 <HAL_I2C_Master_Transmit+0x178>)
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003660:	4639      	mov	r1, r7
 8003662:	4620      	mov	r0, r4
 8003664:	f7ff fe26 	bl	80032b4 <I2C_TransferConfig>
 8003668:	e018      	b.n	800369c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800366a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800366c:	b292      	uxth	r2, r2
 800366e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_I2C_Master_Transmit+0x178>)
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	4639      	mov	r1, r7
 800367c:	4620      	mov	r0, r4
 800367e:	f7ff fe19 	bl	80032b4 <I2C_TransferConfig>
 8003682:	e00b      	b.n	800369c <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8003684:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003686:	b292      	uxth	r2, r2
 8003688:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800368a:	2300      	movs	r3, #0
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	4639      	mov	r1, r7
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff fe0c 	bl	80032b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800369c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d033      	beq.n	800370c <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a4:	462a      	mov	r2, r5
 80036a6:	4631      	mov	r1, r6
 80036a8:	4620      	mov	r0, r4
 80036aa:	f7ff feab 	bl	8003404 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d150      	bne.n	8003754 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80036ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036bc:	3301      	adds	r3, #1
 80036be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80036c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80036ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80036d4:	b292      	uxth	r2, r2
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	d0e0      	beq.n	800369c <HAL_I2C_Master_Transmit+0xb4>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1de      	bne.n	800369c <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036de:	9500      	str	r5, [sp, #0]
 80036e0:	4633      	mov	r3, r6
 80036e2:	2200      	movs	r2, #0
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7ff febc 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80036ec:	bba0      	cbnz	r0, 8003758 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2bff      	cmp	r3, #255	; 0xff
 80036f4:	d9c6      	bls.n	8003684 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f6:	22ff      	movs	r2, #255	; 0xff
 80036f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036fa:	2300      	movs	r3, #0
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003702:	4639      	mov	r1, r7
 8003704:	4620      	mov	r0, r4
 8003706:	f7ff fdd5 	bl	80032b4 <I2C_TransferConfig>
 800370a:	e7c7      	b.n	800369c <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370c:	462a      	mov	r2, r5
 800370e:	4631      	mov	r1, r6
 8003710:	4620      	mov	r0, r4
 8003712:	f7ff fedc 	bl	80034ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8003716:	bb08      	cbnz	r0, 800375c <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	2220      	movs	r2, #32
 800371c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800371e:	6821      	ldr	r1, [r4, #0]
 8003720:	684b      	ldr	r3, [r1, #4]
 8003722:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003726:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800372a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003738:	2300      	movs	r3, #0
 800373a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800373e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003742:	e000      	b.n	8003746 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8003744:	2002      	movs	r0, #2
}
 8003746:	b002      	add	sp, #8
 8003748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800374c:	2002      	movs	r0, #2
 800374e:	e7fa      	b.n	8003746 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8003750:	2001      	movs	r0, #1
 8003752:	e7f8      	b.n	8003746 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8003754:	2001      	movs	r0, #1
 8003756:	e7f6      	b.n	8003746 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8003758:	2001      	movs	r0, #1
 800375a:	e7f4      	b.n	8003746 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800375c:	2001      	movs	r0, #1
 800375e:	e7f2      	b.n	8003746 <HAL_I2C_Master_Transmit+0x15e>
 8003760:	80002000 	.word	0x80002000

08003764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003764:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003766:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	2a20      	cmp	r2, #32
 800376e:	d123      	bne.n	80037b8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003770:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003774:	2a01      	cmp	r2, #1
 8003776:	d021      	beq.n	80037bc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003778:	2201      	movs	r2, #1
 800377a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003784:	6800      	ldr	r0, [r0, #0]
 8003786:	6802      	ldr	r2, [r0, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	6802      	ldr	r2, [r0, #0]
 8003792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003796:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	6802      	ldr	r2, [r0, #0]
 800379c:	4311      	orrs	r1, r2
 800379e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	680a      	ldr	r2, [r1, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	2000      	movs	r0, #0
 80037b2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80037b6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2002      	movs	r0, #2
 80037ba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80037bc:	2002      	movs	r0, #2
  }
}
 80037be:	4770      	bx	lr

080037c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037c0:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	2a20      	cmp	r2, #32
 80037ca:	d121      	bne.n	8003810 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037cc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80037d0:	2a01      	cmp	r2, #1
 80037d2:	d01f      	beq.n	8003814 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80037d4:	2201      	movs	r2, #1
 80037d6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037da:	2224      	movs	r2, #36	; 0x24
 80037dc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e0:	6800      	ldr	r0, [r0, #0]
 80037e2:	6802      	ldr	r2, [r0, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037f6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	680a      	ldr	r2, [r1, #0]
 80037fc:	f042 0201 	orr.w	r2, r2, #1
 8003800:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	2000      	movs	r0, #0
 800380a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800380e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003810:	2002      	movs	r0, #2
 8003812:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003814:	2002      	movs	r0, #2
  }
}
 8003816:	4770      	bx	lr

08003818 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003818:	4b02      	ldr	r3, [pc, #8]	; (8003824 <HAL_PWREx_GetVoltageRange+0xc>)
 800381a:	6818      	ldr	r0, [r3, #0]
}
 800381c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40007000 	.word	0x40007000

08003828 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003828:	4a02      	ldr	r2, [pc, #8]	; (8003834 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800382a:	6893      	ldr	r3, [r2, #8]
 800382c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003830:	6093      	str	r3, [r2, #8]
}
 8003832:	4770      	bx	lr
 8003834:	40007000 	.word	0x40007000

08003838 <HAL_PWREx_SMPS_GetEffectiveMode>:
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_PWREx_SMPS_GetEffectiveMode+0x20>)
 800383a:	691b      	ldr	r3, [r3, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800383c:	f413 5080 	ands.w	r0, r3, #4096	; 0x1000
 8003840:	d106      	bne.n	8003850 <HAL_PWREx_SMPS_GetEffectiveMode+0x18>
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003842:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003846:	d000      	beq.n	800384a <HAL_PWREx_SMPS_GetEffectiveMode+0x12>
  {
    mode = PWR_SMPS_HIGH_POWER;
  }

  return mode;
}
 8003848:	4770      	bx	lr
    mode = PWR_SMPS_LOW_POWER;
 800384a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800384e:	4770      	bx	lr
    mode = PWR_SMPS_BYPASS;
 8003850:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  return mode;
 8003854:	e7f8      	b.n	8003848 <HAL_PWREx_SMPS_GetEffectiveMode+0x10>
 8003856:	bf00      	nop
 8003858:	40007000 	.word	0x40007000

0800385c <HAL_PWREx_ControlVoltageScaling>:
{
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4605      	mov	r5, r0
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0x80>)
 8003862:	681c      	ldr	r4, [r3, #0]
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003864:	f7ff ffe8 	bl	8003838 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003868:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800386c:	d02d      	beq.n	80038ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 800386e:	f404 64c0 	and.w	r4, r4, #1536	; 0x600
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0x80>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800387a:	d128      	bne.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x72>
  if (vos_old == VoltageScaling)
 800387c:	42ac      	cmp	r4, r5
 800387e:	d028      	beq.n	80038d2 <HAL_PWREx_ControlVoltageScaling+0x76>
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003880:	4a16      	ldr	r2, [pc, #88]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0x80>)
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003888:	432b      	orrs	r3, r5
 800388a:	6013      	str	r3, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	09db      	lsrs	r3, r3, #7
 800389a:	2232      	movs	r2, #50	; 0x32
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	4a11      	ldr	r2, [pc, #68]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	08db      	lsrs	r3, r3, #3
 80038a8:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038aa:	e000      	b.n	80038ae <HAL_PWREx_ControlVoltageScaling+0x52>
    wait_loop_index--;
 80038ac:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0x80>)
 80038b0:	6952      	ldr	r2, [r2, #20]
 80038b2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80038b6:	d001      	beq.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f7      	bne.n	80038ac <HAL_PWREx_ControlVoltageScaling+0x50>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0x80>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038c4:	d107      	bne.n	80038d6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 80038c6:	2000      	movs	r0, #0
}
 80038c8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80038ca:	2001      	movs	r0, #1
 80038cc:	e7fc      	b.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
 80038d0:	e7fa      	b.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_OK;
 80038d2:	2000      	movs	r0, #0
 80038d4:	e7f8      	b.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_TIMEOUT;
 80038d6:	2003      	movs	r0, #3
 80038d8:	e7f6      	b.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x6c>
 80038da:	bf00      	nop
 80038dc:	40007000 	.word	0x40007000
 80038e0:	20000024 	.word	0x20000024
 80038e4:	0a7c5ac5 	.word	0x0a7c5ac5
 80038e8:	cccccccd 	.word	0xcccccccd

080038ec <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038ee:	68d3      	ldr	r3, [r2, #12]
 80038f0:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f4:	68d2      	ldr	r2, [r2, #12]
 80038f6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80038fa:	3201      	adds	r2, #1

  switch (pllsource)
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d00d      	beq.n	800391c <RCC_GetSysClockFreqFromPLLSource+0x30>
 8003900:	2b03      	cmp	r3, #3
 8003902:	d015      	beq.n	8003930 <RCC_GetSysClockFreqFromPLLSource+0x44>
 8003904:	2b01      	cmp	r3, #1
 8003906:	d01d      	beq.n	8003944 <RCC_GetSysClockFreqFromPLLSource+0x58>
 8003908:	2000      	movs	r0, #0
      /* unexpected */
      pllvco = 0;
      break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003912:	3301      	adds	r3, #1
 8003914:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8003916:	fbb0 f0f3 	udiv	r0, r0, r3
 800391a:	4770      	bx	lr
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800391c:	4814      	ldr	r0, [pc, #80]	; (8003970 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800391e:	fbb0 f0f2 	udiv	r0, r0, r2
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800392a:	fb03 f000 	mul.w	r0, r3, r0
      break;
 800392e:	e7ec      	b.n	800390a <RCC_GetSysClockFreqFromPLLSource+0x1e>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003930:	480f      	ldr	r0, [pc, #60]	; (8003970 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003932:	fbb0 f0f2 	udiv	r0, r0, r2
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800393e:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8003942:	e7e2      	b.n	800390a <RCC_GetSysClockFreqFromPLLSource+0x1e>
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f013 0f08 	tst.w	r3, #8
 800394c:	d108      	bne.n	8003960 <RCC_GetSysClockFreqFromPLLSource+0x74>
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003954:	f3c3 2303 	ubfx	r3, r3, #8, #4
        pllvco = MSIRangeTable[msirange];
 8003958:	4a06      	ldr	r2, [pc, #24]	; (8003974 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800395a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 800395e:	e7d4      	b.n	800390a <RCC_GetSysClockFreqFromPLLSource+0x1e>
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003968:	e7f6      	b.n	8003958 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	00f42400 	.word	0x00f42400
 8003974:	08008bb8 	.word	0x08008bb8

08003978 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003978:	b530      	push	{r4, r5, lr}
 800397a:	b083      	sub	sp, #12
 800397c:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800397e:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003986:	d00c      	beq.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0x2a>
    vos = HAL_PWREx_GetVoltageRange();
 8003988:	f7ff ff46 	bl	8003818 <HAL_PWREx_GetVoltageRange>
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800398c:	b1d0      	cbz	r0, 80039c4 <RCC_SetFlashLatencyFromMSIRange+0x4c>
 800398e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003992:	d017      	beq.n	80039c4 <RCC_SetFlashLatencyFromMSIRange+0x4c>
    if (msirange > RCC_MSIRANGE_8)
 8003994:	2c80      	cmp	r4, #128	; 0x80
 8003996:	d82c      	bhi.n	80039f2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      if (msirange == RCC_MSIRANGE_8)
 8003998:	d02d      	beq.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      else if (msirange == RCC_MSIRANGE_7)
 800399a:	2c70      	cmp	r4, #112	; 0x70
 800399c:	d02d      	beq.n	80039fa <RCC_SetFlashLatencyFromMSIRange+0x82>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800399e:	2100      	movs	r1, #0
 80039a0:	e017      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	4d18      	ldr	r5, [pc, #96]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80039a4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	65ab      	str	r3, [r5, #88]	; 0x58
 80039ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80039b6:	f7ff ff2f 	bl	8003818 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80039bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c0:	65ab      	str	r3, [r5, #88]	; 0x58
 80039c2:	e7e3      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if (msirange > RCC_MSIRANGE_8)
 80039c4:	2c80      	cmp	r4, #128	; 0x80
 80039c6:	d903      	bls.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0x58>
      if (msirange > RCC_MSIRANGE_10)
 80039c8:	2ca0      	cmp	r4, #160	; 0xa0
 80039ca:	d910      	bls.n	80039ee <RCC_SetFlashLatencyFromMSIRange+0x76>
        latency = FLASH_LATENCY_2; /* 2WS */
 80039cc:	2102      	movs	r1, #2
 80039ce:	e000      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039d0:	2100      	movs	r1, #0
  __HAL_FLASH_SET_LATENCY(latency);
 80039d2:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <RCC_SetFlashLatencyFromMSIRange+0x90>)
 80039d4:	6813      	ldr	r3, [r2, #0]
 80039d6:	f023 030f 	bic.w	r3, r3, #15
 80039da:	430b      	orrs	r3, r1
 80039dc:	6013      	str	r3, [r2, #0]
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	428b      	cmp	r3, r1
 80039e6:	d10a      	bne.n	80039fe <RCC_SetFlashLatencyFromMSIRange+0x86>
  return HAL_OK;
 80039e8:	2000      	movs	r0, #0
}
 80039ea:	b003      	add	sp, #12
 80039ec:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 80039ee:	2101      	movs	r1, #1
 80039f0:	e7ef      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
      latency = FLASH_LATENCY_3; /* 3WS */
 80039f2:	2103      	movs	r1, #3
 80039f4:	e7ed      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80039f6:	2102      	movs	r1, #2
 80039f8:	e7eb      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80039fa:	2101      	movs	r1, #1
 80039fc:	e7e9      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    return HAL_ERROR;
 80039fe:	2001      	movs	r0, #1
 8003a00:	e7f3      	b.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40022000 	.word	0x40022000

08003a0c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0c:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a0e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	f002 0203 	and.w	r2, r2, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a16:	f013 030c 	ands.w	r3, r3, #12
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0x26>
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	d006      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x22>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d01f      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x58>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a28:	2000      	movs	r0, #0
 8003a2a:	4601      	mov	r1, r0
 8003a2c:	e010      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x44>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a2e:	2a01      	cmp	r2, #1
 8003a30:	d1f6      	bne.n	8003a20 <HAL_RCC_GetSysClockFreq+0x14>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a32:	4a28      	ldr	r2, [pc, #160]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	f012 0f08 	tst.w	r2, #8
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a3c:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a3e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003a42:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8003a46:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a48:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a4c:	b143      	cbz	r3, 8003a60 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a4e:	2000      	movs	r0, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x64>
}
 8003a54:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a56:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003a5e:	e7f2      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8003a60:	4608      	mov	r0, r1
 8003a62:	e7f5      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8003a64:	481d      	ldr	r0, [pc, #116]	; (8003adc <HAL_RCC_GetSysClockFreq+0xd0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a66:	2100      	movs	r1, #0
 8003a68:	e7f2      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8003a6a:	481c      	ldr	r0, [pc, #112]	; (8003adc <HAL_RCC_GetSysClockFreq+0xd0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	e7ef      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a7e:	3301      	adds	r3, #1
    switch (pllsource)
 8003a80:	2a02      	cmp	r2, #2
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0x8e>
 8003a84:	2a03      	cmp	r2, #3
 8003a86:	d01a      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0xb2>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a88:	fbb1 f1f3 	udiv	r1, r1, r3
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a8e:	68d8      	ldr	r0, [r3, #12]
 8003a90:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003a94:	fb01 f000 	mul.w	r0, r1, r0
        break;
 8003a98:	e008      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a9a:	4810      	ldr	r0, [pc, #64]	; (8003adc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003aa8:	fb03 f000 	mul.w	r0, r3, r0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8003ab8:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003abc:	e7ca      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x48>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003abe:	4807      	ldr	r0, [pc, #28]	; (8003adc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ac0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003acc:	fb03 f000 	mul.w	r0, r3, r0
        break;
 8003ad0:	e7ec      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xa0>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08008bb8 	.word	0x08008bb8
 8003adc:	00f42400 	.word	0x00f42400

08003ae0 <HAL_RCC_GetHCLKFreq>:
{
 8003ae0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003ae2:	f7ff ff93 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x18>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003aee:	4a03      	ldr	r2, [pc, #12]	; (8003afc <HAL_RCC_GetHCLKFreq+0x1c>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003af2:	40d8      	lsrs	r0, r3
 8003af4:	bd08      	pop	{r3, pc}
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08008ba0 	.word	0x08008ba0

08003b00 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003b00:	2800      	cmp	r0, #0
 8003b02:	f000 83b6 	beq.w	8004272 <HAL_RCC_OscConfig+0x772>
{
 8003b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0c:	4b9e      	ldr	r3, [pc, #632]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b0e:	689d      	ldr	r5, [r3, #8]
 8003b10:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b14:	68de      	ldr	r6, [r3, #12]
 8003b16:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b1a:	6803      	ldr	r3, [r0, #0]
 8003b1c:	f013 0f10 	tst.w	r3, #16
 8003b20:	d056      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xd0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b22:	b30d      	cbz	r5, 8003b68 <HAL_RCC_OscConfig+0x68>
 8003b24:	2d0c      	cmp	r5, #12
 8003b26:	d01d      	beq.n	8003b64 <HAL_RCC_OscConfig+0x64>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b28:	69e3      	ldr	r3, [r4, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80bc 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8003b30:	4a95      	ldr	r2, [pc, #596]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b3a:	f7fe fbb1 	bl	80022a0 <HAL_GetTick>
 8003b3e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b40:	4b91      	ldr	r3, [pc, #580]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f013 0f02 	tst.w	r3, #2
 8003b48:	f040 809b 	bne.w	8003c82 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b4c:	f7fe fba8 	bl	80022a0 <HAL_GetTick>
 8003b50:	1bc0      	subs	r0, r0, r7
 8003b52:	2802      	cmp	r0, #2
 8003b54:	d9f4      	bls.n	8003b40 <HAL_RCC_OscConfig+0x40>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b56:	4b8c      	ldr	r3, [pc, #560]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f013 0f02 	tst.w	r3, #2
 8003b5e:	d1ef      	bne.n	8003b40 <HAL_RCC_OscConfig+0x40>
              return HAL_TIMEOUT;
 8003b60:	2003      	movs	r0, #3
 8003b62:	e391      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b64:	2e01      	cmp	r6, #1
 8003b66:	d1df      	bne.n	8003b28 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b68:	4b87      	ldr	r3, [pc, #540]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f013 0f02 	tst.w	r3, #2
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_OscConfig+0x7a>
 8003b72:	69e3      	ldr	r3, [r4, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 837e 	beq.w	8004276 <HAL_RCC_OscConfig+0x776>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003b7c:	4b82      	ldr	r3, [pc, #520]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f013 0f08 	tst.w	r3, #8
 8003b84:	d057      	beq.n	8003c36 <HAL_RCC_OscConfig+0x136>
 8003b86:	4b80      	ldr	r3, [pc, #512]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b8e:	4298      	cmp	r0, r3
 8003b90:	d858      	bhi.n	8003c44 <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b92:	4b7d      	ldr	r3, [pc, #500]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ba2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003bae:	6a21      	ldr	r1, [r4, #32]
 8003bb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003bb4:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	d05c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bba:	f7ff ff91 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003bbe:	4b73      	ldr	r3, [pc, #460]	; (8003d8c <HAL_RCC_OscConfig+0x28c>)
 8003bc0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003bc2:	4b73      	ldr	r3, [pc, #460]	; (8003d90 <HAL_RCC_OscConfig+0x290>)
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	f7fe fb25 	bl	8002214 <HAL_InitTick>
        if (status != HAL_OK)
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	f040 835c 	bne.w	8004288 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	f013 0f01 	tst.w	r3, #1
 8003bd6:	f000 808b 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x1f0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003bda:	2d08      	cmp	r5, #8
 8003bdc:	d07f      	beq.n	8003cde <HAL_RCC_OscConfig+0x1de>
 8003bde:	2d0c      	cmp	r5, #12
 8003be0:	d07b      	beq.n	8003cda <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be2:	6863      	ldr	r3, [r4, #4]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	f000 80a7 	beq.w	8003d3a <HAL_RCC_OscConfig+0x23a>
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	f000 80a9 	beq.w	8003d46 <HAL_RCC_OscConfig+0x246>
 8003bf4:	4b64      	ldr	r3, [pc, #400]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c04:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80a9 	beq.w	8003d60 <HAL_RCC_OscConfig+0x260>
        tickstart = HAL_GetTick();
 8003c0e:	f7fe fb47 	bl	80022a0 <HAL_GetTick>
 8003c12:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c14:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c1c:	d168      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c1e:	f7fe fb3f 	bl	80022a0 <HAL_GetTick>
 8003c22:	1bc0      	subs	r0, r0, r7
 8003c24:	2864      	cmp	r0, #100	; 0x64
 8003c26:	d9f5      	bls.n	8003c14 <HAL_RCC_OscConfig+0x114>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c28:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x114>
              return HAL_TIMEOUT;
 8003c32:	2003      	movs	r0, #3
 8003c34:	e328      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c36:	4b54      	ldr	r3, [pc, #336]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c42:	e7a4      	b.n	8003b8e <HAL_RCC_OscConfig+0x8e>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c44:	f7ff fe98 	bl	8003978 <RCC_SetFlashLatencyFromMSIRange>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f040 8316 	bne.w	800427a <HAL_RCC_OscConfig+0x77a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c4e:	4b4e      	ldr	r3, [pc, #312]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	f042 0208 	orr.w	r2, r2, #8
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003c6a:	6a21      	ldr	r1, [r4, #32]
 8003c6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	e7a2      	b.n	8003bba <HAL_RCC_OscConfig+0xba>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c76:	f7ff fe7f 	bl	8003978 <RCC_SetFlashLatencyFromMSIRange>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d09d      	beq.n	8003bba <HAL_RCC_OscConfig+0xba>
              return HAL_ERROR;
 8003c7e:	2001      	movs	r0, #1
 8003c80:	e302      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c82:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	f042 0208 	orr.w	r2, r2, #8
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003c9e:	6a21      	ldr	r1, [r4, #32]
 8003ca0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	e793      	b.n	8003bd0 <HAL_RCC_OscConfig+0xd0>
        __HAL_RCC_MSI_DISABLE();
 8003ca8:	4a37      	ldr	r2, [pc, #220]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003caa:	6813      	ldr	r3, [r2, #0]
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003cb2:	f7fe faf5 	bl	80022a0 <HAL_GetTick>
 8003cb6:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cb8:	4b33      	ldr	r3, [pc, #204]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f013 0f02 	tst.w	r3, #2
 8003cc0:	d086      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xd0>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc2:	f7fe faed 	bl	80022a0 <HAL_GetTick>
 8003cc6:	1bc0      	subs	r0, r0, r7
 8003cc8:	2802      	cmp	r0, #2
 8003cca:	d9f5      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x1b8>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ccc:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f013 0f02 	tst.w	r3, #2
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x1b8>
              return HAL_TIMEOUT;
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	e2d6      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cda:	2e03      	cmp	r6, #3
 8003cdc:	d181      	bne.n	8003be2 <HAL_RCC_OscConfig+0xe2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cde:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ce6:	d003      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1f0>
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 82c7 	beq.w	800427e <HAL_RCC_OscConfig+0x77e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	f013 0f02 	tst.w	r3, #2
 8003cf6:	d060      	beq.n	8003dba <HAL_RCC_OscConfig+0x2ba>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003cf8:	2d04      	cmp	r5, #4
 8003cfa:	d04d      	beq.n	8003d98 <HAL_RCC_OscConfig+0x298>
 8003cfc:	2d0c      	cmp	r5, #12
 8003cfe:	d049      	beq.n	8003d94 <HAL_RCC_OscConfig+0x294>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d00:	68e3      	ldr	r3, [r4, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8090 	beq.w	8003e28 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d0a:	6813      	ldr	r3, [r2, #0]
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d10:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003d12:	f7fe fac5 	bl	80022a0 <HAL_GetTick>
 8003d16:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d20:	d179      	bne.n	8003e16 <HAL_RCC_OscConfig+0x316>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d22:	f7fe fabd 	bl	80022a0 <HAL_GetTick>
 8003d26:	1b40      	subs	r0, r0, r5
 8003d28:	2802      	cmp	r0, #2
 8003d2a:	d9f5      	bls.n	8003d18 <HAL_RCC_OscConfig+0x218>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x218>
              return HAL_TIMEOUT;
 8003d36:	2003      	movs	r0, #3
 8003d38:	e2a6      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d3c:	6813      	ldr	r3, [r2, #0]
 8003d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e75f      	b.n	8003c06 <HAL_RCC_OscConfig+0x106>
 8003d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d4a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e752      	b.n	8003c06 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8003d60:	f7fe fa9e 	bl	80022a0 <HAL_GetTick>
 8003d64:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d6e:	d0bf      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe fa96 	bl	80022a0 <HAL_GetTick>
 8003d74:	1bc0      	subs	r0, r0, r7
 8003d76:	2864      	cmp	r0, #100	; 0x64
 8003d78:	d9f5      	bls.n	8003d66 <HAL_RCC_OscConfig+0x266>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d7a:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x266>
              return HAL_TIMEOUT;
 8003d84:	2003      	movs	r0, #3
 8003d86:	e27f      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	20000024 	.word	0x20000024
 8003d90:	2000002c 	.word	0x2000002c
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d94:	2e02      	cmp	r6, #2
 8003d96:	d1b3      	bne.n	8003d00 <HAL_RCC_OscConfig+0x200>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d98:	4ba9      	ldr	r3, [pc, #676]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_OscConfig+0x2aa>
 8003da2:	68e3      	ldr	r3, [r4, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 826c 	beq.w	8004282 <HAL_RCC_OscConfig+0x782>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4aa5      	ldr	r2, [pc, #660]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003dac:	6853      	ldr	r3, [r2, #4]
 8003dae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003db2:	6921      	ldr	r1, [r4, #16]
 8003db4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003db8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f013 0f08 	tst.w	r3, #8
 8003dc0:	d070      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x3a4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc2:	6963      	ldr	r3, [r4, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d050      	beq.n	8003e6a <HAL_RCC_OscConfig+0x36a>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003dc8:	69a3      	ldr	r3, [r4, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d145      	bne.n	8003e5a <HAL_RCC_OscConfig+0x35a>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003dce:	4a9c      	ldr	r2, [pc, #624]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003dd0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003dd4:	f023 0310 	bic.w	r3, r3, #16
 8003dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8003ddc:	4a98      	ldr	r2, [pc, #608]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003dde:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003dea:	f7fe fa59 	bl	80022a0 <HAL_GetTick>
 8003dee:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003df0:	4b93      	ldr	r3, [pc, #588]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df6:	f013 0f02 	tst.w	r3, #2
 8003dfa:	d153      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7fe fa50 	bl	80022a0 <HAL_GetTick>
 8003e00:	1b40      	subs	r0, r0, r5
 8003e02:	2807      	cmp	r0, #7
 8003e04:	d9f4      	bls.n	8003df0 <HAL_RCC_OscConfig+0x2f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e06:	4b8e      	ldr	r3, [pc, #568]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0c:	f013 0f02 	tst.w	r3, #2
 8003e10:	d1ee      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2f0>
            return HAL_TIMEOUT;
 8003e12:	2003      	movs	r0, #3
 8003e14:	e238      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4a8a      	ldr	r2, [pc, #552]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e18:	6853      	ldr	r3, [r2, #4]
 8003e1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e1e:	6921      	ldr	r1, [r4, #16]
 8003e20:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003e24:	6053      	str	r3, [r2, #4]
 8003e26:	e7c8      	b.n	8003dba <HAL_RCC_OscConfig+0x2ba>
        __HAL_RCC_HSI_DISABLE();
 8003e28:	4a85      	ldr	r2, [pc, #532]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e2a:	6813      	ldr	r3, [r2, #0]
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e32:	f7fe fa35 	bl	80022a0 <HAL_GetTick>
 8003e36:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e38:	4b81      	ldr	r3, [pc, #516]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e40:	d0bb      	beq.n	8003dba <HAL_RCC_OscConfig+0x2ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fe fa2d 	bl	80022a0 <HAL_GetTick>
 8003e46:	1b40      	subs	r0, r0, r5
 8003e48:	2802      	cmp	r0, #2
 8003e4a:	d9f5      	bls.n	8003e38 <HAL_RCC_OscConfig+0x338>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e4c:	4b7c      	ldr	r3, [pc, #496]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x338>
              return HAL_TIMEOUT;
 8003e56:	2003      	movs	r0, #3
 8003e58:	e216      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003e5a:	4a79      	ldr	r2, [pc, #484]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e5c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003e60:	f043 0310 	orr.w	r3, r3, #16
 8003e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e68:	e7b8      	b.n	8003ddc <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_LSI_DISABLE();
 8003e6a:	4a75      	ldr	r2, [pc, #468]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e6c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003e78:	f7fe fa12 	bl	80022a0 <HAL_GetTick>
 8003e7c:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e7e:	4b70      	ldr	r3, [pc, #448]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e84:	f013 0f02 	tst.w	r3, #2
 8003e88:	d00c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8a:	f7fe fa09 	bl	80022a0 <HAL_GetTick>
 8003e8e:	1b40      	subs	r0, r0, r5
 8003e90:	2807      	cmp	r0, #7
 8003e92:	d9f4      	bls.n	8003e7e <HAL_RCC_OscConfig+0x37e>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e94:	4b6a      	ldr	r3, [pc, #424]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9a:	f013 0f02 	tst.w	r3, #2
 8003e9e:	d0ee      	beq.n	8003e7e <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 8003ea0:	2003      	movs	r0, #3
 8003ea2:	e1f1      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f013 0f04 	tst.w	r3, #4
 8003eaa:	f000 80f0 	beq.w	800408e <HAL_RCC_OscConfig+0x58e>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003eae:	4b64      	ldr	r3, [pc, #400]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003eb6:	d124      	bne.n	8003f02 <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb8:	4b61      	ldr	r3, [pc, #388]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003eba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ebc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ec0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ecc:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ece:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <HAL_RCC_OscConfig+0x544>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ed6:	d016      	beq.n	8003f06 <HAL_RCC_OscConfig+0x406>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003ed8:	68a3      	ldr	r3, [r4, #8]
 8003eda:	f013 0f01 	tst.w	r3, #1
 8003ede:	d033      	beq.n	8003f48 <HAL_RCC_OscConfig+0x448>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003ee0:	f013 0f04 	tst.w	r3, #4
 8003ee4:	d028      	beq.n	8003f38 <HAL_RCC_OscConfig+0x438>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ee6:	4b56      	ldr	r3, [pc, #344]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003ee8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003eec:	f042 0204 	orr.w	r2, r2, #4
 8003ef0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ef4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003f00:	e02f      	b.n	8003f62 <HAL_RCC_OscConfig+0x462>
    FlagStatus       pwrclkchanged = RESET;
 8003f02:	2500      	movs	r5, #0
 8003f04:	e7e3      	b.n	8003ece <HAL_RCC_OscConfig+0x3ce>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f06:	4a4f      	ldr	r2, [pc, #316]	; (8004044 <HAL_RCC_OscConfig+0x544>)
 8003f08:	6813      	ldr	r3, [r2, #0]
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003f10:	f7fe f9c6 	bl	80022a0 <HAL_GetTick>
 8003f14:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f16:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <HAL_RCC_OscConfig+0x544>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f1e:	d1db      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x3d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7fe f9be 	bl	80022a0 <HAL_GetTick>
 8003f24:	1b80      	subs	r0, r0, r6
 8003f26:	2802      	cmp	r0, #2
 8003f28:	d9f5      	bls.n	8003f16 <HAL_RCC_OscConfig+0x416>
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2a:	4b46      	ldr	r3, [pc, #280]	; (8004044 <HAL_RCC_OscConfig+0x544>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 8003f34:	2003      	movs	r0, #3
 8003f36:	e1a7      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f38:	4a41      	ldr	r2, [pc, #260]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003f3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f46:	e00c      	b.n	8003f62 <HAL_RCC_OscConfig+0x462>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f48:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003f4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f56:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003f5a:	f022 0204 	bic.w	r2, r2, #4
 8003f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f62:	68a3      	ldr	r3, [r4, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d053      	beq.n	8004010 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8003f68:	f7fe f99a 	bl	80022a0 <HAL_GetTick>
 8003f6c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6e:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f013 0f02 	tst.w	r3, #2
 8003f78:	d10e      	bne.n	8003f98 <HAL_RCC_OscConfig+0x498>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fe f991 	bl	80022a0 <HAL_GetTick>
 8003f7e:	1b80      	subs	r0, r0, r6
 8003f80:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f84:	4298      	cmp	r0, r3
 8003f86:	d9f2      	bls.n	8003f6e <HAL_RCC_OscConfig+0x46e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f013 0f02 	tst.w	r3, #2
 8003f92:	d1ec      	bne.n	8003f6e <HAL_RCC_OscConfig+0x46e>
            return HAL_TIMEOUT;
 8003f94:	2003      	movs	r0, #3
 8003f96:	e177      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003f98:	68a3      	ldr	r3, [r4, #8]
 8003f9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f9e:	d01b      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4d8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fa0:	4a27      	ldr	r2, [pc, #156]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003fa2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003fb8:	d168      	bne.n	800408c <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7fe f971 	bl	80022a0 <HAL_GetTick>
 8003fbe:	1b80      	subs	r0, r0, r6
 8003fc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fc4:	4298      	cmp	r0, r3
 8003fc6:	d9f2      	bls.n	8003fae <HAL_RCC_OscConfig+0x4ae>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003fd2:	d1ec      	bne.n	8003fae <HAL_RCC_OscConfig+0x4ae>
              return HAL_TIMEOUT;
 8003fd4:	2003      	movs	r0, #3
 8003fd6:	e157      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fd8:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003fda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003ff0:	d04c      	beq.n	800408c <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fe f955 	bl	80022a0 <HAL_GetTick>
 8003ff6:	1b80      	subs	r0, r0, r6
 8003ff8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ffc:	4298      	cmp	r0, r3
 8003ffe:	d9f2      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x4e6>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800400a:	d0ec      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x4e6>
              return HAL_TIMEOUT;
 800400c:	2003      	movs	r0, #3
 800400e:	e13b      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
      tickstart = HAL_GetTick();
 8004010:	f7fe f946 	bl	80022a0 <HAL_GetTick>
 8004014:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f013 0f02 	tst.w	r3, #2
 8004020:	d012      	beq.n	8004048 <HAL_RCC_OscConfig+0x548>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fe f93d 	bl	80022a0 <HAL_GetTick>
 8004026:	1b80      	subs	r0, r0, r6
 8004028:	f241 3388 	movw	r3, #5000	; 0x1388
 800402c:	4298      	cmp	r0, r3
 800402e:	d9f2      	bls.n	8004016 <HAL_RCC_OscConfig+0x516>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_OscConfig+0x540>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f013 0f02 	tst.w	r3, #2
 800403a:	d0ec      	beq.n	8004016 <HAL_RCC_OscConfig+0x516>
            return HAL_TIMEOUT;
 800403c:	2003      	movs	r0, #3
 800403e:	e123      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
 8004040:	40021000 	.word	0x40021000
 8004044:	40007000 	.word	0x40007000
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004048:	4b97      	ldr	r3, [pc, #604]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004052:	d01b      	beq.n	800408c <HAL_RCC_OscConfig+0x58c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004054:	4a94      	ldr	r2, [pc, #592]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004056:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800405a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800405e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004062:	4b91      	ldr	r3, [pc, #580]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800406c:	d00e      	beq.n	800408c <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fe f917 	bl	80022a0 <HAL_GetTick>
 8004072:	1b80      	subs	r0, r0, r6
 8004074:	f241 3388 	movw	r3, #5000	; 0x1388
 8004078:	4298      	cmp	r0, r3
 800407a:	d9f2      	bls.n	8004062 <HAL_RCC_OscConfig+0x562>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800407c:	4b8a      	ldr	r3, [pc, #552]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004086:	d0ec      	beq.n	8004062 <HAL_RCC_OscConfig+0x562>
              return HAL_TIMEOUT;
 8004088:	2003      	movs	r0, #3
 800408a:	e0fd      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
    if (pwrclkchanged == SET)
 800408c:	bb15      	cbnz	r5, 80040d4 <HAL_RCC_OscConfig+0x5d4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	f013 0f20 	tst.w	r3, #32
 8004094:	d041      	beq.n	800411a <HAL_RCC_OscConfig+0x61a>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004098:	b313      	cbz	r3, 80040e0 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSI48_ENABLE();
 800409a:	4a83      	ldr	r2, [pc, #524]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 800409c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80040a8:	f7fe f8fa 	bl	80022a0 <HAL_GetTick>
 80040ac:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ae:	4b7e      	ldr	r3, [pc, #504]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 80040b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b4:	f013 0f02 	tst.w	r3, #2
 80040b8:	d12f      	bne.n	800411a <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ba:	f7fe f8f1 	bl	80022a0 <HAL_GetTick>
 80040be:	1b40      	subs	r0, r0, r5
 80040c0:	2802      	cmp	r0, #2
 80040c2:	d9f4      	bls.n	80040ae <HAL_RCC_OscConfig+0x5ae>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c4:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 80040c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ca:	f013 0f02 	tst.w	r3, #2
 80040ce:	d1ee      	bne.n	80040ae <HAL_RCC_OscConfig+0x5ae>
            return HAL_TIMEOUT;
 80040d0:	2003      	movs	r0, #3
 80040d2:	e0d9      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d4:	4a74      	ldr	r2, [pc, #464]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 80040d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6593      	str	r3, [r2, #88]	; 0x58
 80040de:	e7d6      	b.n	800408e <HAL_RCC_OscConfig+0x58e>
      __HAL_RCC_HSI48_DISABLE();
 80040e0:	4a71      	ldr	r2, [pc, #452]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 80040e2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80040ee:	f7fe f8d7 	bl	80022a0 <HAL_GetTick>
 80040f2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040f4:	4b6c      	ldr	r3, [pc, #432]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 80040f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040fa:	f013 0f02 	tst.w	r3, #2
 80040fe:	d00c      	beq.n	800411a <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004100:	f7fe f8ce 	bl	80022a0 <HAL_GetTick>
 8004104:	1b40      	subs	r0, r0, r5
 8004106:	2802      	cmp	r0, #2
 8004108:	d9f4      	bls.n	80040f4 <HAL_RCC_OscConfig+0x5f4>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800410a:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 800410c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004110:	f013 0f02 	tst.w	r3, #2
 8004114:	d0ee      	beq.n	80040f4 <HAL_RCC_OscConfig+0x5f4>
            return HAL_TIMEOUT;
 8004116:	2003      	movs	r0, #3
 8004118:	e0b6      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80b2 	beq.w	8004286 <HAL_RCC_OscConfig+0x786>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004122:	4a61      	ldr	r2, [pc, #388]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004124:	6892      	ldr	r2, [r2, #8]
 8004126:	f002 020c 	and.w	r2, r2, #12
 800412a:	2a0c      	cmp	r2, #12
 800412c:	d073      	beq.n	8004216 <HAL_RCC_OscConfig+0x716>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800412e:	2b02      	cmp	r3, #2
 8004130:	d018      	beq.n	8004164 <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_PLL_DISABLE();
 8004132:	4a5d      	ldr	r2, [pc, #372]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004134:	6813      	ldr	r3, [r2, #0]
 8004136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800413c:	f7fe f8b0 	bl	80022a0 <HAL_GetTick>
 8004140:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004142:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800414a:	d05d      	beq.n	8004208 <HAL_RCC_OscConfig+0x708>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fe f8a8 	bl	80022a0 <HAL_GetTick>
 8004150:	1b00      	subs	r0, r0, r4
 8004152:	2802      	cmp	r0, #2
 8004154:	d9f5      	bls.n	8004142 <HAL_RCC_OscConfig+0x642>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004156:	4b54      	ldr	r3, [pc, #336]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x642>
              return HAL_TIMEOUT;
 8004160:	2003      	movs	r0, #3
 8004162:	e091      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_DISABLE();
 8004164:	4a50      	ldr	r2, [pc, #320]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800416e:	f7fe f897 	bl	80022a0 <HAL_GetTick>
 8004172:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004174:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800417c:	d00b      	beq.n	8004196 <HAL_RCC_OscConfig+0x696>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417e:	f7fe f88f 	bl	80022a0 <HAL_GetTick>
 8004182:	1b40      	subs	r0, r0, r5
 8004184:	2802      	cmp	r0, #2
 8004186:	d9f5      	bls.n	8004174 <HAL_RCC_OscConfig+0x674>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004188:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x674>
              return HAL_TIMEOUT;
 8004192:	2003      	movs	r0, #3
 8004194:	e078      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004196:	4a44      	ldr	r2, [pc, #272]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 8004198:	68d3      	ldr	r3, [r2, #12]
 800419a:	4944      	ldr	r1, [pc, #272]	; (80042ac <HAL_RCC_OscConfig+0x7ac>)
 800419c:	4019      	ands	r1, r3
 800419e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80041a2:	3801      	subs	r0, #1
 80041a4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80041a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80041aa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80041ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80041b0:	0840      	lsrs	r0, r0, #1
 80041b2:	3801      	subs	r0, #1
 80041b4:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80041b8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80041ba:	0840      	lsrs	r0, r0, #1
 80041bc:	3801      	subs	r0, #1
 80041be:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80041c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80041c4:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80041c8:	4319      	orrs	r1, r3
 80041ca:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80041cc:	6813      	ldr	r3, [r2, #0]
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041d4:	68d3      	ldr	r3, [r2, #12]
 80041d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041da:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80041dc:	f7fe f860 	bl	80022a0 <HAL_GetTick>
 80041e0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041ea:	d10b      	bne.n	8004204 <HAL_RCC_OscConfig+0x704>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fe f858 	bl	80022a0 <HAL_GetTick>
 80041f0:	1b00      	subs	r0, r0, r4
 80041f2:	2802      	cmp	r0, #2
 80041f4:	d9f5      	bls.n	80041e2 <HAL_RCC_OscConfig+0x6e2>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f6:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x6e2>
              return HAL_TIMEOUT;
 8004200:	2003      	movs	r0, #3
 8004202:	e041      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 8004204:	2000      	movs	r0, #0
 8004206:	e03f      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004208:	4a27      	ldr	r2, [pc, #156]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 800420a:	68d1      	ldr	r1, [r2, #12]
 800420c:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <HAL_RCC_OscConfig+0x7b0>)
 800420e:	400b      	ands	r3, r1
 8004210:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004212:	2000      	movs	r0, #0
 8004214:	e038      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004216:	2b01      	cmp	r3, #1
 8004218:	d038      	beq.n	800428c <HAL_RCC_OscConfig+0x78c>
        pll_config = RCC->PLLCFGR;
 800421a:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <HAL_RCC_OscConfig+0x7a8>)
 800421c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	f003 0103 	and.w	r1, r3, #3
 8004222:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004224:	4291      	cmp	r1, r2
 8004226:	d133      	bne.n	8004290 <HAL_RCC_OscConfig+0x790>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004228:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800422c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800422e:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004230:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004234:	d12e      	bne.n	8004294 <HAL_RCC_OscConfig+0x794>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004236:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800423a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800423c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004240:	d12a      	bne.n	8004298 <HAL_RCC_OscConfig+0x798>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004242:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004246:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004248:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800424c:	d126      	bne.n	800429c <HAL_RCC_OscConfig+0x79c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800424e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004252:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004254:	0852      	lsrs	r2, r2, #1
 8004256:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004258:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800425c:	d120      	bne.n	80042a0 <HAL_RCC_OscConfig+0x7a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800425e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004262:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004264:	0852      	lsrs	r2, r2, #1
 8004266:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004268:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800426c:	d11a      	bne.n	80042a4 <HAL_RCC_OscConfig+0x7a4>
  return HAL_OK;
 800426e:	2000      	movs	r0, #0
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
    return HAL_ERROR;
 8004272:	2001      	movs	r0, #1
}
 8004274:	4770      	bx	lr
        return HAL_ERROR;
 8004276:	2001      	movs	r0, #1
 8004278:	e006      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
            return HAL_ERROR;
 800427a:	2001      	movs	r0, #1
 800427c:	e004      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 800427e:	2001      	movs	r0, #1
 8004280:	e002      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 8004282:	2001      	movs	r0, #1
 8004284:	e000      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 8004286:	2000      	movs	r0, #0
}
 8004288:	b003      	add	sp, #12
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800428c:	2001      	movs	r0, #1
 800428e:	e7fb      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
          return HAL_ERROR;
 8004290:	2001      	movs	r0, #1
 8004292:	e7f9      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
 8004294:	2001      	movs	r0, #1
 8004296:	e7f7      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
 8004298:	2001      	movs	r0, #1
 800429a:	e7f5      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
 800429c:	2001      	movs	r0, #1
 800429e:	e7f3      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
 80042a0:	2001      	movs	r0, #1
 80042a2:	e7f1      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
 80042a4:	2001      	movs	r0, #1
 80042a6:	e7ef      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
 80042a8:	40021000 	.word	0x40021000
 80042ac:	019f800c 	.word	0x019f800c
 80042b0:	feeefffc 	.word	0xfeeefffc

080042b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80042b4:	2800      	cmp	r0, #0
 80042b6:	f000 80e9 	beq.w	800448c <HAL_RCC_ClockConfig+0x1d8>
{
 80042ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042bc:	460d      	mov	r5, r1
 80042be:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c0:	4b76      	ldr	r3, [pc, #472]	; (800449c <HAL_RCC_ClockConfig+0x1e8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	428b      	cmp	r3, r1
 80042ca:	d20b      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042cc:	4a73      	ldr	r2, [pc, #460]	; (800449c <HAL_RCC_ClockConfig+0x1e8>)
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	f023 030f 	bic.w	r3, r3, #15
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d8:	6813      	ldr	r3, [r2, #0]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	428b      	cmp	r3, r1
 80042e0:	f040 80d6 	bne.w	8004490 <HAL_RCC_ClockConfig+0x1dc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	f013 0f02 	tst.w	r3, #2
 80042ea:	d00c      	beq.n	8004306 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042ec:	68a2      	ldr	r2, [r4, #8]
 80042ee:	4b6c      	ldr	r3, [pc, #432]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d905      	bls.n	8004306 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fa:	4969      	ldr	r1, [pc, #420]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 80042fc:	688b      	ldr	r3, [r1, #8]
 80042fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004302:	431a      	orrs	r2, r3
 8004304:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f013 0f01 	tst.w	r3, #1
 800430c:	d076      	beq.n	80043fc <HAL_RCC_ClockConfig+0x148>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430e:	6863      	ldr	r3, [r4, #4]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d00d      	beq.n	8004330 <HAL_RCC_ClockConfig+0x7c>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004314:	2b02      	cmp	r3, #2
 8004316:	d025      	beq.n	8004364 <HAL_RCC_ClockConfig+0xb0>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004318:	2b00      	cmp	r3, #0
 800431a:	d13c      	bne.n	8004396 <HAL_RCC_ClockConfig+0xe2>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800431c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004320:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f013 0f02 	tst.w	r3, #2
 800432a:	d121      	bne.n	8004370 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 800432c:	2001      	movs	r0, #1
 800432e:	e0a6      	b.n	800447e <HAL_RCC_ClockConfig+0x1ca>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004330:	4b5b      	ldr	r3, [pc, #364]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004338:	d101      	bne.n	800433e <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 800433a:	2001      	movs	r0, #1
 800433c:	e09f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ca>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800433e:	f7ff fad5 	bl	80038ec <RCC_GetSysClockFreqFromPLLSource>
      if (pllfreq > 80000000U)
 8004342:	4b58      	ldr	r3, [pc, #352]	; (80044a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004344:	4298      	cmp	r0, r3
 8004346:	d92d      	bls.n	80043a4 <HAL_RCC_ClockConfig+0xf0>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004348:	4b55      	ldr	r3, [pc, #340]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004350:	d12a      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004352:	4a53      	ldr	r2, [pc, #332]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004354:	6893      	ldr	r3, [r2, #8]
 8004356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004360:	2780      	movs	r7, #128	; 0x80
 8004362:	e024      	b.n	80043ae <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004364:	4b4e      	ldr	r3, [pc, #312]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800436c:	f000 8092 	beq.w	8004494 <HAL_RCC_ClockConfig+0x1e0>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004370:	f7ff fb4c 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 8004374:	4b4b      	ldr	r3, [pc, #300]	; (80044a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004376:	4298      	cmp	r0, r3
 8004378:	d918      	bls.n	80043ac <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800437a:	4b49      	ldr	r3, [pc, #292]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004382:	d137      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x140>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004384:	4a46      	ldr	r2, [pc, #280]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004386:	6893      	ldr	r3, [r2, #8]
 8004388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004392:	2780      	movs	r7, #128	; 0x80
 8004394:	e00b      	b.n	80043ae <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004396:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800439e:	d1e7      	bne.n	8004370 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 80043a0:	2001      	movs	r0, #1
 80043a2:	e06c      	b.n	800447e <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043a4:	2700      	movs	r7, #0
 80043a6:	e002      	b.n	80043ae <HAL_RCC_ClockConfig+0xfa>
 80043a8:	2700      	movs	r7, #0
 80043aa:	e000      	b.n	80043ae <HAL_RCC_ClockConfig+0xfa>
 80043ac:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	4a3c      	ldr	r2, [pc, #240]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 80043b0:	6893      	ldr	r3, [r2, #8]
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	6861      	ldr	r1, [r4, #4]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80043bc:	f7fd ff70 	bl	80022a0 <HAL_GetTick>
 80043c0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	6862      	ldr	r2, [r4, #4]
 80043cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043d0:	d012      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x144>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d2:	f7fd ff65 	bl	80022a0 <HAL_GetTick>
 80043d6:	1b80      	subs	r0, r0, r6
 80043d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80043dc:	4298      	cmp	r0, r3
 80043de:	d9f0      	bls.n	80043c2 <HAL_RCC_ClockConfig+0x10e>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e0:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	6862      	ldr	r2, [r4, #4]
 80043ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043ee:	d0e8      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 80043f0:	2003      	movs	r0, #3
 80043f2:	e044      	b.n	800447e <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043f4:	2700      	movs	r7, #0
 80043f6:	e7da      	b.n	80043ae <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 80043f8:	2f00      	cmp	r7, #0
 80043fa:	d141      	bne.n	8004480 <HAL_RCC_ClockConfig+0x1cc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	f013 0f02 	tst.w	r3, #2
 8004402:	d00c      	beq.n	800441e <HAL_RCC_ClockConfig+0x16a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004404:	68a2      	ldr	r2, [r4, #8]
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440e:	429a      	cmp	r2, r3
 8004410:	d205      	bcs.n	800441e <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004412:	4923      	ldr	r1, [pc, #140]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004414:	688b      	ldr	r3, [r1, #8]
 8004416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800441a:	431a      	orrs	r2, r3
 800441c:	608a      	str	r2, [r1, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <HAL_RCC_ClockConfig+0x1e8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	42ab      	cmp	r3, r5
 8004428:	d90a      	bls.n	8004440 <HAL_RCC_ClockConfig+0x18c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <HAL_RCC_ClockConfig+0x1e8>)
 800442c:	6813      	ldr	r3, [r2, #0]
 800442e:	f023 030f 	bic.w	r3, r3, #15
 8004432:	432b      	orrs	r3, r5
 8004434:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	42ab      	cmp	r3, r5
 800443e:	d12b      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1e4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	f013 0f04 	tst.w	r3, #4
 8004446:	d006      	beq.n	8004456 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004448:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 800444a:	6893      	ldr	r3, [r2, #8]
 800444c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004450:	68e1      	ldr	r1, [r4, #12]
 8004452:	430b      	orrs	r3, r1
 8004454:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	f013 0f08 	tst.w	r3, #8
 800445c:	d007      	beq.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004460:	6893      	ldr	r3, [r2, #8]
 8004462:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004466:	6921      	ldr	r1, [r4, #16]
 8004468:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800446c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800446e:	f7ff fb37 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCC_ClockConfig+0x1f4>)
 8004474:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <HAL_RCC_ClockConfig+0x1f8>)
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	f7fd fecb 	bl	8002214 <HAL_InitTick>
}
 800447e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004480:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004482:	6893      	ldr	r3, [r2, #8]
 8004484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004488:	6093      	str	r3, [r2, #8]
 800448a:	e7b7      	b.n	80043fc <HAL_RCC_ClockConfig+0x148>
    return HAL_ERROR;
 800448c:	2001      	movs	r0, #1
}
 800448e:	4770      	bx	lr
      return HAL_ERROR;
 8004490:	2001      	movs	r0, #1
 8004492:	e7f4      	b.n	800447e <HAL_RCC_ClockConfig+0x1ca>
          return HAL_ERROR;
 8004494:	2001      	movs	r0, #1
 8004496:	e7f2      	b.n	800447e <HAL_RCC_ClockConfig+0x1ca>
      return HAL_ERROR;
 8004498:	2001      	movs	r0, #1
 800449a:	e7f0      	b.n	800447e <HAL_RCC_ClockConfig+0x1ca>
 800449c:	40022000 	.word	0x40022000
 80044a0:	40021000 	.word	0x40021000
 80044a4:	04c4b400 	.word	0x04c4b400
 80044a8:	20000024 	.word	0x20000024
 80044ac:	2000002c 	.word	0x2000002c

080044b0 <HAL_RCC_GetPCLK1Freq>:
{
 80044b0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b2:	f7ff fb15 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80044be:	4a03      	ldr	r2, [pc, #12]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80044c2:	40d8      	lsrs	r0, r3
 80044c4:	bd08      	pop	{r3, pc}
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
 80044cc:	08008bb0 	.word	0x08008bb0

080044d0 <HAL_RCC_GetPCLK2Freq>:
{
 80044d0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d2:	f7ff fb05 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80044de:	4a03      	ldr	r2, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80044e2:	40d8      	lsrs	r0, r3
 80044e4:	bd08      	pop	{r3, pc}
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	08008bb0 	.word	0x08008bb0

080044f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80044f6:	6803      	ldr	r3, [r0, #0]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d051      	beq.n	80045a0 <RCCEx_PLLSAI2_Config+0xb0>
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d056      	beq.n	80045ae <RCCEx_PLLSAI2_Config+0xbe>
 8004500:	2b01      	cmp	r3, #1
 8004502:	d001      	beq.n	8004508 <RCCEx_PLLSAI2_Config+0x18>
 8004504:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004506:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004508:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f013 0f02 	tst.w	r3, #2
 8004510:	d054      	beq.n	80045bc <RCCEx_PLLSAI2_Config+0xcc>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004512:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800451c:	f7fd fec0 	bl	80022a0 <HAL_GetTick>
 8004520:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800452a:	d009      	beq.n	8004540 <RCCEx_PLLSAI2_Config+0x50>
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800452c:	f7fd feb8 	bl	80022a0 <HAL_GetTick>
 8004530:	1b43      	subs	r3, r0, r5
 8004532:	2b02      	cmp	r3, #2
 8004534:	d9f5      	bls.n	8004522 <RCCEx_PLLSAI2_Config+0x32>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800453e:	d13f      	bne.n	80045c0 <RCCEx_PLLSAI2_Config+0xd0>
      if (Divider == DIVIDER_P_UPDATE)
 8004540:	b986      	cbnz	r6, 8004564 <RCCEx_PLLSAI2_Config+0x74>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004542:	4821      	ldr	r0, [pc, #132]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 8004544:	6943      	ldr	r3, [r0, #20]
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <RCCEx_PLLSAI2_Config+0xdc>)
 8004548:	401a      	ands	r2, r3
 800454a:	68a1      	ldr	r1, [r4, #8]
 800454c:	68e3      	ldr	r3, [r4, #12]
 800454e:	06db      	lsls	r3, r3, #27
 8004550:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004554:	6861      	ldr	r1, [r4, #4]
 8004556:	3901      	subs	r1, #1
 8004558:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800455c:	6821      	ldr	r1, [r4, #0]
 800455e:	430b      	orrs	r3, r1
 8004560:	431a      	orrs	r2, r3
 8004562:	6142      	str	r2, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800456e:	f7fd fe97 	bl	80022a0 <HAL_GetTick>
 8004572:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800457c:	d109      	bne.n	8004592 <RCCEx_PLLSAI2_Config+0xa2>
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800457e:	f7fd fe8f 	bl	80022a0 <HAL_GetTick>
 8004582:	1b43      	subs	r3, r0, r5
 8004584:	2b02      	cmp	r3, #2
 8004586:	d9f5      	bls.n	8004574 <RCCEx_PLLSAI2_Config+0x84>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004590:	d018      	beq.n	80045c4 <RCCEx_PLLSAI2_Config+0xd4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004592:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 8004594:	6953      	ldr	r3, [r2, #20]
 8004596:	6921      	ldr	r1, [r4, #16]
 8004598:	430b      	orrs	r3, r1
 800459a:	6153      	str	r3, [r2, #20]
 800459c:	2000      	movs	r0, #0
 800459e:	e7b2      	b.n	8004506 <RCCEx_PLLSAI2_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045a0:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80045a8:	d1b3      	bne.n	8004512 <RCCEx_PLLSAI2_Config+0x22>
        status = HAL_ERROR;
 80045aa:	2001      	movs	r0, #1
 80045ac:	e7ab      	b.n	8004506 <RCCEx_PLLSAI2_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <RCCEx_PLLSAI2_Config+0xd8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 80045b6:	d1ac      	bne.n	8004512 <RCCEx_PLLSAI2_Config+0x22>
        status = HAL_ERROR;
 80045b8:	2001      	movs	r0, #1
 80045ba:	e7a4      	b.n	8004506 <RCCEx_PLLSAI2_Config+0x16>
        status = HAL_ERROR;
 80045bc:	2001      	movs	r0, #1
 80045be:	e7a2      	b.n	8004506 <RCCEx_PLLSAI2_Config+0x16>
          status = HAL_TIMEOUT;
 80045c0:	2003      	movs	r0, #3
 80045c2:	e7a0      	b.n	8004506 <RCCEx_PLLSAI2_Config+0x16>
            status = HAL_TIMEOUT;
 80045c4:	2003      	movs	r0, #3
 80045c6:	e79e      	b.n	8004506 <RCCEx_PLLSAI2_Config+0x16>
 80045c8:	40021000 	.word	0x40021000
 80045cc:	07ff800c 	.word	0x07ff800c

080045d0 <RCCEx_PLLSAI1_Config>:
{
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4604      	mov	r4, r0
 80045d4:	460e      	mov	r6, r1
  switch (pPllSai1->PLLSAI1Source)
 80045d6:	6803      	ldr	r3, [r0, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d052      	beq.n	8004682 <RCCEx_PLLSAI1_Config+0xb2>
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d057      	beq.n	8004690 <RCCEx_PLLSAI1_Config+0xc0>
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <RCCEx_PLLSAI1_Config+0x18>
 80045e4:	2001      	movs	r0, #1
}
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045e8:	4b45      	ldr	r3, [pc, #276]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f013 0f02 	tst.w	r3, #2
 80045f0:	d07f      	beq.n	80046f2 <RCCEx_PLLSAI1_Config+0x122>
    __HAL_RCC_PLLSAI1_DISABLE();
 80045f2:	4a43      	ldr	r2, [pc, #268]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 80045f4:	6813      	ldr	r3, [r2, #0]
 80045f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045fa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80045fc:	f7fd fe50 	bl	80022a0 <HAL_GetTick>
 8004600:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004602:	4b3f      	ldr	r3, [pc, #252]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800460a:	d009      	beq.n	8004620 <RCCEx_PLLSAI1_Config+0x50>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800460c:	f7fd fe48 	bl	80022a0 <HAL_GetTick>
 8004610:	1b43      	subs	r3, r0, r5
 8004612:	2b02      	cmp	r3, #2
 8004614:	d9f5      	bls.n	8004602 <RCCEx_PLLSAI1_Config+0x32>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004616:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800461e:	d16a      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0x126>
      if (Divider == DIVIDER_P_UPDATE)
 8004620:	2e00      	cmp	r6, #0
 8004622:	d13c      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004624:	4836      	ldr	r0, [pc, #216]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 8004626:	6903      	ldr	r3, [r0, #16]
 8004628:	4a36      	ldr	r2, [pc, #216]	; (8004704 <RCCEx_PLLSAI1_Config+0x134>)
 800462a:	401a      	ands	r2, r3
 800462c:	68a1      	ldr	r1, [r4, #8]
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	06db      	lsls	r3, r3, #27
 8004632:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004636:	6861      	ldr	r1, [r4, #4]
 8004638:	3901      	subs	r1, #1
 800463a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800463e:	6821      	ldr	r1, [r4, #0]
 8004640:	430b      	orrs	r3, r1
 8004642:	431a      	orrs	r2, r3
 8004644:	6102      	str	r2, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004646:	4a2e      	ldr	r2, [pc, #184]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800464e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004650:	f7fd fe26 	bl	80022a0 <HAL_GetTick>
 8004654:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004656:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800465e:	d109      	bne.n	8004674 <RCCEx_PLLSAI1_Config+0xa4>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004660:	f7fd fe1e 	bl	80022a0 <HAL_GetTick>
 8004664:	1b43      	subs	r3, r0, r5
 8004666:	2b02      	cmp	r3, #2
 8004668:	d9f5      	bls.n	8004656 <RCCEx_PLLSAI1_Config+0x86>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800466a:	4b25      	ldr	r3, [pc, #148]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004672:	d042      	beq.n	80046fa <RCCEx_PLLSAI1_Config+0x12a>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004674:	4a22      	ldr	r2, [pc, #136]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 8004676:	6913      	ldr	r3, [r2, #16]
 8004678:	69a1      	ldr	r1, [r4, #24]
 800467a:	430b      	orrs	r3, r1
 800467c:	6113      	str	r3, [r2, #16]
 800467e:	2000      	movs	r0, #0
 8004680:	e7b1      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004682:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800468a:	d1b2      	bne.n	80045f2 <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 800468c:	2001      	movs	r0, #1
 800468e:	e7aa      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8004698:	d1ab      	bne.n	80045f2 <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 800469a:	2001      	movs	r0, #1
 800469c:	e7a3      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x16>
      else if (Divider == DIVIDER_Q_UPDATE)
 800469e:	2e01      	cmp	r6, #1
 80046a0:	d013      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0xfa>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046a2:	4817      	ldr	r0, [pc, #92]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 80046a4:	6903      	ldr	r3, [r0, #16]
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <RCCEx_PLLSAI1_Config+0x138>)
 80046a8:	401a      	ands	r2, r3
 80046aa:	68a1      	ldr	r1, [r4, #8]
 80046ac:	6963      	ldr	r3, [r4, #20]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	3b01      	subs	r3, #1
 80046b2:	065b      	lsls	r3, r3, #25
 80046b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046b8:	6861      	ldr	r1, [r4, #4]
 80046ba:	3901      	subs	r1, #1
 80046bc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80046c0:	6821      	ldr	r1, [r4, #0]
 80046c2:	430b      	orrs	r3, r1
 80046c4:	431a      	orrs	r2, r3
 80046c6:	6102      	str	r2, [r0, #16]
 80046c8:	e7bd      	b.n	8004646 <RCCEx_PLLSAI1_Config+0x76>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ca:	480d      	ldr	r0, [pc, #52]	; (8004700 <RCCEx_PLLSAI1_Config+0x130>)
 80046cc:	6903      	ldr	r3, [r0, #16]
 80046ce:	4a0f      	ldr	r2, [pc, #60]	; (800470c <RCCEx_PLLSAI1_Config+0x13c>)
 80046d0:	401a      	ands	r2, r3
 80046d2:	68a1      	ldr	r1, [r4, #8]
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	3b01      	subs	r3, #1
 80046da:	055b      	lsls	r3, r3, #21
 80046dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046e0:	6861      	ldr	r1, [r4, #4]
 80046e2:	3901      	subs	r1, #1
 80046e4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80046e8:	6821      	ldr	r1, [r4, #0]
 80046ea:	430b      	orrs	r3, r1
 80046ec:	431a      	orrs	r2, r3
 80046ee:	6102      	str	r2, [r0, #16]
 80046f0:	e7a9      	b.n	8004646 <RCCEx_PLLSAI1_Config+0x76>
        status = HAL_ERROR;
 80046f2:	2001      	movs	r0, #1
 80046f4:	e777      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x16>
          status = HAL_TIMEOUT;
 80046f6:	2003      	movs	r0, #3
 80046f8:	e775      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x16>
            status = HAL_TIMEOUT;
 80046fa:	2003      	movs	r0, #3
 80046fc:	e773      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x16>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	07ff800c 	.word	0x07ff800c
 8004708:	f9ff800c 	.word	0xf9ff800c
 800470c:	ff9f800c 	.word	0xff9f800c

08004710 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004718:	6803      	ldr	r3, [r0, #0]
 800471a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800471e:	d034      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004720:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d01f      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004726:	d80b      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004728:	b323      	cbz	r3, 8004774 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800472a:	2b20      	cmp	r3, #32
 800472c:	d105      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800472e:	2100      	movs	r1, #0
 8004730:	3020      	adds	r0, #32
 8004732:	f7ff fedd 	bl	80044f0 <RCCEx_PLLSAI2_Config>
 8004736:	4606      	mov	r6, r0
        break;
 8004738:	e021      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->Sai1ClockSelection)
 800473a:	2701      	movs	r7, #1
 800473c:	463e      	mov	r6, r7
 800473e:	e026      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004740:	2b60      	cmp	r3, #96	; 0x60
 8004742:	d020      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004744:	2b80      	cmp	r3, #128	; 0x80
 8004746:	d10b      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004748:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800474a:	4a69      	ldr	r2, [pc, #420]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800474c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004750:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004754:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004756:	430b      	orrs	r3, r1
 8004758:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800475c:	2700      	movs	r7, #0
 800475e:	e016      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004760:	2701      	movs	r7, #1
 8004762:	463e      	mov	r6, r7
 8004764:	e013      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004766:	4a62      	ldr	r2, [pc, #392]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004768:	68d3      	ldr	r3, [r2, #12]
 800476a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476e:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004770:	2600      	movs	r6, #0
 8004772:	e7ea      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004774:	2100      	movs	r1, #0
 8004776:	3004      	adds	r0, #4
 8004778:	f7ff ff2a 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 800477c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800477e:	2e00      	cmp	r6, #0
 8004780:	d0e3      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004782:	4637      	mov	r7, r6
 8004784:	e003      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004786:	2600      	movs	r6, #0
 8004788:	e7df      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800478a:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800478c:	463e      	mov	r6, r7
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004794:	d033      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch (PeriphClkInit->Sai2ClockSelection)
 8004796:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800479c:	d022      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800479e:	d80d      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xac>
 80047a0:	b333      	cbz	r3, 80047f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80047a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a6:	d106      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047a8:	2100      	movs	r1, #0
 80047aa:	f104 0020 	add.w	r0, r4, #32
 80047ae:	f7ff fe9f 	bl	80044f0 <RCCEx_PLLSAI2_Config>
 80047b2:	4606      	mov	r6, r0
        break;
 80047b4:	e008      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai2ClockSelection)
 80047b6:	2701      	movs	r7, #1
 80047b8:	463e      	mov	r6, r7
 80047ba:	e020      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xee>
 80047bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c0:	d002      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c6:	d10a      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xce>
    if (ret == HAL_OK)
 80047c8:	b9c6      	cbnz	r6, 80047fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047ca:	4a49      	ldr	r2, [pc, #292]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047cc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80047d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047d4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80047d6:	430b      	orrs	r3, r1
 80047d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80047dc:	e00f      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch (PeriphClkInit->Sai2ClockSelection)
 80047de:	2701      	movs	r7, #1
 80047e0:	463e      	mov	r6, r7
 80047e2:	e00c      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047e4:	4a42      	ldr	r2, [pc, #264]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047e6:	68d3      	ldr	r3, [r2, #12]
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	60d3      	str	r3, [r2, #12]
        break;
 80047ee:	e7eb      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047f0:	2100      	movs	r1, #0
 80047f2:	1d20      	adds	r0, r4, #4
 80047f4:	f7ff feec 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 80047f8:	4606      	mov	r6, r0
        break;
 80047fa:	e7e5      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80047fc:	4637      	mov	r7, r6
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004804:	d07d      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004806:	4b3a      	ldr	r3, [pc, #232]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800480e:	d14f      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004810:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004812:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004818:	659a      	str	r2, [r3, #88]	; 0x58
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004824:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004828:	4a32      	ldr	r2, [pc, #200]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004830:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004832:	f7fd fd35 	bl	80022a0 <HAL_GetTick>
 8004836:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004838:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004840:	d109      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x146>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004842:	f7fd fd2d 	bl	80022a0 <HAL_GetTick>
 8004846:	1b40      	subs	r0, r0, r5
 8004848:	2802      	cmp	r0, #2
 800484a:	d9f5      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x128>
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800484c:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004854:	d048      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    if (ret == HAL_OK)
 8004856:	2e00      	cmp	r6, #0
 8004858:	d14e      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800485a:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004860:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004864:	d016      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004866:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800486a:	429a      	cmp	r2, r3
 800486c:	d012      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x184>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800486e:	4a20      	ldr	r2, [pc, #128]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004870:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004878:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800487c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004880:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004884:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004888:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800488c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004894:	f013 0f01 	tst.w	r3, #1
 8004898:	d10d      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800489c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80048a8:	430b      	orrs	r3, r1
 80048aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ae:	e024      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    FlagStatus       pwrclkchanged = RESET;
 80048b0:	f04f 0800 	mov.w	r8, #0
 80048b4:	e7b8      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x118>
        tickstart = HAL_GetTick();
 80048b6:	f7fd fcf3 	bl	80022a0 <HAL_GetTick>
 80048ba:	4605      	mov	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	f013 0f02 	tst.w	r3, #2
 80048c6:	d1e8      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fd fcea 	bl	80022a0 <HAL_GetTick>
 80048cc:	1b40      	subs	r0, r0, r5
 80048ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80048d2:	4298      	cmp	r0, r3
 80048d4:	d9f2      	bls.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f013 0f02 	tst.w	r3, #2
 80048e0:	d1db      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x18a>
              ret = HAL_TIMEOUT;
 80048e2:	2703      	movs	r7, #3
 80048e4:	463e      	mov	r6, r7
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
          ret = HAL_TIMEOUT;
 80048e8:	2703      	movs	r7, #3
 80048ea:	463e      	mov	r6, r7
 80048ec:	e005      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40007000 	.word	0x40007000
 80048f8:	4637      	mov	r7, r6
    if (pwrclkchanged == SET)
 80048fa:	f1b8 0f00 	cmp.w	r8, #0
 80048fe:	f040 8151 	bne.w	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	f013 0f01 	tst.w	r3, #1
 8004908:	d008      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800490a:	4ab8      	ldr	r2, [pc, #736]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800490c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004910:	f023 0303 	bic.w	r3, r3, #3
 8004914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004916:	430b      	orrs	r3, r1
 8004918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	f013 0f02 	tst.w	r3, #2
 8004922:	d008      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004924:	4ab1      	ldr	r2, [pc, #708]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004926:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800492a:	f023 030c 	bic.w	r3, r3, #12
 800492e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004930:	430b      	orrs	r3, r1
 8004932:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f013 0f04 	tst.w	r3, #4
 800493c:	d008      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x240>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800493e:	4aab      	ldr	r2, [pc, #684]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004940:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004944:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004948:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800494a:	430b      	orrs	r3, r1
 800494c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	f013 0f08 	tst.w	r3, #8
 8004956:	d008      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004958:	4aa4      	ldr	r2, [pc, #656]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800495a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800495e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004962:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004964:	430b      	orrs	r3, r1
 8004966:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	f013 0f10 	tst.w	r3, #16
 8004970:	d008      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x274>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004972:	4a9e      	ldr	r2, [pc, #632]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004974:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800497e:	430b      	orrs	r3, r1
 8004980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f013 0f20 	tst.w	r3, #32
 800498a:	d008      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800498c:	4a97      	ldr	r2, [pc, #604]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800498e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004992:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004996:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004998:	430b      	orrs	r3, r1
 800499a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80049a4:	d008      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049a6:	4a91      	ldr	r2, [pc, #580]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049ac:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80049b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80049b2:	430b      	orrs	r3, r1
 80049b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049c0:	4a8a      	ldr	r2, [pc, #552]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049c6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049ca:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80049cc:	430b      	orrs	r3, r1
 80049ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80049d8:	d008      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80049da:	4a84      	ldr	r2, [pc, #528]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80049e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80049e6:	430b      	orrs	r3, r1
 80049e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049f2:	d00c      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    switch (PeriphClkInit->FdcanClockSelection)
 80049f4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80049f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049fa:	f000 80d9 	beq.w	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80049fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a02:	f000 80e5 	beq.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80d7 	beq.w	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004a0c:	2701      	movs	r7, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a14:	d008      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a16:	4a75      	ldr	r2, [pc, #468]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a20:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a22:	430b      	orrs	r3, r1
 8004a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a2e:	d008      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x332>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a30:	4a6e      	ldr	r2, [pc, #440]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004a3a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a48:	d008      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a4a:	4a68      	ldr	r2, [pc, #416]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a50:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a54:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004a56:	430b      	orrs	r3, r1
 8004a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004a62:	d008      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x366>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a64:	4a61      	ldr	r2, [pc, #388]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a66:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a6a:	f023 0303 	bic.w	r3, r3, #3
 8004a6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a70:	430b      	orrs	r3, r1
 8004a72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004a7c:	d011      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x392>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a7e:	4a5b      	ldr	r2, [pc, #364]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a84:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004a88:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a90:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a96:	f000 80a3 	beq.w	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a9e:	f000 80a7 	beq.w	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004aa8:	d01f      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aaa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab0:	f000 80a7 	beq.w	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004ab4:	4a4d      	ldr	r2, [pc, #308]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004ab6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8004aba:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004ac4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004acc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ad0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004ad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad6:	f000 809c 	beq.w	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x502>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ade:	f000 80a1 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae6:	f000 80a3 	beq.w	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x520>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004af0:	d011      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004af2:	4a3e      	ldr	r2, [pc, #248]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004af4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004af8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004afc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004afe:	430b      	orrs	r3, r1
 8004b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b04:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0a:	f000 8097 	beq.w	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b12:	f000 8098 	beq.w	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x536>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004b1c:	d00f      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b1e:	4a33      	ldr	r2, [pc, #204]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004b20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b24:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004b28:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b32:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3a:	f000 808d 	beq.w	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x548>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004b44:	d009      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b46:	4a29      	ldr	r2, [pc, #164]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004b48:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004b54:	430b      	orrs	r3, r1
 8004b56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004b60:	d009      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x466>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b62:	4a22      	ldr	r2, [pc, #136]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004b64:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b68:	f023 0318 	bic.w	r3, r3, #24
 8004b6c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004b70:	430b      	orrs	r3, r1
 8004b72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004b7c:	d00e      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004b80:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004b88:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004b92:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b9a:	d066      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
}
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	b002      	add	sp, #8
 8004ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004ba6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6593      	str	r3, [r2, #88]	; 0x58
 8004bae:	e6a8      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb0:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004bb2:	68d3      	ldr	r3, [r2, #12]
 8004bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb8:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8004bba:	b97e      	cbnz	r6, 8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bbc:	4a0b      	ldr	r2, [pc, #44]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004bbe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bc2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004bc6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004bce:	e71e      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	1d20      	adds	r0, r4, #4
 8004bd4:	f7ff fcfc 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 8004bd8:	4606      	mov	r6, r0
        break;
 8004bda:	e7ee      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004bdc:	4637      	mov	r7, r6
 8004bde:	e716      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be0:	68d3      	ldr	r3, [r2, #12]
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
 8004be8:	e75b      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	1d20      	adds	r0, r4, #4
 8004bf4:	f7ff fcec 	bl	80045d0 <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	f43f af52 	beq.w	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x392>
          status = ret;
 8004bfe:	4607      	mov	r7, r0
 8004c00:	e74f      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x392>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c02:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004c04:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c10:	e75e      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c12:	2101      	movs	r1, #1
 8004c14:	1d20      	adds	r0, r4, #4
 8004c16:	f7ff fcdb 	bl	80045d0 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	f43f af65 	beq.w	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3da>
        status = ret;
 8004c20:	4607      	mov	r7, r0
 8004c22:	e762      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c24:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004c26:	68d3      	ldr	r3, [r2, #12]
 8004c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2c:	60d3      	str	r3, [r2, #12]
 8004c2e:	e75c      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c30:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004c32:	68d3      	ldr	r3, [r2, #12]
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c38:	60d3      	str	r3, [r2, #12]
 8004c3a:	e756      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3c:	68d3      	ldr	r3, [r2, #12]
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
 8004c44:	e767      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c46:	2101      	movs	r1, #1
 8004c48:	1d20      	adds	r0, r4, #4
 8004c4a:	f7ff fcc1 	bl	80045d0 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	f43f af61 	beq.w	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
        status = ret;
 8004c54:	4607      	mov	r7, r0
 8004c56:	e75e      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c58:	2102      	movs	r1, #2
 8004c5a:	1d20      	adds	r0, r4, #4
 8004c5c:	f7ff fcb8 	bl	80045d0 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8004c60:	2800      	cmp	r0, #0
 8004c62:	f43f af6c 	beq.w	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        status = ret;
 8004c66:	4607      	mov	r7, r0
 8004c68:	e769      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c6a:	68d3      	ldr	r3, [r2, #12]
 8004c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c70:	60d3      	str	r3, [r2, #12]
 8004c72:	e793      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004c74:	40021000 	.word	0x40021000

08004c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4688      	mov	r8, r1
 8004c82:	4617      	mov	r7, r2
 8004c84:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c86:	f7fd fb0b 	bl	80022a0 <HAL_GetTick>
 8004c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8c:	1a1b      	subs	r3, r3, r0
 8004c8e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8004c92:	f7fd fb05 	bl	80022a0 <HAL_GetTick>
 8004c96:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c98:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004ca0:	fb09 f303 	mul.w	r3, r9, r3
 8004ca4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca6:	682b      	ldr	r3, [r5, #0]
 8004ca8:	689c      	ldr	r4, [r3, #8]
 8004caa:	ea38 0404 	bics.w	r4, r8, r4
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	42bb      	cmp	r3, r7
 8004cb6:	d040      	beq.n	8004d3a <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cb8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004cbc:	d0f3      	beq.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cbe:	f7fd faef 	bl	80022a0 <HAL_GetTick>
 8004cc2:	eba0 000a 	sub.w	r0, r0, sl
 8004cc6:	4548      	cmp	r0, r9
 8004cc8:	d20a      	bcs.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x68>
 8004cca:	f1b9 0f00 	cmp.w	r9, #0
 8004cce:	d007      	beq.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cd0:	9a01      	ldr	r2, [sp, #4]
 8004cd2:	b102      	cbz	r2, 8004cd6 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8004cd4:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	4691      	mov	r9, r2
 8004cde:	e7e2      	b.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ce0:	682a      	ldr	r2, [r5, #0]
 8004ce2:	6853      	ldr	r3, [r2, #4]
 8004ce4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004ce8:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cea:	686b      	ldr	r3, [r5, #4]
 8004cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf0:	d00b      	beq.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cf2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf8:	d014      	beq.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004d00:	2300      	movs	r3, #0
 8004d02:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004d06:	2003      	movs	r0, #3
 8004d08:	e018      	b.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0a:	68ab      	ldr	r3, [r5, #8]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d10:	d002      	beq.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d16:	d1ec      	bne.n	8004cf2 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004d18:	682a      	ldr	r2, [r5, #0]
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e7e6      	b.n	8004cf2 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004d24:	682a      	ldr	r2, [r5, #0]
 8004d26:	6813      	ldr	r3, [r2, #0]
 8004d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	682a      	ldr	r2, [r5, #0]
 8004d30:	6813      	ldr	r3, [r2, #0]
 8004d32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e7df      	b.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8004d3a:	2000      	movs	r0, #0
}
 8004d3c:	b002      	add	sp, #8
 8004d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d42:	bf00      	nop
 8004d44:	20000024 	.word	0x20000024

08004d48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	4615      	mov	r5, r2
 8004d54:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d5c:	f7fd faa0 	bl	80022a0 <HAL_GetTick>
 8004d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d62:	1a1b      	subs	r3, r3, r0
 8004d64:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8004d68:	f7fd fa9a 	bl	80022a0 <HAL_GetTick>
 8004d6c:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d6e:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d72:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004d7e:	0d1b      	lsrs	r3, r3, #20
 8004d80:	fb08 f303 	mul.w	r3, r8, r3
 8004d84:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d86:	e002      	b.n	8004d8e <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d88:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004d8c:	d112      	bne.n	8004db4 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8004d8e:	6833      	ldr	r3, [r6, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	ea03 0c04 	and.w	ip, r3, r4
 8004d96:	45ac      	cmp	ip, r5
 8004d98:	d04a      	beq.n	8004e30 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d9a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8004d9e:	d1f3      	bne.n	8004d88 <SPI_WaitFifoStateUntilTimeout+0x40>
 8004da0:	2d00      	cmp	r5, #0
 8004da2:	d1f1      	bne.n	8004d88 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8004da4:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004dae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004db2:	e7e9      	b.n	8004d88 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004db4:	f7fd fa74 	bl	80022a0 <HAL_GetTick>
 8004db8:	eba0 0009 	sub.w	r0, r0, r9
 8004dbc:	4540      	cmp	r0, r8
 8004dbe:	d20a      	bcs.n	8004dd6 <SPI_WaitFifoStateUntilTimeout+0x8e>
 8004dc0:	f1b8 0f00 	cmp.w	r8, #0
 8004dc4:	d007      	beq.n	8004dd6 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dc6:	9a01      	ldr	r2, [sp, #4]
 8004dc8:	b102      	cbz	r2, 8004dcc <SPI_WaitFifoStateUntilTimeout+0x84>
 8004dca:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8004dcc:	9b01      	ldr	r3, [sp, #4]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	4690      	mov	r8, r2
 8004dd4:	e7db      	b.n	8004d8e <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dd6:	6832      	ldr	r2, [r6, #0]
 8004dd8:	6853      	ldr	r3, [r2, #4]
 8004dda:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004dde:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de0:	6873      	ldr	r3, [r6, #4]
 8004de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de6:	d00b      	beq.n	8004e00 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	d014      	beq.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8004df0:	2301      	movs	r3, #1
 8004df2:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004df6:	2300      	movs	r3, #0
 8004df8:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004dfc:	2003      	movs	r0, #3
 8004dfe:	e018      	b.n	8004e32 <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e00:	68b3      	ldr	r3, [r6, #8]
 8004e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e06:	d002      	beq.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0c:	d1ec      	bne.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8004e0e:	6832      	ldr	r2, [r6, #0]
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e7e6      	b.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8004e1a:	6832      	ldr	r2, [r6, #0]
 8004e1c:	6813      	ldr	r3, [r2, #0]
 8004e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	6832      	ldr	r2, [r6, #0]
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e7df      	b.n	8004df0 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8004e30:	2000      	movs	r0, #0
}
 8004e32:	b002      	add	sp, #8
 8004e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e38:	20000024 	.word	0x20000024

08004e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	4604      	mov	r4, r0
 8004e42:	460d      	mov	r5, r1
 8004e44:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e46:	9200      	str	r2, [sp, #0]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e50:	f7ff ff7a 	bl	8004d48 <SPI_WaitFifoStateUntilTimeout>
 8004e54:	b9b0      	cbnz	r0, 8004e84 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e56:	9600      	str	r6, [sp, #0]
 8004e58:	462b      	mov	r3, r5
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2180      	movs	r1, #128	; 0x80
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f7ff ff0a 	bl	8004c78 <SPI_WaitFlagStateUntilTimeout>
 8004e64:	b9a8      	cbnz	r0, 8004e92 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e66:	9600      	str	r6, [sp, #0]
 8004e68:	462b      	mov	r3, r5
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7ff ff69 	bl	8004d48 <SPI_WaitFifoStateUntilTimeout>
 8004e76:	b150      	cbz	r0, 8004e8e <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e7a:	f043 0320 	orr.w	r3, r3, #32
 8004e7e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e80:	2003      	movs	r0, #3
 8004e82:	e004      	b.n	8004e8e <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e86:	f043 0320 	orr.w	r3, r3, #32
 8004e8a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e8c:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e94:	f043 0320 	orr.w	r3, r3, #32
 8004e98:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e9a:	2003      	movs	r0, #3
 8004e9c:	e7f7      	b.n	8004e8e <SPI_EndRxTxTransaction+0x52>

08004e9e <HAL_SPI_Init>:
  if (hspi == NULL)
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d06a      	beq.n	8004f78 <HAL_SPI_Init+0xda>
{
 8004ea2:	b510      	push	{r4, lr}
 8004ea4:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ea6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ea8:	b933      	cbnz	r3, 8004eb8 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eaa:	6843      	ldr	r3, [r0, #4]
 8004eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb0:	d005      	beq.n	8004ebe <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61c3      	str	r3, [r0, #28]
 8004eb6:	e002      	b.n	8004ebe <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ebc:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ec2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d04d      	beq.n	8004f66 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ee0:	d947      	bls.n	8004f72 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ee2:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ee4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ee8:	d004      	beq.n	8004ef4 <HAL_SPI_Init+0x56>
 8004eea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eee:	d001      	beq.n	8004ef4 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004efa:	68a1      	ldr	r1, [r4, #8]
 8004efc:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6921      	ldr	r1, [r4, #16]
 8004f04:	f001 0102 	and.w	r1, r1, #2
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6961      	ldr	r1, [r4, #20]
 8004f0c:	f001 0101 	and.w	r1, r1, #1
 8004f10:	430b      	orrs	r3, r1
 8004f12:	69a1      	ldr	r1, [r4, #24]
 8004f14:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	69e1      	ldr	r1, [r4, #28]
 8004f1c:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004f20:	430b      	orrs	r3, r1
 8004f22:	6a21      	ldr	r1, [r4, #32]
 8004f24:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004f2c:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	430b      	orrs	r3, r1
 8004f34:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f36:	8b63      	ldrh	r3, [r4, #26]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f3e:	f001 0110 	and.w	r1, r1, #16
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f46:	f001 0108 	and.w	r1, r1, #8
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	68e1      	ldr	r1, [r4, #12]
 8004f4e:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6821      	ldr	r1, [r4, #0]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004f64:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004f66:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f7fc ff78 	bl	8001e60 <HAL_SPI_MspInit>
 8004f70:	e7ab      	b.n	8004eca <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f76:	e7b5      	b.n	8004ee4 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8004f78:	2001      	movs	r0, #1
}
 8004f7a:	4770      	bx	lr

08004f7c <HAL_SPI_Transmit>:
{
 8004f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f80:	b083      	sub	sp, #12
 8004f82:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004f84:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	f000 80f6 	beq.w	800517a <HAL_SPI_Transmit+0x1fe>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4688      	mov	r8, r1
 8004f92:	4691      	mov	r9, r2
 8004f94:	2301      	movs	r3, #1
 8004f96:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f9a:	f7fd f981 	bl	80022a0 <HAL_GetTick>
 8004f9e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa0:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8004fa4:	b2f6      	uxtb	r6, r6
 8004fa6:	2e01      	cmp	r6, #1
 8004fa8:	f040 80d4 	bne.w	8005154 <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8004fac:	f1b8 0f00 	cmp.w	r8, #0
 8004fb0:	f000 80d1 	beq.w	8005156 <HAL_SPI_Transmit+0x1da>
 8004fb4:	f1b9 0f00 	cmp.w	r9, #0
 8004fb8:	f000 80cd 	beq.w	8005156 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fc6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fca:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004fce:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fd2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004fd4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004fd8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004fdc:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004fde:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d01e      	beq.n	8005026 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ff0:	d103      	bne.n	8004ffa <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005000:	d942      	bls.n	8005088 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	b113      	cbz	r3, 800500c <HAL_SPI_Transmit+0x90>
 8005006:	f1b9 0f01 	cmp.w	r9, #1
 800500a:	d123      	bne.n	8005054 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	8812      	ldrh	r2, [r2, #0]
 8005012:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005016:	3302      	adds	r3, #2
 8005018:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800501a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29b      	uxth	r3, r3
 8005022:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005024:	e016      	b.n	8005054 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	6813      	ldr	r3, [r2, #0]
 800502a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005030:	6822      	ldr	r2, [r4, #0]
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e7d5      	b.n	8004fe8 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800503c:	f7fd f930 	bl	80022a0 <HAL_GetTick>
 8005040:	1bc0      	subs	r0, r0, r7
 8005042:	42a8      	cmp	r0, r5
 8005044:	d303      	bcc.n	800504e <HAL_SPI_Transmit+0xd2>
 8005046:	f1b5 3fff 	cmp.w	r5, #4294967295
 800504a:	f040 808e 	bne.w	800516a <HAL_SPI_Transmit+0x1ee>
 800504e:	2d00      	cmp	r5, #0
 8005050:	f000 808d 	beq.w	800516e <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 8005054:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d066      	beq.n	800512a <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	f012 0f02 	tst.w	r2, #2
 8005064:	d0ea      	beq.n	800503c <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005066:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005068:	8812      	ldrh	r2, [r2, #0]
 800506a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800506c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800506e:	3302      	adds	r3, #2
 8005070:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005072:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8005076:	fa1f fc8c 	uxth.w	ip, ip
 800507a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800507e:	fa1f fc8c 	uxth.w	ip, ip
 8005082:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8005086:	e7e5      	b.n	8005054 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	b113      	cbz	r3, 8005092 <HAL_SPI_Transmit+0x116>
 800508c:	f1b9 0f01 	cmp.w	r9, #1
 8005090:	d133      	bne.n	80050fa <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8005092:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	d90c      	bls.n	80050b4 <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800509a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	8812      	ldrh	r2, [r2, #0]
 80050a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050a4:	3302      	adds	r3, #2
 80050a6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b02      	subs	r3, #2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050b2:	e022      	b.n	80050fa <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80050bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050be:	3301      	adds	r3, #1
 80050c0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80050c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050cc:	e015      	b.n	80050fa <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80050d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d6:	3301      	adds	r3, #1
 80050d8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80050da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050e4:	e009      	b.n	80050fa <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e6:	f7fd f8db 	bl	80022a0 <HAL_GetTick>
 80050ea:	1bc0      	subs	r0, r0, r7
 80050ec:	42a8      	cmp	r0, r5
 80050ee:	d302      	bcc.n	80050f6 <HAL_SPI_Transmit+0x17a>
 80050f0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80050f4:	d13d      	bne.n	8005172 <HAL_SPI_Transmit+0x1f6>
 80050f6:	2d00      	cmp	r5, #0
 80050f8:	d03d      	beq.n	8005176 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 80050fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	b1a3      	cbz	r3, 800512a <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005100:	6822      	ldr	r2, [r4, #0]
 8005102:	6893      	ldr	r3, [r2, #8]
 8005104:	f013 0f02 	tst.w	r3, #2
 8005108:	d0ed      	beq.n	80050e6 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 800510a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d9dd      	bls.n	80050ce <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800511a:	3302      	adds	r3, #2
 800511c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800511e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b02      	subs	r3, #2
 8005124:	b29b      	uxth	r3, r3
 8005126:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005128:	e7e7      	b.n	80050fa <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800512a:	463a      	mov	r2, r7
 800512c:	4629      	mov	r1, r5
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff fe84 	bl	8004e3c <SPI_EndRxTxTransaction>
 8005134:	b108      	cbz	r0, 800513a <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005136:	2320      	movs	r3, #32
 8005138:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	b933      	cbnz	r3, 800514c <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	9201      	str	r2, [sp, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800514c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800514e:	b913      	cbnz	r3, 8005156 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005150:	2600      	movs	r6, #0
 8005152:	e000      	b.n	8005156 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 8005154:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005156:	2301      	movs	r3, #1
 8005158:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800515c:	2300      	movs	r3, #0
 800515e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005162:	4630      	mov	r0, r6
 8005164:	b003      	add	sp, #12
 8005166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800516a:	2603      	movs	r6, #3
 800516c:	e7f3      	b.n	8005156 <HAL_SPI_Transmit+0x1da>
 800516e:	2603      	movs	r6, #3
 8005170:	e7f1      	b.n	8005156 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8005172:	2603      	movs	r6, #3
 8005174:	e7ef      	b.n	8005156 <HAL_SPI_Transmit+0x1da>
 8005176:	2603      	movs	r6, #3
 8005178:	e7ed      	b.n	8005156 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 800517a:	2602      	movs	r6, #2
 800517c:	e7f1      	b.n	8005162 <HAL_SPI_Transmit+0x1e6>

0800517e <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005180:	4770      	bx	lr

08005182 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005186:	4770      	bx	lr

08005188 <HAL_TIM_IRQHandler>:
{
 8005188:	b510      	push	{r4, lr}
 800518a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800518c:	6803      	ldr	r3, [r0, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	f012 0f02 	tst.w	r2, #2
 8005194:	d011      	beq.n	80051ba <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	f012 0f02 	tst.w	r2, #2
 800519c:	d00d      	beq.n	80051ba <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800519e:	f06f 0202 	mvn.w	r2, #2
 80051a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a8:	6803      	ldr	r3, [r0, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f013 0f03 	tst.w	r3, #3
 80051b0:	d079      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	f7ff ffe6 	bl	8005182 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	2300      	movs	r3, #0
 80051b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	f012 0f04 	tst.w	r2, #4
 80051c2:	d012      	beq.n	80051ea <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	f012 0f04 	tst.w	r2, #4
 80051ca:	d00e      	beq.n	80051ea <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051cc:	f06f 0204 	mvn.w	r2, #4
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d2:	2302      	movs	r3, #2
 80051d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f413 7f40 	tst.w	r3, #768	; 0x300
 80051de:	d068      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7ff ffce 	bl	8005182 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	2300      	movs	r3, #0
 80051e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	f012 0f08 	tst.w	r2, #8
 80051f2:	d012      	beq.n	800521a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	f012 0f08 	tst.w	r2, #8
 80051fa:	d00e      	beq.n	800521a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051fc:	f06f 0208 	mvn.w	r2, #8
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005202:	2304      	movs	r3, #4
 8005204:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f013 0f03 	tst.w	r3, #3
 800520e:	d057      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005210:	4620      	mov	r0, r4
 8005212:	f7ff ffb6 	bl	8005182 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	2300      	movs	r3, #0
 8005218:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	f012 0f10 	tst.w	r2, #16
 8005222:	d012      	beq.n	800524a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	f012 0f10 	tst.w	r2, #16
 800522a:	d00e      	beq.n	800524a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800522c:	f06f 0210 	mvn.w	r2, #16
 8005230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005232:	2308      	movs	r3, #8
 8005234:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800523e:	d046      	beq.n	80052ce <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005240:	4620      	mov	r0, r4
 8005242:	f7ff ff9e 	bl	8005182 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	2300      	movs	r3, #0
 8005248:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	f012 0f01 	tst.w	r2, #1
 8005252:	d003      	beq.n	800525c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	f012 0f01 	tst.w	r2, #1
 800525a:	d13f      	bne.n	80052dc <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	f012 0f80 	tst.w	r2, #128	; 0x80
 800526c:	d13d      	bne.n	80052ea <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005276:	d003      	beq.n	8005280 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800527e:	d13b      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005290:	d139      	bne.n	8005306 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	f012 0f20 	tst.w	r2, #32
 800529a:	d003      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	f012 0f20 	tst.w	r2, #32
 80052a2:	d137      	bne.n	8005314 <HAL_TIM_IRQHandler+0x18c>
}
 80052a4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	f7ff ff6b 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052aa:	4620      	mov	r0, r4
 80052ac:	f7ff ff6a 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
 80052b0:	e781      	b.n	80051b6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	4620      	mov	r0, r4
 80052b4:	f7ff ff64 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff ff63 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
 80052be:	e792      	b.n	80051e6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff ff5d 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c6:	4620      	mov	r0, r4
 80052c8:	f7ff ff5c 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
 80052cc:	e7a3      	b.n	8005216 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff ff56 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	4620      	mov	r0, r4
 80052d6:	f7ff ff55 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
 80052da:	e7b4      	b.n	8005246 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052dc:	f06f 0201 	mvn.w	r2, #1
 80052e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e2:	4620      	mov	r0, r4
 80052e4:	f7ff ff4b 	bl	800517e <HAL_TIM_PeriodElapsedCallback>
 80052e8:	e7b8      	b.n	800525c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 f9aa 	bl	800564a <HAL_TIMEx_BreakCallback>
 80052f6:	e7ba      	b.n	800526e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80052fe:	4620      	mov	r0, r4
 8005300:	f000 f9a4 	bl	800564c <HAL_TIMEx_Break2Callback>
 8005304:	e7bc      	b.n	8005280 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005306:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800530a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800530c:	4620      	mov	r0, r4
 800530e:	f7ff ff3a 	bl	8005186 <HAL_TIM_TriggerCallback>
 8005312:	e7be      	b.n	8005292 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005314:	f06f 0220 	mvn.w	r2, #32
 8005318:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800531a:	4620      	mov	r0, r4
 800531c:	f000 f994 	bl	8005648 <HAL_TIMEx_CommutCallback>
}
 8005320:	e7c0      	b.n	80052a4 <HAL_TIM_IRQHandler+0x11c>
	...

08005324 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005324:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005326:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <TIM_Base_SetConfig+0xc4>)
 8005328:	4290      	cmp	r0, r2
 800532a:	d012      	beq.n	8005352 <TIM_Base_SetConfig+0x2e>
 800532c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005330:	d00f      	beq.n	8005352 <TIM_Base_SetConfig+0x2e>
 8005332:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005336:	4290      	cmp	r0, r2
 8005338:	d00b      	beq.n	8005352 <TIM_Base_SetConfig+0x2e>
 800533a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800533e:	4290      	cmp	r0, r2
 8005340:	d007      	beq.n	8005352 <TIM_Base_SetConfig+0x2e>
 8005342:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005346:	4290      	cmp	r0, r2
 8005348:	d003      	beq.n	8005352 <TIM_Base_SetConfig+0x2e>
 800534a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800534e:	4290      	cmp	r0, r2
 8005350:	d103      	bne.n	800535a <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005356:	684a      	ldr	r2, [r1, #4]
 8005358:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535a:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <TIM_Base_SetConfig+0xc4>)
 800535c:	4290      	cmp	r0, r2
 800535e:	d01e      	beq.n	800539e <TIM_Base_SetConfig+0x7a>
 8005360:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005364:	d01b      	beq.n	800539e <TIM_Base_SetConfig+0x7a>
 8005366:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800536a:	4290      	cmp	r0, r2
 800536c:	d017      	beq.n	800539e <TIM_Base_SetConfig+0x7a>
 800536e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005372:	4290      	cmp	r0, r2
 8005374:	d013      	beq.n	800539e <TIM_Base_SetConfig+0x7a>
 8005376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800537a:	4290      	cmp	r0, r2
 800537c:	d00f      	beq.n	800539e <TIM_Base_SetConfig+0x7a>
 800537e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005382:	4290      	cmp	r0, r2
 8005384:	d00b      	beq.n	800539e <TIM_Base_SetConfig+0x7a>
 8005386:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800538a:	4290      	cmp	r0, r2
 800538c:	d007      	beq.n	800539e <TIM_Base_SetConfig+0x7a>
 800538e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005392:	4290      	cmp	r0, r2
 8005394:	d003      	beq.n	800539e <TIM_Base_SetConfig+0x7a>
 8005396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800539a:	4290      	cmp	r0, r2
 800539c:	d103      	bne.n	80053a6 <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800539e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a2:	68ca      	ldr	r2, [r1, #12]
 80053a4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053aa:	694a      	ldr	r2, [r1, #20]
 80053ac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80053ae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b0:	688b      	ldr	r3, [r1, #8]
 80053b2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	680b      	ldr	r3, [r1, #0]
 80053b6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <TIM_Base_SetConfig+0xc4>)
 80053ba:	4298      	cmp	r0, r3
 80053bc:	d00f      	beq.n	80053de <TIM_Base_SetConfig+0xba>
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	4298      	cmp	r0, r3
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0xba>
 80053c6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80053ca:	4298      	cmp	r0, r3
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0xba>
 80053ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d2:	4298      	cmp	r0, r3
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0xba>
 80053d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053da:	4298      	cmp	r0, r3
 80053dc:	d101      	bne.n	80053e2 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053de:	690b      	ldr	r3, [r1, #16]
 80053e0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e2:	2301      	movs	r3, #1
 80053e4:	6143      	str	r3, [r0, #20]
}
 80053e6:	4770      	bx	lr
 80053e8:	40012c00 	.word	0x40012c00

080053ec <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d053      	beq.n	8005498 <HAL_TIM_Encoder_Init+0xac>
{
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	460d      	mov	r5, r1
 80053f4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d047      	beq.n	800548e <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 80053fe:	2302      	movs	r3, #2
 8005400:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	6893      	ldr	r3, [r2, #8]
 8005408:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800540c:	f023 0307 	bic.w	r3, r3, #7
 8005410:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005412:	4621      	mov	r1, r4
 8005414:	f851 0b04 	ldr.w	r0, [r1], #4
 8005418:	f7ff ff84 	bl	8005324 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800541c:	6821      	ldr	r1, [r4, #0]
 800541e:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005420:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8005422:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8005424:	6828      	ldr	r0, [r5, #0]
 8005426:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005428:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800542c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005430:	68ab      	ldr	r3, [r5, #8]
 8005432:	69af      	ldr	r7, [r5, #24]
 8005434:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005438:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800543a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800543e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005442:	68ea      	ldr	r2, [r5, #12]
 8005444:	69ef      	ldr	r7, [r5, #28]
 8005446:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800544a:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800544c:	6a2b      	ldr	r3, [r5, #32]
 800544e:	031b      	lsls	r3, r3, #12
 8005450:	692f      	ldr	r7, [r5, #16]
 8005452:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8005456:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005458:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800545c:	686a      	ldr	r2, [r5, #4]
 800545e:	696d      	ldr	r5, [r5, #20]
 8005460:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8005464:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8005466:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8005468:	6821      	ldr	r1, [r4, #0]
 800546a:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005470:	2301      	movs	r3, #1
 8005472:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800547a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005486:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800548a:	2000      	movs	r0, #0
}
 800548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800548e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005492:	f7fc fd17 	bl	8001ec4 <HAL_TIM_Encoder_MspInit>
 8005496:	e7b2      	b.n	80053fe <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8005498:	2001      	movs	r0, #1
}
 800549a:	4770      	bx	lr

0800549c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800549c:	f001 011f 	and.w	r1, r1, #31
 80054a0:	f04f 0c01 	mov.w	ip, #1
 80054a4:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054a8:	6a03      	ldr	r3, [r0, #32]
 80054aa:	ea23 030c 	bic.w	r3, r3, ip
 80054ae:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b0:	6a03      	ldr	r3, [r0, #32]
 80054b2:	408a      	lsls	r2, r1
 80054b4:	4313      	orrs	r3, r2
 80054b6:	6203      	str	r3, [r0, #32]
}
 80054b8:	4770      	bx	lr

080054ba <HAL_TIM_Encoder_Start_IT>:
{
 80054ba:	b538      	push	{r3, r4, r5, lr}
 80054bc:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054be:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80054c2:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054c4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054c8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80054cc:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054ce:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
  if (Channel == TIM_CHANNEL_1)
 80054d2:	460d      	mov	r5, r1
 80054d4:	bb09      	cbnz	r1, 800551a <HAL_TIM_Encoder_Start_IT+0x60>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d6:	2801      	cmp	r0, #1
 80054d8:	d15e      	bne.n	8005598 <HAL_TIM_Encoder_Start_IT+0xde>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054da:	2a01      	cmp	r2, #1
 80054dc:	d15d      	bne.n	800559a <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054de:	2302      	movs	r3, #2
 80054e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  switch (Channel)
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	d039      	beq.n	8005560 <HAL_TIM_Encoder_Start_IT+0xa6>
 80054ec:	2d04      	cmp	r5, #4
 80054ee:	d048      	beq.n	8005582 <HAL_TIM_Encoder_Start_IT+0xc8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054f0:	2201      	movs	r2, #1
 80054f2:	2100      	movs	r1, #0
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	f7ff ffd1 	bl	800549c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054fa:	2201      	movs	r2, #1
 80054fc:	2104      	movs	r1, #4
 80054fe:	6820      	ldr	r0, [r4, #0]
 8005500:	f7ff ffcc 	bl	800549c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	68d3      	ldr	r3, [r2, #12]
 8005508:	f043 0302 	orr.w	r3, r3, #2
 800550c:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	68d3      	ldr	r3, [r2, #12]
 8005512:	f043 0304 	orr.w	r3, r3, #4
 8005516:	60d3      	str	r3, [r2, #12]
      break;
 8005518:	e02c      	b.n	8005574 <HAL_TIM_Encoder_Start_IT+0xba>
 800551a:	b2db      	uxtb	r3, r3
 800551c:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 8005520:	2904      	cmp	r1, #4
 8005522:	d012      	beq.n	800554a <HAL_TIM_Encoder_Start_IT+0x90>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005524:	2801      	cmp	r0, #1
 8005526:	d13d      	bne.n	80055a4 <HAL_TIM_Encoder_Start_IT+0xea>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005528:	2b01      	cmp	r3, #1
 800552a:	d136      	bne.n	800559a <HAL_TIM_Encoder_Start_IT+0xe0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800552c:	2a01      	cmp	r2, #1
 800552e:	d13b      	bne.n	80055a8 <HAL_TIM_Encoder_Start_IT+0xee>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005530:	f1bc 0f01 	cmp.w	ip, #1
 8005534:	d13a      	bne.n	80055ac <HAL_TIM_Encoder_Start_IT+0xf2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005536:	2302      	movs	r3, #2
 8005538:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800553c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005540:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005548:	e7ce      	b.n	80054e8 <HAL_TIM_Encoder_Start_IT+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800554a:	2b01      	cmp	r3, #1
 800554c:	d126      	bne.n	800559c <HAL_TIM_Encoder_Start_IT+0xe2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800554e:	f1bc 0f01 	cmp.w	ip, #1
 8005552:	d125      	bne.n	80055a0 <HAL_TIM_Encoder_Start_IT+0xe6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005554:	2302      	movs	r3, #2
 8005556:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800555e:	e7c3      	b.n	80054e8 <HAL_TIM_Encoder_Start_IT+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005560:	2201      	movs	r2, #1
 8005562:	2100      	movs	r1, #0
 8005564:	6820      	ldr	r0, [r4, #0]
 8005566:	f7ff ff99 	bl	800549c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	68d3      	ldr	r3, [r2, #12]
 800556e:	f043 0302 	orr.w	r3, r3, #2
 8005572:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	6813      	ldr	r3, [r2, #0]
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800557e:	2000      	movs	r0, #0
 8005580:	e00b      	b.n	800559a <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005582:	2201      	movs	r2, #1
 8005584:	2104      	movs	r1, #4
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	f7ff ff88 	bl	800549c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	68d3      	ldr	r3, [r2, #12]
 8005590:	f043 0304 	orr.w	r3, r3, #4
 8005594:	60d3      	str	r3, [r2, #12]
      break;
 8005596:	e7ed      	b.n	8005574 <HAL_TIM_Encoder_Start_IT+0xba>
      return HAL_ERROR;
 8005598:	2001      	movs	r0, #1
}
 800559a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800559c:	2001      	movs	r0, #1
 800559e:	e7fc      	b.n	800559a <HAL_TIM_Encoder_Start_IT+0xe0>
 80055a0:	4618      	mov	r0, r3
 80055a2:	e7fa      	b.n	800559a <HAL_TIM_Encoder_Start_IT+0xe0>
      return HAL_ERROR;
 80055a4:	2001      	movs	r0, #1
 80055a6:	e7f8      	b.n	800559a <HAL_TIM_Encoder_Start_IT+0xe0>
 80055a8:	4618      	mov	r0, r3
 80055aa:	e7f6      	b.n	800559a <HAL_TIM_Encoder_Start_IT+0xe0>
 80055ac:	4610      	mov	r0, r2
 80055ae:	e7f4      	b.n	800559a <HAL_TIM_Encoder_Start_IT+0xe0>

080055b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80055b4:	2a01      	cmp	r2, #1
 80055b6:	d042      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 80055b8:	b430      	push	{r4, r5}
 80055ba:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80055bc:	2201      	movs	r2, #1
 80055be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c2:	2202      	movs	r2, #2
 80055c4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c8:	6800      	ldr	r0, [r0, #0]
 80055ca:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055ce:	4d1d      	ldr	r5, [pc, #116]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80055d0:	42a8      	cmp	r0, r5
 80055d2:	d003      	beq.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80055d4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80055d8:	42a8      	cmp	r0, r5
 80055da:	d103      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055e0:	684d      	ldr	r5, [r1, #4]
 80055e2:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e8:	680d      	ldr	r5, [r1, #0]
 80055ea:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ec:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	4814      	ldr	r0, [pc, #80]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80055f2:	4282      	cmp	r2, r0
 80055f4:	d016      	beq.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80055f6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80055fa:	d013      	beq.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80055fc:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8005600:	4282      	cmp	r2, r0
 8005602:	d00f      	beq.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005604:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005608:	4282      	cmp	r2, r0
 800560a:	d00b      	beq.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800560c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005610:	4282      	cmp	r2, r0
 8005612:	d007      	beq.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005614:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 8005618:	4282      	cmp	r2, r0
 800561a:	d003      	beq.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800561c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8005620:	4282      	cmp	r2, r0
 8005622:	d104      	bne.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005624:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005628:	6889      	ldr	r1, [r1, #8]
 800562a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800562c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005634:	2000      	movs	r0, #0
 8005636:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800563a:	bc30      	pop	{r4, r5}
 800563c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800563e:	2002      	movs	r0, #2
}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00

08005648 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005648:	4770      	bx	lr

0800564a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800564c:	4770      	bx	lr

0800564e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800564e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	e852 3f00 	ldrex	r3, [r2]
 8005654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	e842 3100 	strex	r1, r3, [r2]
 800565c:	2900      	cmp	r1, #0
 800565e:	d1f6      	bne.n	800564e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005660:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	f102 0308 	add.w	r3, r2, #8
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	3208      	adds	r2, #8
 8005674:	e842 3100 	strex	r1, r3, [r2]
 8005678:	2900      	cmp	r1, #0
 800567a:	d1f1      	bne.n	8005660 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d006      	beq.n	8005690 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005682:	2320      	movs	r3, #32
 8005684:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005688:	2300      	movs	r3, #0
 800568a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800568c:	6743      	str	r3, [r0, #116]	; 0x74
}
 800568e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	e852 3f00 	ldrex	r3, [r2]
 8005696:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	e842 3100 	strex	r1, r3, [r2]
 800569e:	2900      	cmp	r1, #0
 80056a0:	d1f6      	bne.n	8005690 <UART_EndRxTransfer+0x42>
 80056a2:	e7ee      	b.n	8005682 <UART_EndRxTransfer+0x34>

080056a4 <UART_SetConfig>:
{
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80056a8:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056aa:	6883      	ldr	r3, [r0, #8]
 80056ac:	6902      	ldr	r2, [r0, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	6942      	ldr	r2, [r0, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	69c2      	ldr	r2, [r0, #28]
 80056b6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056b8:	6808      	ldr	r0, [r1, #0]
 80056ba:	4a97      	ldr	r2, [pc, #604]	; (8005918 <UART_SetConfig+0x274>)
 80056bc:	4002      	ands	r2, r0
 80056be:	431a      	orrs	r2, r3
 80056c0:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	6853      	ldr	r3, [r2, #4]
 80056c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056ca:	68e1      	ldr	r1, [r4, #12]
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056d0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	4b91      	ldr	r3, [pc, #580]	; (800591c <UART_SetConfig+0x278>)
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d001      	beq.n	80056de <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80056da:	6a23      	ldr	r3, [r4, #32]
 80056dc:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056de:	6893      	ldr	r3, [r2, #8]
 80056e0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80056e4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056ec:	6822      	ldr	r2, [r4, #0]
 80056ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80056f0:	f023 030f 	bic.w	r3, r3, #15
 80056f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80056f6:	430b      	orrs	r3, r1
 80056f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	4a88      	ldr	r2, [pc, #544]	; (8005920 <UART_SetConfig+0x27c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d010      	beq.n	8005724 <UART_SetConfig+0x80>
 8005702:	4a88      	ldr	r2, [pc, #544]	; (8005924 <UART_SetConfig+0x280>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d021      	beq.n	800574c <UART_SetConfig+0xa8>
 8005708:	4a87      	ldr	r2, [pc, #540]	; (8005928 <UART_SetConfig+0x284>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d037      	beq.n	800577e <UART_SetConfig+0xda>
 800570e:	4a87      	ldr	r2, [pc, #540]	; (800592c <UART_SetConfig+0x288>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d05c      	beq.n	80057ce <UART_SetConfig+0x12a>
 8005714:	4a86      	ldr	r2, [pc, #536]	; (8005930 <UART_SetConfig+0x28c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d06b      	beq.n	80057f2 <UART_SetConfig+0x14e>
 800571a:	4a80      	ldr	r2, [pc, #512]	; (800591c <UART_SetConfig+0x278>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d07d      	beq.n	800581c <UART_SetConfig+0x178>
 8005720:	2210      	movs	r2, #16
 8005722:	e03a      	b.n	800579a <UART_SetConfig+0xf6>
 8005724:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005728:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800572c:	f002 0203 	and.w	r2, r2, #3
 8005730:	2a03      	cmp	r2, #3
 8005732:	d809      	bhi.n	8005748 <UART_SetConfig+0xa4>
 8005734:	e8df f002 	tbb	[pc, r2]
 8005738:	06870402 	.word	0x06870402
 800573c:	2201      	movs	r2, #1
 800573e:	e02c      	b.n	800579a <UART_SetConfig+0xf6>
 8005740:	2204      	movs	r2, #4
 8005742:	e02a      	b.n	800579a <UART_SetConfig+0xf6>
 8005744:	2208      	movs	r2, #8
 8005746:	e028      	b.n	800579a <UART_SetConfig+0xf6>
 8005748:	2210      	movs	r2, #16
 800574a:	e026      	b.n	800579a <UART_SetConfig+0xf6>
 800574c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005750:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005754:	f002 020c 	and.w	r2, r2, #12
 8005758:	2a0c      	cmp	r2, #12
 800575a:	d80e      	bhi.n	800577a <UART_SetConfig+0xd6>
 800575c:	e8df f002 	tbb	[pc, r2]
 8005760:	0d0d0d07 	.word	0x0d0d0d07
 8005764:	0d0d0d09 	.word	0x0d0d0d09
 8005768:	0d0d0d75 	.word	0x0d0d0d75
 800576c:	0b          	.byte	0x0b
 800576d:	00          	.byte	0x00
 800576e:	2200      	movs	r2, #0
 8005770:	e013      	b.n	800579a <UART_SetConfig+0xf6>
 8005772:	2204      	movs	r2, #4
 8005774:	e011      	b.n	800579a <UART_SetConfig+0xf6>
 8005776:	2208      	movs	r2, #8
 8005778:	e00f      	b.n	800579a <UART_SetConfig+0xf6>
 800577a:	2210      	movs	r2, #16
 800577c:	e00d      	b.n	800579a <UART_SetConfig+0xf6>
 800577e:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005782:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005786:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800578a:	2a20      	cmp	r2, #32
 800578c:	d05f      	beq.n	800584e <UART_SetConfig+0x1aa>
 800578e:	d81a      	bhi.n	80057c6 <UART_SetConfig+0x122>
 8005790:	2a00      	cmp	r2, #0
 8005792:	d05e      	beq.n	8005852 <UART_SetConfig+0x1ae>
 8005794:	2a10      	cmp	r2, #16
 8005796:	d15e      	bne.n	8005856 <UART_SetConfig+0x1b2>
 8005798:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 800579a:	4960      	ldr	r1, [pc, #384]	; (800591c <UART_SetConfig+0x278>)
 800579c:	428b      	cmp	r3, r1
 800579e:	d076      	beq.n	800588e <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a0:	69e0      	ldr	r0, [r4, #28]
 80057a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80057a6:	f000 80cb 	beq.w	8005940 <UART_SetConfig+0x29c>
    switch (clocksource)
 80057aa:	2a08      	cmp	r2, #8
 80057ac:	f200 8136 	bhi.w	8005a1c <UART_SetConfig+0x378>
 80057b0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80057b4:	011b00f9 	.word	0x011b00f9
 80057b8:	013400f7 	.word	0x013400f7
 80057bc:	0134011e 	.word	0x0134011e
 80057c0:	01340134 	.word	0x01340134
 80057c4:	0121      	.short	0x0121
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c6:	2a30      	cmp	r2, #48	; 0x30
 80057c8:	d147      	bne.n	800585a <UART_SetConfig+0x1b6>
 80057ca:	2208      	movs	r2, #8
 80057cc:	e7e5      	b.n	800579a <UART_SetConfig+0xf6>
 80057ce:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80057d2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80057d6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80057da:	2a80      	cmp	r2, #128	; 0x80
 80057dc:	d03f      	beq.n	800585e <UART_SetConfig+0x1ba>
 80057de:	d804      	bhi.n	80057ea <UART_SetConfig+0x146>
 80057e0:	b3fa      	cbz	r2, 8005862 <UART_SetConfig+0x1be>
 80057e2:	2a40      	cmp	r2, #64	; 0x40
 80057e4:	d13f      	bne.n	8005866 <UART_SetConfig+0x1c2>
 80057e6:	2204      	movs	r2, #4
 80057e8:	e7d7      	b.n	800579a <UART_SetConfig+0xf6>
 80057ea:	2ac0      	cmp	r2, #192	; 0xc0
 80057ec:	d13d      	bne.n	800586a <UART_SetConfig+0x1c6>
 80057ee:	2208      	movs	r2, #8
 80057f0:	e7d3      	b.n	800579a <UART_SetConfig+0xf6>
 80057f2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80057f6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80057fa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80057fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005802:	d034      	beq.n	800586e <UART_SetConfig+0x1ca>
 8005804:	d805      	bhi.n	8005812 <UART_SetConfig+0x16e>
 8005806:	b3a2      	cbz	r2, 8005872 <UART_SetConfig+0x1ce>
 8005808:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800580c:	d133      	bne.n	8005876 <UART_SetConfig+0x1d2>
 800580e:	2204      	movs	r2, #4
 8005810:	e7c3      	b.n	800579a <UART_SetConfig+0xf6>
 8005812:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005816:	d130      	bne.n	800587a <UART_SetConfig+0x1d6>
 8005818:	2208      	movs	r2, #8
 800581a:	e7be      	b.n	800579a <UART_SetConfig+0xf6>
 800581c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005820:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005824:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005828:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800582c:	d027      	beq.n	800587e <UART_SetConfig+0x1da>
 800582e:	d805      	bhi.n	800583c <UART_SetConfig+0x198>
 8005830:	b33a      	cbz	r2, 8005882 <UART_SetConfig+0x1de>
 8005832:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005836:	d126      	bne.n	8005886 <UART_SetConfig+0x1e2>
 8005838:	2204      	movs	r2, #4
 800583a:	e7ae      	b.n	800579a <UART_SetConfig+0xf6>
 800583c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005840:	d123      	bne.n	800588a <UART_SetConfig+0x1e6>
 8005842:	2208      	movs	r2, #8
 8005844:	e7a9      	b.n	800579a <UART_SetConfig+0xf6>
 8005846:	2202      	movs	r2, #2
 8005848:	e7a7      	b.n	800579a <UART_SetConfig+0xf6>
 800584a:	2202      	movs	r2, #2
 800584c:	e7a5      	b.n	800579a <UART_SetConfig+0xf6>
 800584e:	2202      	movs	r2, #2
 8005850:	e7a3      	b.n	800579a <UART_SetConfig+0xf6>
 8005852:	2200      	movs	r2, #0
 8005854:	e7a1      	b.n	800579a <UART_SetConfig+0xf6>
 8005856:	2210      	movs	r2, #16
 8005858:	e79f      	b.n	800579a <UART_SetConfig+0xf6>
 800585a:	2210      	movs	r2, #16
 800585c:	e79d      	b.n	800579a <UART_SetConfig+0xf6>
 800585e:	2202      	movs	r2, #2
 8005860:	e79b      	b.n	800579a <UART_SetConfig+0xf6>
 8005862:	2200      	movs	r2, #0
 8005864:	e799      	b.n	800579a <UART_SetConfig+0xf6>
 8005866:	2210      	movs	r2, #16
 8005868:	e797      	b.n	800579a <UART_SetConfig+0xf6>
 800586a:	2210      	movs	r2, #16
 800586c:	e795      	b.n	800579a <UART_SetConfig+0xf6>
 800586e:	2202      	movs	r2, #2
 8005870:	e793      	b.n	800579a <UART_SetConfig+0xf6>
 8005872:	2200      	movs	r2, #0
 8005874:	e791      	b.n	800579a <UART_SetConfig+0xf6>
 8005876:	2210      	movs	r2, #16
 8005878:	e78f      	b.n	800579a <UART_SetConfig+0xf6>
 800587a:	2210      	movs	r2, #16
 800587c:	e78d      	b.n	800579a <UART_SetConfig+0xf6>
 800587e:	2202      	movs	r2, #2
 8005880:	e78b      	b.n	800579a <UART_SetConfig+0xf6>
 8005882:	2200      	movs	r2, #0
 8005884:	e789      	b.n	800579a <UART_SetConfig+0xf6>
 8005886:	2210      	movs	r2, #16
 8005888:	e787      	b.n	800579a <UART_SetConfig+0xf6>
 800588a:	2210      	movs	r2, #16
 800588c:	e785      	b.n	800579a <UART_SetConfig+0xf6>
    switch (clocksource)
 800588e:	2a08      	cmp	r2, #8
 8005890:	f200 80b4 	bhi.w	80059fc <UART_SetConfig+0x358>
 8005894:	e8df f002 	tbb	[pc, r2]
 8005898:	b23e3808 	.word	0xb23e3808
 800589c:	b2b2b23b 	.word	0xb2b2b23b
 80058a0:	05          	.byte	0x05
 80058a1:	00          	.byte	0x00
 80058a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80058a6:	e004      	b.n	80058b2 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a8:	f7fe fe02 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f000 80a7 	beq.w	8005a00 <UART_SetConfig+0x35c>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058b4:	4b1f      	ldr	r3, [pc, #124]	; (8005934 <UART_SetConfig+0x290>)
 80058b6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80058ba:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058be:	6865      	ldr	r5, [r4, #4]
 80058c0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80058c4:	4299      	cmp	r1, r3
 80058c6:	f200 809d 	bhi.w	8005a04 <UART_SetConfig+0x360>
 80058ca:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80058ce:	f200 809b 	bhi.w	8005a08 <UART_SetConfig+0x364>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d2:	2600      	movs	r6, #0
 80058d4:	4633      	mov	r3, r6
 80058d6:	4631      	mov	r1, r6
 80058d8:	f7fb f99a 	bl	8000c10 <__aeabi_uldivmod>
 80058dc:	0209      	lsls	r1, r1, #8
 80058de:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80058e2:	0200      	lsls	r0, r0, #8
 80058e4:	086b      	lsrs	r3, r5, #1
 80058e6:	18c0      	adds	r0, r0, r3
 80058e8:	462a      	mov	r2, r5
 80058ea:	4633      	mov	r3, r6
 80058ec:	f141 0100 	adc.w	r1, r1, #0
 80058f0:	f7fb f98e 	bl	8000c10 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058f4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <UART_SetConfig+0x294>)
 80058fa:	429a      	cmp	r2, r3
 80058fc:	f200 8086 	bhi.w	8005a0c <UART_SetConfig+0x368>
          huart->Instance->BRR = usartdiv;
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	60d8      	str	r0, [r3, #12]
 8005904:	4630      	mov	r0, r6
 8005906:	e067      	b.n	80059d8 <UART_SetConfig+0x334>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005908:	f7fe fde2 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
        break;
 800590c:	e7ce      	b.n	80058ac <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetSysClockFreq();
 800590e:	f7fe f87d 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
        break;
 8005912:	e7cb      	b.n	80058ac <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8005914:	4809      	ldr	r0, [pc, #36]	; (800593c <UART_SetConfig+0x298>)
 8005916:	e7cc      	b.n	80058b2 <UART_SetConfig+0x20e>
 8005918:	cfff69f3 	.word	0xcfff69f3
 800591c:	40008000 	.word	0x40008000
 8005920:	40013800 	.word	0x40013800
 8005924:	40004400 	.word	0x40004400
 8005928:	40004800 	.word	0x40004800
 800592c:	40004c00 	.word	0x40004c00
 8005930:	40005000 	.word	0x40005000
 8005934:	08008bf8 	.word	0x08008bf8
 8005938:	000ffcff 	.word	0x000ffcff
 800593c:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8005940:	2a08      	cmp	r2, #8
 8005942:	d865      	bhi.n	8005a10 <UART_SetConfig+0x36c>
 8005944:	e8df f002 	tbb	[pc, r2]
 8005948:	64052707 	.word	0x64052707
 800594c:	6464642a 	.word	0x6464642a
 8005950:	0b          	.byte	0x0b
 8005951:	00          	.byte	0x00
 8005952:	4835      	ldr	r0, [pc, #212]	; (8005a28 <UART_SetConfig+0x384>)
 8005954:	e003      	b.n	800595e <UART_SetConfig+0x2ba>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005956:	f7fe fdab 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800595a:	2800      	cmp	r0, #0
 800595c:	d05a      	beq.n	8005a14 <UART_SetConfig+0x370>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005960:	4b32      	ldr	r3, [pc, #200]	; (8005a2c <UART_SetConfig+0x388>)
 8005962:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005966:	fbb0 f0f3 	udiv	r0, r0, r3
 800596a:	6862      	ldr	r2, [r4, #4]
 800596c:	0853      	lsrs	r3, r2, #1
 800596e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005972:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005976:	f1a3 0110 	sub.w	r1, r3, #16
 800597a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800597e:	4291      	cmp	r1, r2
 8005980:	d84a      	bhi.n	8005a18 <UART_SetConfig+0x374>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005982:	b29a      	uxth	r2, r3
 8005984:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005988:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800598c:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	60d3      	str	r3, [r2, #12]
 8005992:	2000      	movs	r0, #0
 8005994:	e020      	b.n	80059d8 <UART_SetConfig+0x334>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005996:	f7fe fd9b 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
        break;
 800599a:	e7de      	b.n	800595a <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetSysClockFreq();
 800599c:	f7fe f836 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
        break;
 80059a0:	e7db      	b.n	800595a <UART_SetConfig+0x2b6>
    switch (clocksource)
 80059a2:	4821      	ldr	r0, [pc, #132]	; (8005a28 <UART_SetConfig+0x384>)
 80059a4:	e003      	b.n	80059ae <UART_SetConfig+0x30a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a6:	f7fe fd83 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d038      	beq.n	8005a20 <UART_SetConfig+0x37c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059b0:	4b1e      	ldr	r3, [pc, #120]	; (8005a2c <UART_SetConfig+0x388>)
 80059b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80059b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80059ba:	6863      	ldr	r3, [r4, #4]
 80059bc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80059c0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c4:	f1a0 0210 	sub.w	r2, r0, #16
 80059c8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d829      	bhi.n	8005a24 <UART_SetConfig+0x380>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	b280      	uxth	r0, r0
 80059d4:	60d8      	str	r0, [r3, #12]
 80059d6:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80059d8:	2301      	movs	r3, #1
 80059da:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059de:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80059e6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ea:	f7fe fd71 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
        break;
 80059ee:	e7dc      	b.n	80059aa <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetSysClockFreq();
 80059f0:	f7fe f80c 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
        break;
 80059f4:	e7d9      	b.n	80059aa <UART_SetConfig+0x306>
        pclk = (uint32_t) LSE_VALUE;
 80059f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80059fa:	e7d8      	b.n	80059ae <UART_SetConfig+0x30a>
    switch (clocksource)
 80059fc:	2001      	movs	r0, #1
 80059fe:	e7eb      	b.n	80059d8 <UART_SetConfig+0x334>
 8005a00:	2000      	movs	r0, #0
 8005a02:	e7e9      	b.n	80059d8 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 8005a04:	2001      	movs	r0, #1
 8005a06:	e7e7      	b.n	80059d8 <UART_SetConfig+0x334>
 8005a08:	2001      	movs	r0, #1
 8005a0a:	e7e5      	b.n	80059d8 <UART_SetConfig+0x334>
          ret = HAL_ERROR;
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	e7e3      	b.n	80059d8 <UART_SetConfig+0x334>
    switch (clocksource)
 8005a10:	2001      	movs	r0, #1
 8005a12:	e7e1      	b.n	80059d8 <UART_SetConfig+0x334>
 8005a14:	2000      	movs	r0, #0
 8005a16:	e7df      	b.n	80059d8 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 8005a18:	2001      	movs	r0, #1
 8005a1a:	e7dd      	b.n	80059d8 <UART_SetConfig+0x334>
    switch (clocksource)
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	e7db      	b.n	80059d8 <UART_SetConfig+0x334>
 8005a20:	2000      	movs	r0, #0
 8005a22:	e7d9      	b.n	80059d8 <UART_SetConfig+0x334>
        ret = HAL_ERROR;
 8005a24:	2001      	movs	r0, #1
 8005a26:	e7d7      	b.n	80059d8 <UART_SetConfig+0x334>
 8005a28:	00f42400 	.word	0x00f42400
 8005a2c:	08008bf8 	.word	0x08008bf8

08005a30 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a32:	f013 0f01 	tst.w	r3, #1
 8005a36:	d006      	beq.n	8005a46 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a38:	6802      	ldr	r2, [r0, #0]
 8005a3a:	6853      	ldr	r3, [r2, #4]
 8005a3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a40:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005a42:	430b      	orrs	r3, r1
 8005a44:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a48:	f013 0f02 	tst.w	r3, #2
 8005a4c:	d006      	beq.n	8005a5c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a4e:	6802      	ldr	r2, [r0, #0]
 8005a50:	6853      	ldr	r3, [r2, #4]
 8005a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a56:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a5e:	f013 0f04 	tst.w	r3, #4
 8005a62:	d006      	beq.n	8005a72 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a64:	6802      	ldr	r2, [r0, #0]
 8005a66:	6853      	ldr	r3, [r2, #4]
 8005a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a74:	f013 0f08 	tst.w	r3, #8
 8005a78:	d006      	beq.n	8005a88 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a7a:	6802      	ldr	r2, [r0, #0]
 8005a7c:	6853      	ldr	r3, [r2, #4]
 8005a7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a82:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a8a:	f013 0f10 	tst.w	r3, #16
 8005a8e:	d006      	beq.n	8005a9e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a90:	6802      	ldr	r2, [r0, #0]
 8005a92:	6893      	ldr	r3, [r2, #8]
 8005a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a98:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005aa0:	f013 0f20 	tst.w	r3, #32
 8005aa4:	d006      	beq.n	8005ab4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aa6:	6802      	ldr	r2, [r0, #0]
 8005aa8:	6893      	ldr	r3, [r2, #8]
 8005aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ab4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ab6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005aba:	d00a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005abc:	6802      	ldr	r2, [r0, #0]
 8005abe:	6853      	ldr	r3, [r2, #4]
 8005ac0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ac4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ad0:	d00b      	beq.n	8005aea <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ad2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ad4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ad8:	d006      	beq.n	8005ae8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ada:	6802      	ldr	r2, [r0, #0]
 8005adc:	6853      	ldr	r3, [r2, #4]
 8005ade:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ae2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6053      	str	r3, [r2, #4]
}
 8005ae8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aea:	6802      	ldr	r2, [r0, #0]
 8005aec:	6853      	ldr	r3, [r2, #4]
 8005aee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005af2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6053      	str	r3, [r2, #4]
 8005af8:	e7eb      	b.n	8005ad2 <UART_AdvFeatureConfig+0xa2>

08005afa <UART_WaitOnFlagUntilTimeout>:
{
 8005afa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005afe:	4605      	mov	r5, r0
 8005b00:	460f      	mov	r7, r1
 8005b02:	4616      	mov	r6, r2
 8005b04:	4699      	mov	r9, r3
 8005b06:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0a:	682b      	ldr	r3, [r5, #0]
 8005b0c:	69dc      	ldr	r4, [r3, #28]
 8005b0e:	ea37 0404 	bics.w	r4, r7, r4
 8005b12:	bf0c      	ite	eq
 8005b14:	2401      	moveq	r4, #1
 8005b16:	2400      	movne	r4, #0
 8005b18:	42b4      	cmp	r4, r6
 8005b1a:	d132      	bne.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x88>
    if (Timeout != HAL_MAX_DELAY)
 8005b1c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005b20:	d0f3      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fc fbbd 	bl	80022a0 <HAL_GetTick>
 8005b26:	eba0 0009 	sub.w	r0, r0, r9
 8005b2a:	4540      	cmp	r0, r8
 8005b2c:	d82c      	bhi.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x8e>
 8005b2e:	f1b8 0f00 	cmp.w	r8, #0
 8005b32:	d02b      	beq.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	f012 0f04 	tst.w	r2, #4
 8005b3c:	d0e5      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	f012 0f08 	tst.w	r2, #8
 8005b44:	d111      	bne.n	8005b6a <UART_WaitOnFlagUntilTimeout+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005b4c:	d0dd      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b52:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8005b54:	4628      	mov	r0, r5
 8005b56:	f7ff fd7a 	bl	800564e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b5a:	2320      	movs	r3, #32
 8005b5c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8005b60:	2300      	movs	r3, #0
 8005b62:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 8005b66:	2003      	movs	r0, #3
 8005b68:	e00c      	b.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x8a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b6a:	2408      	movs	r4, #8
 8005b6c:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f7ff fd6d 	bl	800564e <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b74:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
           __HAL_UNLOCK(huart);
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
           return HAL_ERROR;
 8005b7e:	2001      	movs	r0, #1
 8005b80:	e000      	b.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x8a>
  return HAL_OK;
 8005b82:	2000      	movs	r0, #0
}
 8005b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8005b88:	2003      	movs	r0, #3
 8005b8a:	e7fb      	b.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b8c:	2003      	movs	r0, #3
 8005b8e:	e7f9      	b.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x8a>

08005b90 <UART_CheckIdleState>:
{
 8005b90:	b530      	push	{r4, r5, lr}
 8005b92:	b083      	sub	sp, #12
 8005b94:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8005b9c:	f7fc fb80 	bl	80022a0 <HAL_GetTick>
 8005ba0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	f012 0f08 	tst.w	r2, #8
 8005baa:	d110      	bne.n	8005bce <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f013 0f04 	tst.w	r3, #4
 8005bb4:	d128      	bne.n	8005c08 <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc4:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8005bc6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005bca:	b003      	add	sp, #12
 8005bcc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7ff ff8c 	bl	8005afa <UART_WaitOnFlagUntilTimeout>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d0e2      	beq.n	8005bac <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005be6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	e852 3f00 	ldrex	r3, [r2]
 8005bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	e842 3100 	strex	r1, r3, [r2]
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d1f6      	bne.n	8005be6 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      __HAL_UNLOCK(huart);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8005c04:	2003      	movs	r0, #3
 8005c06:	e7e0      	b.n	8005bca <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	462b      	mov	r3, r5
 8005c10:	2200      	movs	r2, #0
 8005c12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c16:	4620      	mov	r0, r4
 8005c18:	f7ff ff6f 	bl	8005afa <UART_WaitOnFlagUntilTimeout>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d0ca      	beq.n	8005bb6 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c20:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	e852 3f00 	ldrex	r3, [r2]
 8005c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	e842 3100 	strex	r1, r3, [r2]
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	d1f6      	bne.n	8005c20 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	f102 0308 	add.w	r3, r2, #8
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	3208      	adds	r2, #8
 8005c42:	e842 3100 	strex	r1, r3, [r2]
 8005c46:	2900      	cmp	r1, #0
 8005c48:	d1f3      	bne.n	8005c32 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	2320      	movs	r3, #32
 8005c4c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8005c50:	2300      	movs	r3, #0
 8005c52:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8005c56:	2003      	movs	r0, #3
 8005c58:	e7b7      	b.n	8005bca <UART_CheckIdleState+0x3a>

08005c5a <HAL_UART_Init>:
  if (huart == NULL)
 8005c5a:	b378      	cbz	r0, 8005cbc <HAL_UART_Init+0x62>
{
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005c60:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005c64:	b30b      	cbz	r3, 8005caa <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005c66:	2324      	movs	r3, #36	; 0x24
 8005c68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c76:	4620      	mov	r0, r4
 8005c78:	f7ff fd14 	bl	80056a4 <UART_SetConfig>
 8005c7c:	2801      	cmp	r0, #1
 8005c7e:	d013      	beq.n	8005ca8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c82:	b9bb      	cbnz	r3, 8005cb4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	6853      	ldr	r3, [r2, #4]
 8005c88:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005c8c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	6893      	ldr	r3, [r2, #8]
 8005c92:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005c96:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	6813      	ldr	r3, [r2, #0]
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f7ff ff74 	bl	8005b90 <UART_CheckIdleState>
}
 8005ca8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005caa:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8005cae:	f7fc f94d 	bl	8001f4c <HAL_UART_MspInit>
 8005cb2:	e7d8      	b.n	8005c66 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f7ff febb 	bl	8005a30 <UART_AdvFeatureConfig>
 8005cba:	e7e3      	b.n	8005c84 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005cbc:	2001      	movs	r0, #1
}
 8005cbe:	4770      	bx	lr

08005cc0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cc0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005cc2:	b92b      	cbnz	r3, 8005cd0 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cca:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005cce:	4770      	bx	lr
{
 8005cd0:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cd2:	6803      	ldr	r3, [r0, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cda:	6899      	ldr	r1, [r3, #8]
 8005cdc:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cde:	4d09      	ldr	r5, [pc, #36]	; (8005d04 <UARTEx_SetNbDataToProcess+0x44>)
 8005ce0:	5c6b      	ldrb	r3, [r5, r1]
 8005ce2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ce4:	4c08      	ldr	r4, [pc, #32]	; (8005d08 <UARTEx_SetNbDataToProcess+0x48>)
 8005ce6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ce8:	fb93 f3f1 	sdiv	r3, r3, r1
 8005cec:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf0:	5cab      	ldrb	r3, [r5, r2]
 8005cf2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cf4:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cfa:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005cfe:	bc30      	pop	{r4, r5}
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	08008c18 	.word	0x08008c18
 8005d08:	08008c10 	.word	0x08008c10

08005d0c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005d0c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d018      	beq.n	8005d46 <HAL_UARTEx_DisableFifoMode+0x3a>
 8005d14:	2301      	movs	r3, #1
 8005d16:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005d1a:	2324      	movs	r3, #36	; 0x24
 8005d1c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d20:	6803      	ldr	r3, [r0, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	f021 0101 	bic.w	r1, r1, #1
 8005d2a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d2c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d30:	2300      	movs	r3, #0
 8005d32:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d34:	6801      	ldr	r1, [r0, #0]
 8005d36:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8005d3e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8005d42:	4618      	mov	r0, r3
 8005d44:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005d46:	2002      	movs	r0, #2
}
 8005d48:	4770      	bx	lr

08005d4a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005d4a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005d4c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d01d      	beq.n	8005d90 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8005d54:	4604      	mov	r4, r0
 8005d56:	2301      	movs	r3, #1
 8005d58:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005d5c:	2324      	movs	r3, #36	; 0x24
 8005d5e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d62:	6803      	ldr	r3, [r0, #0]
 8005d64:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d6e:	6802      	ldr	r2, [r0, #0]
 8005d70:	6893      	ldr	r3, [r2, #8]
 8005d72:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005d76:	4319      	orrs	r1, r3
 8005d78:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005d7a:	f7ff ffa1 	bl	8005cc0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005d82:	2320      	movs	r3, #32
 8005d84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8005d88:	2000      	movs	r0, #0
 8005d8a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005d90:	2002      	movs	r0, #2
 8005d92:	e7fc      	b.n	8005d8e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005d94 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005d94:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005d96:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d01d      	beq.n	8005dda <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005d9e:	4604      	mov	r4, r0
 8005da0:	2301      	movs	r3, #1
 8005da2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005da6:	2324      	movs	r3, #36	; 0x24
 8005da8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dac:	6803      	ldr	r3, [r0, #0]
 8005dae:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005db8:	6802      	ldr	r2, [r0, #0]
 8005dba:	6893      	ldr	r3, [r2, #8]
 8005dbc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005dc0:	4319      	orrs	r1, r3
 8005dc2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005dc4:	f7ff ff7c 	bl	8005cc0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	2320      	movs	r3, #32
 8005dce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005dd8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005dda:	2002      	movs	r0, #2
 8005ddc:	e7fc      	b.n	8005dd8 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08005dde <__cvt>:
 8005dde:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de2:	ec55 4b10 	vmov	r4, r5, d0
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	460e      	mov	r6, r1
 8005dea:	4619      	mov	r1, r3
 8005dec:	462b      	mov	r3, r5
 8005dee:	bfb4      	ite	lt
 8005df0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005df4:	2300      	movge	r3, #0
 8005df6:	4691      	mov	r9, r2
 8005df8:	bfbf      	itttt	lt
 8005dfa:	4622      	movlt	r2, r4
 8005dfc:	461d      	movlt	r5, r3
 8005dfe:	232d      	movlt	r3, #45	; 0x2d
 8005e00:	4614      	movlt	r4, r2
 8005e02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e06:	700b      	strb	r3, [r1, #0]
 8005e08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e0a:	f023 0820 	bic.w	r8, r3, #32
 8005e0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e12:	d005      	beq.n	8005e20 <__cvt+0x42>
 8005e14:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e18:	d100      	bne.n	8005e1c <__cvt+0x3e>
 8005e1a:	3601      	adds	r6, #1
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	e000      	b.n	8005e22 <__cvt+0x44>
 8005e20:	2103      	movs	r1, #3
 8005e22:	ab03      	add	r3, sp, #12
 8005e24:	4632      	mov	r2, r6
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	ab02      	add	r3, sp, #8
 8005e2a:	ec45 4b10 	vmov	d0, r4, r5
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4653      	mov	r3, sl
 8005e32:	f000 fe81 	bl	8006b38 <_dtoa_r>
 8005e36:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e3a:	4607      	mov	r7, r0
 8005e3c:	d102      	bne.n	8005e44 <__cvt+0x66>
 8005e3e:	f019 0f01 	tst.w	r9, #1
 8005e42:	d022      	beq.n	8005e8a <__cvt+0xac>
 8005e44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e48:	eb07 0906 	add.w	r9, r7, r6
 8005e4c:	d110      	bne.n	8005e70 <__cvt+0x92>
 8005e4e:	783b      	ldrb	r3, [r7, #0]
 8005e50:	2b30      	cmp	r3, #48	; 0x30
 8005e52:	d10a      	bne.n	8005e6a <__cvt+0x8c>
 8005e54:	2200      	movs	r2, #0
 8005e56:	2300      	movs	r3, #0
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f7fa fe18 	bl	8000a90 <__aeabi_dcmpeq>
 8005e60:	b918      	cbnz	r0, 8005e6a <__cvt+0x8c>
 8005e62:	f1c6 0601 	rsb	r6, r6, #1
 8005e66:	f8ca 6000 	str.w	r6, [sl]
 8005e6a:	f8da 3000 	ldr.w	r3, [sl]
 8005e6e:	4499      	add	r9, r3
 8005e70:	2200      	movs	r2, #0
 8005e72:	2300      	movs	r3, #0
 8005e74:	4620      	mov	r0, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	f7fa fe0a 	bl	8000a90 <__aeabi_dcmpeq>
 8005e7c:	b108      	cbz	r0, 8005e82 <__cvt+0xa4>
 8005e7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e82:	2230      	movs	r2, #48	; 0x30
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	454b      	cmp	r3, r9
 8005e88:	d307      	bcc.n	8005e9a <__cvt+0xbc>
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e90:	1bdb      	subs	r3, r3, r7
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	b004      	add	sp, #16
 8005e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	9103      	str	r1, [sp, #12]
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e7f0      	b.n	8005e84 <__cvt+0xa6>

08005ea2 <__exponent>:
 8005ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	bfb8      	it	lt
 8005eaa:	4249      	neglt	r1, r1
 8005eac:	f803 2b02 	strb.w	r2, [r3], #2
 8005eb0:	bfb4      	ite	lt
 8005eb2:	222d      	movlt	r2, #45	; 0x2d
 8005eb4:	222b      	movge	r2, #43	; 0x2b
 8005eb6:	2909      	cmp	r1, #9
 8005eb8:	7042      	strb	r2, [r0, #1]
 8005eba:	dd29      	ble.n	8005f10 <__exponent+0x6e>
 8005ebc:	f10d 0207 	add.w	r2, sp, #7
 8005ec0:	260a      	movs	r6, #10
 8005ec2:	4617      	mov	r7, r2
 8005ec4:	4694      	mov	ip, r2
 8005ec6:	3a01      	subs	r2, #1
 8005ec8:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ecc:	fb06 1415 	mls	r4, r6, r5, r1
 8005ed0:	3430      	adds	r4, #48	; 0x30
 8005ed2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	4629      	mov	r1, r5
 8005eda:	2c63      	cmp	r4, #99	; 0x63
 8005edc:	dcf2      	bgt.n	8005ec4 <__exponent+0x22>
 8005ede:	3130      	adds	r1, #48	; 0x30
 8005ee0:	f1ac 0402 	sub.w	r4, ip, #2
 8005ee4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005ee8:	1c41      	adds	r1, r0, #1
 8005eea:	4622      	mov	r2, r4
 8005eec:	42ba      	cmp	r2, r7
 8005eee:	d30a      	bcc.n	8005f06 <__exponent+0x64>
 8005ef0:	f10d 0209 	add.w	r2, sp, #9
 8005ef4:	eba2 020c 	sub.w	r2, r2, ip
 8005ef8:	42bc      	cmp	r4, r7
 8005efa:	bf88      	it	hi
 8005efc:	2200      	movhi	r2, #0
 8005efe:	4413      	add	r3, r2
 8005f00:	1a18      	subs	r0, r3, r0
 8005f02:	b003      	add	sp, #12
 8005f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f06:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f0a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f0e:	e7ed      	b.n	8005eec <__exponent+0x4a>
 8005f10:	2330      	movs	r3, #48	; 0x30
 8005f12:	3130      	adds	r1, #48	; 0x30
 8005f14:	7083      	strb	r3, [r0, #2]
 8005f16:	1d03      	adds	r3, r0, #4
 8005f18:	70c1      	strb	r1, [r0, #3]
 8005f1a:	e7f1      	b.n	8005f00 <__exponent+0x5e>

08005f1c <_printf_float>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	ed2d 8b02 	vpush	{d8}
 8005f24:	b08d      	sub	sp, #52	; 0x34
 8005f26:	460c      	mov	r4, r1
 8005f28:	4616      	mov	r6, r2
 8005f2a:	461f      	mov	r7, r3
 8005f2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f30:	4605      	mov	r5, r0
 8005f32:	f000 fce9 	bl	8006908 <_localeconv_r>
 8005f36:	f8d0 a000 	ldr.w	sl, [r0]
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	f7fa f97c 	bl	8000238 <strlen>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f46:	ee08 0a10 	vmov	s16, r0
 8005f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	9305      	str	r3, [sp, #20]
 8005f50:	f8d8 3000 	ldr.w	r3, [r8]
 8005f54:	3307      	adds	r3, #7
 8005f56:	f023 0307 	bic.w	r3, r3, #7
 8005f5a:	f103 0208 	add.w	r2, r3, #8
 8005f5e:	f8c8 2000 	str.w	r2, [r8]
 8005f62:	f04f 32ff 	mov.w	r2, #4294967295
 8005f66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f72:	9307      	str	r3, [sp, #28]
 8005f74:	4b9f      	ldr	r3, [pc, #636]	; (80061f4 <_printf_float+0x2d8>)
 8005f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005f7e:	f7fa fdb9 	bl	8000af4 <__aeabi_dcmpun>
 8005f82:	bb88      	cbnz	r0, 8005fe8 <_printf_float+0xcc>
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	4b9a      	ldr	r3, [pc, #616]	; (80061f4 <_printf_float+0x2d8>)
 8005f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8e:	f7fa fd93 	bl	8000ab8 <__aeabi_dcmple>
 8005f92:	bb48      	cbnz	r0, 8005fe8 <_printf_float+0xcc>
 8005f94:	2200      	movs	r2, #0
 8005f96:	2300      	movs	r3, #0
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	f7fa fd82 	bl	8000aa4 <__aeabi_dcmplt>
 8005fa0:	b110      	cbz	r0, 8005fa8 <_printf_float+0x8c>
 8005fa2:	232d      	movs	r3, #45	; 0x2d
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa8:	4a93      	ldr	r2, [pc, #588]	; (80061f8 <_printf_float+0x2dc>)
 8005faa:	4b94      	ldr	r3, [pc, #592]	; (80061fc <_printf_float+0x2e0>)
 8005fac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fb0:	bf94      	ite	ls
 8005fb2:	4690      	movls	r8, r2
 8005fb4:	4698      	movhi	r8, r3
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	f04f 0900 	mov.w	r9, #0
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	9b05      	ldr	r3, [sp, #20]
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	4633      	mov	r3, r6
 8005fc8:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fca:	4621      	mov	r1, r4
 8005fcc:	4628      	mov	r0, r5
 8005fce:	9700      	str	r7, [sp, #0]
 8005fd0:	f000 f9da 	bl	8006388 <_printf_common>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	f040 8090 	bne.w	80060fa <_printf_float+0x1de>
 8005fda:	f04f 30ff 	mov.w	r0, #4294967295
 8005fde:	b00d      	add	sp, #52	; 0x34
 8005fe0:	ecbd 8b02 	vpop	{d8}
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	4640      	mov	r0, r8
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa fd80 	bl	8000af4 <__aeabi_dcmpun>
 8005ff4:	b140      	cbz	r0, 8006008 <_printf_float+0xec>
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	4a81      	ldr	r2, [pc, #516]	; (8006200 <_printf_float+0x2e4>)
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bfbc      	itt	lt
 8005ffe:	232d      	movlt	r3, #45	; 0x2d
 8006000:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006004:	4b7f      	ldr	r3, [pc, #508]	; (8006204 <_printf_float+0x2e8>)
 8006006:	e7d1      	b.n	8005fac <_printf_float+0x90>
 8006008:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800600c:	6863      	ldr	r3, [r4, #4]
 800600e:	9206      	str	r2, [sp, #24]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	d13f      	bne.n	8006094 <_printf_float+0x178>
 8006014:	2306      	movs	r3, #6
 8006016:	6063      	str	r3, [r4, #4]
 8006018:	9b05      	ldr	r3, [sp, #20]
 800601a:	4628      	mov	r0, r5
 800601c:	6861      	ldr	r1, [r4, #4]
 800601e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006022:	2300      	movs	r3, #0
 8006024:	9303      	str	r3, [sp, #12]
 8006026:	ab0a      	add	r3, sp, #40	; 0x28
 8006028:	6022      	str	r2, [r4, #0]
 800602a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800602e:	ab09      	add	r3, sp, #36	; 0x24
 8006030:	ec49 8b10 	vmov	d0, r8, r9
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800603a:	f7ff fed0 	bl	8005dde <__cvt>
 800603e:	9b06      	ldr	r3, [sp, #24]
 8006040:	4680      	mov	r8, r0
 8006042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006044:	2b47      	cmp	r3, #71	; 0x47
 8006046:	d108      	bne.n	800605a <_printf_float+0x13e>
 8006048:	1cc8      	adds	r0, r1, #3
 800604a:	db02      	blt.n	8006052 <_printf_float+0x136>
 800604c:	6863      	ldr	r3, [r4, #4]
 800604e:	4299      	cmp	r1, r3
 8006050:	dd41      	ble.n	80060d6 <_printf_float+0x1ba>
 8006052:	f1ab 0302 	sub.w	r3, fp, #2
 8006056:	fa5f fb83 	uxtb.w	fp, r3
 800605a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800605e:	d820      	bhi.n	80060a2 <_printf_float+0x186>
 8006060:	3901      	subs	r1, #1
 8006062:	465a      	mov	r2, fp
 8006064:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006068:	9109      	str	r1, [sp, #36]	; 0x24
 800606a:	f7ff ff1a 	bl	8005ea2 <__exponent>
 800606e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006070:	4681      	mov	r9, r0
 8006072:	1813      	adds	r3, r2, r0
 8006074:	2a01      	cmp	r2, #1
 8006076:	6123      	str	r3, [r4, #16]
 8006078:	dc02      	bgt.n	8006080 <_printf_float+0x164>
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	07d2      	lsls	r2, r2, #31
 800607e:	d501      	bpl.n	8006084 <_printf_float+0x168>
 8006080:	3301      	adds	r3, #1
 8006082:	6123      	str	r3, [r4, #16]
 8006084:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006088:	2b00      	cmp	r3, #0
 800608a:	d09c      	beq.n	8005fc6 <_printf_float+0xaa>
 800608c:	232d      	movs	r3, #45	; 0x2d
 800608e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006092:	e798      	b.n	8005fc6 <_printf_float+0xaa>
 8006094:	9a06      	ldr	r2, [sp, #24]
 8006096:	2a47      	cmp	r2, #71	; 0x47
 8006098:	d1be      	bne.n	8006018 <_printf_float+0xfc>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1bc      	bne.n	8006018 <_printf_float+0xfc>
 800609e:	2301      	movs	r3, #1
 80060a0:	e7b9      	b.n	8006016 <_printf_float+0xfa>
 80060a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060a6:	d118      	bne.n	80060da <_printf_float+0x1be>
 80060a8:	2900      	cmp	r1, #0
 80060aa:	6863      	ldr	r3, [r4, #4]
 80060ac:	dd0b      	ble.n	80060c6 <_printf_float+0x1aa>
 80060ae:	6121      	str	r1, [r4, #16]
 80060b0:	b913      	cbnz	r3, 80060b8 <_printf_float+0x19c>
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	07d0      	lsls	r0, r2, #31
 80060b6:	d502      	bpl.n	80060be <_printf_float+0x1a2>
 80060b8:	3301      	adds	r3, #1
 80060ba:	440b      	add	r3, r1
 80060bc:	6123      	str	r3, [r4, #16]
 80060be:	f04f 0900 	mov.w	r9, #0
 80060c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80060c4:	e7de      	b.n	8006084 <_printf_float+0x168>
 80060c6:	b913      	cbnz	r3, 80060ce <_printf_float+0x1b2>
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	07d2      	lsls	r2, r2, #31
 80060cc:	d501      	bpl.n	80060d2 <_printf_float+0x1b6>
 80060ce:	3302      	adds	r3, #2
 80060d0:	e7f4      	b.n	80060bc <_printf_float+0x1a0>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e7f2      	b.n	80060bc <_printf_float+0x1a0>
 80060d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060dc:	4299      	cmp	r1, r3
 80060de:	db05      	blt.n	80060ec <_printf_float+0x1d0>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	6121      	str	r1, [r4, #16]
 80060e4:	07d8      	lsls	r0, r3, #31
 80060e6:	d5ea      	bpl.n	80060be <_printf_float+0x1a2>
 80060e8:	1c4b      	adds	r3, r1, #1
 80060ea:	e7e7      	b.n	80060bc <_printf_float+0x1a0>
 80060ec:	2900      	cmp	r1, #0
 80060ee:	bfd4      	ite	le
 80060f0:	f1c1 0202 	rsble	r2, r1, #2
 80060f4:	2201      	movgt	r2, #1
 80060f6:	4413      	add	r3, r2
 80060f8:	e7e0      	b.n	80060bc <_printf_float+0x1a0>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	055a      	lsls	r2, r3, #21
 80060fe:	d407      	bmi.n	8006110 <_printf_float+0x1f4>
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	4642      	mov	r2, r8
 8006104:	4631      	mov	r1, r6
 8006106:	4628      	mov	r0, r5
 8006108:	47b8      	blx	r7
 800610a:	3001      	adds	r0, #1
 800610c:	d12c      	bne.n	8006168 <_printf_float+0x24c>
 800610e:	e764      	b.n	8005fda <_printf_float+0xbe>
 8006110:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006114:	f240 80e0 	bls.w	80062d8 <_printf_float+0x3bc>
 8006118:	2200      	movs	r2, #0
 800611a:	2300      	movs	r3, #0
 800611c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006120:	f7fa fcb6 	bl	8000a90 <__aeabi_dcmpeq>
 8006124:	2800      	cmp	r0, #0
 8006126:	d034      	beq.n	8006192 <_printf_float+0x276>
 8006128:	2301      	movs	r3, #1
 800612a:	4a37      	ldr	r2, [pc, #220]	; (8006208 <_printf_float+0x2ec>)
 800612c:	4631      	mov	r1, r6
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	f43f af51 	beq.w	8005fda <_printf_float+0xbe>
 8006138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613c:	429a      	cmp	r2, r3
 800613e:	db02      	blt.n	8006146 <_printf_float+0x22a>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	07d8      	lsls	r0, r3, #31
 8006144:	d510      	bpl.n	8006168 <_printf_float+0x24c>
 8006146:	ee18 3a10 	vmov	r3, s16
 800614a:	4652      	mov	r2, sl
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f af41 	beq.w	8005fda <_printf_float+0xbe>
 8006158:	f04f 0800 	mov.w	r8, #0
 800615c:	f104 091a 	add.w	r9, r4, #26
 8006160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006162:	3b01      	subs	r3, #1
 8006164:	4543      	cmp	r3, r8
 8006166:	dc09      	bgt.n	800617c <_printf_float+0x260>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	079b      	lsls	r3, r3, #30
 800616c:	f100 8107 	bmi.w	800637e <_printf_float+0x462>
 8006170:	68e0      	ldr	r0, [r4, #12]
 8006172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006174:	4298      	cmp	r0, r3
 8006176:	bfb8      	it	lt
 8006178:	4618      	movlt	r0, r3
 800617a:	e730      	b.n	8005fde <_printf_float+0xc2>
 800617c:	2301      	movs	r3, #1
 800617e:	464a      	mov	r2, r9
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f af27 	beq.w	8005fda <_printf_float+0xbe>
 800618c:	f108 0801 	add.w	r8, r8, #1
 8006190:	e7e6      	b.n	8006160 <_printf_float+0x244>
 8006192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006194:	2b00      	cmp	r3, #0
 8006196:	dc39      	bgt.n	800620c <_printf_float+0x2f0>
 8006198:	2301      	movs	r3, #1
 800619a:	4a1b      	ldr	r2, [pc, #108]	; (8006208 <_printf_float+0x2ec>)
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	f43f af19 	beq.w	8005fda <_printf_float+0xbe>
 80061a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80061ac:	4313      	orrs	r3, r2
 80061ae:	d102      	bne.n	80061b6 <_printf_float+0x29a>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	07d9      	lsls	r1, r3, #31
 80061b4:	d5d8      	bpl.n	8006168 <_printf_float+0x24c>
 80061b6:	ee18 3a10 	vmov	r3, s16
 80061ba:	4652      	mov	r2, sl
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	f43f af09 	beq.w	8005fda <_printf_float+0xbe>
 80061c8:	f04f 0900 	mov.w	r9, #0
 80061cc:	f104 0a1a 	add.w	sl, r4, #26
 80061d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d2:	425b      	negs	r3, r3
 80061d4:	454b      	cmp	r3, r9
 80061d6:	dc01      	bgt.n	80061dc <_printf_float+0x2c0>
 80061d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061da:	e792      	b.n	8006102 <_printf_float+0x1e6>
 80061dc:	2301      	movs	r3, #1
 80061de:	4652      	mov	r2, sl
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b8      	blx	r7
 80061e6:	3001      	adds	r0, #1
 80061e8:	f43f aef7 	beq.w	8005fda <_printf_float+0xbe>
 80061ec:	f109 0901 	add.w	r9, r9, #1
 80061f0:	e7ee      	b.n	80061d0 <_printf_float+0x2b4>
 80061f2:	bf00      	nop
 80061f4:	7fefffff 	.word	0x7fefffff
 80061f8:	08008c20 	.word	0x08008c20
 80061fc:	08008c24 	.word	0x08008c24
 8006200:	08008c28 	.word	0x08008c28
 8006204:	08008c2c 	.word	0x08008c2c
 8006208:	08008c30 	.word	0x08008c30
 800620c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800620e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006210:	429a      	cmp	r2, r3
 8006212:	bfa8      	it	ge
 8006214:	461a      	movge	r2, r3
 8006216:	2a00      	cmp	r2, #0
 8006218:	4691      	mov	r9, r2
 800621a:	dc37      	bgt.n	800628c <_printf_float+0x370>
 800621c:	f04f 0b00 	mov.w	fp, #0
 8006220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006224:	f104 021a 	add.w	r2, r4, #26
 8006228:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800622a:	9305      	str	r3, [sp, #20]
 800622c:	eba3 0309 	sub.w	r3, r3, r9
 8006230:	455b      	cmp	r3, fp
 8006232:	dc33      	bgt.n	800629c <_printf_float+0x380>
 8006234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006238:	429a      	cmp	r2, r3
 800623a:	db3b      	blt.n	80062b4 <_printf_float+0x398>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	07da      	lsls	r2, r3, #31
 8006240:	d438      	bmi.n	80062b4 <_printf_float+0x398>
 8006242:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006246:	eba2 0903 	sub.w	r9, r2, r3
 800624a:	9b05      	ldr	r3, [sp, #20]
 800624c:	1ad2      	subs	r2, r2, r3
 800624e:	4591      	cmp	r9, r2
 8006250:	bfa8      	it	ge
 8006252:	4691      	movge	r9, r2
 8006254:	f1b9 0f00 	cmp.w	r9, #0
 8006258:	dc35      	bgt.n	80062c6 <_printf_float+0x3aa>
 800625a:	f04f 0800 	mov.w	r8, #0
 800625e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006262:	f104 0a1a 	add.w	sl, r4, #26
 8006266:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	eba3 0309 	sub.w	r3, r3, r9
 8006270:	4543      	cmp	r3, r8
 8006272:	f77f af79 	ble.w	8006168 <_printf_float+0x24c>
 8006276:	2301      	movs	r3, #1
 8006278:	4652      	mov	r2, sl
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	f43f aeaa 	beq.w	8005fda <_printf_float+0xbe>
 8006286:	f108 0801 	add.w	r8, r8, #1
 800628a:	e7ec      	b.n	8006266 <_printf_float+0x34a>
 800628c:	4613      	mov	r3, r2
 800628e:	4631      	mov	r1, r6
 8006290:	4642      	mov	r2, r8
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	d1c0      	bne.n	800621c <_printf_float+0x300>
 800629a:	e69e      	b.n	8005fda <_printf_float+0xbe>
 800629c:	2301      	movs	r3, #1
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	9205      	str	r2, [sp, #20]
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	f43f ae97 	beq.w	8005fda <_printf_float+0xbe>
 80062ac:	f10b 0b01 	add.w	fp, fp, #1
 80062b0:	9a05      	ldr	r2, [sp, #20]
 80062b2:	e7b9      	b.n	8006228 <_printf_float+0x30c>
 80062b4:	ee18 3a10 	vmov	r3, s16
 80062b8:	4652      	mov	r2, sl
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	d1be      	bne.n	8006242 <_printf_float+0x326>
 80062c4:	e689      	b.n	8005fda <_printf_float+0xbe>
 80062c6:	9a05      	ldr	r2, [sp, #20]
 80062c8:	464b      	mov	r3, r9
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	4442      	add	r2, r8
 80062d0:	47b8      	blx	r7
 80062d2:	3001      	adds	r0, #1
 80062d4:	d1c1      	bne.n	800625a <_printf_float+0x33e>
 80062d6:	e680      	b.n	8005fda <_printf_float+0xbe>
 80062d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062da:	2a01      	cmp	r2, #1
 80062dc:	dc01      	bgt.n	80062e2 <_printf_float+0x3c6>
 80062de:	07db      	lsls	r3, r3, #31
 80062e0:	d53a      	bpl.n	8006358 <_printf_float+0x43c>
 80062e2:	2301      	movs	r3, #1
 80062e4:	4642      	mov	r2, r8
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	47b8      	blx	r7
 80062ec:	3001      	adds	r0, #1
 80062ee:	f43f ae74 	beq.w	8005fda <_printf_float+0xbe>
 80062f2:	ee18 3a10 	vmov	r3, s16
 80062f6:	4652      	mov	r2, sl
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f ae6b 	beq.w	8005fda <_printf_float+0xbe>
 8006304:	2200      	movs	r2, #0
 8006306:	2300      	movs	r3, #0
 8006308:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800630c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006310:	f7fa fbbe 	bl	8000a90 <__aeabi_dcmpeq>
 8006314:	b9d8      	cbnz	r0, 800634e <_printf_float+0x432>
 8006316:	f10a 33ff 	add.w	r3, sl, #4294967295
 800631a:	f108 0201 	add.w	r2, r8, #1
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	d10e      	bne.n	8006346 <_printf_float+0x42a>
 8006328:	e657      	b.n	8005fda <_printf_float+0xbe>
 800632a:	2301      	movs	r3, #1
 800632c:	4652      	mov	r2, sl
 800632e:	4631      	mov	r1, r6
 8006330:	4628      	mov	r0, r5
 8006332:	47b8      	blx	r7
 8006334:	3001      	adds	r0, #1
 8006336:	f43f ae50 	beq.w	8005fda <_printf_float+0xbe>
 800633a:	f108 0801 	add.w	r8, r8, #1
 800633e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006340:	3b01      	subs	r3, #1
 8006342:	4543      	cmp	r3, r8
 8006344:	dcf1      	bgt.n	800632a <_printf_float+0x40e>
 8006346:	464b      	mov	r3, r9
 8006348:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800634c:	e6da      	b.n	8006104 <_printf_float+0x1e8>
 800634e:	f04f 0800 	mov.w	r8, #0
 8006352:	f104 0a1a 	add.w	sl, r4, #26
 8006356:	e7f2      	b.n	800633e <_printf_float+0x422>
 8006358:	2301      	movs	r3, #1
 800635a:	4642      	mov	r2, r8
 800635c:	e7df      	b.n	800631e <_printf_float+0x402>
 800635e:	2301      	movs	r3, #1
 8006360:	464a      	mov	r2, r9
 8006362:	4631      	mov	r1, r6
 8006364:	4628      	mov	r0, r5
 8006366:	47b8      	blx	r7
 8006368:	3001      	adds	r0, #1
 800636a:	f43f ae36 	beq.w	8005fda <_printf_float+0xbe>
 800636e:	f108 0801 	add.w	r8, r8, #1
 8006372:	68e3      	ldr	r3, [r4, #12]
 8006374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006376:	1a5b      	subs	r3, r3, r1
 8006378:	4543      	cmp	r3, r8
 800637a:	dcf0      	bgt.n	800635e <_printf_float+0x442>
 800637c:	e6f8      	b.n	8006170 <_printf_float+0x254>
 800637e:	f04f 0800 	mov.w	r8, #0
 8006382:	f104 0919 	add.w	r9, r4, #25
 8006386:	e7f4      	b.n	8006372 <_printf_float+0x456>

08006388 <_printf_common>:
 8006388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	4616      	mov	r6, r2
 800638e:	4699      	mov	r9, r3
 8006390:	688a      	ldr	r2, [r1, #8]
 8006392:	4607      	mov	r7, r0
 8006394:	690b      	ldr	r3, [r1, #16]
 8006396:	460c      	mov	r4, r1
 8006398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800639c:	4293      	cmp	r3, r2
 800639e:	bfb8      	it	lt
 80063a0:	4613      	movlt	r3, r2
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063a8:	b10a      	cbz	r2, 80063ae <_printf_common+0x26>
 80063aa:	3301      	adds	r3, #1
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	0699      	lsls	r1, r3, #26
 80063b2:	bf42      	ittt	mi
 80063b4:	6833      	ldrmi	r3, [r6, #0]
 80063b6:	3302      	addmi	r3, #2
 80063b8:	6033      	strmi	r3, [r6, #0]
 80063ba:	6825      	ldr	r5, [r4, #0]
 80063bc:	f015 0506 	ands.w	r5, r5, #6
 80063c0:	d106      	bne.n	80063d0 <_printf_common+0x48>
 80063c2:	f104 0a19 	add.w	sl, r4, #25
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	6832      	ldr	r2, [r6, #0]
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	dc2b      	bgt.n	8006428 <_printf_common+0xa0>
 80063d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063d4:	1e13      	subs	r3, r2, #0
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	bf18      	it	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	0692      	lsls	r2, r2, #26
 80063de:	d430      	bmi.n	8006442 <_printf_common+0xba>
 80063e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063e4:	4649      	mov	r1, r9
 80063e6:	4638      	mov	r0, r7
 80063e8:	47c0      	blx	r8
 80063ea:	3001      	adds	r0, #1
 80063ec:	d023      	beq.n	8006436 <_printf_common+0xae>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	341a      	adds	r4, #26
 80063f2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80063f6:	f003 0306 	and.w	r3, r3, #6
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf0a      	itet	eq
 80063fe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8006402:	2500      	movne	r5, #0
 8006404:	6833      	ldreq	r3, [r6, #0]
 8006406:	f04f 0600 	mov.w	r6, #0
 800640a:	bf08      	it	eq
 800640c:	1aed      	subeq	r5, r5, r3
 800640e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006412:	bf08      	it	eq
 8006414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006418:	4293      	cmp	r3, r2
 800641a:	bfc4      	itt	gt
 800641c:	1a9b      	subgt	r3, r3, r2
 800641e:	18ed      	addgt	r5, r5, r3
 8006420:	42b5      	cmp	r5, r6
 8006422:	d11a      	bne.n	800645a <_printf_common+0xd2>
 8006424:	2000      	movs	r0, #0
 8006426:	e008      	b.n	800643a <_printf_common+0xb2>
 8006428:	2301      	movs	r3, #1
 800642a:	4652      	mov	r2, sl
 800642c:	4649      	mov	r1, r9
 800642e:	4638      	mov	r0, r7
 8006430:	47c0      	blx	r8
 8006432:	3001      	adds	r0, #1
 8006434:	d103      	bne.n	800643e <_printf_common+0xb6>
 8006436:	f04f 30ff 	mov.w	r0, #4294967295
 800643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643e:	3501      	adds	r5, #1
 8006440:	e7c1      	b.n	80063c6 <_printf_common+0x3e>
 8006442:	18e1      	adds	r1, r4, r3
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	2030      	movs	r0, #48	; 0x30
 8006448:	3302      	adds	r3, #2
 800644a:	4422      	add	r2, r4
 800644c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006458:	e7c2      	b.n	80063e0 <_printf_common+0x58>
 800645a:	2301      	movs	r3, #1
 800645c:	4622      	mov	r2, r4
 800645e:	4649      	mov	r1, r9
 8006460:	4638      	mov	r0, r7
 8006462:	47c0      	blx	r8
 8006464:	3001      	adds	r0, #1
 8006466:	d0e6      	beq.n	8006436 <_printf_common+0xae>
 8006468:	3601      	adds	r6, #1
 800646a:	e7d9      	b.n	8006420 <_printf_common+0x98>

0800646c <_printf_i>:
 800646c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	7e0f      	ldrb	r7, [r1, #24]
 8006472:	4691      	mov	r9, r2
 8006474:	4680      	mov	r8, r0
 8006476:	460c      	mov	r4, r1
 8006478:	2f78      	cmp	r7, #120	; 0x78
 800647a:	469a      	mov	sl, r3
 800647c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800647e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006482:	d807      	bhi.n	8006494 <_printf_i+0x28>
 8006484:	2f62      	cmp	r7, #98	; 0x62
 8006486:	d80a      	bhi.n	800649e <_printf_i+0x32>
 8006488:	2f00      	cmp	r7, #0
 800648a:	f000 80d3 	beq.w	8006634 <_printf_i+0x1c8>
 800648e:	2f58      	cmp	r7, #88	; 0x58
 8006490:	f000 80bf 	beq.w	8006612 <_printf_i+0x1a6>
 8006494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800649c:	e03a      	b.n	8006514 <_printf_i+0xa8>
 800649e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064a2:	2b15      	cmp	r3, #21
 80064a4:	d8f6      	bhi.n	8006494 <_printf_i+0x28>
 80064a6:	a101      	add	r1, pc, #4	; (adr r1, 80064ac <_printf_i+0x40>)
 80064a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064ac:	08006505 	.word	0x08006505
 80064b0:	08006519 	.word	0x08006519
 80064b4:	08006495 	.word	0x08006495
 80064b8:	08006495 	.word	0x08006495
 80064bc:	08006495 	.word	0x08006495
 80064c0:	08006495 	.word	0x08006495
 80064c4:	08006519 	.word	0x08006519
 80064c8:	08006495 	.word	0x08006495
 80064cc:	08006495 	.word	0x08006495
 80064d0:	08006495 	.word	0x08006495
 80064d4:	08006495 	.word	0x08006495
 80064d8:	0800661b 	.word	0x0800661b
 80064dc:	08006545 	.word	0x08006545
 80064e0:	080065d7 	.word	0x080065d7
 80064e4:	08006495 	.word	0x08006495
 80064e8:	08006495 	.word	0x08006495
 80064ec:	0800663d 	.word	0x0800663d
 80064f0:	08006495 	.word	0x08006495
 80064f4:	08006545 	.word	0x08006545
 80064f8:	08006495 	.word	0x08006495
 80064fc:	08006495 	.word	0x08006495
 8006500:	080065df 	.word	0x080065df
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	602a      	str	r2, [r5, #0]
 800650c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006514:	2301      	movs	r3, #1
 8006516:	e09e      	b.n	8006656 <_printf_i+0x1ea>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	0607      	lsls	r7, r0, #24
 800651e:	f103 0104 	add.w	r1, r3, #4
 8006522:	6029      	str	r1, [r5, #0]
 8006524:	d501      	bpl.n	800652a <_printf_i+0xbe>
 8006526:	681e      	ldr	r6, [r3, #0]
 8006528:	e003      	b.n	8006532 <_printf_i+0xc6>
 800652a:	0646      	lsls	r6, r0, #25
 800652c:	d5fb      	bpl.n	8006526 <_printf_i+0xba>
 800652e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006532:	2e00      	cmp	r6, #0
 8006534:	da03      	bge.n	800653e <_printf_i+0xd2>
 8006536:	232d      	movs	r3, #45	; 0x2d
 8006538:	4276      	negs	r6, r6
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653e:	4859      	ldr	r0, [pc, #356]	; (80066a4 <_printf_i+0x238>)
 8006540:	230a      	movs	r3, #10
 8006542:	e012      	b.n	800656a <_printf_i+0xfe>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	6820      	ldr	r0, [r4, #0]
 8006548:	1d19      	adds	r1, r3, #4
 800654a:	6029      	str	r1, [r5, #0]
 800654c:	0605      	lsls	r5, r0, #24
 800654e:	d501      	bpl.n	8006554 <_printf_i+0xe8>
 8006550:	681e      	ldr	r6, [r3, #0]
 8006552:	e002      	b.n	800655a <_printf_i+0xee>
 8006554:	0641      	lsls	r1, r0, #25
 8006556:	d5fb      	bpl.n	8006550 <_printf_i+0xe4>
 8006558:	881e      	ldrh	r6, [r3, #0]
 800655a:	2f6f      	cmp	r7, #111	; 0x6f
 800655c:	4851      	ldr	r0, [pc, #324]	; (80066a4 <_printf_i+0x238>)
 800655e:	bf0c      	ite	eq
 8006560:	2308      	moveq	r3, #8
 8006562:	230a      	movne	r3, #10
 8006564:	2100      	movs	r1, #0
 8006566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800656a:	6865      	ldr	r5, [r4, #4]
 800656c:	2d00      	cmp	r5, #0
 800656e:	60a5      	str	r5, [r4, #8]
 8006570:	bfa2      	ittt	ge
 8006572:	6821      	ldrge	r1, [r4, #0]
 8006574:	f021 0104 	bicge.w	r1, r1, #4
 8006578:	6021      	strge	r1, [r4, #0]
 800657a:	b90e      	cbnz	r6, 8006580 <_printf_i+0x114>
 800657c:	2d00      	cmp	r5, #0
 800657e:	d04a      	beq.n	8006616 <_printf_i+0x1aa>
 8006580:	4615      	mov	r5, r2
 8006582:	fbb6 f1f3 	udiv	r1, r6, r3
 8006586:	fb03 6711 	mls	r7, r3, r1, r6
 800658a:	5dc7      	ldrb	r7, [r0, r7]
 800658c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006590:	4637      	mov	r7, r6
 8006592:	460e      	mov	r6, r1
 8006594:	42bb      	cmp	r3, r7
 8006596:	d9f4      	bls.n	8006582 <_printf_i+0x116>
 8006598:	2b08      	cmp	r3, #8
 800659a:	d10b      	bne.n	80065b4 <_printf_i+0x148>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	07de      	lsls	r6, r3, #31
 80065a0:	d508      	bpl.n	80065b4 <_printf_i+0x148>
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	6861      	ldr	r1, [r4, #4]
 80065a6:	4299      	cmp	r1, r3
 80065a8:	bfde      	ittt	le
 80065aa:	2330      	movle	r3, #48	; 0x30
 80065ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065b4:	1b52      	subs	r2, r2, r5
 80065b6:	6122      	str	r2, [r4, #16]
 80065b8:	464b      	mov	r3, r9
 80065ba:	aa03      	add	r2, sp, #12
 80065bc:	4621      	mov	r1, r4
 80065be:	4640      	mov	r0, r8
 80065c0:	f8cd a000 	str.w	sl, [sp]
 80065c4:	f7ff fee0 	bl	8006388 <_printf_common>
 80065c8:	3001      	adds	r0, #1
 80065ca:	d149      	bne.n	8006660 <_printf_i+0x1f4>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	b004      	add	sp, #16
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	f043 0320 	orr.w	r3, r3, #32
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	2778      	movs	r7, #120	; 0x78
 80065e0:	4831      	ldr	r0, [pc, #196]	; (80066a8 <_printf_i+0x23c>)
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065e8:	061f      	lsls	r7, r3, #24
 80065ea:	6829      	ldr	r1, [r5, #0]
 80065ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80065f0:	d402      	bmi.n	80065f8 <_printf_i+0x18c>
 80065f2:	065f      	lsls	r7, r3, #25
 80065f4:	bf48      	it	mi
 80065f6:	b2b6      	uxthmi	r6, r6
 80065f8:	07df      	lsls	r7, r3, #31
 80065fa:	6029      	str	r1, [r5, #0]
 80065fc:	bf44      	itt	mi
 80065fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006602:	6023      	strmi	r3, [r4, #0]
 8006604:	b91e      	cbnz	r6, 800660e <_printf_i+0x1a2>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	f023 0320 	bic.w	r3, r3, #32
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	2310      	movs	r3, #16
 8006610:	e7a8      	b.n	8006564 <_printf_i+0xf8>
 8006612:	4824      	ldr	r0, [pc, #144]	; (80066a4 <_printf_i+0x238>)
 8006614:	e7e5      	b.n	80065e2 <_printf_i+0x176>
 8006616:	4615      	mov	r5, r2
 8006618:	e7be      	b.n	8006598 <_printf_i+0x12c>
 800661a:	682b      	ldr	r3, [r5, #0]
 800661c:	6826      	ldr	r6, [r4, #0]
 800661e:	1d18      	adds	r0, r3, #4
 8006620:	6961      	ldr	r1, [r4, #20]
 8006622:	6028      	str	r0, [r5, #0]
 8006624:	0635      	lsls	r5, r6, #24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	d501      	bpl.n	800662e <_printf_i+0x1c2>
 800662a:	6019      	str	r1, [r3, #0]
 800662c:	e002      	b.n	8006634 <_printf_i+0x1c8>
 800662e:	0670      	lsls	r0, r6, #25
 8006630:	d5fb      	bpl.n	800662a <_printf_i+0x1be>
 8006632:	8019      	strh	r1, [r3, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	4615      	mov	r5, r2
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	e7bd      	b.n	80065b8 <_printf_i+0x14c>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	2100      	movs	r1, #0
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	602a      	str	r2, [r5, #0]
 8006644:	681d      	ldr	r5, [r3, #0]
 8006646:	6862      	ldr	r2, [r4, #4]
 8006648:	4628      	mov	r0, r5
 800664a:	f000 f9d4 	bl	80069f6 <memchr>
 800664e:	b108      	cbz	r0, 8006654 <_printf_i+0x1e8>
 8006650:	1b40      	subs	r0, r0, r5
 8006652:	6060      	str	r0, [r4, #4]
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	2300      	movs	r3, #0
 800665a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800665e:	e7ab      	b.n	80065b8 <_printf_i+0x14c>
 8006660:	6923      	ldr	r3, [r4, #16]
 8006662:	462a      	mov	r2, r5
 8006664:	4649      	mov	r1, r9
 8006666:	4640      	mov	r0, r8
 8006668:	47d0      	blx	sl
 800666a:	3001      	adds	r0, #1
 800666c:	d0ae      	beq.n	80065cc <_printf_i+0x160>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	079b      	lsls	r3, r3, #30
 8006672:	d413      	bmi.n	800669c <_printf_i+0x230>
 8006674:	68e0      	ldr	r0, [r4, #12]
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	4298      	cmp	r0, r3
 800667a:	bfb8      	it	lt
 800667c:	4618      	movlt	r0, r3
 800667e:	e7a7      	b.n	80065d0 <_printf_i+0x164>
 8006680:	2301      	movs	r3, #1
 8006682:	4632      	mov	r2, r6
 8006684:	4649      	mov	r1, r9
 8006686:	4640      	mov	r0, r8
 8006688:	47d0      	blx	sl
 800668a:	3001      	adds	r0, #1
 800668c:	d09e      	beq.n	80065cc <_printf_i+0x160>
 800668e:	3501      	adds	r5, #1
 8006690:	68e3      	ldr	r3, [r4, #12]
 8006692:	9903      	ldr	r1, [sp, #12]
 8006694:	1a5b      	subs	r3, r3, r1
 8006696:	42ab      	cmp	r3, r5
 8006698:	dcf2      	bgt.n	8006680 <_printf_i+0x214>
 800669a:	e7eb      	b.n	8006674 <_printf_i+0x208>
 800669c:	2500      	movs	r5, #0
 800669e:	f104 0619 	add.w	r6, r4, #25
 80066a2:	e7f5      	b.n	8006690 <_printf_i+0x224>
 80066a4:	08008c32 	.word	0x08008c32
 80066a8:	08008c43 	.word	0x08008c43

080066ac <std>:
 80066ac:	2300      	movs	r3, #0
 80066ae:	b510      	push	{r4, lr}
 80066b0:	4604      	mov	r4, r0
 80066b2:	6083      	str	r3, [r0, #8]
 80066b4:	8181      	strh	r1, [r0, #12]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6643      	str	r3, [r0, #100]	; 0x64
 80066ba:	81c2      	strh	r2, [r0, #14]
 80066bc:	2208      	movs	r2, #8
 80066be:	6183      	str	r3, [r0, #24]
 80066c0:	e9c0 3300 	strd	r3, r3, [r0]
 80066c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066c8:	305c      	adds	r0, #92	; 0x5c
 80066ca:	f000 f914 	bl	80068f6 <memset>
 80066ce:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <std+0x58>)
 80066d0:	6224      	str	r4, [r4, #32]
 80066d2:	6263      	str	r3, [r4, #36]	; 0x24
 80066d4:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <std+0x5c>)
 80066d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <std+0x60>)
 80066da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <std+0x64>)
 80066de:	6323      	str	r3, [r4, #48]	; 0x30
 80066e0:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <std+0x68>)
 80066e2:	429c      	cmp	r4, r3
 80066e4:	d006      	beq.n	80066f4 <std+0x48>
 80066e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80066ea:	4294      	cmp	r4, r2
 80066ec:	d002      	beq.n	80066f4 <std+0x48>
 80066ee:	33d0      	adds	r3, #208	; 0xd0
 80066f0:	429c      	cmp	r4, r3
 80066f2:	d105      	bne.n	8006700 <std+0x54>
 80066f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066fc:	f000 b978 	b.w	80069f0 <__retarget_lock_init_recursive>
 8006700:	bd10      	pop	{r4, pc}
 8006702:	bf00      	nop
 8006704:	08006871 	.word	0x08006871
 8006708:	08006893 	.word	0x08006893
 800670c:	080068cb 	.word	0x080068cb
 8006710:	080068ef 	.word	0x080068ef
 8006714:	2000046c 	.word	0x2000046c

08006718 <stdio_exit_handler>:
 8006718:	4a02      	ldr	r2, [pc, #8]	; (8006724 <stdio_exit_handler+0xc>)
 800671a:	4903      	ldr	r1, [pc, #12]	; (8006728 <stdio_exit_handler+0x10>)
 800671c:	4803      	ldr	r0, [pc, #12]	; (800672c <stdio_exit_handler+0x14>)
 800671e:	f000 b869 	b.w	80067f4 <_fwalk_sglue>
 8006722:	bf00      	nop
 8006724:	20000030 	.word	0x20000030
 8006728:	080083d9 	.word	0x080083d9
 800672c:	2000003c 	.word	0x2000003c

08006730 <cleanup_stdio>:
 8006730:	6841      	ldr	r1, [r0, #4]
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <cleanup_stdio+0x34>)
 8006734:	4299      	cmp	r1, r3
 8006736:	b510      	push	{r4, lr}
 8006738:	4604      	mov	r4, r0
 800673a:	d001      	beq.n	8006740 <cleanup_stdio+0x10>
 800673c:	f001 fe4c 	bl	80083d8 <_fflush_r>
 8006740:	68a1      	ldr	r1, [r4, #8]
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <cleanup_stdio+0x38>)
 8006744:	4299      	cmp	r1, r3
 8006746:	d002      	beq.n	800674e <cleanup_stdio+0x1e>
 8006748:	4620      	mov	r0, r4
 800674a:	f001 fe45 	bl	80083d8 <_fflush_r>
 800674e:	68e1      	ldr	r1, [r4, #12]
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <cleanup_stdio+0x3c>)
 8006752:	4299      	cmp	r1, r3
 8006754:	d004      	beq.n	8006760 <cleanup_stdio+0x30>
 8006756:	4620      	mov	r0, r4
 8006758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800675c:	f001 be3c 	b.w	80083d8 <_fflush_r>
 8006760:	bd10      	pop	{r4, pc}
 8006762:	bf00      	nop
 8006764:	2000046c 	.word	0x2000046c
 8006768:	200004d4 	.word	0x200004d4
 800676c:	2000053c 	.word	0x2000053c

08006770 <global_stdio_init.part.0>:
 8006770:	b510      	push	{r4, lr}
 8006772:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <global_stdio_init.part.0+0x30>)
 8006774:	2104      	movs	r1, #4
 8006776:	4c0b      	ldr	r4, [pc, #44]	; (80067a4 <global_stdio_init.part.0+0x34>)
 8006778:	4a0b      	ldr	r2, [pc, #44]	; (80067a8 <global_stdio_init.part.0+0x38>)
 800677a:	4620      	mov	r0, r4
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	f7ff ff94 	bl	80066ac <std>
 8006784:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006788:	2201      	movs	r2, #1
 800678a:	2109      	movs	r1, #9
 800678c:	f7ff ff8e 	bl	80066ac <std>
 8006790:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006794:	2202      	movs	r2, #2
 8006796:	2112      	movs	r1, #18
 8006798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800679c:	f7ff bf86 	b.w	80066ac <std>
 80067a0:	200005a4 	.word	0x200005a4
 80067a4:	2000046c 	.word	0x2000046c
 80067a8:	08006719 	.word	0x08006719

080067ac <__sfp_lock_acquire>:
 80067ac:	4801      	ldr	r0, [pc, #4]	; (80067b4 <__sfp_lock_acquire+0x8>)
 80067ae:	f000 b920 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 80067b2:	bf00      	nop
 80067b4:	200005ad 	.word	0x200005ad

080067b8 <__sfp_lock_release>:
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <__sfp_lock_release+0x8>)
 80067ba:	f000 b91b 	b.w	80069f4 <__retarget_lock_release_recursive>
 80067be:	bf00      	nop
 80067c0:	200005ad 	.word	0x200005ad

080067c4 <__sinit>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	4604      	mov	r4, r0
 80067c8:	f7ff fff0 	bl	80067ac <__sfp_lock_acquire>
 80067cc:	6a23      	ldr	r3, [r4, #32]
 80067ce:	b11b      	cbz	r3, 80067d8 <__sinit+0x14>
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d4:	f7ff bff0 	b.w	80067b8 <__sfp_lock_release>
 80067d8:	4b04      	ldr	r3, [pc, #16]	; (80067ec <__sinit+0x28>)
 80067da:	6223      	str	r3, [r4, #32]
 80067dc:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <__sinit+0x2c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f5      	bne.n	80067d0 <__sinit+0xc>
 80067e4:	f7ff ffc4 	bl	8006770 <global_stdio_init.part.0>
 80067e8:	e7f2      	b.n	80067d0 <__sinit+0xc>
 80067ea:	bf00      	nop
 80067ec:	08006731 	.word	0x08006731
 80067f0:	200005a4 	.word	0x200005a4

080067f4 <_fwalk_sglue>:
 80067f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f8:	4607      	mov	r7, r0
 80067fa:	4688      	mov	r8, r1
 80067fc:	4614      	mov	r4, r2
 80067fe:	2600      	movs	r6, #0
 8006800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006804:	f1b9 0901 	subs.w	r9, r9, #1
 8006808:	d505      	bpl.n	8006816 <_fwalk_sglue+0x22>
 800680a:	6824      	ldr	r4, [r4, #0]
 800680c:	2c00      	cmp	r4, #0
 800680e:	d1f7      	bne.n	8006800 <_fwalk_sglue+0xc>
 8006810:	4630      	mov	r0, r6
 8006812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d907      	bls.n	800682c <_fwalk_sglue+0x38>
 800681c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006820:	3301      	adds	r3, #1
 8006822:	d003      	beq.n	800682c <_fwalk_sglue+0x38>
 8006824:	4629      	mov	r1, r5
 8006826:	4638      	mov	r0, r7
 8006828:	47c0      	blx	r8
 800682a:	4306      	orrs	r6, r0
 800682c:	3568      	adds	r5, #104	; 0x68
 800682e:	e7e9      	b.n	8006804 <_fwalk_sglue+0x10>

08006830 <siprintf>:
 8006830:	b40e      	push	{r1, r2, r3}
 8006832:	b500      	push	{lr}
 8006834:	b09c      	sub	sp, #112	; 0x70
 8006836:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800683a:	ab1d      	add	r3, sp, #116	; 0x74
 800683c:	9002      	str	r0, [sp, #8]
 800683e:	9006      	str	r0, [sp, #24]
 8006840:	9107      	str	r1, [sp, #28]
 8006842:	9104      	str	r1, [sp, #16]
 8006844:	4808      	ldr	r0, [pc, #32]	; (8006868 <siprintf+0x38>)
 8006846:	4909      	ldr	r1, [pc, #36]	; (800686c <siprintf+0x3c>)
 8006848:	f853 2b04 	ldr.w	r2, [r3], #4
 800684c:	9105      	str	r1, [sp, #20]
 800684e:	a902      	add	r1, sp, #8
 8006850:	6800      	ldr	r0, [r0, #0]
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	f001 fc3e 	bl	80080d4 <_svfiprintf_r>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	b01c      	add	sp, #112	; 0x70
 8006860:	f85d eb04 	ldr.w	lr, [sp], #4
 8006864:	b003      	add	sp, #12
 8006866:	4770      	bx	lr
 8006868:	20000088 	.word	0x20000088
 800686c:	ffff0208 	.word	0xffff0208

08006870 <__sread>:
 8006870:	b510      	push	{r4, lr}
 8006872:	460c      	mov	r4, r1
 8006874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006878:	f000 f86c 	bl	8006954 <_read_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	bfab      	itete	ge
 8006880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006882:	89a3      	ldrhlt	r3, [r4, #12]
 8006884:	181b      	addge	r3, r3, r0
 8006886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800688a:	bfac      	ite	ge
 800688c:	6563      	strge	r3, [r4, #84]	; 0x54
 800688e:	81a3      	strhlt	r3, [r4, #12]
 8006890:	bd10      	pop	{r4, pc}

08006892 <__swrite>:
 8006892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006896:	461f      	mov	r7, r3
 8006898:	898b      	ldrh	r3, [r1, #12]
 800689a:	4605      	mov	r5, r0
 800689c:	460c      	mov	r4, r1
 800689e:	05db      	lsls	r3, r3, #23
 80068a0:	4616      	mov	r6, r2
 80068a2:	d505      	bpl.n	80068b0 <__swrite+0x1e>
 80068a4:	2302      	movs	r3, #2
 80068a6:	2200      	movs	r2, #0
 80068a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ac:	f000 f840 	bl	8006930 <_lseek_r>
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	4632      	mov	r2, r6
 80068b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068b8:	4628      	mov	r0, r5
 80068ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	463b      	mov	r3, r7
 80068c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	f000 b857 	b.w	8006978 <_write_r>

080068ca <__sseek>:
 80068ca:	b510      	push	{r4, lr}
 80068cc:	460c      	mov	r4, r1
 80068ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d2:	f000 f82d 	bl	8006930 <_lseek_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	bf15      	itete	ne
 80068dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80068de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068e6:	81a3      	strheq	r3, [r4, #12]
 80068e8:	bf18      	it	ne
 80068ea:	81a3      	strhne	r3, [r4, #12]
 80068ec:	bd10      	pop	{r4, pc}

080068ee <__sclose>:
 80068ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f2:	f000 b80d 	b.w	8006910 <_close_r>

080068f6 <memset>:
 80068f6:	4402      	add	r2, r0
 80068f8:	4603      	mov	r3, r0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d100      	bne.n	8006900 <memset+0xa>
 80068fe:	4770      	bx	lr
 8006900:	f803 1b01 	strb.w	r1, [r3], #1
 8006904:	e7f9      	b.n	80068fa <memset+0x4>
	...

08006908 <_localeconv_r>:
 8006908:	4800      	ldr	r0, [pc, #0]	; (800690c <_localeconv_r+0x4>)
 800690a:	4770      	bx	lr
 800690c:	2000017c 	.word	0x2000017c

08006910 <_close_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	2300      	movs	r3, #0
 8006914:	4d05      	ldr	r5, [pc, #20]	; (800692c <_close_r+0x1c>)
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	f7fb fbac 	bl	8002078 <_close>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_close_r+0x1a>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b103      	cbz	r3, 800692a <_close_r+0x1a>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	200005a8 	.word	0x200005a8

08006930 <_lseek_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4604      	mov	r4, r0
 8006934:	4d06      	ldr	r5, [pc, #24]	; (8006950 <_lseek_r+0x20>)
 8006936:	4608      	mov	r0, r1
 8006938:	4611      	mov	r1, r2
 800693a:	2200      	movs	r2, #0
 800693c:	602a      	str	r2, [r5, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	f7fb fba4 	bl	800208c <_lseek>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d102      	bne.n	800694e <_lseek_r+0x1e>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	b103      	cbz	r3, 800694e <_lseek_r+0x1e>
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	200005a8 	.word	0x200005a8

08006954 <_read_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4604      	mov	r4, r0
 8006958:	4d06      	ldr	r5, [pc, #24]	; (8006974 <_read_r+0x20>)
 800695a:	4608      	mov	r0, r1
 800695c:	4611      	mov	r1, r2
 800695e:	2200      	movs	r2, #0
 8006960:	602a      	str	r2, [r5, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	f7fb fb6a 	bl	800203c <_read>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_read_r+0x1e>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_read_r+0x1e>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	200005a8 	.word	0x200005a8

08006978 <_write_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4604      	mov	r4, r0
 800697c:	4d06      	ldr	r5, [pc, #24]	; (8006998 <_write_r+0x20>)
 800697e:	4608      	mov	r0, r1
 8006980:	4611      	mov	r1, r2
 8006982:	2200      	movs	r2, #0
 8006984:	602a      	str	r2, [r5, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	f7fb fb68 	bl	800205c <_write>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_write_r+0x1e>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_write_r+0x1e>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	200005a8 	.word	0x200005a8

0800699c <__errno>:
 800699c:	4b01      	ldr	r3, [pc, #4]	; (80069a4 <__errno+0x8>)
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000088 	.word	0x20000088

080069a8 <__libc_init_array>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	4d0d      	ldr	r5, [pc, #52]	; (80069e0 <__libc_init_array+0x38>)
 80069ac:	2600      	movs	r6, #0
 80069ae:	4c0d      	ldr	r4, [pc, #52]	; (80069e4 <__libc_init_array+0x3c>)
 80069b0:	1b64      	subs	r4, r4, r5
 80069b2:	10a4      	asrs	r4, r4, #2
 80069b4:	42a6      	cmp	r6, r4
 80069b6:	d109      	bne.n	80069cc <__libc_init_array+0x24>
 80069b8:	4d0b      	ldr	r5, [pc, #44]	; (80069e8 <__libc_init_array+0x40>)
 80069ba:	2600      	movs	r6, #0
 80069bc:	4c0b      	ldr	r4, [pc, #44]	; (80069ec <__libc_init_array+0x44>)
 80069be:	f002 f8af 	bl	8008b20 <_init>
 80069c2:	1b64      	subs	r4, r4, r5
 80069c4:	10a4      	asrs	r4, r4, #2
 80069c6:	42a6      	cmp	r6, r4
 80069c8:	d105      	bne.n	80069d6 <__libc_init_array+0x2e>
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d0:	3601      	adds	r6, #1
 80069d2:	4798      	blx	r3
 80069d4:	e7ee      	b.n	80069b4 <__libc_init_array+0xc>
 80069d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069da:	3601      	adds	r6, #1
 80069dc:	4798      	blx	r3
 80069de:	e7f2      	b.n	80069c6 <__libc_init_array+0x1e>
 80069e0:	08008f9c 	.word	0x08008f9c
 80069e4:	08008f9c 	.word	0x08008f9c
 80069e8:	08008f9c 	.word	0x08008f9c
 80069ec:	08008fa0 	.word	0x08008fa0

080069f0 <__retarget_lock_init_recursive>:
 80069f0:	4770      	bx	lr

080069f2 <__retarget_lock_acquire_recursive>:
 80069f2:	4770      	bx	lr

080069f4 <__retarget_lock_release_recursive>:
 80069f4:	4770      	bx	lr

080069f6 <memchr>:
 80069f6:	b2c9      	uxtb	r1, r1
 80069f8:	4402      	add	r2, r0
 80069fa:	b510      	push	{r4, lr}
 80069fc:	4290      	cmp	r0, r2
 80069fe:	4603      	mov	r3, r0
 8006a00:	d101      	bne.n	8006a06 <memchr+0x10>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e003      	b.n	8006a0e <memchr+0x18>
 8006a06:	781c      	ldrb	r4, [r3, #0]
 8006a08:	3001      	adds	r0, #1
 8006a0a:	428c      	cmp	r4, r1
 8006a0c:	d1f6      	bne.n	80069fc <memchr+0x6>
 8006a0e:	4618      	mov	r0, r3
 8006a10:	bd10      	pop	{r4, pc}

08006a12 <quorem>:
 8006a12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a16:	6903      	ldr	r3, [r0, #16]
 8006a18:	4607      	mov	r7, r0
 8006a1a:	690c      	ldr	r4, [r1, #16]
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	f2c0 8086 	blt.w	8006b2e <quorem+0x11c>
 8006a22:	3c01      	subs	r4, #1
 8006a24:	f100 0514 	add.w	r5, r0, #20
 8006a28:	f101 0814 	add.w	r8, r1, #20
 8006a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a42:	3301      	adds	r3, #1
 8006a44:	429a      	cmp	r2, r3
 8006a46:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a4a:	d335      	bcc.n	8006ab8 <quorem+0xa6>
 8006a4c:	f04f 0e00 	mov.w	lr, #0
 8006a50:	4640      	mov	r0, r8
 8006a52:	46ac      	mov	ip, r5
 8006a54:	46f2      	mov	sl, lr
 8006a56:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a5a:	b293      	uxth	r3, r2
 8006a5c:	4581      	cmp	r9, r0
 8006a5e:	fb06 e303 	mla	r3, r6, r3, lr
 8006a62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a66:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	fb06 220e 	mla	r2, r6, lr, r2
 8006a70:	ebaa 0303 	sub.w	r3, sl, r3
 8006a74:	f8dc a000 	ldr.w	sl, [ip]
 8006a78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a7c:	fa1f fa8a 	uxth.w	sl, sl
 8006a80:	b292      	uxth	r2, r2
 8006a82:	4453      	add	r3, sl
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	f8dc 3000 	ldr.w	r3, [ip]
 8006a8a:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a94:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006aa0:	f84c 3b04 	str.w	r3, [ip], #4
 8006aa4:	d2d7      	bcs.n	8006a56 <quorem+0x44>
 8006aa6:	f855 300b 	ldr.w	r3, [r5, fp]
 8006aaa:	b92b      	cbnz	r3, 8006ab8 <quorem+0xa6>
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	3b04      	subs	r3, #4
 8006ab0:	429d      	cmp	r5, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	d32f      	bcc.n	8006b16 <quorem+0x104>
 8006ab6:	613c      	str	r4, [r7, #16]
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f001 f9ab 	bl	8007e14 <__mcmp>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	db25      	blt.n	8006b0e <quorem+0xfc>
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006acc:	f8d1 c000 	ldr.w	ip, [r1]
 8006ad0:	b293      	uxth	r3, r2
 8006ad2:	45c1      	cmp	r9, r8
 8006ad4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006ad8:	eba0 0303 	sub.w	r3, r0, r3
 8006adc:	fa1f f08c 	uxth.w	r0, ip
 8006ae0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ae4:	4403      	add	r3, r0
 8006ae6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006af0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006af4:	f841 3b04 	str.w	r3, [r1], #4
 8006af8:	d2e6      	bcs.n	8006ac8 <quorem+0xb6>
 8006afa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b02:	b922      	cbnz	r2, 8006b0e <quorem+0xfc>
 8006b04:	3b04      	subs	r3, #4
 8006b06:	429d      	cmp	r5, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	d30a      	bcc.n	8006b22 <quorem+0x110>
 8006b0c:	613c      	str	r4, [r7, #16]
 8006b0e:	4630      	mov	r0, r6
 8006b10:	b003      	add	sp, #12
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	3b04      	subs	r3, #4
 8006b1a:	2a00      	cmp	r2, #0
 8006b1c:	d1cb      	bne.n	8006ab6 <quorem+0xa4>
 8006b1e:	3c01      	subs	r4, #1
 8006b20:	e7c6      	b.n	8006ab0 <quorem+0x9e>
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	3b04      	subs	r3, #4
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	d1f0      	bne.n	8006b0c <quorem+0xfa>
 8006b2a:	3c01      	subs	r4, #1
 8006b2c:	e7eb      	b.n	8006b06 <quorem+0xf4>
 8006b2e:	2000      	movs	r0, #0
 8006b30:	e7ee      	b.n	8006b10 <quorem+0xfe>
 8006b32:	0000      	movs	r0, r0
 8006b34:	0000      	movs	r0, r0
	...

08006b38 <_dtoa_r>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	69c5      	ldr	r5, [r0, #28]
 8006b3e:	4604      	mov	r4, r0
 8006b40:	ed2d 8b04 	vpush	{d8-d9}
 8006b44:	b093      	sub	sp, #76	; 0x4c
 8006b46:	ec57 6b10 	vmov	r6, r7, d0
 8006b4a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b4e:	9107      	str	r1, [sp, #28]
 8006b50:	920a      	str	r2, [sp, #40]	; 0x28
 8006b52:	930d      	str	r3, [sp, #52]	; 0x34
 8006b54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b58:	b975      	cbnz	r5, 8006b78 <_dtoa_r+0x40>
 8006b5a:	2010      	movs	r0, #16
 8006b5c:	f000 fe28 	bl	80077b0 <malloc>
 8006b60:	4602      	mov	r2, r0
 8006b62:	61e0      	str	r0, [r4, #28]
 8006b64:	b920      	cbnz	r0, 8006b70 <_dtoa_r+0x38>
 8006b66:	4bae      	ldr	r3, [pc, #696]	; (8006e20 <_dtoa_r+0x2e8>)
 8006b68:	21ef      	movs	r1, #239	; 0xef
 8006b6a:	48ae      	ldr	r0, [pc, #696]	; (8006e24 <_dtoa_r+0x2ec>)
 8006b6c:	f001 fc94 	bl	8008498 <__assert_func>
 8006b70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b74:	6005      	str	r5, [r0, #0]
 8006b76:	60c5      	str	r5, [r0, #12]
 8006b78:	69e3      	ldr	r3, [r4, #28]
 8006b7a:	6819      	ldr	r1, [r3, #0]
 8006b7c:	b151      	cbz	r1, 8006b94 <_dtoa_r+0x5c>
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	2301      	movs	r3, #1
 8006b82:	4620      	mov	r0, r4
 8006b84:	4093      	lsls	r3, r2
 8006b86:	604a      	str	r2, [r1, #4]
 8006b88:	608b      	str	r3, [r1, #8]
 8006b8a:	f000 ff05 	bl	8007998 <_Bfree>
 8006b8e:	69e3      	ldr	r3, [r4, #28]
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	1e3b      	subs	r3, r7, #0
 8006b96:	bfb7      	itett	lt
 8006b98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b9c:	2300      	movge	r3, #0
 8006b9e:	2201      	movlt	r2, #1
 8006ba0:	9303      	strlt	r3, [sp, #12]
 8006ba2:	bfac      	ite	ge
 8006ba4:	f8c8 3000 	strge.w	r3, [r8]
 8006ba8:	f8c8 2000 	strlt.w	r2, [r8]
 8006bac:	4b9e      	ldr	r3, [pc, #632]	; (8006e28 <_dtoa_r+0x2f0>)
 8006bae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006bb2:	ea33 0308 	bics.w	r3, r3, r8
 8006bb6:	d11b      	bne.n	8006bf0 <_dtoa_r+0xb8>
 8006bb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006bc4:	4333      	orrs	r3, r6
 8006bc6:	f000 8592 	beq.w	80076ee <_dtoa_r+0xbb6>
 8006bca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bcc:	b963      	cbnz	r3, 8006be8 <_dtoa_r+0xb0>
 8006bce:	4b97      	ldr	r3, [pc, #604]	; (8006e2c <_dtoa_r+0x2f4>)
 8006bd0:	e027      	b.n	8006c22 <_dtoa_r+0xea>
 8006bd2:	4b97      	ldr	r3, [pc, #604]	; (8006e30 <_dtoa_r+0x2f8>)
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	9800      	ldr	r0, [sp, #0]
 8006bde:	b013      	add	sp, #76	; 0x4c
 8006be0:	ecbd 8b04 	vpop	{d8-d9}
 8006be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be8:	4b90      	ldr	r3, [pc, #576]	; (8006e2c <_dtoa_r+0x2f4>)
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	3303      	adds	r3, #3
 8006bee:	e7f3      	b.n	8006bd8 <_dtoa_r+0xa0>
 8006bf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	ec51 0b17 	vmov	r0, r1, d7
 8006bfc:	eeb0 8a47 	vmov.f32	s16, s14
 8006c00:	eef0 8a67 	vmov.f32	s17, s15
 8006c04:	f7f9 ff44 	bl	8000a90 <__aeabi_dcmpeq>
 8006c08:	4681      	mov	r9, r0
 8006c0a:	b160      	cbz	r0, 8006c26 <_dtoa_r+0xee>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8567 	beq.w	80076e8 <_dtoa_r+0xbb0>
 8006c1a:	4b86      	ldr	r3, [pc, #536]	; (8006e34 <_dtoa_r+0x2fc>)
 8006c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	e7da      	b.n	8006bdc <_dtoa_r+0xa4>
 8006c26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006c2a:	eeb0 0a48 	vmov.f32	s0, s16
 8006c2e:	eef0 0a68 	vmov.f32	s1, s17
 8006c32:	aa10      	add	r2, sp, #64	; 0x40
 8006c34:	a911      	add	r1, sp, #68	; 0x44
 8006c36:	4620      	mov	r0, r4
 8006c38:	f001 f998 	bl	8007f6c <__d2b>
 8006c3c:	4682      	mov	sl, r0
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	d07d      	beq.n	8006d3e <_dtoa_r+0x206>
 8006c42:	ee18 3a90 	vmov	r3, s17
 8006c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c56:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c5a:	ec51 0b18 	vmov	r0, r1, d8
 8006c5e:	4619      	mov	r1, r3
 8006c60:	2200      	movs	r2, #0
 8006c62:	4b75      	ldr	r3, [pc, #468]	; (8006e38 <_dtoa_r+0x300>)
 8006c64:	f7f9 faf4 	bl	8000250 <__aeabi_dsub>
 8006c68:	a367      	add	r3, pc, #412	; (adr r3, 8006e08 <_dtoa_r+0x2d0>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f7f9 fca7 	bl	80005c0 <__aeabi_dmul>
 8006c72:	a367      	add	r3, pc, #412	; (adr r3, 8006e10 <_dtoa_r+0x2d8>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f7f9 faec 	bl	8000254 <__adddf3>
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	460f      	mov	r7, r1
 8006c80:	4628      	mov	r0, r5
 8006c82:	f7f9 fc33 	bl	80004ec <__aeabi_i2d>
 8006c86:	a364      	add	r3, pc, #400	; (adr r3, 8006e18 <_dtoa_r+0x2e0>)
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f7f9 fc98 	bl	80005c0 <__aeabi_dmul>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4630      	mov	r0, r6
 8006c96:	4639      	mov	r1, r7
 8006c98:	f7f9 fadc 	bl	8000254 <__adddf3>
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	460f      	mov	r7, r1
 8006ca0:	f7f9 ff3e 	bl	8000b20 <__aeabi_d2iz>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4683      	mov	fp, r0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 fef9 	bl	8000aa4 <__aeabi_dcmplt>
 8006cb2:	b148      	cbz	r0, 8006cc8 <_dtoa_r+0x190>
 8006cb4:	4658      	mov	r0, fp
 8006cb6:	f7f9 fc19 	bl	80004ec <__aeabi_i2d>
 8006cba:	4632      	mov	r2, r6
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	f7f9 fee7 	bl	8000a90 <__aeabi_dcmpeq>
 8006cc2:	b908      	cbnz	r0, 8006cc8 <_dtoa_r+0x190>
 8006cc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cc8:	f1bb 0f16 	cmp.w	fp, #22
 8006ccc:	d857      	bhi.n	8006d7e <_dtoa_r+0x246>
 8006cce:	4b5b      	ldr	r3, [pc, #364]	; (8006e3c <_dtoa_r+0x304>)
 8006cd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006cd4:	ec51 0b18 	vmov	r0, r1, d8
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f7f9 fee2 	bl	8000aa4 <__aeabi_dcmplt>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d04e      	beq.n	8006d82 <_dtoa_r+0x24a>
 8006ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ce8:	2300      	movs	r3, #0
 8006cea:	930c      	str	r3, [sp, #48]	; 0x30
 8006cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cee:	1b5b      	subs	r3, r3, r5
 8006cf0:	1e5a      	subs	r2, r3, #1
 8006cf2:	bf4c      	ite	mi
 8006cf4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006cf8:	2300      	movpl	r3, #0
 8006cfa:	9206      	str	r2, [sp, #24]
 8006cfc:	bf45      	ittet	mi
 8006cfe:	9305      	strmi	r3, [sp, #20]
 8006d00:	2300      	movmi	r3, #0
 8006d02:	9305      	strpl	r3, [sp, #20]
 8006d04:	9306      	strmi	r3, [sp, #24]
 8006d06:	f1bb 0f00 	cmp.w	fp, #0
 8006d0a:	db3c      	blt.n	8006d86 <_dtoa_r+0x24e>
 8006d0c:	9b06      	ldr	r3, [sp, #24]
 8006d0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006d12:	445b      	add	r3, fp
 8006d14:	9306      	str	r3, [sp, #24]
 8006d16:	2300      	movs	r3, #0
 8006d18:	9308      	str	r3, [sp, #32]
 8006d1a:	9b07      	ldr	r3, [sp, #28]
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	d868      	bhi.n	8006df2 <_dtoa_r+0x2ba>
 8006d20:	2b05      	cmp	r3, #5
 8006d22:	bfc5      	ittet	gt
 8006d24:	3b04      	subgt	r3, #4
 8006d26:	2500      	movgt	r5, #0
 8006d28:	2501      	movle	r5, #1
 8006d2a:	9307      	strgt	r3, [sp, #28]
 8006d2c:	9b07      	ldr	r3, [sp, #28]
 8006d2e:	3b02      	subs	r3, #2
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	f200 8087 	bhi.w	8006e44 <_dtoa_r+0x30c>
 8006d36:	e8df f003 	tbb	[pc, r3]
 8006d3a:	3d30      	.short	0x3d30
 8006d3c:	5a3b      	.short	0x5a3b
 8006d3e:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d42:	441d      	add	r5, r3
 8006d44:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	bfc9      	itett	gt
 8006d4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d50:	f1c3 0320 	rsble	r3, r3, #32
 8006d54:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006d5c:	bfd8      	it	le
 8006d5e:	fa06 f003 	lslle.w	r0, r6, r3
 8006d62:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d66:	bfc4      	itt	gt
 8006d68:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d6c:	ea48 0003 	orrgt.w	r0, r8, r3
 8006d70:	f7f9 fbac 	bl	80004cc <__aeabi_ui2d>
 8006d74:	2201      	movs	r2, #1
 8006d76:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d7a:	920e      	str	r2, [sp, #56]	; 0x38
 8006d7c:	e76f      	b.n	8006c5e <_dtoa_r+0x126>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e7b3      	b.n	8006cea <_dtoa_r+0x1b2>
 8006d82:	900c      	str	r0, [sp, #48]	; 0x30
 8006d84:	e7b2      	b.n	8006cec <_dtoa_r+0x1b4>
 8006d86:	9b05      	ldr	r3, [sp, #20]
 8006d88:	eba3 030b 	sub.w	r3, r3, fp
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	f1cb 0300 	rsb	r3, fp, #0
 8006d92:	9308      	str	r3, [sp, #32]
 8006d94:	2300      	movs	r3, #0
 8006d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d98:	e7bf      	b.n	8006d1a <_dtoa_r+0x1e2>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc52      	bgt.n	8006e4a <_dtoa_r+0x312>
 8006da4:	2301      	movs	r3, #1
 8006da6:	461a      	mov	r2, r3
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	920a      	str	r2, [sp, #40]	; 0x28
 8006dae:	e00b      	b.n	8006dc8 <_dtoa_r+0x290>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e7f3      	b.n	8006d9c <_dtoa_r+0x264>
 8006db4:	2300      	movs	r3, #0
 8006db6:	9309      	str	r3, [sp, #36]	; 0x24
 8006db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dba:	445b      	add	r3, fp
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	9304      	str	r3, [sp, #16]
 8006dc4:	bfb8      	it	lt
 8006dc6:	2301      	movlt	r3, #1
 8006dc8:	69e0      	ldr	r0, [r4, #28]
 8006dca:	2100      	movs	r1, #0
 8006dcc:	2204      	movs	r2, #4
 8006dce:	f102 0614 	add.w	r6, r2, #20
 8006dd2:	429e      	cmp	r6, r3
 8006dd4:	d93d      	bls.n	8006e52 <_dtoa_r+0x31a>
 8006dd6:	6041      	str	r1, [r0, #4]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 fd9d 	bl	8007918 <_Balloc>
 8006dde:	9000      	str	r0, [sp, #0]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d139      	bne.n	8006e58 <_dtoa_r+0x320>
 8006de4:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <_dtoa_r+0x308>)
 8006de6:	4602      	mov	r2, r0
 8006de8:	f240 11af 	movw	r1, #431	; 0x1af
 8006dec:	e6bd      	b.n	8006b6a <_dtoa_r+0x32>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e7e1      	b.n	8006db6 <_dtoa_r+0x27e>
 8006df2:	2501      	movs	r5, #1
 8006df4:	2300      	movs	r3, #0
 8006df6:	9509      	str	r5, [sp, #36]	; 0x24
 8006df8:	9307      	str	r3, [sp, #28]
 8006dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfe:	2200      	movs	r2, #0
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	9304      	str	r3, [sp, #16]
 8006e04:	2312      	movs	r3, #18
 8006e06:	e7d1      	b.n	8006dac <_dtoa_r+0x274>
 8006e08:	636f4361 	.word	0x636f4361
 8006e0c:	3fd287a7 	.word	0x3fd287a7
 8006e10:	8b60c8b3 	.word	0x8b60c8b3
 8006e14:	3fc68a28 	.word	0x3fc68a28
 8006e18:	509f79fb 	.word	0x509f79fb
 8006e1c:	3fd34413 	.word	0x3fd34413
 8006e20:	08008c61 	.word	0x08008c61
 8006e24:	08008c78 	.word	0x08008c78
 8006e28:	7ff00000 	.word	0x7ff00000
 8006e2c:	08008c5d 	.word	0x08008c5d
 8006e30:	08008c54 	.word	0x08008c54
 8006e34:	08008c31 	.word	0x08008c31
 8006e38:	3ff80000 	.word	0x3ff80000
 8006e3c:	08008d68 	.word	0x08008d68
 8006e40:	08008cd0 	.word	0x08008cd0
 8006e44:	2301      	movs	r3, #1
 8006e46:	9309      	str	r3, [sp, #36]	; 0x24
 8006e48:	e7d7      	b.n	8006dfa <_dtoa_r+0x2c2>
 8006e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	9304      	str	r3, [sp, #16]
 8006e50:	e7ba      	b.n	8006dc8 <_dtoa_r+0x290>
 8006e52:	3101      	adds	r1, #1
 8006e54:	0052      	lsls	r2, r2, #1
 8006e56:	e7ba      	b.n	8006dce <_dtoa_r+0x296>
 8006e58:	69e3      	ldr	r3, [r4, #28]
 8006e5a:	9a00      	ldr	r2, [sp, #0]
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	9b04      	ldr	r3, [sp, #16]
 8006e60:	2b0e      	cmp	r3, #14
 8006e62:	f200 80a8 	bhi.w	8006fb6 <_dtoa_r+0x47e>
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	f000 80a5 	beq.w	8006fb6 <_dtoa_r+0x47e>
 8006e6c:	f1bb 0f00 	cmp.w	fp, #0
 8006e70:	dd38      	ble.n	8006ee4 <_dtoa_r+0x3ac>
 8006e72:	f00b 020f 	and.w	r2, fp, #15
 8006e76:	4bbf      	ldr	r3, [pc, #764]	; (8007174 <_dtoa_r+0x63c>)
 8006e78:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e84:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006e88:	d019      	beq.n	8006ebe <_dtoa_r+0x386>
 8006e8a:	4bbb      	ldr	r3, [pc, #748]	; (8007178 <_dtoa_r+0x640>)
 8006e8c:	f008 080f 	and.w	r8, r8, #15
 8006e90:	2503      	movs	r5, #3
 8006e92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e96:	ec51 0b18 	vmov	r0, r1, d8
 8006e9a:	f7f9 fcbb 	bl	8000814 <__aeabi_ddiv>
 8006e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ea2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007178 <_dtoa_r+0x640>
 8006ea6:	f1b8 0f00 	cmp.w	r8, #0
 8006eaa:	d10a      	bne.n	8006ec2 <_dtoa_r+0x38a>
 8006eac:	4632      	mov	r2, r6
 8006eae:	463b      	mov	r3, r7
 8006eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb4:	f7f9 fcae 	bl	8000814 <__aeabi_ddiv>
 8006eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ebc:	e02b      	b.n	8006f16 <_dtoa_r+0x3de>
 8006ebe:	2502      	movs	r5, #2
 8006ec0:	e7ef      	b.n	8006ea2 <_dtoa_r+0x36a>
 8006ec2:	f018 0f01 	tst.w	r8, #1
 8006ec6:	d008      	beq.n	8006eda <_dtoa_r+0x3a2>
 8006ec8:	4630      	mov	r0, r6
 8006eca:	4639      	mov	r1, r7
 8006ecc:	3501      	adds	r5, #1
 8006ece:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ed2:	f7f9 fb75 	bl	80005c0 <__aeabi_dmul>
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	460f      	mov	r7, r1
 8006eda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ede:	f109 0908 	add.w	r9, r9, #8
 8006ee2:	e7e0      	b.n	8006ea6 <_dtoa_r+0x36e>
 8006ee4:	f000 809f 	beq.w	8007026 <_dtoa_r+0x4ee>
 8006ee8:	f1cb 0600 	rsb	r6, fp, #0
 8006eec:	4ba1      	ldr	r3, [pc, #644]	; (8007174 <_dtoa_r+0x63c>)
 8006eee:	4fa2      	ldr	r7, [pc, #648]	; (8007178 <_dtoa_r+0x640>)
 8006ef0:	2502      	movs	r5, #2
 8006ef2:	f006 020f 	and.w	r2, r6, #15
 8006ef6:	1136      	asrs	r6, r6, #4
 8006ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006efc:	ec51 0b18 	vmov	r0, r1, d8
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 fb5c 	bl	80005c0 <__aeabi_dmul>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f0e:	2e00      	cmp	r6, #0
 8006f10:	d17e      	bne.n	8007010 <_dtoa_r+0x4d8>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1d0      	bne.n	8006eb8 <_dtoa_r+0x380>
 8006f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8084 	beq.w	800702a <_dtoa_r+0x4f2>
 8006f22:	2200      	movs	r2, #0
 8006f24:	4b95      	ldr	r3, [pc, #596]	; (800717c <_dtoa_r+0x644>)
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fdbb 	bl	8000aa4 <__aeabi_dcmplt>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d07b      	beq.n	800702a <_dtoa_r+0x4f2>
 8006f32:	9b04      	ldr	r3, [sp, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d078      	beq.n	800702a <_dtoa_r+0x4f2>
 8006f38:	9b01      	ldr	r3, [sp, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dd39      	ble.n	8006fb2 <_dtoa_r+0x47a>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	4b8f      	ldr	r3, [pc, #572]	; (8007180 <_dtoa_r+0x648>)
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 fb3b 	bl	80005c0 <__aeabi_dmul>
 8006f4a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006f4e:	3501      	adds	r5, #1
 8006f50:	9e01      	ldr	r6, [sp, #4]
 8006f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7f9 fac6 	bl	80004ec <__aeabi_i2d>
 8006f60:	4642      	mov	r2, r8
 8006f62:	464b      	mov	r3, r9
 8006f64:	f7f9 fb2c 	bl	80005c0 <__aeabi_dmul>
 8006f68:	4b86      	ldr	r3, [pc, #536]	; (8007184 <_dtoa_r+0x64c>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f7f9 f972 	bl	8000254 <__adddf3>
 8006f70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f78:	9303      	str	r3, [sp, #12]
 8006f7a:	2e00      	cmp	r6, #0
 8006f7c:	d158      	bne.n	8007030 <_dtoa_r+0x4f8>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b81      	ldr	r3, [pc, #516]	; (8007188 <_dtoa_r+0x650>)
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 f963 	bl	8000250 <__aeabi_dsub>
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	4689      	mov	r9, r1
 8006f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f92:	f7f9 fda5 	bl	8000ae0 <__aeabi_dcmpgt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f040 8296 	bne.w	80074c8 <_dtoa_r+0x990>
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006fa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7f9 fd7c 	bl	8000aa4 <__aeabi_dcmplt>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f040 8289 	bne.w	80074c4 <_dtoa_r+0x98c>
 8006fb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f2c0 814e 	blt.w	800725a <_dtoa_r+0x722>
 8006fbe:	f1bb 0f0e 	cmp.w	fp, #14
 8006fc2:	f300 814a 	bgt.w	800725a <_dtoa_r+0x722>
 8006fc6:	4b6b      	ldr	r3, [pc, #428]	; (8007174 <_dtoa_r+0x63c>)
 8006fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f280 80dc 	bge.w	8007190 <_dtoa_r+0x658>
 8006fd8:	9b04      	ldr	r3, [sp, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f300 80d8 	bgt.w	8007190 <_dtoa_r+0x658>
 8006fe0:	f040 826f 	bne.w	80074c2 <_dtoa_r+0x98a>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4b68      	ldr	r3, [pc, #416]	; (8007188 <_dtoa_r+0x650>)
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	f7f9 fae8 	bl	80005c0 <__aeabi_dmul>
 8006ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ff4:	f7f9 fd6a 	bl	8000acc <__aeabi_dcmpge>
 8006ff8:	9e04      	ldr	r6, [sp, #16]
 8006ffa:	4637      	mov	r7, r6
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f040 8245 	bne.w	800748c <_dtoa_r+0x954>
 8007002:	9d00      	ldr	r5, [sp, #0]
 8007004:	2331      	movs	r3, #49	; 0x31
 8007006:	f10b 0b01 	add.w	fp, fp, #1
 800700a:	f805 3b01 	strb.w	r3, [r5], #1
 800700e:	e241      	b.n	8007494 <_dtoa_r+0x95c>
 8007010:	07f2      	lsls	r2, r6, #31
 8007012:	d505      	bpl.n	8007020 <_dtoa_r+0x4e8>
 8007014:	3501      	adds	r5, #1
 8007016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800701a:	f7f9 fad1 	bl	80005c0 <__aeabi_dmul>
 800701e:	2301      	movs	r3, #1
 8007020:	1076      	asrs	r6, r6, #1
 8007022:	3708      	adds	r7, #8
 8007024:	e773      	b.n	8006f0e <_dtoa_r+0x3d6>
 8007026:	2502      	movs	r5, #2
 8007028:	e775      	b.n	8006f16 <_dtoa_r+0x3de>
 800702a:	465f      	mov	r7, fp
 800702c:	9e04      	ldr	r6, [sp, #16]
 800702e:	e792      	b.n	8006f56 <_dtoa_r+0x41e>
 8007030:	9900      	ldr	r1, [sp, #0]
 8007032:	4b50      	ldr	r3, [pc, #320]	; (8007174 <_dtoa_r+0x63c>)
 8007034:	4431      	add	r1, r6
 8007036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800703a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800703e:	9102      	str	r1, [sp, #8]
 8007040:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007042:	eeb0 9a47 	vmov.f32	s18, s14
 8007046:	eef0 9a67 	vmov.f32	s19, s15
 800704a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800704e:	2900      	cmp	r1, #0
 8007050:	d044      	beq.n	80070dc <_dtoa_r+0x5a4>
 8007052:	2000      	movs	r0, #0
 8007054:	494d      	ldr	r1, [pc, #308]	; (800718c <_dtoa_r+0x654>)
 8007056:	f7f9 fbdd 	bl	8000814 <__aeabi_ddiv>
 800705a:	ec53 2b19 	vmov	r2, r3, d9
 800705e:	f7f9 f8f7 	bl	8000250 <__aeabi_dsub>
 8007062:	9d00      	ldr	r5, [sp, #0]
 8007064:	ec41 0b19 	vmov	d9, r0, r1
 8007068:	4649      	mov	r1, r9
 800706a:	4640      	mov	r0, r8
 800706c:	f7f9 fd58 	bl	8000b20 <__aeabi_d2iz>
 8007070:	4606      	mov	r6, r0
 8007072:	f7f9 fa3b 	bl	80004ec <__aeabi_i2d>
 8007076:	4602      	mov	r2, r0
 8007078:	3630      	adds	r6, #48	; 0x30
 800707a:	460b      	mov	r3, r1
 800707c:	4640      	mov	r0, r8
 800707e:	4649      	mov	r1, r9
 8007080:	f7f9 f8e6 	bl	8000250 <__aeabi_dsub>
 8007084:	f805 6b01 	strb.w	r6, [r5], #1
 8007088:	4680      	mov	r8, r0
 800708a:	4689      	mov	r9, r1
 800708c:	ec53 2b19 	vmov	r2, r3, d9
 8007090:	f7f9 fd08 	bl	8000aa4 <__aeabi_dcmplt>
 8007094:	2800      	cmp	r0, #0
 8007096:	d164      	bne.n	8007162 <_dtoa_r+0x62a>
 8007098:	4642      	mov	r2, r8
 800709a:	464b      	mov	r3, r9
 800709c:	2000      	movs	r0, #0
 800709e:	4937      	ldr	r1, [pc, #220]	; (800717c <_dtoa_r+0x644>)
 80070a0:	f7f9 f8d6 	bl	8000250 <__aeabi_dsub>
 80070a4:	ec53 2b19 	vmov	r2, r3, d9
 80070a8:	f7f9 fcfc 	bl	8000aa4 <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f040 80b6 	bne.w	800721e <_dtoa_r+0x6e6>
 80070b2:	9b02      	ldr	r3, [sp, #8]
 80070b4:	429d      	cmp	r5, r3
 80070b6:	f43f af7c 	beq.w	8006fb2 <_dtoa_r+0x47a>
 80070ba:	2200      	movs	r2, #0
 80070bc:	4b30      	ldr	r3, [pc, #192]	; (8007180 <_dtoa_r+0x648>)
 80070be:	ec51 0b19 	vmov	r0, r1, d9
 80070c2:	f7f9 fa7d 	bl	80005c0 <__aeabi_dmul>
 80070c6:	2200      	movs	r2, #0
 80070c8:	4b2d      	ldr	r3, [pc, #180]	; (8007180 <_dtoa_r+0x648>)
 80070ca:	ec41 0b19 	vmov	d9, r0, r1
 80070ce:	4640      	mov	r0, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	f7f9 fa75 	bl	80005c0 <__aeabi_dmul>
 80070d6:	4680      	mov	r8, r0
 80070d8:	4689      	mov	r9, r1
 80070da:	e7c5      	b.n	8007068 <_dtoa_r+0x530>
 80070dc:	ec51 0b17 	vmov	r0, r1, d7
 80070e0:	f7f9 fa6e 	bl	80005c0 <__aeabi_dmul>
 80070e4:	9b02      	ldr	r3, [sp, #8]
 80070e6:	9d00      	ldr	r5, [sp, #0]
 80070e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80070ea:	ec41 0b19 	vmov	d9, r0, r1
 80070ee:	4649      	mov	r1, r9
 80070f0:	4640      	mov	r0, r8
 80070f2:	f7f9 fd15 	bl	8000b20 <__aeabi_d2iz>
 80070f6:	4606      	mov	r6, r0
 80070f8:	f7f9 f9f8 	bl	80004ec <__aeabi_i2d>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4640      	mov	r0, r8
 8007102:	4649      	mov	r1, r9
 8007104:	3630      	adds	r6, #48	; 0x30
 8007106:	f7f9 f8a3 	bl	8000250 <__aeabi_dsub>
 800710a:	9b02      	ldr	r3, [sp, #8]
 800710c:	f805 6b01 	strb.w	r6, [r5], #1
 8007110:	4680      	mov	r8, r0
 8007112:	429d      	cmp	r5, r3
 8007114:	4689      	mov	r9, r1
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	d124      	bne.n	8007166 <_dtoa_r+0x62e>
 800711c:	4b1b      	ldr	r3, [pc, #108]	; (800718c <_dtoa_r+0x654>)
 800711e:	ec51 0b19 	vmov	r0, r1, d9
 8007122:	f7f9 f897 	bl	8000254 <__adddf3>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4640      	mov	r0, r8
 800712c:	4649      	mov	r1, r9
 800712e:	f7f9 fcd7 	bl	8000ae0 <__aeabi_dcmpgt>
 8007132:	2800      	cmp	r0, #0
 8007134:	d173      	bne.n	800721e <_dtoa_r+0x6e6>
 8007136:	2000      	movs	r0, #0
 8007138:	4914      	ldr	r1, [pc, #80]	; (800718c <_dtoa_r+0x654>)
 800713a:	ec53 2b19 	vmov	r2, r3, d9
 800713e:	f7f9 f887 	bl	8000250 <__aeabi_dsub>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4640      	mov	r0, r8
 8007148:	4649      	mov	r1, r9
 800714a:	f7f9 fcab 	bl	8000aa4 <__aeabi_dcmplt>
 800714e:	2800      	cmp	r0, #0
 8007150:	f43f af2f 	beq.w	8006fb2 <_dtoa_r+0x47a>
 8007154:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007156:	1e6b      	subs	r3, r5, #1
 8007158:	930f      	str	r3, [sp, #60]	; 0x3c
 800715a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800715e:	2b30      	cmp	r3, #48	; 0x30
 8007160:	d0f8      	beq.n	8007154 <_dtoa_r+0x61c>
 8007162:	46bb      	mov	fp, r7
 8007164:	e04a      	b.n	80071fc <_dtoa_r+0x6c4>
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <_dtoa_r+0x648>)
 8007168:	f7f9 fa2a 	bl	80005c0 <__aeabi_dmul>
 800716c:	4680      	mov	r8, r0
 800716e:	4689      	mov	r9, r1
 8007170:	e7bd      	b.n	80070ee <_dtoa_r+0x5b6>
 8007172:	bf00      	nop
 8007174:	08008d68 	.word	0x08008d68
 8007178:	08008d40 	.word	0x08008d40
 800717c:	3ff00000 	.word	0x3ff00000
 8007180:	40240000 	.word	0x40240000
 8007184:	401c0000 	.word	0x401c0000
 8007188:	40140000 	.word	0x40140000
 800718c:	3fe00000 	.word	0x3fe00000
 8007190:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007194:	9d00      	ldr	r5, [sp, #0]
 8007196:	4642      	mov	r2, r8
 8007198:	464b      	mov	r3, r9
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 fb39 	bl	8000814 <__aeabi_ddiv>
 80071a2:	f7f9 fcbd 	bl	8000b20 <__aeabi_d2iz>
 80071a6:	9001      	str	r0, [sp, #4]
 80071a8:	f7f9 f9a0 	bl	80004ec <__aeabi_i2d>
 80071ac:	4642      	mov	r2, r8
 80071ae:	464b      	mov	r3, r9
 80071b0:	f7f9 fa06 	bl	80005c0 <__aeabi_dmul>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4630      	mov	r0, r6
 80071ba:	4639      	mov	r1, r7
 80071bc:	f7f9 f848 	bl	8000250 <__aeabi_dsub>
 80071c0:	9e01      	ldr	r6, [sp, #4]
 80071c2:	9f04      	ldr	r7, [sp, #16]
 80071c4:	4602      	mov	r2, r0
 80071c6:	3630      	adds	r6, #48	; 0x30
 80071c8:	460b      	mov	r3, r1
 80071ca:	f805 6b01 	strb.w	r6, [r5], #1
 80071ce:	9e00      	ldr	r6, [sp, #0]
 80071d0:	1bae      	subs	r6, r5, r6
 80071d2:	42b7      	cmp	r7, r6
 80071d4:	d134      	bne.n	8007240 <_dtoa_r+0x708>
 80071d6:	f7f9 f83d 	bl	8000254 <__adddf3>
 80071da:	4642      	mov	r2, r8
 80071dc:	464b      	mov	r3, r9
 80071de:	4606      	mov	r6, r0
 80071e0:	460f      	mov	r7, r1
 80071e2:	f7f9 fc7d 	bl	8000ae0 <__aeabi_dcmpgt>
 80071e6:	b9c8      	cbnz	r0, 800721c <_dtoa_r+0x6e4>
 80071e8:	4642      	mov	r2, r8
 80071ea:	464b      	mov	r3, r9
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7f9 fc4e 	bl	8000a90 <__aeabi_dcmpeq>
 80071f4:	b110      	cbz	r0, 80071fc <_dtoa_r+0x6c4>
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	07db      	lsls	r3, r3, #31
 80071fa:	d40f      	bmi.n	800721c <_dtoa_r+0x6e4>
 80071fc:	4651      	mov	r1, sl
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 fbca 	bl	8007998 <_Bfree>
 8007204:	2300      	movs	r3, #0
 8007206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007208:	702b      	strb	r3, [r5, #0]
 800720a:	f10b 0301 	add.w	r3, fp, #1
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007212:	2b00      	cmp	r3, #0
 8007214:	f43f ace2 	beq.w	8006bdc <_dtoa_r+0xa4>
 8007218:	601d      	str	r5, [r3, #0]
 800721a:	e4df      	b.n	8006bdc <_dtoa_r+0xa4>
 800721c:	465f      	mov	r7, fp
 800721e:	462b      	mov	r3, r5
 8007220:	461d      	mov	r5, r3
 8007222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007226:	2a39      	cmp	r2, #57	; 0x39
 8007228:	d106      	bne.n	8007238 <_dtoa_r+0x700>
 800722a:	9a00      	ldr	r2, [sp, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d1f7      	bne.n	8007220 <_dtoa_r+0x6e8>
 8007230:	2230      	movs	r2, #48	; 0x30
 8007232:	9900      	ldr	r1, [sp, #0]
 8007234:	3701      	adds	r7, #1
 8007236:	700a      	strb	r2, [r1, #0]
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	3201      	adds	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e790      	b.n	8007162 <_dtoa_r+0x62a>
 8007240:	2200      	movs	r2, #0
 8007242:	4ba3      	ldr	r3, [pc, #652]	; (80074d0 <_dtoa_r+0x998>)
 8007244:	f7f9 f9bc 	bl	80005c0 <__aeabi_dmul>
 8007248:	2200      	movs	r2, #0
 800724a:	2300      	movs	r3, #0
 800724c:	4606      	mov	r6, r0
 800724e:	460f      	mov	r7, r1
 8007250:	f7f9 fc1e 	bl	8000a90 <__aeabi_dcmpeq>
 8007254:	2800      	cmp	r0, #0
 8007256:	d09e      	beq.n	8007196 <_dtoa_r+0x65e>
 8007258:	e7d0      	b.n	80071fc <_dtoa_r+0x6c4>
 800725a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800725c:	2a00      	cmp	r2, #0
 800725e:	f000 80ca 	beq.w	80073f6 <_dtoa_r+0x8be>
 8007262:	9a07      	ldr	r2, [sp, #28]
 8007264:	2a01      	cmp	r2, #1
 8007266:	f300 80ad 	bgt.w	80073c4 <_dtoa_r+0x88c>
 800726a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800726c:	2a00      	cmp	r2, #0
 800726e:	f000 80a5 	beq.w	80073bc <_dtoa_r+0x884>
 8007272:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007276:	9e08      	ldr	r6, [sp, #32]
 8007278:	9d05      	ldr	r5, [sp, #20]
 800727a:	9a05      	ldr	r2, [sp, #20]
 800727c:	2101      	movs	r1, #1
 800727e:	4620      	mov	r0, r4
 8007280:	441a      	add	r2, r3
 8007282:	9205      	str	r2, [sp, #20]
 8007284:	9a06      	ldr	r2, [sp, #24]
 8007286:	441a      	add	r2, r3
 8007288:	9206      	str	r2, [sp, #24]
 800728a:	f000 fc3d 	bl	8007b08 <__i2b>
 800728e:	4607      	mov	r7, r0
 8007290:	b165      	cbz	r5, 80072ac <_dtoa_r+0x774>
 8007292:	9b06      	ldr	r3, [sp, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	dd09      	ble.n	80072ac <_dtoa_r+0x774>
 8007298:	42ab      	cmp	r3, r5
 800729a:	9a05      	ldr	r2, [sp, #20]
 800729c:	bfa8      	it	ge
 800729e:	462b      	movge	r3, r5
 80072a0:	1ad2      	subs	r2, r2, r3
 80072a2:	1aed      	subs	r5, r5, r3
 80072a4:	9205      	str	r2, [sp, #20]
 80072a6:	9a06      	ldr	r2, [sp, #24]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	9306      	str	r3, [sp, #24]
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	b1f3      	cbz	r3, 80072ee <_dtoa_r+0x7b6>
 80072b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80a3 	beq.w	80073fe <_dtoa_r+0x8c6>
 80072b8:	2e00      	cmp	r6, #0
 80072ba:	dd10      	ble.n	80072de <_dtoa_r+0x7a6>
 80072bc:	4639      	mov	r1, r7
 80072be:	4632      	mov	r2, r6
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fce1 	bl	8007c88 <__pow5mult>
 80072c6:	4652      	mov	r2, sl
 80072c8:	4601      	mov	r1, r0
 80072ca:	4607      	mov	r7, r0
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 fc31 	bl	8007b34 <__multiply>
 80072d2:	4680      	mov	r8, r0
 80072d4:	4651      	mov	r1, sl
 80072d6:	4620      	mov	r0, r4
 80072d8:	46c2      	mov	sl, r8
 80072da:	f000 fb5d 	bl	8007998 <_Bfree>
 80072de:	9b08      	ldr	r3, [sp, #32]
 80072e0:	1b9a      	subs	r2, r3, r6
 80072e2:	d004      	beq.n	80072ee <_dtoa_r+0x7b6>
 80072e4:	4651      	mov	r1, sl
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 fcce 	bl	8007c88 <__pow5mult>
 80072ec:	4682      	mov	sl, r0
 80072ee:	2101      	movs	r1, #1
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fc09 	bl	8007b08 <__i2b>
 80072f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f8:	4606      	mov	r6, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f340 8081 	ble.w	8007402 <_dtoa_r+0x8ca>
 8007300:	461a      	mov	r2, r3
 8007302:	4601      	mov	r1, r0
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fcbf 	bl	8007c88 <__pow5mult>
 800730a:	9b07      	ldr	r3, [sp, #28]
 800730c:	4606      	mov	r6, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	dd7a      	ble.n	8007408 <_dtoa_r+0x8d0>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	6933      	ldr	r3, [r6, #16]
 8007318:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800731c:	6918      	ldr	r0, [r3, #16]
 800731e:	f000 fba5 	bl	8007a6c <__hi0bits>
 8007322:	f1c0 0020 	rsb	r0, r0, #32
 8007326:	9b06      	ldr	r3, [sp, #24]
 8007328:	4418      	add	r0, r3
 800732a:	f010 001f 	ands.w	r0, r0, #31
 800732e:	f000 8094 	beq.w	800745a <_dtoa_r+0x922>
 8007332:	f1c0 0320 	rsb	r3, r0, #32
 8007336:	2b04      	cmp	r3, #4
 8007338:	f340 8085 	ble.w	8007446 <_dtoa_r+0x90e>
 800733c:	f1c0 001c 	rsb	r0, r0, #28
 8007340:	9b05      	ldr	r3, [sp, #20]
 8007342:	4403      	add	r3, r0
 8007344:	4405      	add	r5, r0
 8007346:	9305      	str	r3, [sp, #20]
 8007348:	9b06      	ldr	r3, [sp, #24]
 800734a:	4403      	add	r3, r0
 800734c:	9306      	str	r3, [sp, #24]
 800734e:	9b05      	ldr	r3, [sp, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	dd05      	ble.n	8007360 <_dtoa_r+0x828>
 8007354:	4651      	mov	r1, sl
 8007356:	461a      	mov	r2, r3
 8007358:	4620      	mov	r0, r4
 800735a:	f000 fcef 	bl	8007d3c <__lshift>
 800735e:	4682      	mov	sl, r0
 8007360:	9b06      	ldr	r3, [sp, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	dd05      	ble.n	8007372 <_dtoa_r+0x83a>
 8007366:	4631      	mov	r1, r6
 8007368:	461a      	mov	r2, r3
 800736a:	4620      	mov	r0, r4
 800736c:	f000 fce6 	bl	8007d3c <__lshift>
 8007370:	4606      	mov	r6, r0
 8007372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	d072      	beq.n	800745e <_dtoa_r+0x926>
 8007378:	4631      	mov	r1, r6
 800737a:	4650      	mov	r0, sl
 800737c:	f000 fd4a 	bl	8007e14 <__mcmp>
 8007380:	2800      	cmp	r0, #0
 8007382:	da6c      	bge.n	800745e <_dtoa_r+0x926>
 8007384:	2300      	movs	r3, #0
 8007386:	4651      	mov	r1, sl
 8007388:	220a      	movs	r2, #10
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fb26 	bl	80079dc <__multadd>
 8007390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007392:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007396:	4682      	mov	sl, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 81af 	beq.w	80076fc <_dtoa_r+0xbc4>
 800739e:	2300      	movs	r3, #0
 80073a0:	4639      	mov	r1, r7
 80073a2:	220a      	movs	r2, #10
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 fb19 	bl	80079dc <__multadd>
 80073aa:	9b01      	ldr	r3, [sp, #4]
 80073ac:	4607      	mov	r7, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f300 8096 	bgt.w	80074e0 <_dtoa_r+0x9a8>
 80073b4:	9b07      	ldr	r3, [sp, #28]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	dc59      	bgt.n	800746e <_dtoa_r+0x936>
 80073ba:	e091      	b.n	80074e0 <_dtoa_r+0x9a8>
 80073bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073c2:	e758      	b.n	8007276 <_dtoa_r+0x73e>
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	1e5e      	subs	r6, r3, #1
 80073c8:	9b08      	ldr	r3, [sp, #32]
 80073ca:	42b3      	cmp	r3, r6
 80073cc:	bfb7      	itett	lt
 80073ce:	9b08      	ldrlt	r3, [sp, #32]
 80073d0:	1b9e      	subge	r6, r3, r6
 80073d2:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80073d4:	1af3      	sublt	r3, r6, r3
 80073d6:	bfbe      	ittt	lt
 80073d8:	9608      	strlt	r6, [sp, #32]
 80073da:	2600      	movlt	r6, #0
 80073dc:	18d2      	addlt	r2, r2, r3
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	bfb8      	it	lt
 80073e2:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bfb7      	itett	lt
 80073e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80073ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80073f0:	1a9d      	sublt	r5, r3, r2
 80073f2:	2300      	movlt	r3, #0
 80073f4:	e741      	b.n	800727a <_dtoa_r+0x742>
 80073f6:	9e08      	ldr	r6, [sp, #32]
 80073f8:	9d05      	ldr	r5, [sp, #20]
 80073fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073fc:	e748      	b.n	8007290 <_dtoa_r+0x758>
 80073fe:	9a08      	ldr	r2, [sp, #32]
 8007400:	e770      	b.n	80072e4 <_dtoa_r+0x7ac>
 8007402:	9b07      	ldr	r3, [sp, #28]
 8007404:	2b01      	cmp	r3, #1
 8007406:	dc19      	bgt.n	800743c <_dtoa_r+0x904>
 8007408:	9b02      	ldr	r3, [sp, #8]
 800740a:	b9bb      	cbnz	r3, 800743c <_dtoa_r+0x904>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007412:	b99b      	cbnz	r3, 800743c <_dtoa_r+0x904>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800741a:	0d1b      	lsrs	r3, r3, #20
 800741c:	051b      	lsls	r3, r3, #20
 800741e:	b183      	cbz	r3, 8007442 <_dtoa_r+0x90a>
 8007420:	9b05      	ldr	r3, [sp, #20]
 8007422:	f04f 0801 	mov.w	r8, #1
 8007426:	3301      	adds	r3, #1
 8007428:	9305      	str	r3, [sp, #20]
 800742a:	9b06      	ldr	r3, [sp, #24]
 800742c:	3301      	adds	r3, #1
 800742e:	9306      	str	r3, [sp, #24]
 8007430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007432:	2b00      	cmp	r3, #0
 8007434:	f47f af6f 	bne.w	8007316 <_dtoa_r+0x7de>
 8007438:	2001      	movs	r0, #1
 800743a:	e774      	b.n	8007326 <_dtoa_r+0x7ee>
 800743c:	f04f 0800 	mov.w	r8, #0
 8007440:	e7f6      	b.n	8007430 <_dtoa_r+0x8f8>
 8007442:	4698      	mov	r8, r3
 8007444:	e7f4      	b.n	8007430 <_dtoa_r+0x8f8>
 8007446:	d082      	beq.n	800734e <_dtoa_r+0x816>
 8007448:	331c      	adds	r3, #28
 800744a:	9a05      	ldr	r2, [sp, #20]
 800744c:	441a      	add	r2, r3
 800744e:	441d      	add	r5, r3
 8007450:	9205      	str	r2, [sp, #20]
 8007452:	9a06      	ldr	r2, [sp, #24]
 8007454:	441a      	add	r2, r3
 8007456:	9206      	str	r2, [sp, #24]
 8007458:	e779      	b.n	800734e <_dtoa_r+0x816>
 800745a:	4603      	mov	r3, r0
 800745c:	e7f4      	b.n	8007448 <_dtoa_r+0x910>
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	dc37      	bgt.n	80074d4 <_dtoa_r+0x99c>
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	2b02      	cmp	r3, #2
 8007468:	dd34      	ble.n	80074d4 <_dtoa_r+0x99c>
 800746a:	9b04      	ldr	r3, [sp, #16]
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	b963      	cbnz	r3, 800748c <_dtoa_r+0x954>
 8007472:	4631      	mov	r1, r6
 8007474:	2205      	movs	r2, #5
 8007476:	4620      	mov	r0, r4
 8007478:	f000 fab0 	bl	80079dc <__multadd>
 800747c:	4601      	mov	r1, r0
 800747e:	4606      	mov	r6, r0
 8007480:	4650      	mov	r0, sl
 8007482:	f000 fcc7 	bl	8007e14 <__mcmp>
 8007486:	2800      	cmp	r0, #0
 8007488:	f73f adbb 	bgt.w	8007002 <_dtoa_r+0x4ca>
 800748c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748e:	9d00      	ldr	r5, [sp, #0]
 8007490:	ea6f 0b03 	mvn.w	fp, r3
 8007494:	f04f 0800 	mov.w	r8, #0
 8007498:	4631      	mov	r1, r6
 800749a:	4620      	mov	r0, r4
 800749c:	f000 fa7c 	bl	8007998 <_Bfree>
 80074a0:	2f00      	cmp	r7, #0
 80074a2:	f43f aeab 	beq.w	80071fc <_dtoa_r+0x6c4>
 80074a6:	f1b8 0f00 	cmp.w	r8, #0
 80074aa:	d005      	beq.n	80074b8 <_dtoa_r+0x980>
 80074ac:	45b8      	cmp	r8, r7
 80074ae:	d003      	beq.n	80074b8 <_dtoa_r+0x980>
 80074b0:	4641      	mov	r1, r8
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fa70 	bl	8007998 <_Bfree>
 80074b8:	4639      	mov	r1, r7
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 fa6c 	bl	8007998 <_Bfree>
 80074c0:	e69c      	b.n	80071fc <_dtoa_r+0x6c4>
 80074c2:	2600      	movs	r6, #0
 80074c4:	4637      	mov	r7, r6
 80074c6:	e7e1      	b.n	800748c <_dtoa_r+0x954>
 80074c8:	46bb      	mov	fp, r7
 80074ca:	4637      	mov	r7, r6
 80074cc:	e599      	b.n	8007002 <_dtoa_r+0x4ca>
 80074ce:	bf00      	nop
 80074d0:	40240000 	.word	0x40240000
 80074d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80c8 	beq.w	800766c <_dtoa_r+0xb34>
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	2d00      	cmp	r5, #0
 80074e2:	dd05      	ble.n	80074f0 <_dtoa_r+0x9b8>
 80074e4:	4639      	mov	r1, r7
 80074e6:	462a      	mov	r2, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fc27 	bl	8007d3c <__lshift>
 80074ee:	4607      	mov	r7, r0
 80074f0:	f1b8 0f00 	cmp.w	r8, #0
 80074f4:	d05b      	beq.n	80075ae <_dtoa_r+0xa76>
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fa0d 	bl	8007918 <_Balloc>
 80074fe:	4605      	mov	r5, r0
 8007500:	b928      	cbnz	r0, 800750e <_dtoa_r+0x9d6>
 8007502:	4b82      	ldr	r3, [pc, #520]	; (800770c <_dtoa_r+0xbd4>)
 8007504:	4602      	mov	r2, r0
 8007506:	f240 21ef 	movw	r1, #751	; 0x2ef
 800750a:	f7ff bb2e 	b.w	8006b6a <_dtoa_r+0x32>
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	f107 010c 	add.w	r1, r7, #12
 8007514:	300c      	adds	r0, #12
 8007516:	3202      	adds	r2, #2
 8007518:	0092      	lsls	r2, r2, #2
 800751a:	f000 ffaf 	bl	800847c <memcpy>
 800751e:	2201      	movs	r2, #1
 8007520:	4629      	mov	r1, r5
 8007522:	4620      	mov	r0, r4
 8007524:	f000 fc0a 	bl	8007d3c <__lshift>
 8007528:	9b00      	ldr	r3, [sp, #0]
 800752a:	46b8      	mov	r8, r7
 800752c:	4607      	mov	r7, r0
 800752e:	3301      	adds	r3, #1
 8007530:	9304      	str	r3, [sp, #16]
 8007532:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007536:	4413      	add	r3, r2
 8007538:	9308      	str	r3, [sp, #32]
 800753a:	9b02      	ldr	r3, [sp, #8]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	9306      	str	r3, [sp, #24]
 8007542:	9b04      	ldr	r3, [sp, #16]
 8007544:	4631      	mov	r1, r6
 8007546:	4650      	mov	r0, sl
 8007548:	3b01      	subs	r3, #1
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	f7ff fa61 	bl	8006a12 <quorem>
 8007550:	4641      	mov	r1, r8
 8007552:	9002      	str	r0, [sp, #8]
 8007554:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007558:	4650      	mov	r0, sl
 800755a:	f000 fc5b 	bl	8007e14 <__mcmp>
 800755e:	463a      	mov	r2, r7
 8007560:	9005      	str	r0, [sp, #20]
 8007562:	4631      	mov	r1, r6
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fc71 	bl	8007e4c <__mdiff>
 800756a:	68c2      	ldr	r2, [r0, #12]
 800756c:	4605      	mov	r5, r0
 800756e:	bb02      	cbnz	r2, 80075b2 <_dtoa_r+0xa7a>
 8007570:	4601      	mov	r1, r0
 8007572:	4650      	mov	r0, sl
 8007574:	f000 fc4e 	bl	8007e14 <__mcmp>
 8007578:	4602      	mov	r2, r0
 800757a:	4629      	mov	r1, r5
 800757c:	4620      	mov	r0, r4
 800757e:	9209      	str	r2, [sp, #36]	; 0x24
 8007580:	f000 fa0a 	bl	8007998 <_Bfree>
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007588:	9d04      	ldr	r5, [sp, #16]
 800758a:	ea43 0102 	orr.w	r1, r3, r2
 800758e:	9b06      	ldr	r3, [sp, #24]
 8007590:	4319      	orrs	r1, r3
 8007592:	d110      	bne.n	80075b6 <_dtoa_r+0xa7e>
 8007594:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007598:	d029      	beq.n	80075ee <_dtoa_r+0xab6>
 800759a:	9b05      	ldr	r3, [sp, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	dd02      	ble.n	80075a6 <_dtoa_r+0xa6e>
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	f883 9000 	strb.w	r9, [r3]
 80075ac:	e774      	b.n	8007498 <_dtoa_r+0x960>
 80075ae:	4638      	mov	r0, r7
 80075b0:	e7ba      	b.n	8007528 <_dtoa_r+0x9f0>
 80075b2:	2201      	movs	r2, #1
 80075b4:	e7e1      	b.n	800757a <_dtoa_r+0xa42>
 80075b6:	9b05      	ldr	r3, [sp, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	db04      	blt.n	80075c6 <_dtoa_r+0xa8e>
 80075bc:	9907      	ldr	r1, [sp, #28]
 80075be:	430b      	orrs	r3, r1
 80075c0:	9906      	ldr	r1, [sp, #24]
 80075c2:	430b      	orrs	r3, r1
 80075c4:	d120      	bne.n	8007608 <_dtoa_r+0xad0>
 80075c6:	2a00      	cmp	r2, #0
 80075c8:	dded      	ble.n	80075a6 <_dtoa_r+0xa6e>
 80075ca:	4651      	mov	r1, sl
 80075cc:	2201      	movs	r2, #1
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 fbb4 	bl	8007d3c <__lshift>
 80075d4:	4631      	mov	r1, r6
 80075d6:	4682      	mov	sl, r0
 80075d8:	f000 fc1c 	bl	8007e14 <__mcmp>
 80075dc:	2800      	cmp	r0, #0
 80075de:	dc03      	bgt.n	80075e8 <_dtoa_r+0xab0>
 80075e0:	d1e1      	bne.n	80075a6 <_dtoa_r+0xa6e>
 80075e2:	f019 0f01 	tst.w	r9, #1
 80075e6:	d0de      	beq.n	80075a6 <_dtoa_r+0xa6e>
 80075e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075ec:	d1d8      	bne.n	80075a0 <_dtoa_r+0xa68>
 80075ee:	2339      	movs	r3, #57	; 0x39
 80075f0:	9a01      	ldr	r2, [sp, #4]
 80075f2:	7013      	strb	r3, [r2, #0]
 80075f4:	462b      	mov	r3, r5
 80075f6:	461d      	mov	r5, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075fe:	2a39      	cmp	r2, #57	; 0x39
 8007600:	d06b      	beq.n	80076da <_dtoa_r+0xba2>
 8007602:	3201      	adds	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]
 8007606:	e747      	b.n	8007498 <_dtoa_r+0x960>
 8007608:	2a00      	cmp	r2, #0
 800760a:	dd07      	ble.n	800761c <_dtoa_r+0xae4>
 800760c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007610:	d0ed      	beq.n	80075ee <_dtoa_r+0xab6>
 8007612:	f109 0301 	add.w	r3, r9, #1
 8007616:	9a01      	ldr	r2, [sp, #4]
 8007618:	7013      	strb	r3, [r2, #0]
 800761a:	e73d      	b.n	8007498 <_dtoa_r+0x960>
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	9a08      	ldr	r2, [sp, #32]
 8007620:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007624:	4293      	cmp	r3, r2
 8007626:	d042      	beq.n	80076ae <_dtoa_r+0xb76>
 8007628:	4651      	mov	r1, sl
 800762a:	2300      	movs	r3, #0
 800762c:	220a      	movs	r2, #10
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f9d4 	bl	80079dc <__multadd>
 8007634:	45b8      	cmp	r8, r7
 8007636:	4682      	mov	sl, r0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	f04f 020a 	mov.w	r2, #10
 8007640:	4641      	mov	r1, r8
 8007642:	4620      	mov	r0, r4
 8007644:	d107      	bne.n	8007656 <_dtoa_r+0xb1e>
 8007646:	f000 f9c9 	bl	80079dc <__multadd>
 800764a:	4680      	mov	r8, r0
 800764c:	4607      	mov	r7, r0
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	3301      	adds	r3, #1
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	e775      	b.n	8007542 <_dtoa_r+0xa0a>
 8007656:	f000 f9c1 	bl	80079dc <__multadd>
 800765a:	4639      	mov	r1, r7
 800765c:	4680      	mov	r8, r0
 800765e:	2300      	movs	r3, #0
 8007660:	220a      	movs	r2, #10
 8007662:	4620      	mov	r0, r4
 8007664:	f000 f9ba 	bl	80079dc <__multadd>
 8007668:	4607      	mov	r7, r0
 800766a:	e7f0      	b.n	800764e <_dtoa_r+0xb16>
 800766c:	9b04      	ldr	r3, [sp, #16]
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	9d00      	ldr	r5, [sp, #0]
 8007672:	4631      	mov	r1, r6
 8007674:	4650      	mov	r0, sl
 8007676:	f7ff f9cc 	bl	8006a12 <quorem>
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007680:	f805 9b01 	strb.w	r9, [r5], #1
 8007684:	1aea      	subs	r2, r5, r3
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	4293      	cmp	r3, r2
 800768a:	dd07      	ble.n	800769c <_dtoa_r+0xb64>
 800768c:	4651      	mov	r1, sl
 800768e:	2300      	movs	r3, #0
 8007690:	220a      	movs	r2, #10
 8007692:	4620      	mov	r0, r4
 8007694:	f000 f9a2 	bl	80079dc <__multadd>
 8007698:	4682      	mov	sl, r0
 800769a:	e7ea      	b.n	8007672 <_dtoa_r+0xb3a>
 800769c:	9b01      	ldr	r3, [sp, #4]
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bfcc      	ite	gt
 80076a6:	461d      	movgt	r5, r3
 80076a8:	2501      	movle	r5, #1
 80076aa:	9b00      	ldr	r3, [sp, #0]
 80076ac:	441d      	add	r5, r3
 80076ae:	4651      	mov	r1, sl
 80076b0:	2201      	movs	r2, #1
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 fb42 	bl	8007d3c <__lshift>
 80076b8:	4631      	mov	r1, r6
 80076ba:	4682      	mov	sl, r0
 80076bc:	f000 fbaa 	bl	8007e14 <__mcmp>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	dc97      	bgt.n	80075f4 <_dtoa_r+0xabc>
 80076c4:	d102      	bne.n	80076cc <_dtoa_r+0xb94>
 80076c6:	f019 0f01 	tst.w	r9, #1
 80076ca:	d193      	bne.n	80075f4 <_dtoa_r+0xabc>
 80076cc:	462b      	mov	r3, r5
 80076ce:	461d      	mov	r5, r3
 80076d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076d4:	2a30      	cmp	r2, #48	; 0x30
 80076d6:	d0fa      	beq.n	80076ce <_dtoa_r+0xb96>
 80076d8:	e6de      	b.n	8007498 <_dtoa_r+0x960>
 80076da:	9a00      	ldr	r2, [sp, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d18a      	bne.n	80075f6 <_dtoa_r+0xabe>
 80076e0:	f10b 0b01 	add.w	fp, fp, #1
 80076e4:	2331      	movs	r3, #49	; 0x31
 80076e6:	e797      	b.n	8007618 <_dtoa_r+0xae0>
 80076e8:	4b09      	ldr	r3, [pc, #36]	; (8007710 <_dtoa_r+0xbd8>)
 80076ea:	f7ff ba9a 	b.w	8006c22 <_dtoa_r+0xea>
 80076ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f47f aa6e 	bne.w	8006bd2 <_dtoa_r+0x9a>
 80076f6:	4b07      	ldr	r3, [pc, #28]	; (8007714 <_dtoa_r+0xbdc>)
 80076f8:	f7ff ba93 	b.w	8006c22 <_dtoa_r+0xea>
 80076fc:	9b01      	ldr	r3, [sp, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dcb6      	bgt.n	8007670 <_dtoa_r+0xb38>
 8007702:	9b07      	ldr	r3, [sp, #28]
 8007704:	2b02      	cmp	r3, #2
 8007706:	f73f aeb2 	bgt.w	800746e <_dtoa_r+0x936>
 800770a:	e7b1      	b.n	8007670 <_dtoa_r+0xb38>
 800770c:	08008cd0 	.word	0x08008cd0
 8007710:	08008c30 	.word	0x08008c30
 8007714:	08008c54 	.word	0x08008c54

08007718 <_free_r>:
 8007718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800771a:	2900      	cmp	r1, #0
 800771c:	d043      	beq.n	80077a6 <_free_r+0x8e>
 800771e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007722:	1f0c      	subs	r4, r1, #4
 8007724:	9001      	str	r0, [sp, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfb8      	it	lt
 800772a:	18e4      	addlt	r4, r4, r3
 800772c:	f000 f8e8 	bl	8007900 <__malloc_lock>
 8007730:	4a1e      	ldr	r2, [pc, #120]	; (80077ac <_free_r+0x94>)
 8007732:	9801      	ldr	r0, [sp, #4]
 8007734:	6813      	ldr	r3, [r2, #0]
 8007736:	b933      	cbnz	r3, 8007746 <_free_r+0x2e>
 8007738:	6063      	str	r3, [r4, #4]
 800773a:	6014      	str	r4, [r2, #0]
 800773c:	b003      	add	sp, #12
 800773e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007742:	f000 b8e3 	b.w	800790c <__malloc_unlock>
 8007746:	42a3      	cmp	r3, r4
 8007748:	d908      	bls.n	800775c <_free_r+0x44>
 800774a:	6825      	ldr	r5, [r4, #0]
 800774c:	1961      	adds	r1, r4, r5
 800774e:	428b      	cmp	r3, r1
 8007750:	bf01      	itttt	eq
 8007752:	6819      	ldreq	r1, [r3, #0]
 8007754:	685b      	ldreq	r3, [r3, #4]
 8007756:	1949      	addeq	r1, r1, r5
 8007758:	6021      	streq	r1, [r4, #0]
 800775a:	e7ed      	b.n	8007738 <_free_r+0x20>
 800775c:	461a      	mov	r2, r3
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	b10b      	cbz	r3, 8007766 <_free_r+0x4e>
 8007762:	42a3      	cmp	r3, r4
 8007764:	d9fa      	bls.n	800775c <_free_r+0x44>
 8007766:	6811      	ldr	r1, [r2, #0]
 8007768:	1855      	adds	r5, r2, r1
 800776a:	42a5      	cmp	r5, r4
 800776c:	d10b      	bne.n	8007786 <_free_r+0x6e>
 800776e:	6824      	ldr	r4, [r4, #0]
 8007770:	4421      	add	r1, r4
 8007772:	1854      	adds	r4, r2, r1
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	42a3      	cmp	r3, r4
 8007778:	d1e0      	bne.n	800773c <_free_r+0x24>
 800777a:	681c      	ldr	r4, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	440c      	add	r4, r1
 8007780:	6053      	str	r3, [r2, #4]
 8007782:	6014      	str	r4, [r2, #0]
 8007784:	e7da      	b.n	800773c <_free_r+0x24>
 8007786:	d902      	bls.n	800778e <_free_r+0x76>
 8007788:	230c      	movs	r3, #12
 800778a:	6003      	str	r3, [r0, #0]
 800778c:	e7d6      	b.n	800773c <_free_r+0x24>
 800778e:	6825      	ldr	r5, [r4, #0]
 8007790:	1961      	adds	r1, r4, r5
 8007792:	428b      	cmp	r3, r1
 8007794:	bf02      	ittt	eq
 8007796:	6819      	ldreq	r1, [r3, #0]
 8007798:	685b      	ldreq	r3, [r3, #4]
 800779a:	1949      	addeq	r1, r1, r5
 800779c:	6063      	str	r3, [r4, #4]
 800779e:	bf08      	it	eq
 80077a0:	6021      	streq	r1, [r4, #0]
 80077a2:	6054      	str	r4, [r2, #4]
 80077a4:	e7ca      	b.n	800773c <_free_r+0x24>
 80077a6:	b003      	add	sp, #12
 80077a8:	bd30      	pop	{r4, r5, pc}
 80077aa:	bf00      	nop
 80077ac:	200005b0 	.word	0x200005b0

080077b0 <malloc>:
 80077b0:	4b02      	ldr	r3, [pc, #8]	; (80077bc <malloc+0xc>)
 80077b2:	4601      	mov	r1, r0
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	f000 b823 	b.w	8007800 <_malloc_r>
 80077ba:	bf00      	nop
 80077bc:	20000088 	.word	0x20000088

080077c0 <sbrk_aligned>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	4e0e      	ldr	r6, [pc, #56]	; (80077fc <sbrk_aligned+0x3c>)
 80077c4:	460c      	mov	r4, r1
 80077c6:	4605      	mov	r5, r0
 80077c8:	6831      	ldr	r1, [r6, #0]
 80077ca:	b911      	cbnz	r1, 80077d2 <sbrk_aligned+0x12>
 80077cc:	f000 fe46 	bl	800845c <_sbrk_r>
 80077d0:	6030      	str	r0, [r6, #0]
 80077d2:	4621      	mov	r1, r4
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 fe41 	bl	800845c <_sbrk_r>
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	d00a      	beq.n	80077f4 <sbrk_aligned+0x34>
 80077de:	1cc4      	adds	r4, r0, #3
 80077e0:	f024 0403 	bic.w	r4, r4, #3
 80077e4:	42a0      	cmp	r0, r4
 80077e6:	d007      	beq.n	80077f8 <sbrk_aligned+0x38>
 80077e8:	1a21      	subs	r1, r4, r0
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 fe36 	bl	800845c <_sbrk_r>
 80077f0:	3001      	adds	r0, #1
 80077f2:	d101      	bne.n	80077f8 <sbrk_aligned+0x38>
 80077f4:	f04f 34ff 	mov.w	r4, #4294967295
 80077f8:	4620      	mov	r0, r4
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	200005b4 	.word	0x200005b4

08007800 <_malloc_r>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	1ccd      	adds	r5, r1, #3
 8007806:	4607      	mov	r7, r0
 8007808:	f025 0503 	bic.w	r5, r5, #3
 800780c:	3508      	adds	r5, #8
 800780e:	2d0c      	cmp	r5, #12
 8007810:	bf38      	it	cc
 8007812:	250c      	movcc	r5, #12
 8007814:	2d00      	cmp	r5, #0
 8007816:	db01      	blt.n	800781c <_malloc_r+0x1c>
 8007818:	42a9      	cmp	r1, r5
 800781a:	d905      	bls.n	8007828 <_malloc_r+0x28>
 800781c:	230c      	movs	r3, #12
 800781e:	2600      	movs	r6, #0
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	4630      	mov	r0, r6
 8007824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007828:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078fc <_malloc_r+0xfc>
 800782c:	f000 f868 	bl	8007900 <__malloc_lock>
 8007830:	f8d8 3000 	ldr.w	r3, [r8]
 8007834:	461c      	mov	r4, r3
 8007836:	bb5c      	cbnz	r4, 8007890 <_malloc_r+0x90>
 8007838:	4629      	mov	r1, r5
 800783a:	4638      	mov	r0, r7
 800783c:	f7ff ffc0 	bl	80077c0 <sbrk_aligned>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	4604      	mov	r4, r0
 8007844:	d155      	bne.n	80078f2 <_malloc_r+0xf2>
 8007846:	f8d8 4000 	ldr.w	r4, [r8]
 800784a:	4626      	mov	r6, r4
 800784c:	2e00      	cmp	r6, #0
 800784e:	d145      	bne.n	80078dc <_malloc_r+0xdc>
 8007850:	2c00      	cmp	r4, #0
 8007852:	d048      	beq.n	80078e6 <_malloc_r+0xe6>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	4631      	mov	r1, r6
 8007858:	4638      	mov	r0, r7
 800785a:	eb04 0903 	add.w	r9, r4, r3
 800785e:	f000 fdfd 	bl	800845c <_sbrk_r>
 8007862:	4581      	cmp	r9, r0
 8007864:	d13f      	bne.n	80078e6 <_malloc_r+0xe6>
 8007866:	6821      	ldr	r1, [r4, #0]
 8007868:	4638      	mov	r0, r7
 800786a:	1a6d      	subs	r5, r5, r1
 800786c:	4629      	mov	r1, r5
 800786e:	f7ff ffa7 	bl	80077c0 <sbrk_aligned>
 8007872:	3001      	adds	r0, #1
 8007874:	d037      	beq.n	80078e6 <_malloc_r+0xe6>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	442b      	add	r3, r5
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	f8d8 3000 	ldr.w	r3, [r8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d038      	beq.n	80078f6 <_malloc_r+0xf6>
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	42a2      	cmp	r2, r4
 8007888:	d12b      	bne.n	80078e2 <_malloc_r+0xe2>
 800788a:	2200      	movs	r2, #0
 800788c:	605a      	str	r2, [r3, #4]
 800788e:	e00f      	b.n	80078b0 <_malloc_r+0xb0>
 8007890:	6822      	ldr	r2, [r4, #0]
 8007892:	1b52      	subs	r2, r2, r5
 8007894:	d41f      	bmi.n	80078d6 <_malloc_r+0xd6>
 8007896:	2a0b      	cmp	r2, #11
 8007898:	d917      	bls.n	80078ca <_malloc_r+0xca>
 800789a:	1961      	adds	r1, r4, r5
 800789c:	42a3      	cmp	r3, r4
 800789e:	6025      	str	r5, [r4, #0]
 80078a0:	bf18      	it	ne
 80078a2:	6059      	strne	r1, [r3, #4]
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	bf08      	it	eq
 80078a8:	f8c8 1000 	streq.w	r1, [r8]
 80078ac:	5162      	str	r2, [r4, r5]
 80078ae:	604b      	str	r3, [r1, #4]
 80078b0:	f104 060b 	add.w	r6, r4, #11
 80078b4:	4638      	mov	r0, r7
 80078b6:	f000 f829 	bl	800790c <__malloc_unlock>
 80078ba:	1d23      	adds	r3, r4, #4
 80078bc:	f026 0607 	bic.w	r6, r6, #7
 80078c0:	1af2      	subs	r2, r6, r3
 80078c2:	d0ae      	beq.n	8007822 <_malloc_r+0x22>
 80078c4:	1b9b      	subs	r3, r3, r6
 80078c6:	50a3      	str	r3, [r4, r2]
 80078c8:	e7ab      	b.n	8007822 <_malloc_r+0x22>
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	6862      	ldr	r2, [r4, #4]
 80078ce:	d1dd      	bne.n	800788c <_malloc_r+0x8c>
 80078d0:	f8c8 2000 	str.w	r2, [r8]
 80078d4:	e7ec      	b.n	80078b0 <_malloc_r+0xb0>
 80078d6:	4623      	mov	r3, r4
 80078d8:	6864      	ldr	r4, [r4, #4]
 80078da:	e7ac      	b.n	8007836 <_malloc_r+0x36>
 80078dc:	4634      	mov	r4, r6
 80078de:	6876      	ldr	r6, [r6, #4]
 80078e0:	e7b4      	b.n	800784c <_malloc_r+0x4c>
 80078e2:	4613      	mov	r3, r2
 80078e4:	e7cc      	b.n	8007880 <_malloc_r+0x80>
 80078e6:	230c      	movs	r3, #12
 80078e8:	4638      	mov	r0, r7
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	f000 f80e 	bl	800790c <__malloc_unlock>
 80078f0:	e797      	b.n	8007822 <_malloc_r+0x22>
 80078f2:	6025      	str	r5, [r4, #0]
 80078f4:	e7dc      	b.n	80078b0 <_malloc_r+0xb0>
 80078f6:	605b      	str	r3, [r3, #4]
 80078f8:	deff      	udf	#255	; 0xff
 80078fa:	bf00      	nop
 80078fc:	200005b0 	.word	0x200005b0

08007900 <__malloc_lock>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__malloc_lock+0x8>)
 8007902:	f7ff b876 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 8007906:	bf00      	nop
 8007908:	200005ac 	.word	0x200005ac

0800790c <__malloc_unlock>:
 800790c:	4801      	ldr	r0, [pc, #4]	; (8007914 <__malloc_unlock+0x8>)
 800790e:	f7ff b871 	b.w	80069f4 <__retarget_lock_release_recursive>
 8007912:	bf00      	nop
 8007914:	200005ac 	.word	0x200005ac

08007918 <_Balloc>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	69c6      	ldr	r6, [r0, #28]
 800791c:	4604      	mov	r4, r0
 800791e:	460d      	mov	r5, r1
 8007920:	b976      	cbnz	r6, 8007940 <_Balloc+0x28>
 8007922:	2010      	movs	r0, #16
 8007924:	f7ff ff44 	bl	80077b0 <malloc>
 8007928:	4602      	mov	r2, r0
 800792a:	61e0      	str	r0, [r4, #28]
 800792c:	b920      	cbnz	r0, 8007938 <_Balloc+0x20>
 800792e:	4b18      	ldr	r3, [pc, #96]	; (8007990 <_Balloc+0x78>)
 8007930:	216b      	movs	r1, #107	; 0x6b
 8007932:	4818      	ldr	r0, [pc, #96]	; (8007994 <_Balloc+0x7c>)
 8007934:	f000 fdb0 	bl	8008498 <__assert_func>
 8007938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800793c:	6006      	str	r6, [r0, #0]
 800793e:	60c6      	str	r6, [r0, #12]
 8007940:	69e6      	ldr	r6, [r4, #28]
 8007942:	68f3      	ldr	r3, [r6, #12]
 8007944:	b183      	cbz	r3, 8007968 <_Balloc+0x50>
 8007946:	69e3      	ldr	r3, [r4, #28]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800794e:	b9b8      	cbnz	r0, 8007980 <_Balloc+0x68>
 8007950:	2101      	movs	r1, #1
 8007952:	4620      	mov	r0, r4
 8007954:	fa01 f605 	lsl.w	r6, r1, r5
 8007958:	1d72      	adds	r2, r6, #5
 800795a:	0092      	lsls	r2, r2, #2
 800795c:	f000 fdba 	bl	80084d4 <_calloc_r>
 8007960:	b160      	cbz	r0, 800797c <_Balloc+0x64>
 8007962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007966:	e00e      	b.n	8007986 <_Balloc+0x6e>
 8007968:	2221      	movs	r2, #33	; 0x21
 800796a:	2104      	movs	r1, #4
 800796c:	4620      	mov	r0, r4
 800796e:	f000 fdb1 	bl	80084d4 <_calloc_r>
 8007972:	69e3      	ldr	r3, [r4, #28]
 8007974:	60f0      	str	r0, [r6, #12]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e4      	bne.n	8007946 <_Balloc+0x2e>
 800797c:	2000      	movs	r0, #0
 800797e:	bd70      	pop	{r4, r5, r6, pc}
 8007980:	6802      	ldr	r2, [r0, #0]
 8007982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007986:	2300      	movs	r3, #0
 8007988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800798c:	e7f7      	b.n	800797e <_Balloc+0x66>
 800798e:	bf00      	nop
 8007990:	08008c61 	.word	0x08008c61
 8007994:	08008ce1 	.word	0x08008ce1

08007998 <_Bfree>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	69c6      	ldr	r6, [r0, #28]
 800799c:	4605      	mov	r5, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	b976      	cbnz	r6, 80079c0 <_Bfree+0x28>
 80079a2:	2010      	movs	r0, #16
 80079a4:	f7ff ff04 	bl	80077b0 <malloc>
 80079a8:	4602      	mov	r2, r0
 80079aa:	61e8      	str	r0, [r5, #28]
 80079ac:	b920      	cbnz	r0, 80079b8 <_Bfree+0x20>
 80079ae:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <_Bfree+0x3c>)
 80079b0:	218f      	movs	r1, #143	; 0x8f
 80079b2:	4809      	ldr	r0, [pc, #36]	; (80079d8 <_Bfree+0x40>)
 80079b4:	f000 fd70 	bl	8008498 <__assert_func>
 80079b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079bc:	6006      	str	r6, [r0, #0]
 80079be:	60c6      	str	r6, [r0, #12]
 80079c0:	b13c      	cbz	r4, 80079d2 <_Bfree+0x3a>
 80079c2:	69eb      	ldr	r3, [r5, #28]
 80079c4:	6862      	ldr	r2, [r4, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079cc:	6021      	str	r1, [r4, #0]
 80079ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079d2:	bd70      	pop	{r4, r5, r6, pc}
 80079d4:	08008c61 	.word	0x08008c61
 80079d8:	08008ce1 	.word	0x08008ce1

080079dc <__multadd>:
 80079dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e0:	f101 0c14 	add.w	ip, r1, #20
 80079e4:	4607      	mov	r7, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	461e      	mov	r6, r3
 80079ea:	690d      	ldr	r5, [r1, #16]
 80079ec:	2000      	movs	r0, #0
 80079ee:	f8dc 3000 	ldr.w	r3, [ip]
 80079f2:	3001      	adds	r0, #1
 80079f4:	b299      	uxth	r1, r3
 80079f6:	4285      	cmp	r5, r0
 80079f8:	fb02 6101 	mla	r1, r2, r1, r6
 80079fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a00:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8007a04:	b289      	uxth	r1, r1
 8007a06:	fb02 3306 	mla	r3, r2, r6, r3
 8007a0a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a12:	f84c 1b04 	str.w	r1, [ip], #4
 8007a16:	dcea      	bgt.n	80079ee <__multadd+0x12>
 8007a18:	b30e      	cbz	r6, 8007a5e <__multadd+0x82>
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dc19      	bgt.n	8007a54 <__multadd+0x78>
 8007a20:	6861      	ldr	r1, [r4, #4]
 8007a22:	4638      	mov	r0, r7
 8007a24:	3101      	adds	r1, #1
 8007a26:	f7ff ff77 	bl	8007918 <_Balloc>
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	b928      	cbnz	r0, 8007a3a <__multadd+0x5e>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <__multadd+0x88>)
 8007a32:	21ba      	movs	r1, #186	; 0xba
 8007a34:	480c      	ldr	r0, [pc, #48]	; (8007a68 <__multadd+0x8c>)
 8007a36:	f000 fd2f 	bl	8008498 <__assert_func>
 8007a3a:	6922      	ldr	r2, [r4, #16]
 8007a3c:	f104 010c 	add.w	r1, r4, #12
 8007a40:	300c      	adds	r0, #12
 8007a42:	3202      	adds	r2, #2
 8007a44:	0092      	lsls	r2, r2, #2
 8007a46:	f000 fd19 	bl	800847c <memcpy>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4644      	mov	r4, r8
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f7ff ffa2 	bl	8007998 <_Bfree>
 8007a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a58:	3501      	adds	r5, #1
 8007a5a:	615e      	str	r6, [r3, #20]
 8007a5c:	6125      	str	r5, [r4, #16]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a64:	08008cd0 	.word	0x08008cd0
 8007a68:	08008ce1 	.word	0x08008ce1

08007a6c <__hi0bits>:
 8007a6c:	0c03      	lsrs	r3, r0, #16
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	b9d3      	cbnz	r3, 8007aa8 <__hi0bits+0x3c>
 8007a72:	0400      	lsls	r0, r0, #16
 8007a74:	2310      	movs	r3, #16
 8007a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a7a:	bf04      	itt	eq
 8007a7c:	0200      	lsleq	r0, r0, #8
 8007a7e:	3308      	addeq	r3, #8
 8007a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a84:	bf04      	itt	eq
 8007a86:	0100      	lsleq	r0, r0, #4
 8007a88:	3304      	addeq	r3, #4
 8007a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a8e:	bf04      	itt	eq
 8007a90:	0080      	lsleq	r0, r0, #2
 8007a92:	3302      	addeq	r3, #2
 8007a94:	2800      	cmp	r0, #0
 8007a96:	db05      	blt.n	8007aa4 <__hi0bits+0x38>
 8007a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a9c:	f103 0301 	add.w	r3, r3, #1
 8007aa0:	bf08      	it	eq
 8007aa2:	2320      	moveq	r3, #32
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	4770      	bx	lr
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e7e4      	b.n	8007a76 <__hi0bits+0xa>

08007aac <__lo0bits>:
 8007aac:	6803      	ldr	r3, [r0, #0]
 8007aae:	f013 0207 	ands.w	r2, r3, #7
 8007ab2:	d00c      	beq.n	8007ace <__lo0bits+0x22>
 8007ab4:	07d9      	lsls	r1, r3, #31
 8007ab6:	d422      	bmi.n	8007afe <__lo0bits+0x52>
 8007ab8:	079a      	lsls	r2, r3, #30
 8007aba:	bf47      	ittee	mi
 8007abc:	085b      	lsrmi	r3, r3, #1
 8007abe:	2201      	movmi	r2, #1
 8007ac0:	089b      	lsrpl	r3, r3, #2
 8007ac2:	2202      	movpl	r2, #2
 8007ac4:	bf4c      	ite	mi
 8007ac6:	6003      	strmi	r3, [r0, #0]
 8007ac8:	6003      	strpl	r3, [r0, #0]
 8007aca:	4610      	mov	r0, r2
 8007acc:	4770      	bx	lr
 8007ace:	b299      	uxth	r1, r3
 8007ad0:	b909      	cbnz	r1, 8007ad6 <__lo0bits+0x2a>
 8007ad2:	0c1b      	lsrs	r3, r3, #16
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	b2d9      	uxtb	r1, r3
 8007ad8:	b909      	cbnz	r1, 8007ade <__lo0bits+0x32>
 8007ada:	3208      	adds	r2, #8
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	0719      	lsls	r1, r3, #28
 8007ae0:	bf04      	itt	eq
 8007ae2:	091b      	lsreq	r3, r3, #4
 8007ae4:	3204      	addeq	r2, #4
 8007ae6:	0799      	lsls	r1, r3, #30
 8007ae8:	bf04      	itt	eq
 8007aea:	089b      	lsreq	r3, r3, #2
 8007aec:	3202      	addeq	r2, #2
 8007aee:	07d9      	lsls	r1, r3, #31
 8007af0:	d403      	bmi.n	8007afa <__lo0bits+0x4e>
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	f102 0201 	add.w	r2, r2, #1
 8007af8:	d003      	beq.n	8007b02 <__lo0bits+0x56>
 8007afa:	6003      	str	r3, [r0, #0]
 8007afc:	e7e5      	b.n	8007aca <__lo0bits+0x1e>
 8007afe:	2200      	movs	r2, #0
 8007b00:	e7e3      	b.n	8007aca <__lo0bits+0x1e>
 8007b02:	2220      	movs	r2, #32
 8007b04:	e7e1      	b.n	8007aca <__lo0bits+0x1e>
	...

08007b08 <__i2b>:
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	f7ff ff03 	bl	8007918 <_Balloc>
 8007b12:	4602      	mov	r2, r0
 8007b14:	b928      	cbnz	r0, 8007b22 <__i2b+0x1a>
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <__i2b+0x24>)
 8007b18:	f240 1145 	movw	r1, #325	; 0x145
 8007b1c:	4804      	ldr	r0, [pc, #16]	; (8007b30 <__i2b+0x28>)
 8007b1e:	f000 fcbb 	bl	8008498 <__assert_func>
 8007b22:	2301      	movs	r3, #1
 8007b24:	6144      	str	r4, [r0, #20]
 8007b26:	6103      	str	r3, [r0, #16]
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	bf00      	nop
 8007b2c:	08008cd0 	.word	0x08008cd0
 8007b30:	08008ce1 	.word	0x08008ce1

08007b34 <__multiply>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	4691      	mov	r9, r2
 8007b3a:	690a      	ldr	r2, [r1, #16]
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	b085      	sub	sp, #20
 8007b40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	bfbe      	ittt	lt
 8007b48:	460b      	movlt	r3, r1
 8007b4a:	464c      	movlt	r4, r9
 8007b4c:	4699      	movlt	r9, r3
 8007b4e:	6927      	ldr	r7, [r4, #16]
 8007b50:	68a3      	ldr	r3, [r4, #8]
 8007b52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b56:	6861      	ldr	r1, [r4, #4]
 8007b58:	eb07 060a 	add.w	r6, r7, sl
 8007b5c:	42b3      	cmp	r3, r6
 8007b5e:	bfb8      	it	lt
 8007b60:	3101      	addlt	r1, #1
 8007b62:	f7ff fed9 	bl	8007918 <_Balloc>
 8007b66:	b930      	cbnz	r0, 8007b76 <__multiply+0x42>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	4b45      	ldr	r3, [pc, #276]	; (8007c80 <__multiply+0x14c>)
 8007b6c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007b70:	4844      	ldr	r0, [pc, #272]	; (8007c84 <__multiply+0x150>)
 8007b72:	f000 fc91 	bl	8008498 <__assert_func>
 8007b76:	f100 0514 	add.w	r5, r0, #20
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b80:	462b      	mov	r3, r5
 8007b82:	4543      	cmp	r3, r8
 8007b84:	d321      	bcc.n	8007bca <__multiply+0x96>
 8007b86:	f104 0314 	add.w	r3, r4, #20
 8007b8a:	f104 0115 	add.w	r1, r4, #21
 8007b8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b92:	f109 0314 	add.w	r3, r9, #20
 8007b96:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b9a:	9202      	str	r2, [sp, #8]
 8007b9c:	1b3a      	subs	r2, r7, r4
 8007b9e:	3a15      	subs	r2, #21
 8007ba0:	f022 0203 	bic.w	r2, r2, #3
 8007ba4:	3204      	adds	r2, #4
 8007ba6:	428f      	cmp	r7, r1
 8007ba8:	bf38      	it	cc
 8007baa:	2204      	movcc	r2, #4
 8007bac:	9201      	str	r2, [sp, #4]
 8007bae:	9a02      	ldr	r2, [sp, #8]
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d80c      	bhi.n	8007bd0 <__multiply+0x9c>
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	dd03      	ble.n	8007bc2 <__multiply+0x8e>
 8007bba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d05b      	beq.n	8007c7a <__multiply+0x146>
 8007bc2:	6106      	str	r6, [r0, #16]
 8007bc4:	b005      	add	sp, #20
 8007bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bca:	f843 2b04 	str.w	r2, [r3], #4
 8007bce:	e7d8      	b.n	8007b82 <__multiply+0x4e>
 8007bd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bd4:	f1ba 0f00 	cmp.w	sl, #0
 8007bd8:	d024      	beq.n	8007c24 <__multiply+0xf0>
 8007bda:	f104 0e14 	add.w	lr, r4, #20
 8007bde:	46a9      	mov	r9, r5
 8007be0:	f04f 0c00 	mov.w	ip, #0
 8007be4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007be8:	f8d9 1000 	ldr.w	r1, [r9]
 8007bec:	fa1f fb82 	uxth.w	fp, r2
 8007bf0:	4577      	cmp	r7, lr
 8007bf2:	b289      	uxth	r1, r1
 8007bf4:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bf8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8007c00:	4461      	add	r1, ip
 8007c02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c06:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c0e:	b289      	uxth	r1, r1
 8007c10:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c18:	f849 1b04 	str.w	r1, [r9], #4
 8007c1c:	d8e2      	bhi.n	8007be4 <__multiply+0xb0>
 8007c1e:	9a01      	ldr	r2, [sp, #4]
 8007c20:	f845 c002 	str.w	ip, [r5, r2]
 8007c24:	9a03      	ldr	r2, [sp, #12]
 8007c26:	3304      	adds	r3, #4
 8007c28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c2c:	f1b9 0f00 	cmp.w	r9, #0
 8007c30:	d021      	beq.n	8007c76 <__multiply+0x142>
 8007c32:	6829      	ldr	r1, [r5, #0]
 8007c34:	f104 0c14 	add.w	ip, r4, #20
 8007c38:	46ae      	mov	lr, r5
 8007c3a:	f04f 0a00 	mov.w	sl, #0
 8007c3e:	f8bc b000 	ldrh.w	fp, [ip]
 8007c42:	b289      	uxth	r1, r1
 8007c44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c48:	fb09 220b 	mla	r2, r9, fp, r2
 8007c4c:	4452      	add	r2, sl
 8007c4e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c52:	f84e 1b04 	str.w	r1, [lr], #4
 8007c56:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c5e:	f8be 1000 	ldrh.w	r1, [lr]
 8007c62:	4567      	cmp	r7, ip
 8007c64:	fb09 110a 	mla	r1, r9, sl, r1
 8007c68:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007c6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c70:	d8e5      	bhi.n	8007c3e <__multiply+0x10a>
 8007c72:	9a01      	ldr	r2, [sp, #4]
 8007c74:	50a9      	str	r1, [r5, r2]
 8007c76:	3504      	adds	r5, #4
 8007c78:	e799      	b.n	8007bae <__multiply+0x7a>
 8007c7a:	3e01      	subs	r6, #1
 8007c7c:	e79b      	b.n	8007bb6 <__multiply+0x82>
 8007c7e:	bf00      	nop
 8007c80:	08008cd0 	.word	0x08008cd0
 8007c84:	08008ce1 	.word	0x08008ce1

08007c88 <__pow5mult>:
 8007c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c8c:	4615      	mov	r5, r2
 8007c8e:	f012 0203 	ands.w	r2, r2, #3
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	d007      	beq.n	8007ca8 <__pow5mult+0x20>
 8007c98:	3a01      	subs	r2, #1
 8007c9a:	4c25      	ldr	r4, [pc, #148]	; (8007d30 <__pow5mult+0xa8>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ca2:	f7ff fe9b 	bl	80079dc <__multadd>
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	10ad      	asrs	r5, r5, #2
 8007caa:	d03d      	beq.n	8007d28 <__pow5mult+0xa0>
 8007cac:	69f4      	ldr	r4, [r6, #28]
 8007cae:	b97c      	cbnz	r4, 8007cd0 <__pow5mult+0x48>
 8007cb0:	2010      	movs	r0, #16
 8007cb2:	f7ff fd7d 	bl	80077b0 <malloc>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	61f0      	str	r0, [r6, #28]
 8007cba:	b928      	cbnz	r0, 8007cc8 <__pow5mult+0x40>
 8007cbc:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <__pow5mult+0xac>)
 8007cbe:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007cc2:	481d      	ldr	r0, [pc, #116]	; (8007d38 <__pow5mult+0xb0>)
 8007cc4:	f000 fbe8 	bl	8008498 <__assert_func>
 8007cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ccc:	6004      	str	r4, [r0, #0]
 8007cce:	60c4      	str	r4, [r0, #12]
 8007cd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cd8:	b94c      	cbnz	r4, 8007cee <__pow5mult+0x66>
 8007cda:	f240 2171 	movw	r1, #625	; 0x271
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7ff ff12 	bl	8007b08 <__i2b>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cec:	6003      	str	r3, [r0, #0]
 8007cee:	f04f 0900 	mov.w	r9, #0
 8007cf2:	07eb      	lsls	r3, r5, #31
 8007cf4:	d50a      	bpl.n	8007d0c <__pow5mult+0x84>
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	4622      	mov	r2, r4
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7ff ff1a 	bl	8007b34 <__multiply>
 8007d00:	4680      	mov	r8, r0
 8007d02:	4639      	mov	r1, r7
 8007d04:	4630      	mov	r0, r6
 8007d06:	4647      	mov	r7, r8
 8007d08:	f7ff fe46 	bl	8007998 <_Bfree>
 8007d0c:	106d      	asrs	r5, r5, #1
 8007d0e:	d00b      	beq.n	8007d28 <__pow5mult+0xa0>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	b938      	cbnz	r0, 8007d24 <__pow5mult+0x9c>
 8007d14:	4622      	mov	r2, r4
 8007d16:	4621      	mov	r1, r4
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f7ff ff0b 	bl	8007b34 <__multiply>
 8007d1e:	6020      	str	r0, [r4, #0]
 8007d20:	f8c0 9000 	str.w	r9, [r0]
 8007d24:	4604      	mov	r4, r0
 8007d26:	e7e4      	b.n	8007cf2 <__pow5mult+0x6a>
 8007d28:	4638      	mov	r0, r7
 8007d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2e:	bf00      	nop
 8007d30:	08008e30 	.word	0x08008e30
 8007d34:	08008c61 	.word	0x08008c61
 8007d38:	08008ce1 	.word	0x08008ce1

08007d3c <__lshift>:
 8007d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	460c      	mov	r4, r1
 8007d42:	4607      	mov	r7, r0
 8007d44:	4691      	mov	r9, r2
 8007d46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d4a:	6923      	ldr	r3, [r4, #16]
 8007d4c:	6849      	ldr	r1, [r1, #4]
 8007d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	f108 0601 	add.w	r6, r8, #1
 8007d58:	42b3      	cmp	r3, r6
 8007d5a:	db0b      	blt.n	8007d74 <__lshift+0x38>
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff fddb 	bl	8007918 <_Balloc>
 8007d62:	4605      	mov	r5, r0
 8007d64:	b948      	cbnz	r0, 8007d7a <__lshift+0x3e>
 8007d66:	4602      	mov	r2, r0
 8007d68:	4b28      	ldr	r3, [pc, #160]	; (8007e0c <__lshift+0xd0>)
 8007d6a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007d6e:	4828      	ldr	r0, [pc, #160]	; (8007e10 <__lshift+0xd4>)
 8007d70:	f000 fb92 	bl	8008498 <__assert_func>
 8007d74:	3101      	adds	r1, #1
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	e7ee      	b.n	8007d58 <__lshift+0x1c>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f100 0114 	add.w	r1, r0, #20
 8007d80:	f100 0210 	add.w	r2, r0, #16
 8007d84:	4618      	mov	r0, r3
 8007d86:	4553      	cmp	r3, sl
 8007d88:	db33      	blt.n	8007df2 <__lshift+0xb6>
 8007d8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d8e:	f104 0314 	add.w	r3, r4, #20
 8007d92:	6920      	ldr	r0, [r4, #16]
 8007d94:	f019 091f 	ands.w	r9, r9, #31
 8007d98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007da0:	d02b      	beq.n	8007dfa <__lshift+0xbe>
 8007da2:	f1c9 0e20 	rsb	lr, r9, #32
 8007da6:	468a      	mov	sl, r1
 8007da8:	2200      	movs	r2, #0
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	fa00 f009 	lsl.w	r0, r0, r9
 8007db0:	4310      	orrs	r0, r2
 8007db2:	f84a 0b04 	str.w	r0, [sl], #4
 8007db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dba:	459c      	cmp	ip, r3
 8007dbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007dc0:	d8f3      	bhi.n	8007daa <__lshift+0x6e>
 8007dc2:	ebac 0304 	sub.w	r3, ip, r4
 8007dc6:	f104 0015 	add.w	r0, r4, #21
 8007dca:	3b15      	subs	r3, #21
 8007dcc:	f023 0303 	bic.w	r3, r3, #3
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4584      	cmp	ip, r0
 8007dd4:	bf38      	it	cc
 8007dd6:	2304      	movcc	r3, #4
 8007dd8:	50ca      	str	r2, [r1, r3]
 8007dda:	b10a      	cbz	r2, 8007de0 <__lshift+0xa4>
 8007ddc:	f108 0602 	add.w	r6, r8, #2
 8007de0:	3e01      	subs	r6, #1
 8007de2:	4638      	mov	r0, r7
 8007de4:	4621      	mov	r1, r4
 8007de6:	612e      	str	r6, [r5, #16]
 8007de8:	f7ff fdd6 	bl	8007998 <_Bfree>
 8007dec:	4628      	mov	r0, r5
 8007dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df2:	3301      	adds	r3, #1
 8007df4:	f842 0f04 	str.w	r0, [r2, #4]!
 8007df8:	e7c5      	b.n	8007d86 <__lshift+0x4a>
 8007dfa:	3904      	subs	r1, #4
 8007dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e00:	459c      	cmp	ip, r3
 8007e02:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e06:	d8f9      	bhi.n	8007dfc <__lshift+0xc0>
 8007e08:	e7ea      	b.n	8007de0 <__lshift+0xa4>
 8007e0a:	bf00      	nop
 8007e0c:	08008cd0 	.word	0x08008cd0
 8007e10:	08008ce1 	.word	0x08008ce1

08007e14 <__mcmp>:
 8007e14:	6902      	ldr	r2, [r0, #16]
 8007e16:	b530      	push	{r4, r5, lr}
 8007e18:	690c      	ldr	r4, [r1, #16]
 8007e1a:	1b12      	subs	r2, r2, r4
 8007e1c:	d10e      	bne.n	8007e3c <__mcmp+0x28>
 8007e1e:	f100 0314 	add.w	r3, r0, #20
 8007e22:	3114      	adds	r1, #20
 8007e24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e34:	42a5      	cmp	r5, r4
 8007e36:	d003      	beq.n	8007e40 <__mcmp+0x2c>
 8007e38:	d305      	bcc.n	8007e46 <__mcmp+0x32>
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	bd30      	pop	{r4, r5, pc}
 8007e40:	4283      	cmp	r3, r0
 8007e42:	d3f3      	bcc.n	8007e2c <__mcmp+0x18>
 8007e44:	e7fa      	b.n	8007e3c <__mcmp+0x28>
 8007e46:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4a:	e7f7      	b.n	8007e3c <__mcmp+0x28>

08007e4c <__mdiff>:
 8007e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e50:	460c      	mov	r4, r1
 8007e52:	4606      	mov	r6, r0
 8007e54:	4611      	mov	r1, r2
 8007e56:	4692      	mov	sl, r2
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7ff ffdb 	bl	8007e14 <__mcmp>
 8007e5e:	1e05      	subs	r5, r0, #0
 8007e60:	d110      	bne.n	8007e84 <__mdiff+0x38>
 8007e62:	4629      	mov	r1, r5
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff fd57 	bl	8007918 <_Balloc>
 8007e6a:	b930      	cbnz	r0, 8007e7a <__mdiff+0x2e>
 8007e6c:	4b3d      	ldr	r3, [pc, #244]	; (8007f64 <__mdiff+0x118>)
 8007e6e:	4602      	mov	r2, r0
 8007e70:	f240 2137 	movw	r1, #567	; 0x237
 8007e74:	483c      	ldr	r0, [pc, #240]	; (8007f68 <__mdiff+0x11c>)
 8007e76:	f000 fb0f 	bl	8008498 <__assert_func>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e84:	bfa4      	itt	ge
 8007e86:	4653      	movge	r3, sl
 8007e88:	46a2      	movge	sl, r4
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	bfa8      	it	ge
 8007e8e:	2500      	movge	r5, #0
 8007e90:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007e94:	bfac      	ite	ge
 8007e96:	461c      	movge	r4, r3
 8007e98:	2501      	movlt	r5, #1
 8007e9a:	f7ff fd3d 	bl	8007918 <_Balloc>
 8007e9e:	b920      	cbnz	r0, 8007eaa <__mdiff+0x5e>
 8007ea0:	4b30      	ldr	r3, [pc, #192]	; (8007f64 <__mdiff+0x118>)
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	f240 2145 	movw	r1, #581	; 0x245
 8007ea8:	e7e4      	b.n	8007e74 <__mdiff+0x28>
 8007eaa:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007eae:	f104 0914 	add.w	r9, r4, #20
 8007eb2:	6926      	ldr	r6, [r4, #16]
 8007eb4:	f100 0814 	add.w	r8, r0, #20
 8007eb8:	60c5      	str	r5, [r0, #12]
 8007eba:	f10a 0514 	add.w	r5, sl, #20
 8007ebe:	f10a 0210 	add.w	r2, sl, #16
 8007ec2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ec6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007eca:	46c2      	mov	sl, r8
 8007ecc:	f04f 0c00 	mov.w	ip, #0
 8007ed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ed4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ed8:	fa1f f18b 	uxth.w	r1, fp
 8007edc:	454e      	cmp	r6, r9
 8007ede:	4461      	add	r1, ip
 8007ee0:	fa1f fc83 	uxth.w	ip, r3
 8007ee4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007ee8:	eba1 010c 	sub.w	r1, r1, ip
 8007eec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ef0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ef4:	b289      	uxth	r1, r1
 8007ef6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007efe:	f84a 1b04 	str.w	r1, [sl], #4
 8007f02:	d8e5      	bhi.n	8007ed0 <__mdiff+0x84>
 8007f04:	1b33      	subs	r3, r6, r4
 8007f06:	3415      	adds	r4, #21
 8007f08:	3b15      	subs	r3, #21
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	3304      	adds	r3, #4
 8007f10:	42a6      	cmp	r6, r4
 8007f12:	bf38      	it	cc
 8007f14:	2304      	movcc	r3, #4
 8007f16:	441d      	add	r5, r3
 8007f18:	4443      	add	r3, r8
 8007f1a:	462c      	mov	r4, r5
 8007f1c:	461e      	mov	r6, r3
 8007f1e:	4574      	cmp	r4, lr
 8007f20:	d30e      	bcc.n	8007f40 <__mdiff+0xf4>
 8007f22:	f10e 0203 	add.w	r2, lr, #3
 8007f26:	1b52      	subs	r2, r2, r5
 8007f28:	3d03      	subs	r5, #3
 8007f2a:	f022 0203 	bic.w	r2, r2, #3
 8007f2e:	45ae      	cmp	lr, r5
 8007f30:	bf38      	it	cc
 8007f32:	2200      	movcc	r2, #0
 8007f34:	4413      	add	r3, r2
 8007f36:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f3a:	b18a      	cbz	r2, 8007f60 <__mdiff+0x114>
 8007f3c:	6107      	str	r7, [r0, #16]
 8007f3e:	e79f      	b.n	8007e80 <__mdiff+0x34>
 8007f40:	f854 8b04 	ldr.w	r8, [r4], #4
 8007f44:	fa1f f288 	uxth.w	r2, r8
 8007f48:	4462      	add	r2, ip
 8007f4a:	1411      	asrs	r1, r2, #16
 8007f4c:	b292      	uxth	r2, r2
 8007f4e:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8007f52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007f56:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8007f5a:	f846 2b04 	str.w	r2, [r6], #4
 8007f5e:	e7de      	b.n	8007f1e <__mdiff+0xd2>
 8007f60:	3f01      	subs	r7, #1
 8007f62:	e7e8      	b.n	8007f36 <__mdiff+0xea>
 8007f64:	08008cd0 	.word	0x08008cd0
 8007f68:	08008ce1 	.word	0x08008ce1

08007f6c <__d2b>:
 8007f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f70:	460f      	mov	r7, r1
 8007f72:	2101      	movs	r1, #1
 8007f74:	4616      	mov	r6, r2
 8007f76:	ec59 8b10 	vmov	r8, r9, d0
 8007f7a:	f7ff fccd 	bl	8007918 <_Balloc>
 8007f7e:	4604      	mov	r4, r0
 8007f80:	b930      	cbnz	r0, 8007f90 <__d2b+0x24>
 8007f82:	4602      	mov	r2, r0
 8007f84:	4b24      	ldr	r3, [pc, #144]	; (8008018 <__d2b+0xac>)
 8007f86:	f240 310f 	movw	r1, #783	; 0x30f
 8007f8a:	4824      	ldr	r0, [pc, #144]	; (800801c <__d2b+0xb0>)
 8007f8c:	f000 fa84 	bl	8008498 <__assert_func>
 8007f90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f98:	bb2d      	cbnz	r5, 8007fe6 <__d2b+0x7a>
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	f1b8 0300 	subs.w	r3, r8, #0
 8007fa0:	d026      	beq.n	8007ff0 <__d2b+0x84>
 8007fa2:	4668      	mov	r0, sp
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	f7ff fd81 	bl	8007aac <__lo0bits>
 8007faa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fae:	b1e8      	cbz	r0, 8007fec <__d2b+0x80>
 8007fb0:	f1c0 0320 	rsb	r3, r0, #32
 8007fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb8:	40c2      	lsrs	r2, r0
 8007fba:	430b      	orrs	r3, r1
 8007fbc:	9201      	str	r2, [sp, #4]
 8007fbe:	6163      	str	r3, [r4, #20]
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	61a3      	str	r3, [r4, #24]
 8007fc6:	bf14      	ite	ne
 8007fc8:	2202      	movne	r2, #2
 8007fca:	2201      	moveq	r2, #1
 8007fcc:	6122      	str	r2, [r4, #16]
 8007fce:	b1bd      	cbz	r5, 8008000 <__d2b+0x94>
 8007fd0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fd4:	4405      	add	r5, r0
 8007fd6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fda:	603d      	str	r5, [r7, #0]
 8007fdc:	6030      	str	r0, [r6, #0]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	b003      	add	sp, #12
 8007fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fea:	e7d6      	b.n	8007f9a <__d2b+0x2e>
 8007fec:	6161      	str	r1, [r4, #20]
 8007fee:	e7e7      	b.n	8007fc0 <__d2b+0x54>
 8007ff0:	a801      	add	r0, sp, #4
 8007ff2:	f7ff fd5b 	bl	8007aac <__lo0bits>
 8007ff6:	9b01      	ldr	r3, [sp, #4]
 8007ff8:	3020      	adds	r0, #32
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	6163      	str	r3, [r4, #20]
 8007ffe:	e7e5      	b.n	8007fcc <__d2b+0x60>
 8008000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008004:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008008:	6038      	str	r0, [r7, #0]
 800800a:	6918      	ldr	r0, [r3, #16]
 800800c:	f7ff fd2e 	bl	8007a6c <__hi0bits>
 8008010:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008014:	e7e2      	b.n	8007fdc <__d2b+0x70>
 8008016:	bf00      	nop
 8008018:	08008cd0 	.word	0x08008cd0
 800801c:	08008ce1 	.word	0x08008ce1

08008020 <__ssputs_r>:
 8008020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008024:	461f      	mov	r7, r3
 8008026:	688e      	ldr	r6, [r1, #8]
 8008028:	4682      	mov	sl, r0
 800802a:	460c      	mov	r4, r1
 800802c:	42be      	cmp	r6, r7
 800802e:	4690      	mov	r8, r2
 8008030:	680b      	ldr	r3, [r1, #0]
 8008032:	d82c      	bhi.n	800808e <__ssputs_r+0x6e>
 8008034:	898a      	ldrh	r2, [r1, #12]
 8008036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800803a:	d026      	beq.n	800808a <__ssputs_r+0x6a>
 800803c:	6965      	ldr	r5, [r4, #20]
 800803e:	6909      	ldr	r1, [r1, #16]
 8008040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008044:	eba3 0901 	sub.w	r9, r3, r1
 8008048:	1c7b      	adds	r3, r7, #1
 800804a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800804e:	444b      	add	r3, r9
 8008050:	106d      	asrs	r5, r5, #1
 8008052:	429d      	cmp	r5, r3
 8008054:	bf38      	it	cc
 8008056:	461d      	movcc	r5, r3
 8008058:	0553      	lsls	r3, r2, #21
 800805a:	d527      	bpl.n	80080ac <__ssputs_r+0x8c>
 800805c:	4629      	mov	r1, r5
 800805e:	f7ff fbcf 	bl	8007800 <_malloc_r>
 8008062:	4606      	mov	r6, r0
 8008064:	b360      	cbz	r0, 80080c0 <__ssputs_r+0xa0>
 8008066:	464a      	mov	r2, r9
 8008068:	6921      	ldr	r1, [r4, #16]
 800806a:	f000 fa07 	bl	800847c <memcpy>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	6126      	str	r6, [r4, #16]
 800807c:	444e      	add	r6, r9
 800807e:	6165      	str	r5, [r4, #20]
 8008080:	eba5 0509 	sub.w	r5, r5, r9
 8008084:	6026      	str	r6, [r4, #0]
 8008086:	463e      	mov	r6, r7
 8008088:	60a5      	str	r5, [r4, #8]
 800808a:	42be      	cmp	r6, r7
 800808c:	d900      	bls.n	8008090 <__ssputs_r+0x70>
 800808e:	463e      	mov	r6, r7
 8008090:	4632      	mov	r2, r6
 8008092:	4641      	mov	r1, r8
 8008094:	6820      	ldr	r0, [r4, #0]
 8008096:	f000 f9c7 	bl	8008428 <memmove>
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	2000      	movs	r0, #0
 800809e:	1b9b      	subs	r3, r3, r6
 80080a0:	60a3      	str	r3, [r4, #8]
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	4433      	add	r3, r6
 80080a6:	6023      	str	r3, [r4, #0]
 80080a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ac:	462a      	mov	r2, r5
 80080ae:	f000 fa39 	bl	8008524 <_realloc_r>
 80080b2:	4606      	mov	r6, r0
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1e0      	bne.n	800807a <__ssputs_r+0x5a>
 80080b8:	6921      	ldr	r1, [r4, #16]
 80080ba:	4650      	mov	r0, sl
 80080bc:	f7ff fb2c 	bl	8007718 <_free_r>
 80080c0:	230c      	movs	r3, #12
 80080c2:	f04f 30ff 	mov.w	r0, #4294967295
 80080c6:	f8ca 3000 	str.w	r3, [sl]
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	e7e9      	b.n	80080a8 <__ssputs_r+0x88>

080080d4 <_svfiprintf_r>:
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	4698      	mov	r8, r3
 80080da:	898b      	ldrh	r3, [r1, #12]
 80080dc:	b09d      	sub	sp, #116	; 0x74
 80080de:	4607      	mov	r7, r0
 80080e0:	061b      	lsls	r3, r3, #24
 80080e2:	460d      	mov	r5, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	d50e      	bpl.n	8008106 <_svfiprintf_r+0x32>
 80080e8:	690b      	ldr	r3, [r1, #16]
 80080ea:	b963      	cbnz	r3, 8008106 <_svfiprintf_r+0x32>
 80080ec:	2140      	movs	r1, #64	; 0x40
 80080ee:	f7ff fb87 	bl	8007800 <_malloc_r>
 80080f2:	6028      	str	r0, [r5, #0]
 80080f4:	6128      	str	r0, [r5, #16]
 80080f6:	b920      	cbnz	r0, 8008102 <_svfiprintf_r+0x2e>
 80080f8:	230c      	movs	r3, #12
 80080fa:	603b      	str	r3, [r7, #0]
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	e0d0      	b.n	80082a4 <_svfiprintf_r+0x1d0>
 8008102:	2340      	movs	r3, #64	; 0x40
 8008104:	616b      	str	r3, [r5, #20]
 8008106:	2300      	movs	r3, #0
 8008108:	f8cd 800c 	str.w	r8, [sp, #12]
 800810c:	f04f 0901 	mov.w	r9, #1
 8008110:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082bc <_svfiprintf_r+0x1e8>
 8008114:	9309      	str	r3, [sp, #36]	; 0x24
 8008116:	2320      	movs	r3, #32
 8008118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800811c:	2330      	movs	r3, #48	; 0x30
 800811e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008122:	4623      	mov	r3, r4
 8008124:	469a      	mov	sl, r3
 8008126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812a:	b10a      	cbz	r2, 8008130 <_svfiprintf_r+0x5c>
 800812c:	2a25      	cmp	r2, #37	; 0x25
 800812e:	d1f9      	bne.n	8008124 <_svfiprintf_r+0x50>
 8008130:	ebba 0b04 	subs.w	fp, sl, r4
 8008134:	d00b      	beq.n	800814e <_svfiprintf_r+0x7a>
 8008136:	465b      	mov	r3, fp
 8008138:	4622      	mov	r2, r4
 800813a:	4629      	mov	r1, r5
 800813c:	4638      	mov	r0, r7
 800813e:	f7ff ff6f 	bl	8008020 <__ssputs_r>
 8008142:	3001      	adds	r0, #1
 8008144:	f000 80a9 	beq.w	800829a <_svfiprintf_r+0x1c6>
 8008148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800814a:	445a      	add	r2, fp
 800814c:	9209      	str	r2, [sp, #36]	; 0x24
 800814e:	f89a 3000 	ldrb.w	r3, [sl]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 80a1 	beq.w	800829a <_svfiprintf_r+0x1c6>
 8008158:	2300      	movs	r3, #0
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	f10a 0a01 	add.w	sl, sl, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	9307      	str	r3, [sp, #28]
 8008166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800816a:	931a      	str	r3, [sp, #104]	; 0x68
 800816c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008170:	4654      	mov	r4, sl
 8008172:	2205      	movs	r2, #5
 8008174:	4851      	ldr	r0, [pc, #324]	; (80082bc <_svfiprintf_r+0x1e8>)
 8008176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817a:	f7fe fc3c 	bl	80069f6 <memchr>
 800817e:	9a04      	ldr	r2, [sp, #16]
 8008180:	b9d8      	cbnz	r0, 80081ba <_svfiprintf_r+0xe6>
 8008182:	06d0      	lsls	r0, r2, #27
 8008184:	bf44      	itt	mi
 8008186:	2320      	movmi	r3, #32
 8008188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800818c:	0711      	lsls	r1, r2, #28
 800818e:	bf44      	itt	mi
 8008190:	232b      	movmi	r3, #43	; 0x2b
 8008192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008196:	f89a 3000 	ldrb.w	r3, [sl]
 800819a:	2b2a      	cmp	r3, #42	; 0x2a
 800819c:	d015      	beq.n	80081ca <_svfiprintf_r+0xf6>
 800819e:	9a07      	ldr	r2, [sp, #28]
 80081a0:	4654      	mov	r4, sl
 80081a2:	2000      	movs	r0, #0
 80081a4:	f04f 0c0a 	mov.w	ip, #10
 80081a8:	4621      	mov	r1, r4
 80081aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ae:	3b30      	subs	r3, #48	; 0x30
 80081b0:	2b09      	cmp	r3, #9
 80081b2:	d94d      	bls.n	8008250 <_svfiprintf_r+0x17c>
 80081b4:	b1b0      	cbz	r0, 80081e4 <_svfiprintf_r+0x110>
 80081b6:	9207      	str	r2, [sp, #28]
 80081b8:	e014      	b.n	80081e4 <_svfiprintf_r+0x110>
 80081ba:	eba0 0308 	sub.w	r3, r0, r8
 80081be:	46a2      	mov	sl, r4
 80081c0:	fa09 f303 	lsl.w	r3, r9, r3
 80081c4:	4313      	orrs	r3, r2
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	e7d2      	b.n	8008170 <_svfiprintf_r+0x9c>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	1d19      	adds	r1, r3, #4
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	9103      	str	r1, [sp, #12]
 80081d4:	bfbb      	ittet	lt
 80081d6:	425b      	neglt	r3, r3
 80081d8:	f042 0202 	orrlt.w	r2, r2, #2
 80081dc:	9307      	strge	r3, [sp, #28]
 80081de:	9307      	strlt	r3, [sp, #28]
 80081e0:	bfb8      	it	lt
 80081e2:	9204      	strlt	r2, [sp, #16]
 80081e4:	7823      	ldrb	r3, [r4, #0]
 80081e6:	2b2e      	cmp	r3, #46	; 0x2e
 80081e8:	d10c      	bne.n	8008204 <_svfiprintf_r+0x130>
 80081ea:	7863      	ldrb	r3, [r4, #1]
 80081ec:	2b2a      	cmp	r3, #42	; 0x2a
 80081ee:	d134      	bne.n	800825a <_svfiprintf_r+0x186>
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	3402      	adds	r4, #2
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	9203      	str	r2, [sp, #12]
 80081fc:	bfb8      	it	lt
 80081fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80082cc <_svfiprintf_r+0x1f8>
 8008208:	2203      	movs	r2, #3
 800820a:	7821      	ldrb	r1, [r4, #0]
 800820c:	4650      	mov	r0, sl
 800820e:	f7fe fbf2 	bl	80069f6 <memchr>
 8008212:	b138      	cbz	r0, 8008224 <_svfiprintf_r+0x150>
 8008214:	eba0 000a 	sub.w	r0, r0, sl
 8008218:	2240      	movs	r2, #64	; 0x40
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	3401      	adds	r4, #1
 800821e:	4082      	lsls	r2, r0
 8008220:	4313      	orrs	r3, r2
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008228:	2206      	movs	r2, #6
 800822a:	4825      	ldr	r0, [pc, #148]	; (80082c0 <_svfiprintf_r+0x1ec>)
 800822c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008230:	f7fe fbe1 	bl	80069f6 <memchr>
 8008234:	2800      	cmp	r0, #0
 8008236:	d038      	beq.n	80082aa <_svfiprintf_r+0x1d6>
 8008238:	4b22      	ldr	r3, [pc, #136]	; (80082c4 <_svfiprintf_r+0x1f0>)
 800823a:	bb1b      	cbnz	r3, 8008284 <_svfiprintf_r+0x1b0>
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	3307      	adds	r3, #7
 8008240:	f023 0307 	bic.w	r3, r3, #7
 8008244:	3308      	adds	r3, #8
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824a:	4433      	add	r3, r6
 800824c:	9309      	str	r3, [sp, #36]	; 0x24
 800824e:	e768      	b.n	8008122 <_svfiprintf_r+0x4e>
 8008250:	fb0c 3202 	mla	r2, ip, r2, r3
 8008254:	460c      	mov	r4, r1
 8008256:	2001      	movs	r0, #1
 8008258:	e7a6      	b.n	80081a8 <_svfiprintf_r+0xd4>
 800825a:	2300      	movs	r3, #0
 800825c:	3401      	adds	r4, #1
 800825e:	f04f 0c0a 	mov.w	ip, #10
 8008262:	4619      	mov	r1, r3
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	4620      	mov	r0, r4
 8008268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800826c:	3a30      	subs	r2, #48	; 0x30
 800826e:	2a09      	cmp	r2, #9
 8008270:	d903      	bls.n	800827a <_svfiprintf_r+0x1a6>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0c6      	beq.n	8008204 <_svfiprintf_r+0x130>
 8008276:	9105      	str	r1, [sp, #20]
 8008278:	e7c4      	b.n	8008204 <_svfiprintf_r+0x130>
 800827a:	fb0c 2101 	mla	r1, ip, r1, r2
 800827e:	4604      	mov	r4, r0
 8008280:	2301      	movs	r3, #1
 8008282:	e7f0      	b.n	8008266 <_svfiprintf_r+0x192>
 8008284:	ab03      	add	r3, sp, #12
 8008286:	462a      	mov	r2, r5
 8008288:	a904      	add	r1, sp, #16
 800828a:	4638      	mov	r0, r7
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <_svfiprintf_r+0x1f4>)
 8008290:	f7fd fe44 	bl	8005f1c <_printf_float>
 8008294:	1c42      	adds	r2, r0, #1
 8008296:	4606      	mov	r6, r0
 8008298:	d1d6      	bne.n	8008248 <_svfiprintf_r+0x174>
 800829a:	89ab      	ldrh	r3, [r5, #12]
 800829c:	065b      	lsls	r3, r3, #25
 800829e:	f53f af2d 	bmi.w	80080fc <_svfiprintf_r+0x28>
 80082a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082a4:	b01d      	add	sp, #116	; 0x74
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	ab03      	add	r3, sp, #12
 80082ac:	462a      	mov	r2, r5
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	4638      	mov	r0, r7
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	4b04      	ldr	r3, [pc, #16]	; (80082c8 <_svfiprintf_r+0x1f4>)
 80082b6:	f7fe f8d9 	bl	800646c <_printf_i>
 80082ba:	e7eb      	b.n	8008294 <_svfiprintf_r+0x1c0>
 80082bc:	08008e3c 	.word	0x08008e3c
 80082c0:	08008e46 	.word	0x08008e46
 80082c4:	08005f1d 	.word	0x08005f1d
 80082c8:	08008021 	.word	0x08008021
 80082cc:	08008e42 	.word	0x08008e42

080082d0 <__sflush_r>:
 80082d0:	898a      	ldrh	r2, [r1, #12]
 80082d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d6:	4605      	mov	r5, r0
 80082d8:	0710      	lsls	r0, r2, #28
 80082da:	460c      	mov	r4, r1
 80082dc:	d458      	bmi.n	8008390 <__sflush_r+0xc0>
 80082de:	684b      	ldr	r3, [r1, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dc05      	bgt.n	80082f0 <__sflush_r+0x20>
 80082e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dc02      	bgt.n	80082f0 <__sflush_r+0x20>
 80082ea:	2000      	movs	r0, #0
 80082ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f2:	2e00      	cmp	r6, #0
 80082f4:	d0f9      	beq.n	80082ea <__sflush_r+0x1a>
 80082f6:	2300      	movs	r3, #0
 80082f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082fc:	682f      	ldr	r7, [r5, #0]
 80082fe:	6a21      	ldr	r1, [r4, #32]
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	d032      	beq.n	800836a <__sflush_r+0x9a>
 8008304:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	075a      	lsls	r2, r3, #29
 800830a:	d505      	bpl.n	8008318 <__sflush_r+0x48>
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	1ac0      	subs	r0, r0, r3
 8008310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008312:	b10b      	cbz	r3, 8008318 <__sflush_r+0x48>
 8008314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008316:	1ac0      	subs	r0, r0, r3
 8008318:	2300      	movs	r3, #0
 800831a:	4602      	mov	r2, r0
 800831c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831e:	4628      	mov	r0, r5
 8008320:	6a21      	ldr	r1, [r4, #32]
 8008322:	47b0      	blx	r6
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	d106      	bne.n	8008338 <__sflush_r+0x68>
 800832a:	6829      	ldr	r1, [r5, #0]
 800832c:	291d      	cmp	r1, #29
 800832e:	d82b      	bhi.n	8008388 <__sflush_r+0xb8>
 8008330:	4a28      	ldr	r2, [pc, #160]	; (80083d4 <__sflush_r+0x104>)
 8008332:	410a      	asrs	r2, r1
 8008334:	07d6      	lsls	r6, r2, #31
 8008336:	d427      	bmi.n	8008388 <__sflush_r+0xb8>
 8008338:	2200      	movs	r2, #0
 800833a:	04d9      	lsls	r1, r3, #19
 800833c:	6062      	str	r2, [r4, #4]
 800833e:	6922      	ldr	r2, [r4, #16]
 8008340:	6022      	str	r2, [r4, #0]
 8008342:	d504      	bpl.n	800834e <__sflush_r+0x7e>
 8008344:	1c42      	adds	r2, r0, #1
 8008346:	d101      	bne.n	800834c <__sflush_r+0x7c>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b903      	cbnz	r3, 800834e <__sflush_r+0x7e>
 800834c:	6560      	str	r0, [r4, #84]	; 0x54
 800834e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008350:	602f      	str	r7, [r5, #0]
 8008352:	2900      	cmp	r1, #0
 8008354:	d0c9      	beq.n	80082ea <__sflush_r+0x1a>
 8008356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800835a:	4299      	cmp	r1, r3
 800835c:	d002      	beq.n	8008364 <__sflush_r+0x94>
 800835e:	4628      	mov	r0, r5
 8008360:	f7ff f9da 	bl	8007718 <_free_r>
 8008364:	2000      	movs	r0, #0
 8008366:	6360      	str	r0, [r4, #52]	; 0x34
 8008368:	e7c0      	b.n	80082ec <__sflush_r+0x1c>
 800836a:	2301      	movs	r3, #1
 800836c:	4628      	mov	r0, r5
 800836e:	47b0      	blx	r6
 8008370:	1c41      	adds	r1, r0, #1
 8008372:	d1c8      	bne.n	8008306 <__sflush_r+0x36>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0c5      	beq.n	8008306 <__sflush_r+0x36>
 800837a:	2b1d      	cmp	r3, #29
 800837c:	d001      	beq.n	8008382 <__sflush_r+0xb2>
 800837e:	2b16      	cmp	r3, #22
 8008380:	d101      	bne.n	8008386 <__sflush_r+0xb6>
 8008382:	602f      	str	r7, [r5, #0]
 8008384:	e7b1      	b.n	80082ea <__sflush_r+0x1a>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	e7ad      	b.n	80082ec <__sflush_r+0x1c>
 8008390:	690f      	ldr	r7, [r1, #16]
 8008392:	2f00      	cmp	r7, #0
 8008394:	d0a9      	beq.n	80082ea <__sflush_r+0x1a>
 8008396:	0793      	lsls	r3, r2, #30
 8008398:	680e      	ldr	r6, [r1, #0]
 800839a:	600f      	str	r7, [r1, #0]
 800839c:	bf0c      	ite	eq
 800839e:	694b      	ldreq	r3, [r1, #20]
 80083a0:	2300      	movne	r3, #0
 80083a2:	eba6 0807 	sub.w	r8, r6, r7
 80083a6:	608b      	str	r3, [r1, #8]
 80083a8:	f1b8 0f00 	cmp.w	r8, #0
 80083ac:	dd9d      	ble.n	80082ea <__sflush_r+0x1a>
 80083ae:	4643      	mov	r3, r8
 80083b0:	463a      	mov	r2, r7
 80083b2:	6a21      	ldr	r1, [r4, #32]
 80083b4:	4628      	mov	r0, r5
 80083b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083b8:	47b0      	blx	r6
 80083ba:	2800      	cmp	r0, #0
 80083bc:	dc06      	bgt.n	80083cc <__sflush_r+0xfc>
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	e78f      	b.n	80082ec <__sflush_r+0x1c>
 80083cc:	4407      	add	r7, r0
 80083ce:	eba8 0800 	sub.w	r8, r8, r0
 80083d2:	e7e9      	b.n	80083a8 <__sflush_r+0xd8>
 80083d4:	dfbffffe 	.word	0xdfbffffe

080083d8 <_fflush_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	690b      	ldr	r3, [r1, #16]
 80083dc:	4605      	mov	r5, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	b913      	cbnz	r3, 80083e8 <_fflush_r+0x10>
 80083e2:	2500      	movs	r5, #0
 80083e4:	4628      	mov	r0, r5
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	b118      	cbz	r0, 80083f2 <_fflush_r+0x1a>
 80083ea:	6a03      	ldr	r3, [r0, #32]
 80083ec:	b90b      	cbnz	r3, 80083f2 <_fflush_r+0x1a>
 80083ee:	f7fe f9e9 	bl	80067c4 <__sinit>
 80083f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0f3      	beq.n	80083e2 <_fflush_r+0xa>
 80083fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083fc:	07d0      	lsls	r0, r2, #31
 80083fe:	d404      	bmi.n	800840a <_fflush_r+0x32>
 8008400:	0599      	lsls	r1, r3, #22
 8008402:	d402      	bmi.n	800840a <_fflush_r+0x32>
 8008404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008406:	f7fe faf4 	bl	80069f2 <__retarget_lock_acquire_recursive>
 800840a:	4628      	mov	r0, r5
 800840c:	4621      	mov	r1, r4
 800840e:	f7ff ff5f 	bl	80082d0 <__sflush_r>
 8008412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008414:	4605      	mov	r5, r0
 8008416:	07da      	lsls	r2, r3, #31
 8008418:	d4e4      	bmi.n	80083e4 <_fflush_r+0xc>
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	059b      	lsls	r3, r3, #22
 800841e:	d4e1      	bmi.n	80083e4 <_fflush_r+0xc>
 8008420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008422:	f7fe fae7 	bl	80069f4 <__retarget_lock_release_recursive>
 8008426:	e7dd      	b.n	80083e4 <_fflush_r+0xc>

08008428 <memmove>:
 8008428:	4288      	cmp	r0, r1
 800842a:	b510      	push	{r4, lr}
 800842c:	eb01 0402 	add.w	r4, r1, r2
 8008430:	d902      	bls.n	8008438 <memmove+0x10>
 8008432:	4284      	cmp	r4, r0
 8008434:	4623      	mov	r3, r4
 8008436:	d807      	bhi.n	8008448 <memmove+0x20>
 8008438:	1e43      	subs	r3, r0, #1
 800843a:	42a1      	cmp	r1, r4
 800843c:	d008      	beq.n	8008450 <memmove+0x28>
 800843e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008446:	e7f8      	b.n	800843a <memmove+0x12>
 8008448:	4402      	add	r2, r0
 800844a:	4601      	mov	r1, r0
 800844c:	428a      	cmp	r2, r1
 800844e:	d100      	bne.n	8008452 <memmove+0x2a>
 8008450:	bd10      	pop	{r4, pc}
 8008452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800845a:	e7f7      	b.n	800844c <memmove+0x24>

0800845c <_sbrk_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	2300      	movs	r3, #0
 8008460:	4d05      	ldr	r5, [pc, #20]	; (8008478 <_sbrk_r+0x1c>)
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7f9 fe12 	bl	8002090 <_sbrk>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_sbrk_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_sbrk_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	200005a8 	.word	0x200005a8

0800847c <memcpy>:
 800847c:	440a      	add	r2, r1
 800847e:	1e43      	subs	r3, r0, #1
 8008480:	4291      	cmp	r1, r2
 8008482:	d100      	bne.n	8008486 <memcpy+0xa>
 8008484:	4770      	bx	lr
 8008486:	b510      	push	{r4, lr}
 8008488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800848c:	4291      	cmp	r1, r2
 800848e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008492:	d1f9      	bne.n	8008488 <memcpy+0xc>
 8008494:	bd10      	pop	{r4, pc}
	...

08008498 <__assert_func>:
 8008498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800849a:	4614      	mov	r4, r2
 800849c:	461a      	mov	r2, r3
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <__assert_func+0x2c>)
 80084a0:	4605      	mov	r5, r0
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68d8      	ldr	r0, [r3, #12]
 80084a6:	b14c      	cbz	r4, 80084bc <__assert_func+0x24>
 80084a8:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <__assert_func+0x30>)
 80084aa:	9100      	str	r1, [sp, #0]
 80084ac:	4907      	ldr	r1, [pc, #28]	; (80084cc <__assert_func+0x34>)
 80084ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084b2:	462b      	mov	r3, r5
 80084b4:	f000 f872 	bl	800859c <fiprintf>
 80084b8:	f000 f882 	bl	80085c0 <abort>
 80084bc:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <__assert_func+0x38>)
 80084be:	461c      	mov	r4, r3
 80084c0:	e7f3      	b.n	80084aa <__assert_func+0x12>
 80084c2:	bf00      	nop
 80084c4:	20000088 	.word	0x20000088
 80084c8:	08008e57 	.word	0x08008e57
 80084cc:	08008e64 	.word	0x08008e64
 80084d0:	08008e92 	.word	0x08008e92

080084d4 <_calloc_r>:
 80084d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084d6:	fba1 2402 	umull	r2, r4, r1, r2
 80084da:	b94c      	cbnz	r4, 80084f0 <_calloc_r+0x1c>
 80084dc:	4611      	mov	r1, r2
 80084de:	9201      	str	r2, [sp, #4]
 80084e0:	f7ff f98e 	bl	8007800 <_malloc_r>
 80084e4:	9a01      	ldr	r2, [sp, #4]
 80084e6:	4605      	mov	r5, r0
 80084e8:	b930      	cbnz	r0, 80084f8 <_calloc_r+0x24>
 80084ea:	4628      	mov	r0, r5
 80084ec:	b003      	add	sp, #12
 80084ee:	bd30      	pop	{r4, r5, pc}
 80084f0:	220c      	movs	r2, #12
 80084f2:	2500      	movs	r5, #0
 80084f4:	6002      	str	r2, [r0, #0]
 80084f6:	e7f8      	b.n	80084ea <_calloc_r+0x16>
 80084f8:	4621      	mov	r1, r4
 80084fa:	f7fe f9fc 	bl	80068f6 <memset>
 80084fe:	e7f4      	b.n	80084ea <_calloc_r+0x16>

08008500 <__ascii_mbtowc>:
 8008500:	b082      	sub	sp, #8
 8008502:	b901      	cbnz	r1, 8008506 <__ascii_mbtowc+0x6>
 8008504:	a901      	add	r1, sp, #4
 8008506:	b142      	cbz	r2, 800851a <__ascii_mbtowc+0x1a>
 8008508:	b14b      	cbz	r3, 800851e <__ascii_mbtowc+0x1e>
 800850a:	7813      	ldrb	r3, [r2, #0]
 800850c:	600b      	str	r3, [r1, #0]
 800850e:	7812      	ldrb	r2, [r2, #0]
 8008510:	1e10      	subs	r0, r2, #0
 8008512:	bf18      	it	ne
 8008514:	2001      	movne	r0, #1
 8008516:	b002      	add	sp, #8
 8008518:	4770      	bx	lr
 800851a:	4610      	mov	r0, r2
 800851c:	e7fb      	b.n	8008516 <__ascii_mbtowc+0x16>
 800851e:	f06f 0001 	mvn.w	r0, #1
 8008522:	e7f8      	b.n	8008516 <__ascii_mbtowc+0x16>

08008524 <_realloc_r>:
 8008524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	4680      	mov	r8, r0
 800852a:	4614      	mov	r4, r2
 800852c:	460e      	mov	r6, r1
 800852e:	b921      	cbnz	r1, 800853a <_realloc_r+0x16>
 8008530:	4611      	mov	r1, r2
 8008532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	f7ff b963 	b.w	8007800 <_malloc_r>
 800853a:	b92a      	cbnz	r2, 8008548 <_realloc_r+0x24>
 800853c:	4625      	mov	r5, r4
 800853e:	f7ff f8eb 	bl	8007718 <_free_r>
 8008542:	4628      	mov	r0, r5
 8008544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008548:	f000 f841 	bl	80085ce <_malloc_usable_size_r>
 800854c:	4284      	cmp	r4, r0
 800854e:	4607      	mov	r7, r0
 8008550:	d802      	bhi.n	8008558 <_realloc_r+0x34>
 8008552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008556:	d812      	bhi.n	800857e <_realloc_r+0x5a>
 8008558:	4621      	mov	r1, r4
 800855a:	4640      	mov	r0, r8
 800855c:	f7ff f950 	bl	8007800 <_malloc_r>
 8008560:	4605      	mov	r5, r0
 8008562:	2800      	cmp	r0, #0
 8008564:	d0ed      	beq.n	8008542 <_realloc_r+0x1e>
 8008566:	42bc      	cmp	r4, r7
 8008568:	4622      	mov	r2, r4
 800856a:	4631      	mov	r1, r6
 800856c:	bf28      	it	cs
 800856e:	463a      	movcs	r2, r7
 8008570:	f7ff ff84 	bl	800847c <memcpy>
 8008574:	4631      	mov	r1, r6
 8008576:	4640      	mov	r0, r8
 8008578:	f7ff f8ce 	bl	8007718 <_free_r>
 800857c:	e7e1      	b.n	8008542 <_realloc_r+0x1e>
 800857e:	4635      	mov	r5, r6
 8008580:	e7df      	b.n	8008542 <_realloc_r+0x1e>

08008582 <__ascii_wctomb>:
 8008582:	b149      	cbz	r1, 8008598 <__ascii_wctomb+0x16>
 8008584:	2aff      	cmp	r2, #255	; 0xff
 8008586:	bf8d      	iteet	hi
 8008588:	238a      	movhi	r3, #138	; 0x8a
 800858a:	2001      	movls	r0, #1
 800858c:	700a      	strbls	r2, [r1, #0]
 800858e:	6003      	strhi	r3, [r0, #0]
 8008590:	bf88      	it	hi
 8008592:	f04f 30ff 	movhi.w	r0, #4294967295
 8008596:	4770      	bx	lr
 8008598:	4608      	mov	r0, r1
 800859a:	4770      	bx	lr

0800859c <fiprintf>:
 800859c:	b40e      	push	{r1, r2, r3}
 800859e:	b503      	push	{r0, r1, lr}
 80085a0:	ab03      	add	r3, sp, #12
 80085a2:	4601      	mov	r1, r0
 80085a4:	4805      	ldr	r0, [pc, #20]	; (80085bc <fiprintf+0x20>)
 80085a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085aa:	6800      	ldr	r0, [r0, #0]
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	f000 f83f 	bl	8008630 <_vfiprintf_r>
 80085b2:	b002      	add	sp, #8
 80085b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085b8:	b003      	add	sp, #12
 80085ba:	4770      	bx	lr
 80085bc:	20000088 	.word	0x20000088

080085c0 <abort>:
 80085c0:	2006      	movs	r0, #6
 80085c2:	b508      	push	{r3, lr}
 80085c4:	f000 fa0c 	bl	80089e0 <raise>
 80085c8:	2001      	movs	r0, #1
 80085ca:	f7f9 fd31 	bl	8002030 <_exit>

080085ce <_malloc_usable_size_r>:
 80085ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d2:	1f18      	subs	r0, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfbc      	itt	lt
 80085d8:	580b      	ldrlt	r3, [r1, r0]
 80085da:	18c0      	addlt	r0, r0, r3
 80085dc:	4770      	bx	lr

080085de <__sfputc_r>:
 80085de:	6893      	ldr	r3, [r2, #8]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	6093      	str	r3, [r2, #8]
 80085e6:	b410      	push	{r4}
 80085e8:	da08      	bge.n	80085fc <__sfputc_r+0x1e>
 80085ea:	6994      	ldr	r4, [r2, #24]
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	db01      	blt.n	80085f4 <__sfputc_r+0x16>
 80085f0:	290a      	cmp	r1, #10
 80085f2:	d103      	bne.n	80085fc <__sfputc_r+0x1e>
 80085f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085f8:	f000 b934 	b.w	8008864 <__swbuf_r>
 80085fc:	6813      	ldr	r3, [r2, #0]
 80085fe:	1c58      	adds	r0, r3, #1
 8008600:	6010      	str	r0, [r2, #0]
 8008602:	4608      	mov	r0, r1
 8008604:	7019      	strb	r1, [r3, #0]
 8008606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800860a:	4770      	bx	lr

0800860c <__sfputs_r>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	4606      	mov	r6, r0
 8008610:	460f      	mov	r7, r1
 8008612:	4614      	mov	r4, r2
 8008614:	18d5      	adds	r5, r2, r3
 8008616:	42ac      	cmp	r4, r5
 8008618:	d101      	bne.n	800861e <__sfputs_r+0x12>
 800861a:	2000      	movs	r0, #0
 800861c:	e007      	b.n	800862e <__sfputs_r+0x22>
 800861e:	463a      	mov	r2, r7
 8008620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008624:	4630      	mov	r0, r6
 8008626:	f7ff ffda 	bl	80085de <__sfputc_r>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	d1f3      	bne.n	8008616 <__sfputs_r+0xa>
 800862e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008630 <_vfiprintf_r>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	460d      	mov	r5, r1
 8008636:	b09d      	sub	sp, #116	; 0x74
 8008638:	4614      	mov	r4, r2
 800863a:	4698      	mov	r8, r3
 800863c:	4606      	mov	r6, r0
 800863e:	b118      	cbz	r0, 8008648 <_vfiprintf_r+0x18>
 8008640:	6a03      	ldr	r3, [r0, #32]
 8008642:	b90b      	cbnz	r3, 8008648 <_vfiprintf_r+0x18>
 8008644:	f7fe f8be 	bl	80067c4 <__sinit>
 8008648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800864a:	07d9      	lsls	r1, r3, #31
 800864c:	d405      	bmi.n	800865a <_vfiprintf_r+0x2a>
 800864e:	89ab      	ldrh	r3, [r5, #12]
 8008650:	059a      	lsls	r2, r3, #22
 8008652:	d402      	bmi.n	800865a <_vfiprintf_r+0x2a>
 8008654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008656:	f7fe f9cc 	bl	80069f2 <__retarget_lock_acquire_recursive>
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	071b      	lsls	r3, r3, #28
 800865e:	d501      	bpl.n	8008664 <_vfiprintf_r+0x34>
 8008660:	692b      	ldr	r3, [r5, #16]
 8008662:	b99b      	cbnz	r3, 800868c <_vfiprintf_r+0x5c>
 8008664:	4629      	mov	r1, r5
 8008666:	4630      	mov	r0, r6
 8008668:	f000 f93a 	bl	80088e0 <__swsetup_r>
 800866c:	b170      	cbz	r0, 800868c <_vfiprintf_r+0x5c>
 800866e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008670:	07dc      	lsls	r4, r3, #31
 8008672:	d504      	bpl.n	800867e <_vfiprintf_r+0x4e>
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	b01d      	add	sp, #116	; 0x74
 800867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	0598      	lsls	r0, r3, #22
 8008682:	d4f7      	bmi.n	8008674 <_vfiprintf_r+0x44>
 8008684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008686:	f7fe f9b5 	bl	80069f4 <__retarget_lock_release_recursive>
 800868a:	e7f3      	b.n	8008674 <_vfiprintf_r+0x44>
 800868c:	2300      	movs	r3, #0
 800868e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008692:	f04f 0901 	mov.w	r9, #1
 8008696:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8008850 <_vfiprintf_r+0x220>
 800869a:	9309      	str	r3, [sp, #36]	; 0x24
 800869c:	2320      	movs	r3, #32
 800869e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a2:	2330      	movs	r3, #48	; 0x30
 80086a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086a8:	4623      	mov	r3, r4
 80086aa:	469a      	mov	sl, r3
 80086ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b0:	b10a      	cbz	r2, 80086b6 <_vfiprintf_r+0x86>
 80086b2:	2a25      	cmp	r2, #37	; 0x25
 80086b4:	d1f9      	bne.n	80086aa <_vfiprintf_r+0x7a>
 80086b6:	ebba 0b04 	subs.w	fp, sl, r4
 80086ba:	d00b      	beq.n	80086d4 <_vfiprintf_r+0xa4>
 80086bc:	465b      	mov	r3, fp
 80086be:	4622      	mov	r2, r4
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ffa2 	bl	800860c <__sfputs_r>
 80086c8:	3001      	adds	r0, #1
 80086ca:	f000 80a9 	beq.w	8008820 <_vfiprintf_r+0x1f0>
 80086ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086d0:	445a      	add	r2, fp
 80086d2:	9209      	str	r2, [sp, #36]	; 0x24
 80086d4:	f89a 3000 	ldrb.w	r3, [sl]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 80a1 	beq.w	8008820 <_vfiprintf_r+0x1f0>
 80086de:	2300      	movs	r3, #0
 80086e0:	f04f 32ff 	mov.w	r2, #4294967295
 80086e4:	f10a 0a01 	add.w	sl, sl, #1
 80086e8:	9304      	str	r3, [sp, #16]
 80086ea:	9307      	str	r3, [sp, #28]
 80086ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086f0:	931a      	str	r3, [sp, #104]	; 0x68
 80086f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f6:	4654      	mov	r4, sl
 80086f8:	2205      	movs	r2, #5
 80086fa:	4855      	ldr	r0, [pc, #340]	; (8008850 <_vfiprintf_r+0x220>)
 80086fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008700:	f7fe f979 	bl	80069f6 <memchr>
 8008704:	9a04      	ldr	r2, [sp, #16]
 8008706:	b9d8      	cbnz	r0, 8008740 <_vfiprintf_r+0x110>
 8008708:	06d1      	lsls	r1, r2, #27
 800870a:	bf44      	itt	mi
 800870c:	2320      	movmi	r3, #32
 800870e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008712:	0713      	lsls	r3, r2, #28
 8008714:	bf44      	itt	mi
 8008716:	232b      	movmi	r3, #43	; 0x2b
 8008718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871c:	f89a 3000 	ldrb.w	r3, [sl]
 8008720:	2b2a      	cmp	r3, #42	; 0x2a
 8008722:	d015      	beq.n	8008750 <_vfiprintf_r+0x120>
 8008724:	9a07      	ldr	r2, [sp, #28]
 8008726:	4654      	mov	r4, sl
 8008728:	2000      	movs	r0, #0
 800872a:	f04f 0c0a 	mov.w	ip, #10
 800872e:	4621      	mov	r1, r4
 8008730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008734:	3b30      	subs	r3, #48	; 0x30
 8008736:	2b09      	cmp	r3, #9
 8008738:	d94d      	bls.n	80087d6 <_vfiprintf_r+0x1a6>
 800873a:	b1b0      	cbz	r0, 800876a <_vfiprintf_r+0x13a>
 800873c:	9207      	str	r2, [sp, #28]
 800873e:	e014      	b.n	800876a <_vfiprintf_r+0x13a>
 8008740:	eba0 0308 	sub.w	r3, r0, r8
 8008744:	46a2      	mov	sl, r4
 8008746:	fa09 f303 	lsl.w	r3, r9, r3
 800874a:	4313      	orrs	r3, r2
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	e7d2      	b.n	80086f6 <_vfiprintf_r+0xc6>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	1d19      	adds	r1, r3, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	9103      	str	r1, [sp, #12]
 800875a:	bfbb      	ittet	lt
 800875c:	425b      	neglt	r3, r3
 800875e:	f042 0202 	orrlt.w	r2, r2, #2
 8008762:	9307      	strge	r3, [sp, #28]
 8008764:	9307      	strlt	r3, [sp, #28]
 8008766:	bfb8      	it	lt
 8008768:	9204      	strlt	r2, [sp, #16]
 800876a:	7823      	ldrb	r3, [r4, #0]
 800876c:	2b2e      	cmp	r3, #46	; 0x2e
 800876e:	d10c      	bne.n	800878a <_vfiprintf_r+0x15a>
 8008770:	7863      	ldrb	r3, [r4, #1]
 8008772:	2b2a      	cmp	r3, #42	; 0x2a
 8008774:	d134      	bne.n	80087e0 <_vfiprintf_r+0x1b0>
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	3402      	adds	r4, #2
 800877a:	1d1a      	adds	r2, r3, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	9203      	str	r2, [sp, #12]
 8008782:	bfb8      	it	lt
 8008784:	f04f 33ff 	movlt.w	r3, #4294967295
 8008788:	9305      	str	r3, [sp, #20]
 800878a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008860 <_vfiprintf_r+0x230>
 800878e:	2203      	movs	r2, #3
 8008790:	7821      	ldrb	r1, [r4, #0]
 8008792:	4650      	mov	r0, sl
 8008794:	f7fe f92f 	bl	80069f6 <memchr>
 8008798:	b138      	cbz	r0, 80087aa <_vfiprintf_r+0x17a>
 800879a:	eba0 000a 	sub.w	r0, r0, sl
 800879e:	2240      	movs	r2, #64	; 0x40
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	3401      	adds	r4, #1
 80087a4:	4082      	lsls	r2, r0
 80087a6:	4313      	orrs	r3, r2
 80087a8:	9304      	str	r3, [sp, #16]
 80087aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ae:	2206      	movs	r2, #6
 80087b0:	4828      	ldr	r0, [pc, #160]	; (8008854 <_vfiprintf_r+0x224>)
 80087b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087b6:	f7fe f91e 	bl	80069f6 <memchr>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d03f      	beq.n	800883e <_vfiprintf_r+0x20e>
 80087be:	4b26      	ldr	r3, [pc, #152]	; (8008858 <_vfiprintf_r+0x228>)
 80087c0:	bb1b      	cbnz	r3, 800880a <_vfiprintf_r+0x1da>
 80087c2:	9b03      	ldr	r3, [sp, #12]
 80087c4:	3307      	adds	r3, #7
 80087c6:	f023 0307 	bic.w	r3, r3, #7
 80087ca:	3308      	adds	r3, #8
 80087cc:	9303      	str	r3, [sp, #12]
 80087ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d0:	443b      	add	r3, r7
 80087d2:	9309      	str	r3, [sp, #36]	; 0x24
 80087d4:	e768      	b.n	80086a8 <_vfiprintf_r+0x78>
 80087d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087da:	460c      	mov	r4, r1
 80087dc:	2001      	movs	r0, #1
 80087de:	e7a6      	b.n	800872e <_vfiprintf_r+0xfe>
 80087e0:	2300      	movs	r3, #0
 80087e2:	3401      	adds	r4, #1
 80087e4:	f04f 0c0a 	mov.w	ip, #10
 80087e8:	4619      	mov	r1, r3
 80087ea:	9305      	str	r3, [sp, #20]
 80087ec:	4620      	mov	r0, r4
 80087ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f2:	3a30      	subs	r2, #48	; 0x30
 80087f4:	2a09      	cmp	r2, #9
 80087f6:	d903      	bls.n	8008800 <_vfiprintf_r+0x1d0>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0c6      	beq.n	800878a <_vfiprintf_r+0x15a>
 80087fc:	9105      	str	r1, [sp, #20]
 80087fe:	e7c4      	b.n	800878a <_vfiprintf_r+0x15a>
 8008800:	fb0c 2101 	mla	r1, ip, r1, r2
 8008804:	4604      	mov	r4, r0
 8008806:	2301      	movs	r3, #1
 8008808:	e7f0      	b.n	80087ec <_vfiprintf_r+0x1bc>
 800880a:	ab03      	add	r3, sp, #12
 800880c:	462a      	mov	r2, r5
 800880e:	a904      	add	r1, sp, #16
 8008810:	4630      	mov	r0, r6
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4b11      	ldr	r3, [pc, #68]	; (800885c <_vfiprintf_r+0x22c>)
 8008816:	f7fd fb81 	bl	8005f1c <_printf_float>
 800881a:	4607      	mov	r7, r0
 800881c:	1c78      	adds	r0, r7, #1
 800881e:	d1d6      	bne.n	80087ce <_vfiprintf_r+0x19e>
 8008820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008822:	07d9      	lsls	r1, r3, #31
 8008824:	d405      	bmi.n	8008832 <_vfiprintf_r+0x202>
 8008826:	89ab      	ldrh	r3, [r5, #12]
 8008828:	059a      	lsls	r2, r3, #22
 800882a:	d402      	bmi.n	8008832 <_vfiprintf_r+0x202>
 800882c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800882e:	f7fe f8e1 	bl	80069f4 <__retarget_lock_release_recursive>
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	065b      	lsls	r3, r3, #25
 8008836:	f53f af1d 	bmi.w	8008674 <_vfiprintf_r+0x44>
 800883a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883c:	e71c      	b.n	8008678 <_vfiprintf_r+0x48>
 800883e:	ab03      	add	r3, sp, #12
 8008840:	462a      	mov	r2, r5
 8008842:	a904      	add	r1, sp, #16
 8008844:	4630      	mov	r0, r6
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <_vfiprintf_r+0x22c>)
 800884a:	f7fd fe0f 	bl	800646c <_printf_i>
 800884e:	e7e4      	b.n	800881a <_vfiprintf_r+0x1ea>
 8008850:	08008e3c 	.word	0x08008e3c
 8008854:	08008e46 	.word	0x08008e46
 8008858:	08005f1d 	.word	0x08005f1d
 800885c:	0800860d 	.word	0x0800860d
 8008860:	08008e42 	.word	0x08008e42

08008864 <__swbuf_r>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	460e      	mov	r6, r1
 8008868:	4614      	mov	r4, r2
 800886a:	4605      	mov	r5, r0
 800886c:	b118      	cbz	r0, 8008876 <__swbuf_r+0x12>
 800886e:	6a03      	ldr	r3, [r0, #32]
 8008870:	b90b      	cbnz	r3, 8008876 <__swbuf_r+0x12>
 8008872:	f7fd ffa7 	bl	80067c4 <__sinit>
 8008876:	69a3      	ldr	r3, [r4, #24]
 8008878:	60a3      	str	r3, [r4, #8]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	071a      	lsls	r2, r3, #28
 800887e:	d525      	bpl.n	80088cc <__swbuf_r+0x68>
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	b31b      	cbz	r3, 80088cc <__swbuf_r+0x68>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	b2f6      	uxtb	r6, r6
 8008888:	6922      	ldr	r2, [r4, #16]
 800888a:	4637      	mov	r7, r6
 800888c:	1a98      	subs	r0, r3, r2
 800888e:	6963      	ldr	r3, [r4, #20]
 8008890:	4283      	cmp	r3, r0
 8008892:	dc04      	bgt.n	800889e <__swbuf_r+0x3a>
 8008894:	4621      	mov	r1, r4
 8008896:	4628      	mov	r0, r5
 8008898:	f7ff fd9e 	bl	80083d8 <_fflush_r>
 800889c:	b9e0      	cbnz	r0, 80088d8 <__swbuf_r+0x74>
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	60a3      	str	r3, [r4, #8]
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	6022      	str	r2, [r4, #0]
 80088aa:	701e      	strb	r6, [r3, #0]
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	6962      	ldr	r2, [r4, #20]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d004      	beq.n	80088be <__swbuf_r+0x5a>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	07db      	lsls	r3, r3, #31
 80088b8:	d506      	bpl.n	80088c8 <__swbuf_r+0x64>
 80088ba:	2e0a      	cmp	r6, #10
 80088bc:	d104      	bne.n	80088c8 <__swbuf_r+0x64>
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f7ff fd89 	bl	80083d8 <_fflush_r>
 80088c6:	b938      	cbnz	r0, 80088d8 <__swbuf_r+0x74>
 80088c8:	4638      	mov	r0, r7
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088cc:	4621      	mov	r1, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 f806 	bl	80088e0 <__swsetup_r>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d0d5      	beq.n	8008884 <__swbuf_r+0x20>
 80088d8:	f04f 37ff 	mov.w	r7, #4294967295
 80088dc:	e7f4      	b.n	80088c8 <__swbuf_r+0x64>
	...

080088e0 <__swsetup_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4b2a      	ldr	r3, [pc, #168]	; (800898c <__swsetup_r+0xac>)
 80088e4:	4605      	mov	r5, r0
 80088e6:	460c      	mov	r4, r1
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	b118      	cbz	r0, 80088f4 <__swsetup_r+0x14>
 80088ec:	6a03      	ldr	r3, [r0, #32]
 80088ee:	b90b      	cbnz	r3, 80088f4 <__swsetup_r+0x14>
 80088f0:	f7fd ff68 	bl	80067c4 <__sinit>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088fa:	0718      	lsls	r0, r3, #28
 80088fc:	d422      	bmi.n	8008944 <__swsetup_r+0x64>
 80088fe:	06d9      	lsls	r1, r3, #27
 8008900:	d407      	bmi.n	8008912 <__swsetup_r+0x32>
 8008902:	2309      	movs	r3, #9
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800890a:	f04f 30ff 	mov.w	r0, #4294967295
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	e034      	b.n	800897c <__swsetup_r+0x9c>
 8008912:	0758      	lsls	r0, r3, #29
 8008914:	d512      	bpl.n	800893c <__swsetup_r+0x5c>
 8008916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008918:	b141      	cbz	r1, 800892c <__swsetup_r+0x4c>
 800891a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800891e:	4299      	cmp	r1, r3
 8008920:	d002      	beq.n	8008928 <__swsetup_r+0x48>
 8008922:	4628      	mov	r0, r5
 8008924:	f7fe fef8 	bl	8007718 <_free_r>
 8008928:	2300      	movs	r3, #0
 800892a:	6363      	str	r3, [r4, #52]	; 0x34
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	2300      	movs	r3, #0
 8008936:	6063      	str	r3, [r4, #4]
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	f043 0308 	orr.w	r3, r3, #8
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	b94b      	cbnz	r3, 800895c <__swsetup_r+0x7c>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800894e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008952:	d003      	beq.n	800895c <__swsetup_r+0x7c>
 8008954:	4621      	mov	r1, r4
 8008956:	4628      	mov	r0, r5
 8008958:	f000 f883 	bl	8008a62 <__smakebuf_r>
 800895c:	89a0      	ldrh	r0, [r4, #12]
 800895e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008962:	f010 0301 	ands.w	r3, r0, #1
 8008966:	d00a      	beq.n	800897e <__swsetup_r+0x9e>
 8008968:	2300      	movs	r3, #0
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	6963      	ldr	r3, [r4, #20]
 800896e:	425b      	negs	r3, r3
 8008970:	61a3      	str	r3, [r4, #24]
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	b943      	cbnz	r3, 8008988 <__swsetup_r+0xa8>
 8008976:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800897a:	d1c4      	bne.n	8008906 <__swsetup_r+0x26>
 800897c:	bd38      	pop	{r3, r4, r5, pc}
 800897e:	0781      	lsls	r1, r0, #30
 8008980:	bf58      	it	pl
 8008982:	6963      	ldrpl	r3, [r4, #20]
 8008984:	60a3      	str	r3, [r4, #8]
 8008986:	e7f4      	b.n	8008972 <__swsetup_r+0x92>
 8008988:	2000      	movs	r0, #0
 800898a:	e7f7      	b.n	800897c <__swsetup_r+0x9c>
 800898c:	20000088 	.word	0x20000088

08008990 <_raise_r>:
 8008990:	291f      	cmp	r1, #31
 8008992:	b538      	push	{r3, r4, r5, lr}
 8008994:	4604      	mov	r4, r0
 8008996:	460d      	mov	r5, r1
 8008998:	d904      	bls.n	80089a4 <_raise_r+0x14>
 800899a:	2316      	movs	r3, #22
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	f04f 30ff 	mov.w	r0, #4294967295
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089a6:	b112      	cbz	r2, 80089ae <_raise_r+0x1e>
 80089a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089ac:	b94b      	cbnz	r3, 80089c2 <_raise_r+0x32>
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 f830 	bl	8008a14 <_getpid_r>
 80089b4:	462a      	mov	r2, r5
 80089b6:	4601      	mov	r1, r0
 80089b8:	4620      	mov	r0, r4
 80089ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089be:	f000 b817 	b.w	80089f0 <_kill_r>
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d00a      	beq.n	80089dc <_raise_r+0x4c>
 80089c6:	1c59      	adds	r1, r3, #1
 80089c8:	d103      	bne.n	80089d2 <_raise_r+0x42>
 80089ca:	2316      	movs	r3, #22
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	2001      	movs	r0, #1
 80089d0:	e7e7      	b.n	80089a2 <_raise_r+0x12>
 80089d2:	2400      	movs	r4, #0
 80089d4:	4628      	mov	r0, r5
 80089d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089da:	4798      	blx	r3
 80089dc:	2000      	movs	r0, #0
 80089de:	e7e0      	b.n	80089a2 <_raise_r+0x12>

080089e0 <raise>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	; (80089ec <raise+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f7ff bfd3 	b.w	8008990 <_raise_r>
 80089ea:	bf00      	nop
 80089ec:	20000088 	.word	0x20000088

080089f0 <_kill_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	2300      	movs	r3, #0
 80089f4:	4d06      	ldr	r5, [pc, #24]	; (8008a10 <_kill_r+0x20>)
 80089f6:	4604      	mov	r4, r0
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	f7f9 fb0f 	bl	8002020 <_kill>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	d102      	bne.n	8008a0c <_kill_r+0x1c>
 8008a06:	682b      	ldr	r3, [r5, #0]
 8008a08:	b103      	cbz	r3, 8008a0c <_kill_r+0x1c>
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	bf00      	nop
 8008a10:	200005a8 	.word	0x200005a8

08008a14 <_getpid_r>:
 8008a14:	f7f9 bb02 	b.w	800201c <_getpid>

08008a18 <__swhatbuf_r>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a20:	b096      	sub	sp, #88	; 0x58
 8008a22:	4615      	mov	r5, r2
 8008a24:	2900      	cmp	r1, #0
 8008a26:	461e      	mov	r6, r3
 8008a28:	da0c      	bge.n	8008a44 <__swhatbuf_r+0x2c>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a32:	bf0c      	ite	eq
 8008a34:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a38:	2340      	movne	r3, #64	; 0x40
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	6031      	str	r1, [r6, #0]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	b016      	add	sp, #88	; 0x58
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	466a      	mov	r2, sp
 8008a46:	f000 f849 	bl	8008adc <_fstat_r>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	dbed      	blt.n	8008a2a <__swhatbuf_r+0x12>
 8008a4e:	9901      	ldr	r1, [sp, #4]
 8008a50:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a54:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a58:	4259      	negs	r1, r3
 8008a5a:	4159      	adcs	r1, r3
 8008a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a60:	e7eb      	b.n	8008a3a <__swhatbuf_r+0x22>

08008a62 <__smakebuf_r>:
 8008a62:	898b      	ldrh	r3, [r1, #12]
 8008a64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a66:	079d      	lsls	r5, r3, #30
 8008a68:	4606      	mov	r6, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	d507      	bpl.n	8008a7e <__smakebuf_r+0x1c>
 8008a6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	2301      	movs	r3, #1
 8008a78:	6163      	str	r3, [r4, #20]
 8008a7a:	b002      	add	sp, #8
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	ab01      	add	r3, sp, #4
 8008a80:	466a      	mov	r2, sp
 8008a82:	f7ff ffc9 	bl	8008a18 <__swhatbuf_r>
 8008a86:	9900      	ldr	r1, [sp, #0]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7fe feb8 	bl	8007800 <_malloc_r>
 8008a90:	b948      	cbnz	r0, 8008aa6 <__smakebuf_r+0x44>
 8008a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a96:	059a      	lsls	r2, r3, #22
 8008a98:	d4ef      	bmi.n	8008a7a <__smakebuf_r+0x18>
 8008a9a:	f023 0303 	bic.w	r3, r3, #3
 8008a9e:	f043 0302 	orr.w	r3, r3, #2
 8008aa2:	81a3      	strh	r3, [r4, #12]
 8008aa4:	e7e3      	b.n	8008a6e <__smakebuf_r+0xc>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	6020      	str	r0, [r4, #0]
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aae:	6120      	str	r0, [r4, #16]
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	9b00      	ldr	r3, [sp, #0]
 8008ab4:	6163      	str	r3, [r4, #20]
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	b15b      	cbz	r3, 8008ad2 <__smakebuf_r+0x70>
 8008aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f000 f81e 	bl	8008b00 <_isatty_r>
 8008ac4:	b128      	cbz	r0, 8008ad2 <__smakebuf_r+0x70>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	f043 0301 	orr.w	r3, r3, #1
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	431d      	orrs	r5, r3
 8008ad6:	81a5      	strh	r5, [r4, #12]
 8008ad8:	e7cf      	b.n	8008a7a <__smakebuf_r+0x18>
	...

08008adc <_fstat_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4d06      	ldr	r5, [pc, #24]	; (8008afc <_fstat_r+0x20>)
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	f7f9 fac8 	bl	800207e <_fstat>
 8008aee:	1c43      	adds	r3, r0, #1
 8008af0:	d102      	bne.n	8008af8 <_fstat_r+0x1c>
 8008af2:	682b      	ldr	r3, [r5, #0]
 8008af4:	b103      	cbz	r3, 8008af8 <_fstat_r+0x1c>
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	bd38      	pop	{r3, r4, r5, pc}
 8008afa:	bf00      	nop
 8008afc:	200005a8 	.word	0x200005a8

08008b00 <_isatty_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	2300      	movs	r3, #0
 8008b04:	4d05      	ldr	r5, [pc, #20]	; (8008b1c <_isatty_r+0x1c>)
 8008b06:	4604      	mov	r4, r0
 8008b08:	4608      	mov	r0, r1
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	f7f9 fabc 	bl	8002088 <_isatty>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_isatty_r+0x1a>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_isatty_r+0x1a>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	200005a8 	.word	0x200005a8

08008b20 <_init>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	bf00      	nop
 8008b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b26:	bc08      	pop	{r3}
 8008b28:	469e      	mov	lr, r3
 8008b2a:	4770      	bx	lr

08008b2c <_fini>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr
