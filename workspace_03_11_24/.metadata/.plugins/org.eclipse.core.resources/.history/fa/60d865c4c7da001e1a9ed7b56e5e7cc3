/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include <stdint.h>
#include <math.h>
#include <string.h>
#include "liquidcrystal_i2c.h"
#include "AD9833.h"
#include "TPL0102.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

//Debounce
#define DEBOUNCE_TIME 5
//Amplitude adjustment
#define VIN 0.65 //Input voltage from the AD9833 DDS IC
#define GAIN 47 //Fixed gain by operational amplifier
#define MAXRES 99610 //Maximum resistance of TPL0102 digital potentiometer
#define STEPRES 390.625 //Individual resistance step
//Offset adjustment


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart4;

/* USER CODE BEGIN PV */

// Impedance switch state
static uint8_t imp_currentstate = 0; // Track state of current impedance output mode (0 = 50 ohm , 1 = HighZ )

// Rotary encoder
static uint32_t encoderValue = 0; // Track state of rotary encoder
// static uint32_t encoderValueConverted = 0; // In case rotary encoder increases/decreases by any other value than 1
static uint32_t encoderValueOld = 0;	// Tracking state of rotary encoder
static int8_t  direction = 0; // Tracking rotation of rotary encoder

// Rotary encoder pushbutton
static uint8_t re_currentstate = 0; // Track state of current setting (Amplitude, offset, frequency)

// Left & right buttons
static uint16_t pos=0;

// AD9833 DDS
static uint8_t wv_currentstate = 0; // Track state of current waveform (0 = SINE, 1 = TRIANGLE, 2= SQUARE)
static uint32_t frequency;




// ADC
static volatile uint16_t adc_value = 0;
float battery_voltage;

//Debounce

// Digital potentiometer
static uint8_t res0 = 128; // Resistance for channel 0 (offset adjustment)
//Amplitude adjustment
static float Vout = 0;
static float wiperpos2 = 50; //Initial position of wiper for 6 Vpp amplitude
static float digipotpos2 = 0;
static float wiperres2 = 0;
//Offset adjustment

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_I2C1_Init(void);
static void MX_UART4_Init(void);
static void MX_SPI1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
float CalcAmplitude(float wiperres2);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) //Get adc value from ADC
{
	adc_value = HAL_ADC_GetValue(&hadc1);
}

float adc_voltage(float adc_value) //Calculate battery voltage
{
	float reference = 3.0;
	float adc_voltage = (adc_value/4095)*reference;
	return adc_voltage;
}

// Rotary encoder
void RotaryEncoderUpdate(void)	//Track rotation of the rotary encoder, 1 for clockwise, -1 for counter clockwise
{
	encoderValue=TIM1->CNT;

	if(encoderValue != encoderValueOld)
	{
		if(encoderValue > encoderValueOld)
		{
			direction = 1;
		}
		else
		{
			direction = -1;
		}

		encoderValueOld=encoderValue;
	}
}

void ImpChangeState(void) //Impedance switch toggle state function
{
	imp_currentstate = 1-imp_currentstate;

	if (imp_currentstate == 0)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
		HD44780_SetCursor(11,1);
		HD44780_PrintStr("M:HighZ");
	}
	else
	{
		HD44780_SetCursor(13,1);
		HD44780_PrintStr("M:50Î©");
	}
}

void WaveformChangeState(void) //Waveform switch toggle state function
{
	wv_currentstate = (wv_currentstate+1)% 3;

	switch(wv_currentstate)
	{
	case 0:
		AD9833_SetWaveform(AD9833_WAVEFORM_SINE);
		HD44780_SetCursor(0,1);
		HD44780_PrintStr("SINE");
		break;

	case 1:
		AD9833_SetWaveform(AD9833_WAVEFORM_TRIANGLE);
		HD44780_SetCursor(0,1);
		HD44780_PrintStr("TRIANGLE");
		break;
	case 2:
		AD9833_SetWaveform(AD9833_WAVEFORM_SQUARE);
		HD44780_SetCursor(0,1);
		HD44780_PrintStr("SQUARE");
		break;
	}
}



void REChangeState(void) //Rotary encoder pushbutton toggle switch function
{
	re_currentstate = (re_currentstate+1)% 3;

	switch(re_currentstate)
	{

	case 0: //Frequency adjustment

		if (frequency<1 || frequency>12500000)
		{
			frequency=1;
		}

		//Change of value based on position defined by button left & right
		else if(direction==1)
		{
			frequency+= 10^pos;
		}

		else
		{
			frequency-= 10^pos;
		}

		char frequencyStr[8];
		sprintf(frequencyStr, "%lu", frequency);
		HD44780_SetCursor(0,0);
		HD44780_PrintStr("FRQ:");
		HD44780_SetCursor(4,0);
		HD44780_PrintStr(frequencyStr);
		HD44780_SetCursor(strlen(frequencyStr)+5,0);
		HD44780_PrintStr("Hz");
		HD44780_SetCursor(pos+5, 0);
		HD44780_Blink();

	case 1:	//Amplitude adjustment

		if(direction == 1)
		{
			wiperpos2++;
			if(wiperpos2 > 100)
			{
				wiperpos2 = 100;
			}
			Vout = CalcAmplitude(wiperres2);

		}
		else
		{
			wiperpos2--;
			if(wiperpos2 < 1)
			{
				wiperpos2 = 0;
			}
			Vout = CalcAmplitude(wiperres2);

		}
		char amplitudeStr[8];
		sprintf(amplitudeStr, "%f", Vout);
		HD44780_SetCursor(0,0);
		HD44780_PrintStr("FRQ:");
		HD44780_SetCursor(4,0);
		HD44780_PrintStr(frequencyStr);
		HD44780_SetCursor(strlen(frequencyStr)+5,0);
		HD44780_PrintStr("Hz");
		HD44780_SetCursor(pos+5, 0);

		break;

	case 2: //Offset adjustment

		break;
	}
}

////Debounce functions
void DebounceImpSwitch(void) //Debounce impedance switch button
{
	static uint16_t debounceImp = 0xFFFF;
	uint32_t currentTimeImp = HAL_GetTick();
	static uint32_t lastUpdateImp = 0;


	if ((currentTimeImp - lastUpdateImp) >= DEBOUNCE_TIME)
	{
		debounceImp <<= 1;

		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11) == GPIO_PIN_RESET)
		{
			debounceImp |= 0x0001;
		}
		lastUpdateImp = currentTimeImp;

		if (debounceImp == 0x8000)
		{
			ImpChangeState();
		}
	}
}

//	uint8_t Debounce(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)
//	{
//		static uint16_t debounce = 0xFFFF;
//		if (HAL_GetTick() % DEBOUNCE_TIME == 0)
//		{
//			debounce <<=  1;
//
//			if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET)
//			{
//				debounce |= 0x0001;
//				return (debounce & 0x0001) == 0;
//			}
//		}
//		return 0;
//	}


void DebounceRotaryEcoderSwitch(void) //Debounce function for rotary encoder
{
	static uint16_t debounceRE = 0xFFFF;
	uint32_t currentTimeRE = HAL_GetTick();
	static uint32_t lastUpdateRE = 0;


	if ((currentTimeRE - lastUpdateRE) >= DEBOUNCE_TIME)
	{
		debounceRE <<= 1;

		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET)
		{
			debounceRE |= 0x0001;
		}
		lastUpdateRE = currentTimeRE;

		if (debounceRE == 0x8000)
		{
			REChangeState();
		}
	}
}


void DebounceLeftSwitch(void) //Debounce function for left pushbutton
{
	static uint16_t debounceL = 0xFFFF;
	uint32_t currentTimeL = HAL_GetTick();
	static uint32_t lastUpdateL = 0;


	if ((currentTimeL - lastUpdateL) >= DEBOUNCE_TIME)
	{
		debounceL <<= 1;

		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==GPIO_PIN_RESET)
		{
			debounceL |= 0x0001;
		}
		lastUpdateL = currentTimeL;

		if (debounceL == 0x8000)
		{
			pos++;
			if (pos > 6)
			{
				pos=0;
			}
		}
	}
}



void DebounceRightSwitch(void) //Debounce function for right pushbutton
{
	static uint16_t debounceR = 0xFFFF;
	uint32_t currentTimeR = HAL_GetTick();
	static uint32_t lastUpdateR = 0;

	if ((currentTimeR - lastUpdateR) >= DEBOUNCE_TIME)
	{
		debounceR <<= 1;

		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET)
		{
			debounceR |= 0x0001;
		}
		lastUpdateR = currentTimeR;

		if (debounceR == 0x8000)
		{
			pos--;
			if (pos < 0)
			{
				pos=0;
			}
		}
	}
}


void DebounceWVFSwitch(void) //Debounce function for waveform select pushbutton
{
	static uint16_t debounceWVF = 0xFFFF;
	uint32_t currentTimeWVF = HAL_GetTick();
	static uint32_t lastUpdateWVF = 0;

	if ((currentTimeWVF - lastUpdateWVF) >= DEBOUNCE_TIME)
	{
		debounceWVF <<= 1;

		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==GPIO_PIN_RESET)
		{
			debounceWVF |= 0x0001;
		}
		lastUpdateWVF = currentTimeWVF;

		if (debounceWVF == 0x8000)
		{
			WaveformChangeState();
		}
	}
}




float findClosest(float * array, size_t size, float target) //Choosing closest resistance function
{
	float closest = 0;

	for (size_t i = 0; i < size; i++) {
		if (array[i] == target) {
			return target;
		}
		if (fabsf(target - array[i]) < fabsf(target - closest)) {
			closest = array[i];
		}
	}
	return closest;
}




/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
	/* USER CODE BEGIN 1 */


	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_TIM1_Init();
	MX_I2C1_Init();
	MX_UART4_Init();
	MX_SPI1_Init();
	MX_ADC1_Init();
	/* USER CODE BEGIN 2 */

	// LCD Display initialization
	HD44780_Init(2);

	// Rotary encoder initialization
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);

	// ADC initialization
	HAL_ADC_Start_IT(&hadc1);

	// DDS initialization
	AD9833_Init();

	// Digital potentiometer initialization
	TPL0102_Init(&hi2c1);


	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		// Battery voltage measurement & low battery warning
		battery_voltage = adc_voltage(adc_value);

		if (battery_voltage <= 3.5)
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);

			HAL_Delay(1000);
		}

		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
			HAL_Delay(1000);
		}

		// DDS
		// DDS frequency & waveform
		AD9833_SetFrequency(frequency);

		//// Digital potentiometer
		//Offset adjustment

		TPL0102_Write(&hi2c1, CHANNEL_0, res0);

		//Amplitude adjustment
		TPL0102_Write(&hi2c1, CHANNEL_1, wiperpos2);

		//// Button debouncing
		// DDS waveform switch
		DebounceWVFSwitch();
		//		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==GPIO_PIN_RESET)
		//		{
		//			WaveformChangeState();
		//			HAL_Delay(500);
		//		}


		//	if(Debounce(GPIOB, GPIO_PIN_15))
		//	{
		//		REChangeState();
		//	}

		//	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==GPIO_PIN_RESET)
		//	{
		//		REChangeState();
		//		HAL_Delay(500);
		//	}


		// Impedance switch
		DebounceImpSwitch();

		//	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)==GPIO_PIN_RESET)
		//	{
		//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
		//		ImpChangeState();
		//		HAL_Delay(500);
		//	}


		// Left and right buttons
		DebounceLeftSwitch();
		DebounceRightSwitch();

		//		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==GPIO_PIN_RESET) // Left button
		//		{
		//			pos++;
		//			if (pos > 6)
		//			{
		//				pos=0;
		//			}
		//
		//
		//			HAL_Delay(500);
		//		}


		//		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET) // Right button
		//		{
		//
		//			pos--;
		//			if (pos < 0)
		//			{
		//				pos=0;
		//			}
		//			HAL_Delay(500);
		//		}


		// Rotary encoder pushbutton & reading value
		DebounceRotaryEcoderSwitch();
		RotaryEncoderUpdate();




		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
float CalcAmplitude(float wiperres2)
{
	wiperres2 = wiperpos2 * STEPRES;
	digipotpos2 = wiperres2 / MAXRES;
	Vout = VIN * digipotpos2 * GAIN;
	return Vout;
}





	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
	ADC_ChannelConfTypeDef sConfig = {0};

	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	hadc1.Init.LowPowerAutoWait = DISABLE;
	hadc1.Init.ContinuousConvMode = ENABLE;
	hadc1.Init.NbrOfConversion = 1;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.DMAContinuousRequests = DISABLE;
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	hadc1.Init.OversamplingMode = DISABLE;
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}

/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{

	/* USER CODE BEGIN I2C1_Init 0 */

	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
	hi2c1.Init.Timing = 0x00303D5B;
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hi2c1.Init.OwnAddress2 = 0;
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}

/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{

	/* USER CODE BEGIN SPI1_Init 0 */

	/* USER CODE END SPI1_Init 0 */

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
	hspi1.Init.Mode = SPI_MODE_MASTER;
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
	hspi1.Init.CRCPolynomial = 7;
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}

/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
	TIM_MasterConfigTypeDef sMasterConfig = {0};

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 0;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 65535;
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC1Filter = 0;
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC2Filter = 0;
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
	{
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}

/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{

	/* USER CODE BEGIN UART4_Init 0 */

	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
	huart4.Init.BaudRate = 115200;
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
	huart4.Init.StopBits = UART_STOPBITS_1;
	huart4.Init.Parity = UART_PARITY_NONE;
	huart4.Init.Mode = UART_MODE_TX_RX;
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart4) != HAL_OK)
	{
		Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
	{
		Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
	{
		Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pins : button_1_Pin button_2_Pin button_3_Pin button_4_Pin
                           Encoder_SW_Pin */
	GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin|button_3_Pin|button_4_Pin
			|Encoder_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pin : Relay_Pin */
	GPIO_InitStruct.Pin = Relay_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
